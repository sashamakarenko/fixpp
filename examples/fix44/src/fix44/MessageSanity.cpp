// Generated by https://github.com/sashamakarenko/fixpp
// Copyright (c) 2021 sashamakarenko
// https://github.com/sashamakarenko/fixpp/blob/main/LICENSE

#include <fix44/Messages.h>

namespace fix44
{

// start of MessageSanity.cxx

// Generated

// ---------------------------------- findBadField ---------------------------------

const char * MessageHeader::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldBeginString.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBeginString.offset - 1 - FieldBeginString::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBeginString.offset] == 1 ) return tagPtr;
   }
   if( fieldBodyLength.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBodyLength.offset - 1 - FieldBodyLength::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBodyLength.offset] == 1 ) return tagPtr;
   }
   if( fieldMsgType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMsgType.offset - 1 - FieldMsgType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMsgType.offset] == 1 ) return tagPtr;
   }
   if( fieldSenderCompID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSenderCompID.offset - 1 - FieldSenderCompID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSenderCompID.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetCompID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetCompID.offset - 1 - FieldTargetCompID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetCompID.offset] == 1 ) return tagPtr;
   }
   if( fieldOnBehalfOfCompID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOnBehalfOfCompID.offset - 1 - FieldOnBehalfOfCompID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOnBehalfOfCompID.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliverToCompID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliverToCompID.offset - 1 - FieldDeliverToCompID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliverToCompID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecureDataLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecureDataLen.offset - 1 - FieldSecureDataLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecureDataLen.offset] == 1 ) return tagPtr;
   }
   if( fieldSecureData.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecureData.offset - 1 - FieldSecureData::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecureData.offset] == 1 ) return tagPtr;
   }
   if( fieldMsgSeqNum.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMsgSeqNum.offset - 1 - FieldMsgSeqNum::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMsgSeqNum.offset] == 1 ) return tagPtr;
   }
   if( fieldSenderSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSenderSubID.offset - 1 - FieldSenderSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSenderSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSenderLocationID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSenderLocationID.offset - 1 - FieldSenderLocationID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSenderLocationID.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetSubID.offset - 1 - FieldTargetSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetLocationID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetLocationID.offset - 1 - FieldTargetLocationID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetLocationID.offset] == 1 ) return tagPtr;
   }
   if( fieldOnBehalfOfSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOnBehalfOfSubID.offset - 1 - FieldOnBehalfOfSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOnBehalfOfSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldOnBehalfOfLocationID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOnBehalfOfLocationID.offset - 1 - FieldOnBehalfOfLocationID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOnBehalfOfLocationID.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliverToSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliverToSubID.offset - 1 - FieldDeliverToSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliverToSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliverToLocationID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliverToLocationID.offset - 1 - FieldDeliverToLocationID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliverToLocationID.offset] == 1 ) return tagPtr;
   }
   if( fieldPossDupFlag.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPossDupFlag.offset - 1 - FieldPossDupFlag::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPossDupFlag.offset] == 1 ) return tagPtr;
   }
   if( fieldPossResend.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPossResend.offset - 1 - FieldPossResend::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPossResend.offset] == 1 ) return tagPtr;
   }
   if( fieldSendingTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSendingTime.offset - 1 - FieldSendingTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSendingTime.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigSendingTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigSendingTime.offset - 1 - FieldOrigSendingTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigSendingTime.offset] == 1 ) return tagPtr;
   }
   if( fieldXmlDataLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldXmlDataLen.offset - 1 - FieldXmlDataLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldXmlDataLen.offset] == 1 ) return tagPtr;
   }
   if( fieldXmlData.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldXmlData.offset - 1 - FieldXmlData::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldXmlData.offset] == 1 ) return tagPtr;
   }
   if( fieldMessageEncoding.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMessageEncoding.offset - 1 - FieldMessageEncoding::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMessageEncoding.offset] == 1 ) return tagPtr;
   }
   if( fieldLastMsgSeqNumProcessed.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastMsgSeqNumProcessed.offset - 1 - FieldLastMsgSeqNumProcessed::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastMsgSeqNumProcessed.offset] == 1 ) return tagPtr;
   }
   if( fieldNoHops.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoHops.offset - 1 - FieldNoHops::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoHops.offset] == 1 ) return tagPtr;
     for( auto & g : groupsHops ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageHeartbeat::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTestReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTestReqID.offset - 1 - FieldTestReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTestReqID.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageTestRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTestReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTestReqID.offset - 1 - FieldTestReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTestReqID.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageResendRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldBeginSeqNo.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBeginSeqNo.offset - 1 - FieldBeginSeqNo::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBeginSeqNo.offset] == 1 ) return tagPtr;
   }
   if( fieldEndSeqNo.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndSeqNo.offset - 1 - FieldEndSeqNo::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndSeqNo.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageReject::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldRefSeqNum.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRefSeqNum.offset - 1 - FieldRefSeqNum::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRefSeqNum.offset] == 1 ) return tagPtr;
   }
   if( fieldRefTagID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRefTagID.offset - 1 - FieldRefTagID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRefTagID.offset] == 1 ) return tagPtr;
   }
   if( fieldRefMsgType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRefMsgType.offset - 1 - FieldRefMsgType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRefMsgType.offset] == 1 ) return tagPtr;
   }
   if( fieldSessionRejectReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSessionRejectReason.offset - 1 - FieldSessionRejectReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSessionRejectReason.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageSequenceReset::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldGapFillFlag.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldGapFillFlag.offset - 1 - FieldGapFillFlag::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldGapFillFlag.offset] == 1 ) return tagPtr;
   }
   if( fieldNewSeqNo.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNewSeqNo.offset - 1 - FieldNewSeqNo::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNewSeqNo.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageLogout::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageIOI::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldIOIID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIOIID.offset - 1 - FieldIOIID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIOIID.offset] == 1 ) return tagPtr;
   }
   if( fieldIOITransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIOITransType.offset - 1 - FieldIOITransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIOITransType.offset] == 1 ) return tagPtr;
   }
   if( fieldIOIRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIOIRefID.offset - 1 - FieldIOIRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIOIRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOrderQty.offset - 1 - FieldCashOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderPercent.offset - 1 - FieldOrderPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingModulus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingModulus.offset - 1 - FieldRoundingModulus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingModulus.offset] == 1 ) return tagPtr;
   }
   if( fieldIOIQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIOIQty.offset - 1 - FieldIOIQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIOIQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldValidUntilTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldValidUntilTime.offset - 1 - FieldValidUntilTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldValidUntilTime.offset] == 1 ) return tagPtr;
   }
   if( fieldIOIQltyInd.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIOIQltyInd.offset - 1 - FieldIOIQltyInd::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIOIQltyInd.offset] == 1 ) return tagPtr;
   }
   if( fieldIOINaturalFlag.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIOINaturalFlag.offset - 1 - FieldIOINaturalFlag::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIOINaturalFlag.offset] == 1 ) return tagPtr;
   }
   if( fieldNoIOIQualifiers.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoIOIQualifiers.offset - 1 - FieldNoIOIQualifiers::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoIOIQualifiers.offset] == 1 ) return tagPtr;
     for( auto & g : groupsIOIQualifiers ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldURLLink.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldURLLink.offset - 1 - FieldURLLink::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldURLLink.offset] == 1 ) return tagPtr;
   }
   if( fieldNoRoutingIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoRoutingIDs.offset - 1 - FieldNoRoutingIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRoutingIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsRoutingIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageAdvertisement::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldAdvId.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAdvId.offset - 1 - FieldAdvId::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAdvId.offset] == 1 ) return tagPtr;
   }
   if( fieldAdvTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAdvTransType.offset - 1 - FieldAdvTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAdvTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldAdvRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAdvRefID.offset - 1 - FieldAdvRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAdvRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAdvSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAdvSide.offset - 1 - FieldAdvSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAdvSide.offset] == 1 ) return tagPtr;
   }
   if( fieldQuantity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuantity.offset - 1 - FieldQuantity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuantity.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldURLLink.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldURLLink.offset - 1 - FieldURLLink::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldURLLink.offset] == 1 ) return tagPtr;
   }
   if( fieldLastMkt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastMkt.offset - 1 - FieldLastMkt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastMkt.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageExecutionReport::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryOrderID.offset - 1 - FieldSecondaryOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryExecID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryExecID.offset - 1 - FieldSecondaryExecID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryExecID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigClOrdID.offset - 1 - FieldOrigClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdLinkID.offset - 1 - FieldClOrdLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteRespID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteRespID.offset - 1 - FieldQuoteRespID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteRespID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdStatusReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdStatusReqID.offset - 1 - FieldOrdStatusReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdStatusReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldMassStatusReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMassStatusReqID.offset - 1 - FieldMassStatusReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMassStatusReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNumReports.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNumReports.offset - 1 - FieldTotNumReports::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNumReports.offset] == 1 ) return tagPtr;
   }
   if( fieldLastRptRequested.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastRptRequested.offset - 1 - FieldLastRptRequested::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastRptRequested.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradeOriginationDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeOriginationDate.offset - 1 - FieldTradeOriginationDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeOriginationDate.offset] == 1 ) return tagPtr;
   }
   if( fieldNoContraBrokers.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoContraBrokers.offset - 1 - FieldNoContraBrokers::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoContraBrokers.offset] == 1 ) return tagPtr;
     for( auto & g : groupsContraBrokers ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldListID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListID.offset - 1 - FieldListID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListID.offset] == 1 ) return tagPtr;
   }
   if( fieldCrossID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCrossID.offset - 1 - FieldCrossID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCrossID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigCrossID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigCrossID.offset - 1 - FieldOrigCrossID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigCrossID.offset] == 1 ) return tagPtr;
   }
   if( fieldCrossType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCrossType.offset - 1 - FieldCrossType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCrossType.offset] == 1 ) return tagPtr;
   }
   if( fieldExecID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecID.offset - 1 - FieldExecID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecID.offset] == 1 ) return tagPtr;
   }
   if( fieldExecRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecRefID.offset - 1 - FieldExecRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldExecType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecType.offset - 1 - FieldExecType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecType.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdStatus.offset - 1 - FieldOrdStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldWorkingIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldWorkingIndicator.offset - 1 - FieldWorkingIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldWorkingIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdRejReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdRejReason.offset - 1 - FieldOrdRejReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdRejReason.offset] == 1 ) return tagPtr;
   }
   if( fieldExecRestatementReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecRestatementReason.offset - 1 - FieldExecRestatementReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecRestatementReason.offset] == 1 ) return tagPtr;
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldDayBookingInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDayBookingInst.offset - 1 - FieldDayBookingInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDayBookingInst.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingUnit.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingUnit.offset - 1 - FieldBookingUnit::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingUnit.offset] == 1 ) return tagPtr;
   }
   if( fieldPreallocMethod.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPreallocMethod.offset - 1 - FieldPreallocMethod::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPreallocMethod.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldCashMargin.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashMargin.offset - 1 - FieldCashMargin::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashMargin.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingFeeIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingFeeIndicator.offset - 1 - FieldClearingFeeIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingFeeIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOrderQty.offset - 1 - FieldCashOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderPercent.offset - 1 - FieldOrderPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingModulus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingModulus.offset - 1 - FieldRoundingModulus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingModulus.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStopPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStopPx.offset - 1 - FieldStopPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStopPx.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetValue.offset - 1 - FieldPegOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldPegMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldPegScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegScope.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionInst.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetValue.offset - 1 - FieldDiscretionOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionScope.offset] == 1 ) return tagPtr;
   }
   if( fieldPeggedPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPeggedPrice.offset - 1 - FieldPeggedPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPeggedPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionPrice.offset - 1 - FieldDiscretionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategy.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategy.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategyParameters.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategyParameters.offset - 1 - FieldTargetStrategyParameters::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategyParameters.offset] == 1 ) return tagPtr;
   }
   if( fieldParticipationRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldParticipationRate.offset - 1 - FieldParticipationRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldParticipationRate.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategyPerformance.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategyPerformance.offset - 1 - FieldTargetStrategyPerformance::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategyPerformance.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldComplianceID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldComplianceID.offset - 1 - FieldComplianceID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldComplianceID.offset] == 1 ) return tagPtr;
   }
   if( fieldSolicitedFlag.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSolicitedFlag.offset - 1 - FieldSolicitedFlag::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSolicitedFlag.offset] == 1 ) return tagPtr;
   }
   if( fieldTimeInForce.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTimeInForce.offset] == 1 ) return tagPtr;
   }
   if( fieldEffectiveTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEffectiveTime.offset - 1 - FieldEffectiveTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEffectiveTime.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireDate.offset - 1 - FieldExpireDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireDate.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireTime.offset - 1 - FieldExpireTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireTime.offset] == 1 ) return tagPtr;
   }
   if( fieldExecInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecInst.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderRestrictions.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderRestrictions.offset - 1 - FieldOrderRestrictions::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderRestrictions.offset] == 1 ) return tagPtr;
   }
   if( fieldCustOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCustOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldLastQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastQty.offset - 1 - FieldLastQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastQty.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingLastQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingLastQty.offset - 1 - FieldUnderlyingLastQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingLastQty.offset] == 1 ) return tagPtr;
   }
   if( fieldLastPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastPx.offset - 1 - FieldLastPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastPx.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingLastPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingLastPx.offset - 1 - FieldUnderlyingLastPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingLastPx.offset] == 1 ) return tagPtr;
   }
   if( fieldLastParPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastParPx.offset - 1 - FieldLastParPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastParPx.offset] == 1 ) return tagPtr;
   }
   if( fieldLastSpotRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastSpotRate.offset - 1 - FieldLastSpotRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastSpotRate.offset] == 1 ) return tagPtr;
   }
   if( fieldLastForwardPoints.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastForwardPoints.offset - 1 - FieldLastForwardPoints::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastForwardPoints.offset] == 1 ) return tagPtr;
   }
   if( fieldLastMkt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastMkt.offset - 1 - FieldLastMkt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastMkt.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldTimeBracket.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTimeBracket.offset - 1 - FieldTimeBracket::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTimeBracket.offset] == 1 ) return tagPtr;
   }
   if( fieldLastCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastCapacity.offset - 1 - FieldLastCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldLeavesQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLeavesQty.offset - 1 - FieldLeavesQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLeavesQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCumQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCumQty.offset - 1 - FieldCumQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCumQty.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgPx.offset - 1 - FieldAvgPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgPx.offset] == 1 ) return tagPtr;
   }
   if( fieldDayOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDayOrderQty.offset - 1 - FieldDayOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDayOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldDayCumQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDayCumQty.offset - 1 - FieldDayCumQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDayCumQty.offset] == 1 ) return tagPtr;
   }
   if( fieldDayAvgPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDayAvgPx.offset - 1 - FieldDayAvgPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDayAvgPx.offset] == 1 ) return tagPtr;
   }
   if( fieldGTBookingInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldGTBookingInst.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldReportToExch.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldReportToExch.offset - 1 - FieldReportToExch::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldReportToExch.offset] == 1 ) return tagPtr;
   }
   if( fieldCommission.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommission.offset - 1 - FieldCommission::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommission.offset] == 1 ) return tagPtr;
   }
   if( fieldCommType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommType.offset] == 1 ) return tagPtr;
   }
   if( fieldCommCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommCurrency.offset - 1 - FieldCommCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldFundRenewWaiv.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFundRenewWaiv.offset - 1 - FieldFundRenewWaiv::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFundRenewWaiv.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldGrossTradeAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldGrossTradeAmt.offset - 1 - FieldGrossTradeAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldGrossTradeAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldNumDaysInterest.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNumDaysInterest.offset - 1 - FieldNumDaysInterest::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNumDaysInterest.offset] == 1 ) return tagPtr;
   }
   if( fieldExDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExDate.offset - 1 - FieldExDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestRate.offset - 1 - FieldAccruedInterestRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestRate.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestAmt.offset - 1 - FieldAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAtMaturity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAtMaturity.offset - 1 - FieldInterestAtMaturity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAtMaturity.offset] == 1 ) return tagPtr;
   }
   if( fieldEndAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndAccruedInterestAmt.offset - 1 - FieldEndAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldStartCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartCash.offset - 1 - FieldStartCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartCash.offset] == 1 ) return tagPtr;
   }
   if( fieldEndCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndCash.offset - 1 - FieldEndCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndCash.offset] == 1 ) return tagPtr;
   }
   if( fieldTradedFlatSwitch.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradedFlatSwitch.offset - 1 - FieldTradedFlatSwitch::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradedFlatSwitch.offset] == 1 ) return tagPtr;
   }
   if( fieldBasisFeatureDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBasisFeatureDate.offset - 1 - FieldBasisFeatureDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBasisFeatureDate.offset] == 1 ) return tagPtr;
   }
   if( fieldBasisFeaturePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBasisFeaturePrice.offset - 1 - FieldBasisFeaturePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBasisFeaturePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldConcession.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConcession.offset - 1 - FieldConcession::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConcession.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalTakedown.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalTakedown.offset - 1 - FieldTotalTakedown::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalTakedown.offset] == 1 ) return tagPtr;
   }
   if( fieldNetMoney.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNetMoney.offset - 1 - FieldNetMoney::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNetMoney.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrAmt.offset - 1 - FieldSettlCurrAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrency.offset - 1 - FieldSettlCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrFxRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrFxRate.offset - 1 - FieldSettlCurrFxRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrFxRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrFxRateCalc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrFxRateCalc.offset - 1 - FieldSettlCurrFxRateCalc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrFxRateCalc.offset] == 1 ) return tagPtr;
   }
   if( fieldHandlInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldHandlInst.offset] == 1 ) return tagPtr;
   }
   if( fieldMinQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinQty.offset - 1 - FieldMinQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinQty.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxFloor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxFloor.offset - 1 - FieldMaxFloor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxFloor.offset] == 1 ) return tagPtr;
   }
   if( fieldPositionEffect.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPositionEffect.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxShow.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxShow.offset - 1 - FieldMaxShow::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxShow.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingType.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate2.offset - 1 - FieldSettlDate2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate2.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty2.offset - 1 - FieldOrderQty2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty2.offset] == 1 ) return tagPtr;
   }
   if( fieldLastForwardPoints2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastForwardPoints2.offset - 1 - FieldLastForwardPoints2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastForwardPoints2.offset] == 1 ) return tagPtr;
   }
   if( fieldMultiLegReportingType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMultiLegReportingType.offset - 1 - FieldMultiLegReportingType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMultiLegReportingType.offset] == 1 ) return tagPtr;
   }
   if( fieldCancellationRights.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCancellationRights.offset] == 1 ) return tagPtr;
   }
   if( fieldMoneyLaunderingStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMoneyLaunderingStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistID.offset - 1 - FieldRegistID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistID.offset] == 1 ) return tagPtr;
   }
   if( fieldDesignation.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDesignation.offset - 1 - FieldDesignation::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDesignation.offset] == 1 ) return tagPtr;
   }
   if( fieldTransBkdTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransBkdTime.offset - 1 - FieldTransBkdTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransBkdTime.offset] == 1 ) return tagPtr;
   }
   if( fieldExecValuationPoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecValuationPoint.offset - 1 - FieldExecValuationPoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecValuationPoint.offset] == 1 ) return tagPtr;
   }
   if( fieldExecPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecPriceType.offset - 1 - FieldExecPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldExecPriceAdjustment.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecPriceAdjustment.offset - 1 - FieldExecPriceAdjustment::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecPriceAdjustment.offset] == 1 ) return tagPtr;
   }
   if( fieldPriorityIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriorityIndicator.offset - 1 - FieldPriorityIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriorityIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceImprovement.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceImprovement.offset - 1 - FieldPriceImprovement::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceImprovement.offset] == 1 ) return tagPtr;
   }
   if( fieldLastLiquidityInd.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastLiquidityInd.offset - 1 - FieldLastLiquidityInd::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastLiquidityInd.offset] == 1 ) return tagPtr;
   }
   if( fieldNoContAmts.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoContAmts.offset - 1 - FieldNoContAmts::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoContAmts.offset] == 1 ) return tagPtr;
     for( auto & g : groupsContAmts ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldCopyMsgIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCopyMsgIndicator.offset - 1 - FieldCopyMsgIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCopyMsgIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldNoMiscFees.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoMiscFees.offset - 1 - FieldNoMiscFees::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoMiscFees.offset] == 1 ) return tagPtr;
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageOrderCancelReject::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryOrderID.offset - 1 - FieldSecondaryOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdLinkID.offset - 1 - FieldClOrdLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigClOrdID.offset - 1 - FieldOrigClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdStatus.offset - 1 - FieldOrdStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldWorkingIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldWorkingIndicator.offset - 1 - FieldWorkingIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldWorkingIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigOrdModTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigOrdModTime.offset - 1 - FieldOrigOrdModTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigOrdModTime.offset] == 1 ) return tagPtr;
   }
   if( fieldListID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListID.offset - 1 - FieldListID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListID.offset] == 1 ) return tagPtr;
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeOriginationDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeOriginationDate.offset - 1 - FieldTradeOriginationDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeOriginationDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldCxlRejResponseTo.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCxlRejResponseTo.offset - 1 - FieldCxlRejResponseTo::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCxlRejResponseTo.offset] == 1 ) return tagPtr;
   }
   if( fieldCxlRejReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCxlRejReason.offset - 1 - FieldCxlRejReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCxlRejReason.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageLogon::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldEncryptMethod.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncryptMethod.offset - 1 - FieldEncryptMethod::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncryptMethod.offset] == 1 ) return tagPtr;
   }
   if( fieldHeartBtInt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldHeartBtInt.offset - 1 - FieldHeartBtInt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldHeartBtInt.offset] == 1 ) return tagPtr;
   }
   if( fieldRawDataLength.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRawDataLength.offset - 1 - FieldRawDataLength::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRawDataLength.offset] == 1 ) return tagPtr;
   }
   if( fieldRawData.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRawData.offset - 1 - FieldRawData::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRawData.offset] == 1 ) return tagPtr;
   }
   if( fieldResetSeqNumFlag.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResetSeqNumFlag.offset - 1 - FieldResetSeqNumFlag::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResetSeqNumFlag.offset] == 1 ) return tagPtr;
   }
   if( fieldNextExpectedMsgSeqNum.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNextExpectedMsgSeqNum.offset - 1 - FieldNextExpectedMsgSeqNum::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNextExpectedMsgSeqNum.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxMessageSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxMessageSize.offset - 1 - FieldMaxMessageSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxMessageSize.offset] == 1 ) return tagPtr;
   }
   if( fieldNoMsgTypes.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoMsgTypes.offset - 1 - FieldNoMsgTypes::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoMsgTypes.offset] == 1 ) return tagPtr;
     for( auto & g : groupsMsgTypes ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTestMessageIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTestMessageIndicator.offset - 1 - FieldTestMessageIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTestMessageIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldUsername.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUsername.offset - 1 - FieldUsername::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUsername.offset] == 1 ) return tagPtr;
   }
   if( fieldPassword.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPassword.offset - 1 - FieldPassword::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPassword.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageNews::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrigTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigTime.offset - 1 - FieldOrigTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigTime.offset] == 1 ) return tagPtr;
   }
   if( fieldUrgency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUrgency.offset - 1 - FieldUrgency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUrgency.offset] == 1 ) return tagPtr;
   }
   if( fieldHeadline.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldHeadline.offset - 1 - FieldHeadline::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldHeadline.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedHeadlineLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedHeadlineLen.offset - 1 - FieldEncodedHeadlineLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedHeadlineLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedHeadline.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedHeadline.offset - 1 - FieldEncodedHeadline::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedHeadline.offset] == 1 ) return tagPtr;
   }
   if( fieldNoRoutingIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoRoutingIDs.offset - 1 - FieldNoRoutingIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRoutingIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsRoutingIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoRelatedSym.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRelatedSym.offset] == 1 ) return tagPtr;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLinesOfText.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLinesOfText.offset - 1 - FieldNoLinesOfText::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLinesOfText.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLinesOfText ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldURLLink.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldURLLink.offset - 1 - FieldURLLink::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldURLLink.offset] == 1 ) return tagPtr;
   }
   if( fieldRawDataLength.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRawDataLength.offset - 1 - FieldRawDataLength::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRawDataLength.offset] == 1 ) return tagPtr;
   }
   if( fieldRawData.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRawData.offset - 1 - FieldRawData::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRawData.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageEmail::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldEmailThreadID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEmailThreadID.offset - 1 - FieldEmailThreadID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEmailThreadID.offset] == 1 ) return tagPtr;
   }
   if( fieldEmailType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEmailType.offset - 1 - FieldEmailType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEmailType.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigTime.offset - 1 - FieldOrigTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigTime.offset] == 1 ) return tagPtr;
   }
   if( fieldSubject.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubject.offset - 1 - FieldSubject::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubject.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSubjectLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSubjectLen.offset - 1 - FieldEncodedSubjectLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSubjectLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSubject.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSubject.offset - 1 - FieldEncodedSubject::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSubject.offset] == 1 ) return tagPtr;
   }
   if( fieldNoRoutingIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoRoutingIDs.offset - 1 - FieldNoRoutingIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRoutingIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsRoutingIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoRelatedSym.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRelatedSym.offset] == 1 ) return tagPtr;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLinesOfText.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLinesOfText.offset - 1 - FieldNoLinesOfText::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLinesOfText.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLinesOfText ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldRawDataLength.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRawDataLength.offset - 1 - FieldRawDataLength::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRawDataLength.offset] == 1 ) return tagPtr;
   }
   if( fieldRawData.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRawData.offset - 1 - FieldRawData::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRawData.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageNewOrderSingle::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdLinkID.offset - 1 - FieldClOrdLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradeOriginationDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeOriginationDate.offset - 1 - FieldTradeOriginationDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeOriginationDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldDayBookingInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDayBookingInst.offset - 1 - FieldDayBookingInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDayBookingInst.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingUnit.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingUnit.offset - 1 - FieldBookingUnit::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingUnit.offset] == 1 ) return tagPtr;
   }
   if( fieldPreallocMethod.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPreallocMethod.offset - 1 - FieldPreallocMethod::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPreallocMethod.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocID.offset - 1 - FieldAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoAllocs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoAllocs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldCashMargin.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashMargin.offset - 1 - FieldCashMargin::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashMargin.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingFeeIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingFeeIndicator.offset - 1 - FieldClearingFeeIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingFeeIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldHandlInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldHandlInst.offset] == 1 ) return tagPtr;
   }
   if( fieldExecInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecInst.offset] == 1 ) return tagPtr;
   }
   if( fieldMinQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinQty.offset - 1 - FieldMinQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinQty.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxFloor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxFloor.offset - 1 - FieldMaxFloor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxFloor.offset] == 1 ) return tagPtr;
   }
   if( fieldExDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExDestination.offset - 1 - FieldExDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTradingSessions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTradingSessions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProcessCode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProcessCode.offset - 1 - FieldProcessCode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProcessCode.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPrevClosePx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrevClosePx.offset - 1 - FieldPrevClosePx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrevClosePx.offset] == 1 ) return tagPtr;
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldLocateReqd.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocateReqd.offset - 1 - FieldLocateReqd::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocateReqd.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOrderQty.offset - 1 - FieldCashOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderPercent.offset - 1 - FieldOrderPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingModulus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingModulus.offset - 1 - FieldRoundingModulus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingModulus.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStopPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStopPx.offset - 1 - FieldStopPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStopPx.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldComplianceID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldComplianceID.offset - 1 - FieldComplianceID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldComplianceID.offset] == 1 ) return tagPtr;
   }
   if( fieldSolicitedFlag.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSolicitedFlag.offset - 1 - FieldSolicitedFlag::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSolicitedFlag.offset] == 1 ) return tagPtr;
   }
   if( fieldIOIID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIOIID.offset - 1 - FieldIOIID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIOIID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteID.offset - 1 - FieldQuoteID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteID.offset] == 1 ) return tagPtr;
   }
   if( fieldTimeInForce.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTimeInForce.offset] == 1 ) return tagPtr;
   }
   if( fieldEffectiveTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEffectiveTime.offset - 1 - FieldEffectiveTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEffectiveTime.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireDate.offset - 1 - FieldExpireDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireDate.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireTime.offset - 1 - FieldExpireTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireTime.offset] == 1 ) return tagPtr;
   }
   if( fieldGTBookingInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldGTBookingInst.offset] == 1 ) return tagPtr;
   }
   if( fieldCommission.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommission.offset - 1 - FieldCommission::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommission.offset] == 1 ) return tagPtr;
   }
   if( fieldCommType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommType.offset] == 1 ) return tagPtr;
   }
   if( fieldCommCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommCurrency.offset - 1 - FieldCommCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldFundRenewWaiv.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFundRenewWaiv.offset - 1 - FieldFundRenewWaiv::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFundRenewWaiv.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderRestrictions.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderRestrictions.offset - 1 - FieldOrderRestrictions::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderRestrictions.offset] == 1 ) return tagPtr;
   }
   if( fieldCustOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCustOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldForexReq.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldForexReq.offset - 1 - FieldForexReq::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldForexReq.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrency.offset - 1 - FieldSettlCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingType.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate2.offset - 1 - FieldSettlDate2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate2.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty2.offset - 1 - FieldOrderQty2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty2.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice2.offset - 1 - FieldPrice2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice2.offset] == 1 ) return tagPtr;
   }
   if( fieldPositionEffect.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPositionEffect.offset] == 1 ) return tagPtr;
   }
   if( fieldCoveredOrUncovered.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCoveredOrUncovered.offset - 1 - FieldCoveredOrUncovered::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCoveredOrUncovered.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxShow.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxShow.offset - 1 - FieldMaxShow::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxShow.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetValue.offset - 1 - FieldPegOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldPegMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldPegScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegScope.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionInst.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetValue.offset - 1 - FieldDiscretionOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionScope.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategy.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategy.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategyParameters.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategyParameters.offset - 1 - FieldTargetStrategyParameters::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategyParameters.offset] == 1 ) return tagPtr;
   }
   if( fieldParticipationRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldParticipationRate.offset - 1 - FieldParticipationRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldParticipationRate.offset] == 1 ) return tagPtr;
   }
   if( fieldCancellationRights.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCancellationRights.offset] == 1 ) return tagPtr;
   }
   if( fieldMoneyLaunderingStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMoneyLaunderingStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistID.offset - 1 - FieldRegistID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistID.offset] == 1 ) return tagPtr;
   }
   if( fieldDesignation.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDesignation.offset - 1 - FieldDesignation::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDesignation.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageNewOrderList::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldListID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListID.offset - 1 - FieldListID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListID.offset] == 1 ) return tagPtr;
   }
   if( fieldBidID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidID.offset - 1 - FieldBidID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidID.offset] == 1 ) return tagPtr;
   }
   if( fieldClientBidID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClientBidID.offset - 1 - FieldClientBidID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClientBidID.offset] == 1 ) return tagPtr;
   }
   if( fieldProgRptReqs.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProgRptReqs.offset - 1 - FieldProgRptReqs::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProgRptReqs.offset] == 1 ) return tagPtr;
   }
   if( fieldBidType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidType.offset - 1 - FieldBidType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidType.offset] == 1 ) return tagPtr;
   }
   if( fieldProgPeriodInterval.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProgPeriodInterval.offset - 1 - FieldProgPeriodInterval::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProgPeriodInterval.offset] == 1 ) return tagPtr;
   }
   if( fieldCancellationRights.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCancellationRights.offset] == 1 ) return tagPtr;
   }
   if( fieldMoneyLaunderingStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMoneyLaunderingStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistID.offset - 1 - FieldRegistID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistID.offset] == 1 ) return tagPtr;
   }
   if( fieldListExecInstType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListExecInstType.offset - 1 - FieldListExecInstType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListExecInstType.offset] == 1 ) return tagPtr;
   }
   if( fieldListExecInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListExecInst.offset - 1 - FieldListExecInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListExecInst.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedListExecInstLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedListExecInstLen.offset - 1 - FieldEncodedListExecInstLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedListExecInstLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedListExecInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedListExecInst.offset - 1 - FieldEncodedListExecInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedListExecInst.offset] == 1 ) return tagPtr;
   }
   if( fieldAllowableOneSidednessPct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllowableOneSidednessPct.offset - 1 - FieldAllowableOneSidednessPct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllowableOneSidednessPct.offset] == 1 ) return tagPtr;
   }
   if( fieldAllowableOneSidednessValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllowableOneSidednessValue.offset - 1 - FieldAllowableOneSidednessValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllowableOneSidednessValue.offset] == 1 ) return tagPtr;
   }
   if( fieldAllowableOneSidednessCurr.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllowableOneSidednessCurr.offset - 1 - FieldAllowableOneSidednessCurr::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllowableOneSidednessCurr.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNoOrders.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNoOrders.offset - 1 - FieldTotNoOrders::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNoOrders.offset] == 1 ) return tagPtr;
   }
   if( fieldLastFragment.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastFragment.offset] == 1 ) return tagPtr;
   }
   if( fieldNoOrders.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoOrders.offset - 1 - FieldNoOrders::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoOrders.offset] == 1 ) return tagPtr;
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageOrderCancelRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrigClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigClOrdID.offset - 1 - FieldOrigClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdLinkID.offset - 1 - FieldClOrdLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldListID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListID.offset - 1 - FieldListID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigOrdModTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigOrdModTime.offset - 1 - FieldOrigOrdModTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigOrdModTime.offset] == 1 ) return tagPtr;
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOrderQty.offset - 1 - FieldCashOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderPercent.offset - 1 - FieldOrderPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingModulus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingModulus.offset - 1 - FieldRoundingModulus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingModulus.offset] == 1 ) return tagPtr;
   }
   if( fieldComplianceID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldComplianceID.offset - 1 - FieldComplianceID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldComplianceID.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageOrderCancelReplaceRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradeOriginationDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeOriginationDate.offset - 1 - FieldTradeOriginationDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeOriginationDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigClOrdID.offset - 1 - FieldOrigClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdLinkID.offset - 1 - FieldClOrdLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldListID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListID.offset - 1 - FieldListID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigOrdModTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigOrdModTime.offset - 1 - FieldOrigOrdModTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigOrdModTime.offset] == 1 ) return tagPtr;
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldDayBookingInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDayBookingInst.offset - 1 - FieldDayBookingInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDayBookingInst.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingUnit.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingUnit.offset - 1 - FieldBookingUnit::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingUnit.offset] == 1 ) return tagPtr;
   }
   if( fieldPreallocMethod.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPreallocMethod.offset - 1 - FieldPreallocMethod::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPreallocMethod.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocID.offset - 1 - FieldAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoAllocs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoAllocs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldCashMargin.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashMargin.offset - 1 - FieldCashMargin::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashMargin.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingFeeIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingFeeIndicator.offset - 1 - FieldClearingFeeIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingFeeIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldHandlInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldHandlInst.offset] == 1 ) return tagPtr;
   }
   if( fieldExecInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecInst.offset] == 1 ) return tagPtr;
   }
   if( fieldMinQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinQty.offset - 1 - FieldMinQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinQty.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxFloor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxFloor.offset - 1 - FieldMaxFloor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxFloor.offset] == 1 ) return tagPtr;
   }
   if( fieldExDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExDestination.offset - 1 - FieldExDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTradingSessions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTradingSessions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOrderQty.offset - 1 - FieldCashOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderPercent.offset - 1 - FieldOrderPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingModulus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingModulus.offset - 1 - FieldRoundingModulus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingModulus.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStopPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStopPx.offset - 1 - FieldStopPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStopPx.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetValue.offset - 1 - FieldPegOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldPegMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldPegScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegScope.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionInst.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetValue.offset - 1 - FieldDiscretionOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionScope.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategy.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategy.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategyParameters.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategyParameters.offset - 1 - FieldTargetStrategyParameters::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategyParameters.offset] == 1 ) return tagPtr;
   }
   if( fieldParticipationRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldParticipationRate.offset - 1 - FieldParticipationRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldParticipationRate.offset] == 1 ) return tagPtr;
   }
   if( fieldComplianceID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldComplianceID.offset - 1 - FieldComplianceID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldComplianceID.offset] == 1 ) return tagPtr;
   }
   if( fieldSolicitedFlag.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSolicitedFlag.offset - 1 - FieldSolicitedFlag::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSolicitedFlag.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTimeInForce.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTimeInForce.offset] == 1 ) return tagPtr;
   }
   if( fieldEffectiveTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEffectiveTime.offset - 1 - FieldEffectiveTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEffectiveTime.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireDate.offset - 1 - FieldExpireDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireDate.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireTime.offset - 1 - FieldExpireTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireTime.offset] == 1 ) return tagPtr;
   }
   if( fieldGTBookingInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldGTBookingInst.offset] == 1 ) return tagPtr;
   }
   if( fieldCommission.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommission.offset - 1 - FieldCommission::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommission.offset] == 1 ) return tagPtr;
   }
   if( fieldCommType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommType.offset] == 1 ) return tagPtr;
   }
   if( fieldCommCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommCurrency.offset - 1 - FieldCommCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldFundRenewWaiv.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFundRenewWaiv.offset - 1 - FieldFundRenewWaiv::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFundRenewWaiv.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderRestrictions.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderRestrictions.offset - 1 - FieldOrderRestrictions::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderRestrictions.offset] == 1 ) return tagPtr;
   }
   if( fieldCustOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCustOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldForexReq.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldForexReq.offset - 1 - FieldForexReq::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldForexReq.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrency.offset - 1 - FieldSettlCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingType.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate2.offset - 1 - FieldSettlDate2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate2.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty2.offset - 1 - FieldOrderQty2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty2.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice2.offset - 1 - FieldPrice2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice2.offset] == 1 ) return tagPtr;
   }
   if( fieldPositionEffect.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPositionEffect.offset] == 1 ) return tagPtr;
   }
   if( fieldCoveredOrUncovered.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCoveredOrUncovered.offset - 1 - FieldCoveredOrUncovered::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCoveredOrUncovered.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxShow.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxShow.offset - 1 - FieldMaxShow::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxShow.offset] == 1 ) return tagPtr;
   }
   if( fieldLocateReqd.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocateReqd.offset - 1 - FieldLocateReqd::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocateReqd.offset] == 1 ) return tagPtr;
   }
   if( fieldCancellationRights.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCancellationRights.offset] == 1 ) return tagPtr;
   }
   if( fieldMoneyLaunderingStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMoneyLaunderingStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistID.offset - 1 - FieldRegistID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistID.offset] == 1 ) return tagPtr;
   }
   if( fieldDesignation.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDesignation.offset - 1 - FieldDesignation::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDesignation.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageOrderStatusRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdLinkID.offset - 1 - FieldClOrdLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldOrdStatusReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdStatusReqID.offset - 1 - FieldOrdStatusReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdStatusReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageAllocationInstruction::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocID.offset - 1 - FieldAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocTransType.offset - 1 - FieldAllocTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocType.offset - 1 - FieldAllocType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryAllocID.offset - 1 - FieldSecondaryAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldRefAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRefAllocID.offset - 1 - FieldRefAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRefAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocCancReplaceReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocCancReplaceReason.offset - 1 - FieldAllocCancReplaceReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocCancReplaceReason.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocIntermedReqType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocIntermedReqType.offset - 1 - FieldAllocIntermedReqType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocIntermedReqType.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocLinkID.offset - 1 - FieldAllocLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocLinkType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocLinkType.offset - 1 - FieldAllocLinkType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocLinkType.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingRefID.offset - 1 - FieldBookingRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocNoOrdersType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocNoOrdersType.offset - 1 - FieldAllocNoOrdersType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocNoOrdersType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoOrders.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoOrders.offset - 1 - FieldNoOrders::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoOrders.offset] == 1 ) return tagPtr;
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoExecs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoExecs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPreviouslyReported.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPreviouslyReported.offset - 1 - FieldPreviouslyReported::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPreviouslyReported.offset] == 1 ) return tagPtr;
   }
   if( fieldReversalIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldReversalIndicator.offset - 1 - FieldReversalIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldReversalIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldMatchType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMatchType.offset - 1 - FieldMatchType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMatchType.offset] == 1 ) return tagPtr;
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryForm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryForm.offset] == 1 ) return tagPtr;
   }
   if( fieldPctAtRisk.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPctAtRisk.offset - 1 - FieldPctAtRisk::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPctAtRisk.offset] == 1 ) return tagPtr;
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoInstrAttrib.offset] == 1 ) return tagPtr;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldQuantity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuantity.offset - 1 - FieldQuantity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuantity.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldLastMkt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastMkt.offset - 1 - FieldLastMkt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastMkt.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeOriginationDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeOriginationDate.offset - 1 - FieldTradeOriginationDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeOriginationDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgPx.offset - 1 - FieldAvgPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgPx.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgParPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgParPx.offset - 1 - FieldAvgParPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgParPx.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgPxPrecision.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgPxPrecision.offset - 1 - FieldAvgPxPrecision::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgPxPrecision.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingType.offset] == 1 ) return tagPtr;
   }
   if( fieldGrossTradeAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldGrossTradeAmt.offset - 1 - FieldGrossTradeAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldGrossTradeAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldConcession.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConcession.offset - 1 - FieldConcession::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConcession.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalTakedown.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalTakedown.offset - 1 - FieldTotalTakedown::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalTakedown.offset] == 1 ) return tagPtr;
   }
   if( fieldNetMoney.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNetMoney.offset - 1 - FieldNetMoney::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNetMoney.offset] == 1 ) return tagPtr;
   }
   if( fieldPositionEffect.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPositionEffect.offset] == 1 ) return tagPtr;
   }
   if( fieldAutoAcceptIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAutoAcceptIndicator.offset - 1 - FieldAutoAcceptIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAutoAcceptIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldNumDaysInterest.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNumDaysInterest.offset - 1 - FieldNumDaysInterest::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNumDaysInterest.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestRate.offset - 1 - FieldAccruedInterestRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestRate.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestAmt.offset - 1 - FieldAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalAccruedInterestAmt.offset - 1 - FieldTotalAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAtMaturity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAtMaturity.offset - 1 - FieldInterestAtMaturity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAtMaturity.offset] == 1 ) return tagPtr;
   }
   if( fieldEndAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndAccruedInterestAmt.offset - 1 - FieldEndAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldStartCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartCash.offset - 1 - FieldStartCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartCash.offset] == 1 ) return tagPtr;
   }
   if( fieldEndCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndCash.offset - 1 - FieldEndCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndCash.offset] == 1 ) return tagPtr;
   }
   if( fieldLegalConfirm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLegalConfirm.offset - 1 - FieldLegalConfirm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLegalConfirm.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNoAllocs.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNoAllocs.offset - 1 - FieldTotNoAllocs::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNoAllocs.offset] == 1 ) return tagPtr;
   }
   if( fieldLastFragment.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastFragment.offset] == 1 ) return tagPtr;
   }
   if( fieldNoAllocs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoAllocs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageListCancelRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldListID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListID.offset - 1 - FieldListID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListID.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeOriginationDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeOriginationDate.offset - 1 - FieldTradeOriginationDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeOriginationDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageListExecute::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldListID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListID.offset - 1 - FieldListID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListID.offset] == 1 ) return tagPtr;
   }
   if( fieldClientBidID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClientBidID.offset - 1 - FieldClientBidID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClientBidID.offset] == 1 ) return tagPtr;
   }
   if( fieldBidID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidID.offset - 1 - FieldBidID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidID.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageListStatusRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldListID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListID.offset - 1 - FieldListID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListID.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageListStatus::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldListID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListID.offset - 1 - FieldListID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListID.offset] == 1 ) return tagPtr;
   }
   if( fieldListStatusType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListStatusType.offset - 1 - FieldListStatusType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListStatusType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoRpts.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNoRpts.offset - 1 - FieldNoRpts::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRpts.offset] == 1 ) return tagPtr;
   }
   if( fieldListOrderStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListOrderStatus.offset - 1 - FieldListOrderStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListOrderStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldRptSeq.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRptSeq.offset - 1 - FieldRptSeq::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRptSeq.offset] == 1 ) return tagPtr;
   }
   if( fieldListStatusText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListStatusText.offset - 1 - FieldListStatusText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListStatusText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedListStatusTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedListStatusTextLen.offset - 1 - FieldEncodedListStatusTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedListStatusTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedListStatusText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedListStatusText.offset - 1 - FieldEncodedListStatusText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedListStatusText.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNoOrders.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNoOrders.offset - 1 - FieldTotNoOrders::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNoOrders.offset] == 1 ) return tagPtr;
   }
   if( fieldLastFragment.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastFragment.offset] == 1 ) return tagPtr;
   }
   if( fieldNoOrders.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoOrders.offset - 1 - FieldNoOrders::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoOrders.offset] == 1 ) return tagPtr;
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageAllocationInstructionAck::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocID.offset - 1 - FieldAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecondaryAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryAllocID.offset - 1 - FieldSecondaryAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocStatus.offset - 1 - FieldAllocStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocRejCode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocRejCode.offset - 1 - FieldAllocRejCode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocRejCode.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocType.offset - 1 - FieldAllocType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocType.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocIntermedReqType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocIntermedReqType.offset - 1 - FieldAllocIntermedReqType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocIntermedReqType.offset] == 1 ) return tagPtr;
   }
   if( fieldMatchStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMatchStatus.offset - 1 - FieldMatchStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMatchStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldNoAllocs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoAllocs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageDontKnowTrade::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryOrderID.offset - 1 - FieldSecondaryOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldExecID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecID.offset - 1 - FieldExecID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecID.offset] == 1 ) return tagPtr;
   }
   if( fieldDKReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDKReason.offset - 1 - FieldDKReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDKReason.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOrderQty.offset - 1 - FieldCashOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderPercent.offset - 1 - FieldOrderPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingModulus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingModulus.offset - 1 - FieldRoundingModulus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingModulus.offset] == 1 ) return tagPtr;
   }
   if( fieldLastQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastQty.offset - 1 - FieldLastQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastQty.offset] == 1 ) return tagPtr;
   }
   if( fieldLastPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastPx.offset - 1 - FieldLastPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastPx.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageQuoteRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteReqID.offset - 1 - FieldQuoteReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldRFQReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRFQReqID.offset - 1 - FieldRFQReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRFQReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldNoRelatedSym.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRelatedSym.offset] == 1 ) return tagPtr;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageQuote::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteReqID.offset - 1 - FieldQuoteReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteID.offset - 1 - FieldQuoteID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteRespID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteRespID.offset - 1 - FieldQuoteRespID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteRespID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteType.offset - 1 - FieldQuoteType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoQuoteQualifiers.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoQuoteQualifiers.offset - 1 - FieldNoQuoteQualifiers::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoQuoteQualifiers.offset] == 1 ) return tagPtr;
     for( auto & g : groupsQuoteQualifiers ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldQuoteResponseLevel.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteResponseLevel.offset - 1 - FieldQuoteResponseLevel::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteResponseLevel.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOrderQty.offset - 1 - FieldCashOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderPercent.offset - 1 - FieldOrderPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingModulus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingModulus.offset - 1 - FieldRoundingModulus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingModulus.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate2.offset - 1 - FieldSettlDate2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate2.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty2.offset - 1 - FieldOrderQty2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty2.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldBidPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidPx.offset - 1 - FieldBidPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidPx.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferPx.offset - 1 - FieldOfferPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferPx.offset] == 1 ) return tagPtr;
   }
   if( fieldMktBidPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMktBidPx.offset - 1 - FieldMktBidPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMktBidPx.offset] == 1 ) return tagPtr;
   }
   if( fieldMktOfferPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMktOfferPx.offset - 1 - FieldMktOfferPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMktOfferPx.offset] == 1 ) return tagPtr;
   }
   if( fieldMinBidSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinBidSize.offset - 1 - FieldMinBidSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinBidSize.offset] == 1 ) return tagPtr;
   }
   if( fieldBidSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidSize.offset - 1 - FieldBidSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidSize.offset] == 1 ) return tagPtr;
   }
   if( fieldMinOfferSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinOfferSize.offset - 1 - FieldMinOfferSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinOfferSize.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferSize.offset - 1 - FieldOfferSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferSize.offset] == 1 ) return tagPtr;
   }
   if( fieldValidUntilTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldValidUntilTime.offset - 1 - FieldValidUntilTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldValidUntilTime.offset] == 1 ) return tagPtr;
   }
   if( fieldBidSpotRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidSpotRate.offset - 1 - FieldBidSpotRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidSpotRate.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferSpotRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferSpotRate.offset - 1 - FieldOfferSpotRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferSpotRate.offset] == 1 ) return tagPtr;
   }
   if( fieldBidForwardPoints.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidForwardPoints.offset - 1 - FieldBidForwardPoints::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidForwardPoints.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferForwardPoints.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferForwardPoints.offset - 1 - FieldOfferForwardPoints::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferForwardPoints.offset] == 1 ) return tagPtr;
   }
   if( fieldMidPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMidPx.offset - 1 - FieldMidPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMidPx.offset] == 1 ) return tagPtr;
   }
   if( fieldBidYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidYield.offset - 1 - FieldBidYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidYield.offset] == 1 ) return tagPtr;
   }
   if( fieldMidYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMidYield.offset - 1 - FieldMidYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMidYield.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferYield.offset - 1 - FieldOfferYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferYield.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldBidForwardPoints2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidForwardPoints2.offset - 1 - FieldBidForwardPoints2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidForwardPoints2.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferForwardPoints2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferForwardPoints2.offset - 1 - FieldOfferForwardPoints2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferForwardPoints2.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrBidFxRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrBidFxRate.offset - 1 - FieldSettlCurrBidFxRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrBidFxRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrOfferFxRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrOfferFxRate.offset - 1 - FieldSettlCurrOfferFxRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrOfferFxRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrFxRateCalc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrFxRateCalc.offset - 1 - FieldSettlCurrFxRateCalc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrFxRateCalc.offset] == 1 ) return tagPtr;
   }
   if( fieldCommType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommType.offset] == 1 ) return tagPtr;
   }
   if( fieldCommission.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommission.offset - 1 - FieldCommission::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommission.offset] == 1 ) return tagPtr;
   }
   if( fieldCustOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCustOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldExDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExDestination.offset - 1 - FieldExDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageSettlementInstructions::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSettlInstMsgID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlInstMsgID.offset - 1 - FieldSettlInstMsgID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlInstMsgID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlInstReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlInstReqID.offset - 1 - FieldSettlInstReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlInstReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlInstMode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlInstMode.offset - 1 - FieldSettlInstMode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlInstMode.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlInstReqRejCode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlInstReqRejCode.offset - 1 - FieldSettlInstReqRejCode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlInstReqRejCode.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSettlInst.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSettlInst.offset - 1 - FieldNoSettlInst::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSettlInst.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSettlInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageMarketDataRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldMDReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMDReqID.offset - 1 - FieldMDReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMDReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarketDepth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarketDepth.offset - 1 - FieldMarketDepth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarketDepth.offset] == 1 ) return tagPtr;
   }
   if( fieldMDUpdateType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMDUpdateType.offset - 1 - FieldMDUpdateType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMDUpdateType.offset] == 1 ) return tagPtr;
   }
   if( fieldAggregatedBook.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAggregatedBook.offset - 1 - FieldAggregatedBook::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAggregatedBook.offset] == 1 ) return tagPtr;
   }
   if( fieldOpenCloseSettlFlag.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOpenCloseSettlFlag.offset - 1 - FieldOpenCloseSettlFlag::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOpenCloseSettlFlag.offset] == 1 ) return tagPtr;
   }
   if( fieldScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldScope.offset - 1 - FieldScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldScope.offset] == 1 ) return tagPtr;
   }
   if( fieldMDImplicitDelete.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMDImplicitDelete.offset - 1 - FieldMDImplicitDelete::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMDImplicitDelete.offset] == 1 ) return tagPtr;
   }
   if( fieldNoMDEntryTypes.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoMDEntryTypes.offset - 1 - FieldNoMDEntryTypes::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoMDEntryTypes.offset] == 1 ) return tagPtr;
     for( auto & g : groupsMDEntryTypes ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoRelatedSym.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRelatedSym.offset] == 1 ) return tagPtr;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTradingSessions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldApplQueueAction.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldApplQueueAction.offset - 1 - FieldApplQueueAction::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldApplQueueAction.offset] == 1 ) return tagPtr;
   }
   if( fieldApplQueueMax.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldApplQueueMax.offset - 1 - FieldApplQueueMax::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldApplQueueMax.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageMarketDataSnapshotFullRefresh::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldMDReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMDReqID.offset - 1 - FieldMDReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMDReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldFinancialStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFinancialStatus.offset - 1 - FieldFinancialStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFinancialStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldCorporateAction.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCorporateAction.offset - 1 - FieldCorporateAction::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCorporateAction.offset] == 1 ) return tagPtr;
   }
   if( fieldNetChgPrevDay.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNetChgPrevDay.offset - 1 - FieldNetChgPrevDay::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNetChgPrevDay.offset] == 1 ) return tagPtr;
   }
   if( fieldNoMDEntries.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoMDEntries.offset - 1 - FieldNoMDEntries::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoMDEntries.offset] == 1 ) return tagPtr;
     for( auto & g : groupsMDEntries ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldApplQueueDepth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldApplQueueDepth.offset - 1 - FieldApplQueueDepth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldApplQueueDepth.offset] == 1 ) return tagPtr;
   }
   if( fieldApplQueueResolution.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldApplQueueResolution.offset - 1 - FieldApplQueueResolution::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldApplQueueResolution.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageMarketDataIncrementalRefresh::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldMDReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMDReqID.offset - 1 - FieldMDReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMDReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoMDEntries.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoMDEntries.offset - 1 - FieldNoMDEntries::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoMDEntries.offset] == 1 ) return tagPtr;
     for( auto & g : groupsMDEntries ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldApplQueueDepth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldApplQueueDepth.offset - 1 - FieldApplQueueDepth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldApplQueueDepth.offset] == 1 ) return tagPtr;
   }
   if( fieldApplQueueResolution.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldApplQueueResolution.offset - 1 - FieldApplQueueResolution::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldApplQueueResolution.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageMarketDataRequestReject::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldMDReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMDReqID.offset - 1 - FieldMDReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMDReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldMDReqRejReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMDReqRejReason.offset - 1 - FieldMDReqRejReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMDReqRejReason.offset] == 1 ) return tagPtr;
   }
   if( fieldNoAltMDSource.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoAltMDSource.offset - 1 - FieldNoAltMDSource::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoAltMDSource.offset] == 1 ) return tagPtr;
     for( auto & g : groupsAltMDSource ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageQuoteCancel::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteReqID.offset - 1 - FieldQuoteReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteID.offset - 1 - FieldQuoteID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteCancelType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteCancelType.offset - 1 - FieldQuoteCancelType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteCancelType.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteResponseLevel.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteResponseLevel.offset - 1 - FieldQuoteResponseLevel::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteResponseLevel.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoQuoteEntries.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoQuoteEntries.offset - 1 - FieldNoQuoteEntries::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoQuoteEntries.offset] == 1 ) return tagPtr;
     for( auto & g : groupsQuoteEntries ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageQuoteStatusRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteStatusReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteStatusReqID.offset - 1 - FieldQuoteStatusReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteStatusReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteID.offset - 1 - FieldQuoteID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageMassQuoteAcknowledgement::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteReqID.offset - 1 - FieldQuoteReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteID.offset - 1 - FieldQuoteID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteStatus.offset - 1 - FieldQuoteStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteRejectReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteRejectReason.offset - 1 - FieldQuoteRejectReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteRejectReason.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteResponseLevel.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteResponseLevel.offset - 1 - FieldQuoteResponseLevel::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteResponseLevel.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteType.offset - 1 - FieldQuoteType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldNoQuoteSets.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoQuoteSets.offset - 1 - FieldNoQuoteSets::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoQuoteSets.offset] == 1 ) return tagPtr;
     for( auto & g : groupsQuoteSets ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageSecurityDefinitionRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityReqID.offset - 1 - FieldSecurityReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityRequestType.offset - 1 - FieldSecurityRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryForm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryForm.offset] == 1 ) return tagPtr;
   }
   if( fieldPctAtRisk.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPctAtRisk.offset - 1 - FieldPctAtRisk::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPctAtRisk.offset] == 1 ) return tagPtr;
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoInstrAttrib.offset] == 1 ) return tagPtr;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldExpirationCycle.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpirationCycle.offset - 1 - FieldExpirationCycle::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpirationCycle.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageSecurityDefinition::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityReqID.offset - 1 - FieldSecurityReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityResponseID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityResponseID.offset - 1 - FieldSecurityResponseID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityResponseID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityResponseType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityResponseType.offset - 1 - FieldSecurityResponseType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityResponseType.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryForm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryForm.offset] == 1 ) return tagPtr;
   }
   if( fieldPctAtRisk.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPctAtRisk.offset - 1 - FieldPctAtRisk::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPctAtRisk.offset] == 1 ) return tagPtr;
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoInstrAttrib.offset] == 1 ) return tagPtr;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldExpirationCycle.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpirationCycle.offset - 1 - FieldExpirationCycle::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpirationCycle.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundLot.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundLot.offset - 1 - FieldRoundLot::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundLot.offset] == 1 ) return tagPtr;
   }
   if( fieldMinTradeVol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinTradeVol.offset - 1 - FieldMinTradeVol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinTradeVol.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageSecurityStatusRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityStatusReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityStatusReqID.offset - 1 - FieldSecurityStatusReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityStatusReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryForm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryForm.offset] == 1 ) return tagPtr;
   }
   if( fieldPctAtRisk.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPctAtRisk.offset - 1 - FieldPctAtRisk::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPctAtRisk.offset] == 1 ) return tagPtr;
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoInstrAttrib.offset] == 1 ) return tagPtr;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageSecurityStatus::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityStatusReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityStatusReqID.offset - 1 - FieldSecurityStatusReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityStatusReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryForm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryForm.offset] == 1 ) return tagPtr;
   }
   if( fieldPctAtRisk.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPctAtRisk.offset - 1 - FieldPctAtRisk::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPctAtRisk.offset] == 1 ) return tagPtr;
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoInstrAttrib.offset] == 1 ) return tagPtr;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldUnsolicitedIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnsolicitedIndicator.offset - 1 - FieldUnsolicitedIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnsolicitedIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityTradingStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityTradingStatus.offset - 1 - FieldSecurityTradingStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityTradingStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldFinancialStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFinancialStatus.offset - 1 - FieldFinancialStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFinancialStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldCorporateAction.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCorporateAction.offset - 1 - FieldCorporateAction::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCorporateAction.offset] == 1 ) return tagPtr;
   }
   if( fieldHaltReasonChar.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldHaltReasonChar.offset - 1 - FieldHaltReasonChar::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldHaltReasonChar.offset] == 1 ) return tagPtr;
   }
   if( fieldInViewOfCommon.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInViewOfCommon.offset - 1 - FieldInViewOfCommon::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInViewOfCommon.offset] == 1 ) return tagPtr;
   }
   if( fieldDueToRelated.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDueToRelated.offset - 1 - FieldDueToRelated::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDueToRelated.offset] == 1 ) return tagPtr;
   }
   if( fieldBuyVolume.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBuyVolume.offset - 1 - FieldBuyVolume::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBuyVolume.offset] == 1 ) return tagPtr;
   }
   if( fieldSellVolume.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSellVolume.offset - 1 - FieldSellVolume::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSellVolume.offset] == 1 ) return tagPtr;
   }
   if( fieldHighPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldHighPx.offset - 1 - FieldHighPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldHighPx.offset] == 1 ) return tagPtr;
   }
   if( fieldLowPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLowPx.offset - 1 - FieldLowPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLowPx.offset] == 1 ) return tagPtr;
   }
   if( fieldLastPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastPx.offset - 1 - FieldLastPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastPx.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldAdjustment.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAdjustment.offset - 1 - FieldAdjustment::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAdjustment.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageTradingSessionStatusRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTradSesReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesReqID.offset - 1 - FieldTradSesReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradSesMethod.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesMethod.offset - 1 - FieldTradSesMethod::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesMethod.offset] == 1 ) return tagPtr;
   }
   if( fieldTradSesMode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesMode.offset - 1 - FieldTradSesMode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesMode.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageTradingSessionStatus::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTradSesReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesReqID.offset - 1 - FieldTradSesReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradSesMethod.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesMethod.offset - 1 - FieldTradSesMethod::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesMethod.offset] == 1 ) return tagPtr;
   }
   if( fieldTradSesMode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesMode.offset - 1 - FieldTradSesMode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesMode.offset] == 1 ) return tagPtr;
   }
   if( fieldUnsolicitedIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnsolicitedIndicator.offset - 1 - FieldUnsolicitedIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnsolicitedIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldTradSesStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesStatus.offset - 1 - FieldTradSesStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldTradSesStatusRejReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesStatusRejReason.offset - 1 - FieldTradSesStatusRejReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesStatusRejReason.offset] == 1 ) return tagPtr;
   }
   if( fieldTradSesStartTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesStartTime.offset - 1 - FieldTradSesStartTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesStartTime.offset] == 1 ) return tagPtr;
   }
   if( fieldTradSesOpenTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesOpenTime.offset - 1 - FieldTradSesOpenTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesOpenTime.offset] == 1 ) return tagPtr;
   }
   if( fieldTradSesPreCloseTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesPreCloseTime.offset - 1 - FieldTradSesPreCloseTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesPreCloseTime.offset] == 1 ) return tagPtr;
   }
   if( fieldTradSesCloseTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesCloseTime.offset - 1 - FieldTradSesCloseTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesCloseTime.offset] == 1 ) return tagPtr;
   }
   if( fieldTradSesEndTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradSesEndTime.offset - 1 - FieldTradSesEndTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradSesEndTime.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalVolumeTraded.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalVolumeTraded.offset - 1 - FieldTotalVolumeTraded::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalVolumeTraded.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageMassQuote::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteReqID.offset - 1 - FieldQuoteReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteID.offset - 1 - FieldQuoteID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteType.offset - 1 - FieldQuoteType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteType.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteResponseLevel.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteResponseLevel.offset - 1 - FieldQuoteResponseLevel::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteResponseLevel.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldDefBidSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDefBidSize.offset - 1 - FieldDefBidSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDefBidSize.offset] == 1 ) return tagPtr;
   }
   if( fieldDefOfferSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDefOfferSize.offset - 1 - FieldDefOfferSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDefOfferSize.offset] == 1 ) return tagPtr;
   }
   if( fieldNoQuoteSets.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoQuoteSets.offset - 1 - FieldNoQuoteSets::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoQuoteSets.offset] == 1 ) return tagPtr;
     for( auto & g : groupsQuoteSets ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageBusinessMessageReject::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldRefSeqNum.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRefSeqNum.offset - 1 - FieldRefSeqNum::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRefSeqNum.offset] == 1 ) return tagPtr;
   }
   if( fieldRefMsgType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRefMsgType.offset - 1 - FieldRefMsgType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRefMsgType.offset] == 1 ) return tagPtr;
   }
   if( fieldBusinessRejectRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBusinessRejectRefID.offset - 1 - FieldBusinessRejectRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBusinessRejectRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldBusinessRejectReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBusinessRejectReason.offset - 1 - FieldBusinessRejectReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBusinessRejectReason.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageBidRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldBidID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidID.offset - 1 - FieldBidID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidID.offset] == 1 ) return tagPtr;
   }
   if( fieldClientBidID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClientBidID.offset - 1 - FieldClientBidID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClientBidID.offset] == 1 ) return tagPtr;
   }
   if( fieldBidRequestTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidRequestTransType.offset - 1 - FieldBidRequestTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidRequestTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldListName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListName.offset - 1 - FieldListName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListName.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNoRelatedSym.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNoRelatedSym.offset - 1 - FieldTotNoRelatedSym::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNoRelatedSym.offset] == 1 ) return tagPtr;
   }
   if( fieldBidType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidType.offset - 1 - FieldBidType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidType.offset] == 1 ) return tagPtr;
   }
   if( fieldNumTickets.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNumTickets.offset - 1 - FieldNumTickets::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNumTickets.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldSideValue1.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSideValue1.offset - 1 - FieldSideValue1::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSideValue1.offset] == 1 ) return tagPtr;
   }
   if( fieldSideValue2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSideValue2.offset - 1 - FieldSideValue2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSideValue2.offset] == 1 ) return tagPtr;
   }
   if( fieldNoBidDescriptors.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoBidDescriptors.offset - 1 - FieldNoBidDescriptors::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoBidDescriptors.offset] == 1 ) return tagPtr;
     for( auto & g : groupsBidDescriptors ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoBidComponents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoBidComponents.offset - 1 - FieldNoBidComponents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoBidComponents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsBidComponents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldLiquidityIndType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLiquidityIndType.offset - 1 - FieldLiquidityIndType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLiquidityIndType.offset] == 1 ) return tagPtr;
   }
   if( fieldWtAverageLiquidity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldWtAverageLiquidity.offset - 1 - FieldWtAverageLiquidity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldWtAverageLiquidity.offset] == 1 ) return tagPtr;
   }
   if( fieldExchangeForPhysical.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExchangeForPhysical.offset - 1 - FieldExchangeForPhysical::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExchangeForPhysical.offset] == 1 ) return tagPtr;
   }
   if( fieldOutMainCntryUIndex.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOutMainCntryUIndex.offset - 1 - FieldOutMainCntryUIndex::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOutMainCntryUIndex.offset] == 1 ) return tagPtr;
   }
   if( fieldCrossPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCrossPercent.offset - 1 - FieldCrossPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCrossPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldProgRptReqs.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProgRptReqs.offset - 1 - FieldProgRptReqs::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProgRptReqs.offset] == 1 ) return tagPtr;
   }
   if( fieldProgPeriodInterval.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProgPeriodInterval.offset - 1 - FieldProgPeriodInterval::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProgPeriodInterval.offset] == 1 ) return tagPtr;
   }
   if( fieldIncTaxInd.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIncTaxInd.offset - 1 - FieldIncTaxInd::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIncTaxInd.offset] == 1 ) return tagPtr;
   }
   if( fieldForexReq.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldForexReq.offset - 1 - FieldForexReq::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldForexReq.offset] == 1 ) return tagPtr;
   }
   if( fieldNumBidders.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNumBidders.offset - 1 - FieldNumBidders::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNumBidders.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldBidTradeType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidTradeType.offset - 1 - FieldBidTradeType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidTradeType.offset] == 1 ) return tagPtr;
   }
   if( fieldBasisPxType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBasisPxType.offset - 1 - FieldBasisPxType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBasisPxType.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeTime.offset - 1 - FieldStrikeTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeTime.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageBidResponse::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldBidID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidID.offset - 1 - FieldBidID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidID.offset] == 1 ) return tagPtr;
   }
   if( fieldClientBidID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClientBidID.offset - 1 - FieldClientBidID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClientBidID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoBidComponents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoBidComponents.offset - 1 - FieldNoBidComponents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoBidComponents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsBidComponents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageListStrikePrice::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldListID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldListID.offset - 1 - FieldListID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldListID.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNoStrikes.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNoStrikes.offset - 1 - FieldTotNoStrikes::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNoStrikes.offset] == 1 ) return tagPtr;
   }
   if( fieldLastFragment.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastFragment.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStrikes.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStrikes.offset - 1 - FieldNoStrikes::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStrikes.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStrikes ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageXMLnonFIX::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageRegistrationInstructions::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldRegistID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistID.offset - 1 - FieldRegistID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistID.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistTransType.offset - 1 - FieldRegistTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistRefID.offset - 1 - FieldRegistRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistAcctType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistAcctType.offset - 1 - FieldRegistAcctType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistAcctType.offset] == 1 ) return tagPtr;
   }
   if( fieldTaxAdvantageType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTaxAdvantageType.offset - 1 - FieldTaxAdvantageType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTaxAdvantageType.offset] == 1 ) return tagPtr;
   }
   if( fieldOwnershipType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOwnershipType.offset - 1 - FieldOwnershipType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOwnershipType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoRegistDtls.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoRegistDtls.offset - 1 - FieldNoRegistDtls::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRegistDtls.offset] == 1 ) return tagPtr;
     for( auto & g : groupsRegistDtls ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoDistribInsts.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoDistribInsts.offset - 1 - FieldNoDistribInsts::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoDistribInsts.offset] == 1 ) return tagPtr;
     for( auto & g : groupsDistribInsts ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageRegistrationInstructionsResponse::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldRegistID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistID.offset - 1 - FieldRegistID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistID.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistTransType.offset - 1 - FieldRegistTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistRefID.offset - 1 - FieldRegistRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistStatus.offset - 1 - FieldRegistStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistRejReasonCode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistRejReasonCode.offset - 1 - FieldRegistRejReasonCode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistRejReasonCode.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistRejReasonText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistRejReasonText.offset - 1 - FieldRegistRejReasonText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistRejReasonText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageOrderMassCancelRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldMassCancelRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMassCancelRequestType.offset - 1 - FieldMassCancelRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMassCancelRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSymbol.offset - 1 - FieldUnderlyingSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSymbolSfx.offset - 1 - FieldUnderlyingSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityID.offset - 1 - FieldUnderlyingSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityIDSource.offset - 1 - FieldUnderlyingSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyingSecurityAltID.offset - 1 - FieldNoUnderlyingSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyingSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldUnderlyingProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingProduct.offset - 1 - FieldUnderlyingProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCFICode.offset - 1 - FieldUnderlyingCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityType.offset - 1 - FieldUnderlyingSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecuritySubType.offset - 1 - FieldUnderlyingSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingMaturityMonthYear.offset - 1 - FieldUnderlyingMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingMaturityDate.offset - 1 - FieldUnderlyingMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingPutOrCall.offset - 1 - FieldUnderlyingPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCouponPaymentDate.offset - 1 - FieldUnderlyingCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingIssueDate.offset - 1 - FieldUnderlyingIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepoCollateralSecurityType.offset - 1 - FieldUnderlyingRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepurchaseTerm.offset - 1 - FieldUnderlyingRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepurchaseRate.offset - 1 - FieldUnderlyingRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingFactor.offset - 1 - FieldUnderlyingFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCreditRating.offset - 1 - FieldUnderlyingCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingInstrRegistry.offset - 1 - FieldUnderlyingInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCountryOfIssue.offset - 1 - FieldUnderlyingCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStateOrProvinceOfIssue.offset - 1 - FieldUnderlyingStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingLocaleOfIssue.offset - 1 - FieldUnderlyingLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRedemptionDate.offset - 1 - FieldUnderlyingRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStrikePrice.offset - 1 - FieldUnderlyingStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStrikeCurrency.offset - 1 - FieldUnderlyingStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingOptAttribute.offset - 1 - FieldUnderlyingOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingContractMultiplier.offset - 1 - FieldUnderlyingContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCouponRate.offset - 1 - FieldUnderlyingCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityExchange.offset - 1 - FieldUnderlyingSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingIssuer.offset - 1 - FieldUnderlyingIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingIssuerLen.offset - 1 - FieldEncodedUnderlyingIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingIssuer.offset - 1 - FieldEncodedUnderlyingIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityDesc.offset - 1 - FieldUnderlyingSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingSecurityDescLen.offset - 1 - FieldEncodedUnderlyingSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingSecurityDesc.offset - 1 - FieldEncodedUnderlyingSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCPProgram.offset - 1 - FieldUnderlyingCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCPRegType.offset - 1 - FieldUnderlyingCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCurrency.offset - 1 - FieldUnderlyingCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingQty.offset - 1 - FieldUnderlyingQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingQty.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingPx.offset - 1 - FieldUnderlyingPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingPx.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingDirtyPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingDirtyPrice.offset - 1 - FieldUnderlyingDirtyPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingDirtyPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingEndPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingEndPrice.offset - 1 - FieldUnderlyingEndPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingEndPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStartValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStartValue.offset - 1 - FieldUnderlyingStartValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStartValue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCurrentValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCurrentValue.offset - 1 - FieldUnderlyingCurrentValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCurrentValue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingEndValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingEndValue.offset - 1 - FieldUnderlyingEndValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingEndValue.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyingStips.offset - 1 - FieldNoUnderlyingStips::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyingStips.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageOrderMassCancelReport::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryOrderID.offset - 1 - FieldSecondaryOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldMassCancelRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMassCancelRequestType.offset - 1 - FieldMassCancelRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMassCancelRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldMassCancelResponse.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMassCancelResponse.offset - 1 - FieldMassCancelResponse::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMassCancelResponse.offset] == 1 ) return tagPtr;
   }
   if( fieldMassCancelRejectReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMassCancelRejectReason.offset - 1 - FieldMassCancelRejectReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMassCancelRejectReason.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalAffectedOrders.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalAffectedOrders.offset - 1 - FieldTotalAffectedOrders::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalAffectedOrders.offset] == 1 ) return tagPtr;
   }
   if( fieldNoAffectedOrders.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoAffectedOrders.offset - 1 - FieldNoAffectedOrders::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoAffectedOrders.offset] == 1 ) return tagPtr;
     for( auto & g : groupsAffectedOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSymbol.offset - 1 - FieldUnderlyingSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSymbolSfx.offset - 1 - FieldUnderlyingSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityID.offset - 1 - FieldUnderlyingSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityIDSource.offset - 1 - FieldUnderlyingSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyingSecurityAltID.offset - 1 - FieldNoUnderlyingSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyingSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldUnderlyingProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingProduct.offset - 1 - FieldUnderlyingProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCFICode.offset - 1 - FieldUnderlyingCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityType.offset - 1 - FieldUnderlyingSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecuritySubType.offset - 1 - FieldUnderlyingSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingMaturityMonthYear.offset - 1 - FieldUnderlyingMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingMaturityDate.offset - 1 - FieldUnderlyingMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingPutOrCall.offset - 1 - FieldUnderlyingPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCouponPaymentDate.offset - 1 - FieldUnderlyingCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingIssueDate.offset - 1 - FieldUnderlyingIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepoCollateralSecurityType.offset - 1 - FieldUnderlyingRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepurchaseTerm.offset - 1 - FieldUnderlyingRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepurchaseRate.offset - 1 - FieldUnderlyingRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingFactor.offset - 1 - FieldUnderlyingFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCreditRating.offset - 1 - FieldUnderlyingCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingInstrRegistry.offset - 1 - FieldUnderlyingInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCountryOfIssue.offset - 1 - FieldUnderlyingCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStateOrProvinceOfIssue.offset - 1 - FieldUnderlyingStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingLocaleOfIssue.offset - 1 - FieldUnderlyingLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRedemptionDate.offset - 1 - FieldUnderlyingRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStrikePrice.offset - 1 - FieldUnderlyingStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStrikeCurrency.offset - 1 - FieldUnderlyingStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingOptAttribute.offset - 1 - FieldUnderlyingOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingContractMultiplier.offset - 1 - FieldUnderlyingContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCouponRate.offset - 1 - FieldUnderlyingCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityExchange.offset - 1 - FieldUnderlyingSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingIssuer.offset - 1 - FieldUnderlyingIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingIssuerLen.offset - 1 - FieldEncodedUnderlyingIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingIssuer.offset - 1 - FieldEncodedUnderlyingIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityDesc.offset - 1 - FieldUnderlyingSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingSecurityDescLen.offset - 1 - FieldEncodedUnderlyingSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingSecurityDesc.offset - 1 - FieldEncodedUnderlyingSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCPProgram.offset - 1 - FieldUnderlyingCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCPRegType.offset - 1 - FieldUnderlyingCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCurrency.offset - 1 - FieldUnderlyingCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingQty.offset - 1 - FieldUnderlyingQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingQty.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingPx.offset - 1 - FieldUnderlyingPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingPx.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingDirtyPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingDirtyPrice.offset - 1 - FieldUnderlyingDirtyPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingDirtyPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingEndPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingEndPrice.offset - 1 - FieldUnderlyingEndPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingEndPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStartValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStartValue.offset - 1 - FieldUnderlyingStartValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStartValue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCurrentValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCurrentValue.offset - 1 - FieldUnderlyingCurrentValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCurrentValue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingEndValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingEndValue.offset - 1 - FieldUnderlyingEndValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingEndValue.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyingStips.offset - 1 - FieldNoUnderlyingStips::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyingStips.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageNewOrderCross::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCrossID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCrossID.offset - 1 - FieldCrossID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCrossID.offset] == 1 ) return tagPtr;
   }
   if( fieldCrossType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCrossType.offset - 1 - FieldCrossType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCrossType.offset] == 1 ) return tagPtr;
   }
   if( fieldCrossPrioritization.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCrossPrioritization.offset - 1 - FieldCrossPrioritization::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCrossPrioritization.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSides.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSides.offset - 1 - FieldNoSides::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSides.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSides ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldHandlInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldHandlInst.offset] == 1 ) return tagPtr;
   }
   if( fieldExecInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecInst.offset] == 1 ) return tagPtr;
   }
   if( fieldMinQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinQty.offset - 1 - FieldMinQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinQty.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxFloor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxFloor.offset - 1 - FieldMaxFloor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxFloor.offset] == 1 ) return tagPtr;
   }
   if( fieldExDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExDestination.offset - 1 - FieldExDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTradingSessions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTradingSessions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProcessCode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProcessCode.offset - 1 - FieldProcessCode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProcessCode.offset] == 1 ) return tagPtr;
   }
   if( fieldPrevClosePx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrevClosePx.offset - 1 - FieldPrevClosePx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrevClosePx.offset] == 1 ) return tagPtr;
   }
   if( fieldLocateReqd.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocateReqd.offset - 1 - FieldLocateReqd::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocateReqd.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldOrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStopPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStopPx.offset - 1 - FieldStopPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStopPx.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldComplianceID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldComplianceID.offset - 1 - FieldComplianceID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldComplianceID.offset] == 1 ) return tagPtr;
   }
   if( fieldIOIID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIOIID.offset - 1 - FieldIOIID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIOIID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteID.offset - 1 - FieldQuoteID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteID.offset] == 1 ) return tagPtr;
   }
   if( fieldTimeInForce.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTimeInForce.offset] == 1 ) return tagPtr;
   }
   if( fieldEffectiveTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEffectiveTime.offset - 1 - FieldEffectiveTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEffectiveTime.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireDate.offset - 1 - FieldExpireDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireDate.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireTime.offset - 1 - FieldExpireTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireTime.offset] == 1 ) return tagPtr;
   }
   if( fieldGTBookingInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldGTBookingInst.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxShow.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxShow.offset - 1 - FieldMaxShow::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxShow.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetValue.offset - 1 - FieldPegOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldPegMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldPegScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegScope.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionInst.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetValue.offset - 1 - FieldDiscretionOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionScope.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategy.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategy.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategyParameters.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategyParameters.offset - 1 - FieldTargetStrategyParameters::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategyParameters.offset] == 1 ) return tagPtr;
   }
   if( fieldParticipationRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldParticipationRate.offset - 1 - FieldParticipationRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldParticipationRate.offset] == 1 ) return tagPtr;
   }
   if( fieldCancellationRights.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCancellationRights.offset] == 1 ) return tagPtr;
   }
   if( fieldMoneyLaunderingStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMoneyLaunderingStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistID.offset - 1 - FieldRegistID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistID.offset] == 1 ) return tagPtr;
   }
   if( fieldDesignation.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDesignation.offset - 1 - FieldDesignation::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDesignation.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageCrossOrderCancelReplaceRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldCrossID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCrossID.offset - 1 - FieldCrossID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCrossID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigCrossID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigCrossID.offset - 1 - FieldOrigCrossID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigCrossID.offset] == 1 ) return tagPtr;
   }
   if( fieldCrossType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCrossType.offset - 1 - FieldCrossType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCrossType.offset] == 1 ) return tagPtr;
   }
   if( fieldCrossPrioritization.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCrossPrioritization.offset - 1 - FieldCrossPrioritization::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCrossPrioritization.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSides.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSides.offset - 1 - FieldNoSides::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSides.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSides ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldHandlInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldHandlInst.offset] == 1 ) return tagPtr;
   }
   if( fieldExecInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecInst.offset] == 1 ) return tagPtr;
   }
   if( fieldMinQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinQty.offset - 1 - FieldMinQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinQty.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxFloor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxFloor.offset - 1 - FieldMaxFloor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxFloor.offset] == 1 ) return tagPtr;
   }
   if( fieldExDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExDestination.offset - 1 - FieldExDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTradingSessions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTradingSessions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProcessCode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProcessCode.offset - 1 - FieldProcessCode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProcessCode.offset] == 1 ) return tagPtr;
   }
   if( fieldPrevClosePx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrevClosePx.offset - 1 - FieldPrevClosePx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrevClosePx.offset] == 1 ) return tagPtr;
   }
   if( fieldLocateReqd.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocateReqd.offset - 1 - FieldLocateReqd::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocateReqd.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldOrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStopPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStopPx.offset - 1 - FieldStopPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStopPx.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldComplianceID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldComplianceID.offset - 1 - FieldComplianceID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldComplianceID.offset] == 1 ) return tagPtr;
   }
   if( fieldIOIID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIOIID.offset - 1 - FieldIOIID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIOIID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteID.offset - 1 - FieldQuoteID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteID.offset] == 1 ) return tagPtr;
   }
   if( fieldTimeInForce.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTimeInForce.offset] == 1 ) return tagPtr;
   }
   if( fieldEffectiveTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEffectiveTime.offset - 1 - FieldEffectiveTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEffectiveTime.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireDate.offset - 1 - FieldExpireDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireDate.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireTime.offset - 1 - FieldExpireTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireTime.offset] == 1 ) return tagPtr;
   }
   if( fieldGTBookingInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldGTBookingInst.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxShow.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxShow.offset - 1 - FieldMaxShow::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxShow.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetValue.offset - 1 - FieldPegOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldPegMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldPegScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegScope.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionInst.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetValue.offset - 1 - FieldDiscretionOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionScope.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategy.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategy.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategyParameters.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategyParameters.offset - 1 - FieldTargetStrategyParameters::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategyParameters.offset] == 1 ) return tagPtr;
   }
   if( fieldParticipationRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldParticipationRate.offset - 1 - FieldParticipationRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldParticipationRate.offset] == 1 ) return tagPtr;
   }
   if( fieldCancellationRights.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCancellationRights.offset] == 1 ) return tagPtr;
   }
   if( fieldMoneyLaunderingStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMoneyLaunderingStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistID.offset - 1 - FieldRegistID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistID.offset] == 1 ) return tagPtr;
   }
   if( fieldDesignation.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDesignation.offset - 1 - FieldDesignation::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDesignation.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageCrossOrderCancelRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldCrossID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCrossID.offset - 1 - FieldCrossID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCrossID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigCrossID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigCrossID.offset - 1 - FieldOrigCrossID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigCrossID.offset] == 1 ) return tagPtr;
   }
   if( fieldCrossType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCrossType.offset - 1 - FieldCrossType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCrossType.offset] == 1 ) return tagPtr;
   }
   if( fieldCrossPrioritization.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCrossPrioritization.offset - 1 - FieldCrossPrioritization::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCrossPrioritization.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSides.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSides.offset - 1 - FieldNoSides::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSides.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSides ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageSecurityTypeRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityReqID.offset - 1 - FieldSecurityReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageSecurityTypes::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityReqID.offset - 1 - FieldSecurityReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityResponseID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityResponseID.offset - 1 - FieldSecurityResponseID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityResponseID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityResponseType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityResponseType.offset - 1 - FieldSecurityResponseType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityResponseType.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNoSecurityTypes.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNoSecurityTypes.offset - 1 - FieldTotNoSecurityTypes::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNoSecurityTypes.offset] == 1 ) return tagPtr;
   }
   if( fieldLastFragment.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastFragment.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityTypes.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityTypes.offset - 1 - FieldNoSecurityTypes::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityTypes.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityTypes ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageSecurityListRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityReqID.offset - 1 - FieldSecurityReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityListRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityListRequestType.offset - 1 - FieldSecurityListRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityListRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryForm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryForm.offset] == 1 ) return tagPtr;
   }
   if( fieldPctAtRisk.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPctAtRisk.offset - 1 - FieldPctAtRisk::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPctAtRisk.offset] == 1 ) return tagPtr;
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoInstrAttrib.offset] == 1 ) return tagPtr;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageSecurityList::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityReqID.offset - 1 - FieldSecurityReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityResponseID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityResponseID.offset - 1 - FieldSecurityResponseID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityResponseID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityRequestResult.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityRequestResult.offset - 1 - FieldSecurityRequestResult::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityRequestResult.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNoRelatedSym.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNoRelatedSym.offset - 1 - FieldTotNoRelatedSym::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNoRelatedSym.offset] == 1 ) return tagPtr;
   }
   if( fieldLastFragment.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastFragment.offset] == 1 ) return tagPtr;
   }
   if( fieldNoRelatedSym.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRelatedSym.offset] == 1 ) return tagPtr;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageDerivativeSecurityListRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityReqID.offset - 1 - FieldSecurityReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityListRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityListRequestType.offset - 1 - FieldSecurityListRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityListRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSymbol.offset - 1 - FieldUnderlyingSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSymbolSfx.offset - 1 - FieldUnderlyingSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityID.offset - 1 - FieldUnderlyingSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityIDSource.offset - 1 - FieldUnderlyingSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyingSecurityAltID.offset - 1 - FieldNoUnderlyingSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyingSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldUnderlyingProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingProduct.offset - 1 - FieldUnderlyingProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCFICode.offset - 1 - FieldUnderlyingCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityType.offset - 1 - FieldUnderlyingSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecuritySubType.offset - 1 - FieldUnderlyingSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingMaturityMonthYear.offset - 1 - FieldUnderlyingMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingMaturityDate.offset - 1 - FieldUnderlyingMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingPutOrCall.offset - 1 - FieldUnderlyingPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCouponPaymentDate.offset - 1 - FieldUnderlyingCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingIssueDate.offset - 1 - FieldUnderlyingIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepoCollateralSecurityType.offset - 1 - FieldUnderlyingRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepurchaseTerm.offset - 1 - FieldUnderlyingRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepurchaseRate.offset - 1 - FieldUnderlyingRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingFactor.offset - 1 - FieldUnderlyingFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCreditRating.offset - 1 - FieldUnderlyingCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingInstrRegistry.offset - 1 - FieldUnderlyingInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCountryOfIssue.offset - 1 - FieldUnderlyingCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStateOrProvinceOfIssue.offset - 1 - FieldUnderlyingStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingLocaleOfIssue.offset - 1 - FieldUnderlyingLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRedemptionDate.offset - 1 - FieldUnderlyingRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStrikePrice.offset - 1 - FieldUnderlyingStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStrikeCurrency.offset - 1 - FieldUnderlyingStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingOptAttribute.offset - 1 - FieldUnderlyingOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingContractMultiplier.offset - 1 - FieldUnderlyingContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCouponRate.offset - 1 - FieldUnderlyingCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityExchange.offset - 1 - FieldUnderlyingSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingIssuer.offset - 1 - FieldUnderlyingIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingIssuerLen.offset - 1 - FieldEncodedUnderlyingIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingIssuer.offset - 1 - FieldEncodedUnderlyingIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityDesc.offset - 1 - FieldUnderlyingSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingSecurityDescLen.offset - 1 - FieldEncodedUnderlyingSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingSecurityDesc.offset - 1 - FieldEncodedUnderlyingSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCPProgram.offset - 1 - FieldUnderlyingCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCPRegType.offset - 1 - FieldUnderlyingCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCurrency.offset - 1 - FieldUnderlyingCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingQty.offset - 1 - FieldUnderlyingQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingQty.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingPx.offset - 1 - FieldUnderlyingPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingPx.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingDirtyPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingDirtyPrice.offset - 1 - FieldUnderlyingDirtyPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingDirtyPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingEndPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingEndPrice.offset - 1 - FieldUnderlyingEndPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingEndPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStartValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStartValue.offset - 1 - FieldUnderlyingStartValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStartValue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCurrentValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCurrentValue.offset - 1 - FieldUnderlyingCurrentValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCurrentValue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingEndValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingEndValue.offset - 1 - FieldUnderlyingEndValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingEndValue.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyingStips.offset - 1 - FieldNoUnderlyingStips::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyingStips.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageDerivativeSecurityList::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityReqID.offset - 1 - FieldSecurityReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityResponseID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityResponseID.offset - 1 - FieldSecurityResponseID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityResponseID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityRequestResult.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityRequestResult.offset - 1 - FieldSecurityRequestResult::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityRequestResult.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSymbol.offset - 1 - FieldUnderlyingSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSymbolSfx.offset - 1 - FieldUnderlyingSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityID.offset - 1 - FieldUnderlyingSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityIDSource.offset - 1 - FieldUnderlyingSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyingSecurityAltID.offset - 1 - FieldNoUnderlyingSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyingSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldUnderlyingProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingProduct.offset - 1 - FieldUnderlyingProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCFICode.offset - 1 - FieldUnderlyingCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityType.offset - 1 - FieldUnderlyingSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecuritySubType.offset - 1 - FieldUnderlyingSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingMaturityMonthYear.offset - 1 - FieldUnderlyingMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingMaturityDate.offset - 1 - FieldUnderlyingMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingPutOrCall.offset - 1 - FieldUnderlyingPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCouponPaymentDate.offset - 1 - FieldUnderlyingCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingIssueDate.offset - 1 - FieldUnderlyingIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepoCollateralSecurityType.offset - 1 - FieldUnderlyingRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepurchaseTerm.offset - 1 - FieldUnderlyingRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepurchaseRate.offset - 1 - FieldUnderlyingRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingFactor.offset - 1 - FieldUnderlyingFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCreditRating.offset - 1 - FieldUnderlyingCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingInstrRegistry.offset - 1 - FieldUnderlyingInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCountryOfIssue.offset - 1 - FieldUnderlyingCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStateOrProvinceOfIssue.offset - 1 - FieldUnderlyingStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingLocaleOfIssue.offset - 1 - FieldUnderlyingLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRedemptionDate.offset - 1 - FieldUnderlyingRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStrikePrice.offset - 1 - FieldUnderlyingStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStrikeCurrency.offset - 1 - FieldUnderlyingStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingOptAttribute.offset - 1 - FieldUnderlyingOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingContractMultiplier.offset - 1 - FieldUnderlyingContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCouponRate.offset - 1 - FieldUnderlyingCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityExchange.offset - 1 - FieldUnderlyingSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingIssuer.offset - 1 - FieldUnderlyingIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingIssuerLen.offset - 1 - FieldEncodedUnderlyingIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingIssuer.offset - 1 - FieldEncodedUnderlyingIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityDesc.offset - 1 - FieldUnderlyingSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingSecurityDescLen.offset - 1 - FieldEncodedUnderlyingSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingSecurityDesc.offset - 1 - FieldEncodedUnderlyingSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCPProgram.offset - 1 - FieldUnderlyingCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCPRegType.offset - 1 - FieldUnderlyingCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCurrency.offset - 1 - FieldUnderlyingCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingQty.offset - 1 - FieldUnderlyingQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingQty.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingPx.offset - 1 - FieldUnderlyingPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingPx.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingDirtyPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingDirtyPrice.offset - 1 - FieldUnderlyingDirtyPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingDirtyPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingEndPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingEndPrice.offset - 1 - FieldUnderlyingEndPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingEndPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStartValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStartValue.offset - 1 - FieldUnderlyingStartValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStartValue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCurrentValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCurrentValue.offset - 1 - FieldUnderlyingCurrentValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCurrentValue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingEndValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingEndValue.offset - 1 - FieldUnderlyingEndValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingEndValue.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyingStips.offset - 1 - FieldNoUnderlyingStips::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyingStips.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTotNoRelatedSym.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNoRelatedSym.offset - 1 - FieldTotNoRelatedSym::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNoRelatedSym.offset] == 1 ) return tagPtr;
   }
   if( fieldLastFragment.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastFragment.offset] == 1 ) return tagPtr;
   }
   if( fieldNoRelatedSym.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRelatedSym.offset] == 1 ) return tagPtr;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageNewOrderMultileg::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdLinkID.offset - 1 - FieldClOrdLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradeOriginationDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeOriginationDate.offset - 1 - FieldTradeOriginationDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeOriginationDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldDayBookingInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDayBookingInst.offset - 1 - FieldDayBookingInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDayBookingInst.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingUnit.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingUnit.offset - 1 - FieldBookingUnit::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingUnit.offset] == 1 ) return tagPtr;
   }
   if( fieldPreallocMethod.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPreallocMethod.offset - 1 - FieldPreallocMethod::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPreallocMethod.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocID.offset - 1 - FieldAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoAllocs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoAllocs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldCashMargin.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashMargin.offset - 1 - FieldCashMargin::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashMargin.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingFeeIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingFeeIndicator.offset - 1 - FieldClearingFeeIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingFeeIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldHandlInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldHandlInst.offset] == 1 ) return tagPtr;
   }
   if( fieldExecInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecInst.offset] == 1 ) return tagPtr;
   }
   if( fieldMinQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinQty.offset - 1 - FieldMinQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinQty.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxFloor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxFloor.offset - 1 - FieldMaxFloor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxFloor.offset] == 1 ) return tagPtr;
   }
   if( fieldExDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExDestination.offset - 1 - FieldExDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTradingSessions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTradingSessions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProcessCode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProcessCode.offset - 1 - FieldProcessCode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProcessCode.offset] == 1 ) return tagPtr;
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPrevClosePx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrevClosePx.offset - 1 - FieldPrevClosePx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrevClosePx.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldLocateReqd.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocateReqd.offset - 1 - FieldLocateReqd::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocateReqd.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOrderQty.offset - 1 - FieldCashOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderPercent.offset - 1 - FieldOrderPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingModulus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingModulus.offset - 1 - FieldRoundingModulus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingModulus.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStopPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStopPx.offset - 1 - FieldStopPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStopPx.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldComplianceID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldComplianceID.offset - 1 - FieldComplianceID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldComplianceID.offset] == 1 ) return tagPtr;
   }
   if( fieldSolicitedFlag.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSolicitedFlag.offset - 1 - FieldSolicitedFlag::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSolicitedFlag.offset] == 1 ) return tagPtr;
   }
   if( fieldIOIID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIOIID.offset - 1 - FieldIOIID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIOIID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteID.offset - 1 - FieldQuoteID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteID.offset] == 1 ) return tagPtr;
   }
   if( fieldTimeInForce.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTimeInForce.offset] == 1 ) return tagPtr;
   }
   if( fieldEffectiveTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEffectiveTime.offset - 1 - FieldEffectiveTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEffectiveTime.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireDate.offset - 1 - FieldExpireDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireDate.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireTime.offset - 1 - FieldExpireTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireTime.offset] == 1 ) return tagPtr;
   }
   if( fieldGTBookingInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldGTBookingInst.offset] == 1 ) return tagPtr;
   }
   if( fieldCommission.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommission.offset - 1 - FieldCommission::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommission.offset] == 1 ) return tagPtr;
   }
   if( fieldCommType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommType.offset] == 1 ) return tagPtr;
   }
   if( fieldCommCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommCurrency.offset - 1 - FieldCommCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldFundRenewWaiv.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFundRenewWaiv.offset - 1 - FieldFundRenewWaiv::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFundRenewWaiv.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderRestrictions.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderRestrictions.offset - 1 - FieldOrderRestrictions::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderRestrictions.offset] == 1 ) return tagPtr;
   }
   if( fieldCustOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCustOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldForexReq.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldForexReq.offset - 1 - FieldForexReq::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldForexReq.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrency.offset - 1 - FieldSettlCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingType.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldPositionEffect.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPositionEffect.offset] == 1 ) return tagPtr;
   }
   if( fieldCoveredOrUncovered.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCoveredOrUncovered.offset - 1 - FieldCoveredOrUncovered::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCoveredOrUncovered.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxShow.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxShow.offset - 1 - FieldMaxShow::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxShow.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetValue.offset - 1 - FieldPegOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldPegMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldPegScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegScope.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionInst.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetValue.offset - 1 - FieldDiscretionOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionScope.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategy.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategy.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategyParameters.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategyParameters.offset - 1 - FieldTargetStrategyParameters::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategyParameters.offset] == 1 ) return tagPtr;
   }
   if( fieldParticipationRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldParticipationRate.offset - 1 - FieldParticipationRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldParticipationRate.offset] == 1 ) return tagPtr;
   }
   if( fieldCancellationRights.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCancellationRights.offset] == 1 ) return tagPtr;
   }
   if( fieldMoneyLaunderingStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMoneyLaunderingStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistID.offset - 1 - FieldRegistID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistID.offset] == 1 ) return tagPtr;
   }
   if( fieldDesignation.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDesignation.offset - 1 - FieldDesignation::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDesignation.offset] == 1 ) return tagPtr;
   }
   if( fieldMultiLegRptTypeReq.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMultiLegRptTypeReq.offset - 1 - FieldMultiLegRptTypeReq::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMultiLegRptTypeReq.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageMultilegOrderCancelReplace::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigClOrdID.offset - 1 - FieldOrigClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdLinkID.offset - 1 - FieldClOrdLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigOrdModTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigOrdModTime.offset - 1 - FieldOrigOrdModTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigOrdModTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradeOriginationDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeOriginationDate.offset - 1 - FieldTradeOriginationDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeOriginationDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldDayBookingInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDayBookingInst.offset - 1 - FieldDayBookingInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDayBookingInst.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingUnit.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingUnit.offset - 1 - FieldBookingUnit::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingUnit.offset] == 1 ) return tagPtr;
   }
   if( fieldPreallocMethod.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPreallocMethod.offset - 1 - FieldPreallocMethod::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPreallocMethod.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocID.offset - 1 - FieldAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoAllocs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoAllocs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldCashMargin.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashMargin.offset - 1 - FieldCashMargin::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashMargin.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingFeeIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingFeeIndicator.offset - 1 - FieldClearingFeeIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingFeeIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldHandlInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldHandlInst.offset] == 1 ) return tagPtr;
   }
   if( fieldExecInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecInst.offset] == 1 ) return tagPtr;
   }
   if( fieldMinQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinQty.offset - 1 - FieldMinQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinQty.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxFloor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxFloor.offset - 1 - FieldMaxFloor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxFloor.offset] == 1 ) return tagPtr;
   }
   if( fieldExDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExDestination.offset - 1 - FieldExDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTradingSessions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTradingSessions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProcessCode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProcessCode.offset - 1 - FieldProcessCode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProcessCode.offset] == 1 ) return tagPtr;
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPrevClosePx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrevClosePx.offset - 1 - FieldPrevClosePx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrevClosePx.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldLocateReqd.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocateReqd.offset - 1 - FieldLocateReqd::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocateReqd.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOrderQty.offset - 1 - FieldCashOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderPercent.offset - 1 - FieldOrderPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingModulus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingModulus.offset - 1 - FieldRoundingModulus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingModulus.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStopPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStopPx.offset - 1 - FieldStopPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStopPx.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldComplianceID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldComplianceID.offset - 1 - FieldComplianceID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldComplianceID.offset] == 1 ) return tagPtr;
   }
   if( fieldSolicitedFlag.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSolicitedFlag.offset - 1 - FieldSolicitedFlag::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSolicitedFlag.offset] == 1 ) return tagPtr;
   }
   if( fieldIOIID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIOIID.offset - 1 - FieldIOIID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIOIID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteID.offset - 1 - FieldQuoteID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteID.offset] == 1 ) return tagPtr;
   }
   if( fieldTimeInForce.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTimeInForce.offset] == 1 ) return tagPtr;
   }
   if( fieldEffectiveTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEffectiveTime.offset - 1 - FieldEffectiveTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEffectiveTime.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireDate.offset - 1 - FieldExpireDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireDate.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireTime.offset - 1 - FieldExpireTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireTime.offset] == 1 ) return tagPtr;
   }
   if( fieldGTBookingInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldGTBookingInst.offset] == 1 ) return tagPtr;
   }
   if( fieldCommission.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommission.offset - 1 - FieldCommission::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommission.offset] == 1 ) return tagPtr;
   }
   if( fieldCommType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommType.offset] == 1 ) return tagPtr;
   }
   if( fieldCommCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommCurrency.offset - 1 - FieldCommCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldFundRenewWaiv.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFundRenewWaiv.offset - 1 - FieldFundRenewWaiv::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFundRenewWaiv.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderRestrictions.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderRestrictions.offset - 1 - FieldOrderRestrictions::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderRestrictions.offset] == 1 ) return tagPtr;
   }
   if( fieldCustOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCustOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldForexReq.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldForexReq.offset - 1 - FieldForexReq::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldForexReq.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrency.offset - 1 - FieldSettlCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingType.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldPositionEffect.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPositionEffect.offset] == 1 ) return tagPtr;
   }
   if( fieldCoveredOrUncovered.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCoveredOrUncovered.offset - 1 - FieldCoveredOrUncovered::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCoveredOrUncovered.offset] == 1 ) return tagPtr;
   }
   if( fieldMaxShow.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaxShow.offset - 1 - FieldMaxShow::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaxShow.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetValue.offset - 1 - FieldPegOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldPegMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldPegRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldPegScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPegScope.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionInst.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetValue.offset - 1 - FieldDiscretionOffsetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionMoveType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionMoveType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionOffsetType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionOffsetType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionLimitType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionLimitType.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionRoundDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionRoundDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldDiscretionScope.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDiscretionScope.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategy.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategy.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetStrategyParameters.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetStrategyParameters.offset - 1 - FieldTargetStrategyParameters::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetStrategyParameters.offset] == 1 ) return tagPtr;
   }
   if( fieldParticipationRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldParticipationRate.offset - 1 - FieldParticipationRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldParticipationRate.offset] == 1 ) return tagPtr;
   }
   if( fieldCancellationRights.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCancellationRights.offset] == 1 ) return tagPtr;
   }
   if( fieldMoneyLaunderingStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMoneyLaunderingStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldRegistID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistID.offset - 1 - FieldRegistID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistID.offset] == 1 ) return tagPtr;
   }
   if( fieldDesignation.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDesignation.offset - 1 - FieldDesignation::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDesignation.offset] == 1 ) return tagPtr;
   }
   if( fieldMultiLegRptTypeReq.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMultiLegRptTypeReq.offset - 1 - FieldMultiLegRptTypeReq::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMultiLegRptTypeReq.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageTradeCaptureReportRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTradeRequestID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeRequestID.offset - 1 - FieldTradeRequestID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeRequestID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeRequestType.offset - 1 - FieldTradeRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeReportID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeReportID.offset - 1 - FieldTradeReportID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeReportID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryTradeReportID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryTradeReportID.offset - 1 - FieldSecondaryTradeReportID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryTradeReportID.offset] == 1 ) return tagPtr;
   }
   if( fieldExecID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecID.offset - 1 - FieldExecID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecID.offset] == 1 ) return tagPtr;
   }
   if( fieldExecType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecType.offset - 1 - FieldExecType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecType.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldMatchStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMatchStatus.offset - 1 - FieldMatchStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMatchStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldTrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTrdType.offset - 1 - FieldTrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldTrdSubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTrdSubType.offset - 1 - FieldTrdSubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTrdSubType.offset] == 1 ) return tagPtr;
   }
   if( fieldTransferReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransferReason.offset - 1 - FieldTransferReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransferReason.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryTrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryTrdType.offset - 1 - FieldSecondaryTrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryTrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeLinkID.offset - 1 - FieldTradeLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldTrdMatchID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTrdMatchID.offset - 1 - FieldTrdMatchID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTrdMatchID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryForm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryForm.offset] == 1 ) return tagPtr;
   }
   if( fieldPctAtRisk.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPctAtRisk.offset - 1 - FieldPctAtRisk::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPctAtRisk.offset] == 1 ) return tagPtr;
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoInstrAttrib.offset] == 1 ) return tagPtr;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoDates.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoDates.offset - 1 - FieldNoDates::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoDates.offset] == 1 ) return tagPtr;
     for( auto & g : groupsDates ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldClearingBusinessDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingBusinessDate.offset - 1 - FieldClearingBusinessDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingBusinessDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldTimeBracket.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTimeBracket.offset - 1 - FieldTimeBracket::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTimeBracket.offset] == 1 ) return tagPtr;
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldMultiLegReportingType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMultiLegReportingType.offset - 1 - FieldMultiLegReportingType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMultiLegReportingType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeInputSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeInputSource.offset - 1 - FieldTradeInputSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeInputSource.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeInputDevice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeInputDevice.offset - 1 - FieldTradeInputDevice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeInputDevice.offset] == 1 ) return tagPtr;
   }
   if( fieldResponseTransportType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseTransportType.offset] == 1 ) return tagPtr;
   }
   if( fieldResponseDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseDestination.offset - 1 - FieldResponseDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageTradeCaptureReport::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTradeReportID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeReportID.offset - 1 - FieldTradeReportID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeReportID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeReportTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeReportTransType.offset - 1 - FieldTradeReportTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeReportTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeReportType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeReportType.offset - 1 - FieldTradeReportType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeReportType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeRequestID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeRequestID.offset - 1 - FieldTradeRequestID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeRequestID.offset] == 1 ) return tagPtr;
   }
   if( fieldTrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTrdType.offset - 1 - FieldTrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldTrdSubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTrdSubType.offset - 1 - FieldTrdSubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTrdSubType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryTrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryTrdType.offset - 1 - FieldSecondaryTrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryTrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldTransferReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransferReason.offset - 1 - FieldTransferReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransferReason.offset] == 1 ) return tagPtr;
   }
   if( fieldExecType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecType.offset - 1 - FieldExecType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecType.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNumTradeReports.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNumTradeReports.offset - 1 - FieldTotNumTradeReports::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNumTradeReports.offset] == 1 ) return tagPtr;
   }
   if( fieldLastRptRequested.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastRptRequested.offset - 1 - FieldLastRptRequested::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastRptRequested.offset] == 1 ) return tagPtr;
   }
   if( fieldUnsolicitedIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnsolicitedIndicator.offset - 1 - FieldUnsolicitedIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnsolicitedIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeReportRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeReportRefID.offset - 1 - FieldTradeReportRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeReportRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryTradeReportRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryTradeReportRefID.offset - 1 - FieldSecondaryTradeReportRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryTradeReportRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryTradeReportID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryTradeReportID.offset - 1 - FieldSecondaryTradeReportID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryTradeReportID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeLinkID.offset - 1 - FieldTradeLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldTrdMatchID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTrdMatchID.offset - 1 - FieldTrdMatchID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTrdMatchID.offset] == 1 ) return tagPtr;
   }
   if( fieldExecID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecID.offset - 1 - FieldExecID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdStatus.offset - 1 - FieldOrdStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryExecID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryExecID.offset - 1 - FieldSecondaryExecID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryExecID.offset] == 1 ) return tagPtr;
   }
   if( fieldExecRestatementReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecRestatementReason.offset - 1 - FieldExecRestatementReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecRestatementReason.offset] == 1 ) return tagPtr;
   }
   if( fieldPreviouslyReported.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPreviouslyReported.offset - 1 - FieldPreviouslyReported::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPreviouslyReported.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOrderQty.offset - 1 - FieldCashOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderPercent.offset - 1 - FieldOrderPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingModulus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingModulus.offset - 1 - FieldRoundingModulus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingModulus.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldUnderlyingTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingTradingSessionID.offset - 1 - FieldUnderlyingTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingTradingSessionSubID.offset - 1 - FieldUnderlyingTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldLastQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastQty.offset - 1 - FieldLastQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastQty.offset] == 1 ) return tagPtr;
   }
   if( fieldLastPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastPx.offset - 1 - FieldLastPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastPx.offset] == 1 ) return tagPtr;
   }
   if( fieldLastParPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastParPx.offset - 1 - FieldLastParPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastParPx.offset] == 1 ) return tagPtr;
   }
   if( fieldLastSpotRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastSpotRate.offset - 1 - FieldLastSpotRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastSpotRate.offset] == 1 ) return tagPtr;
   }
   if( fieldLastForwardPoints.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastForwardPoints.offset - 1 - FieldLastForwardPoints::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastForwardPoints.offset] == 1 ) return tagPtr;
   }
   if( fieldLastMkt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastMkt.offset - 1 - FieldLastMkt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastMkt.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingBusinessDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingBusinessDate.offset - 1 - FieldClearingBusinessDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingBusinessDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgPx.offset - 1 - FieldAvgPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgPx.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgPxIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgPxIndicator.offset - 1 - FieldAvgPxIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgPxIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPosAmt.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPosAmt.offset - 1 - FieldNoPosAmt::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPosAmt.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPosAmt ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldMultiLegReportingType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMultiLegReportingType.offset - 1 - FieldMultiLegReportingType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMultiLegReportingType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeLegRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeLegRefID.offset - 1 - FieldTradeLegRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeLegRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrdRegTimestamps.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldMatchStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMatchStatus.offset - 1 - FieldMatchStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMatchStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldMatchType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMatchType.offset - 1 - FieldMatchType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMatchType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSides.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSides.offset - 1 - FieldNoSides::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSides.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSides ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldCopyMsgIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCopyMsgIndicator.offset - 1 - FieldCopyMsgIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCopyMsgIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldPublishTrdIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPublishTrdIndicator.offset - 1 - FieldPublishTrdIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPublishTrdIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldShortSaleReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldShortSaleReason.offset - 1 - FieldShortSaleReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldShortSaleReason.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageOrderMassStatusRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldMassStatusReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMassStatusReqID.offset - 1 - FieldMassStatusReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMassStatusReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldMassStatusReqType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMassStatusReqType.offset - 1 - FieldMassStatusReqType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMassStatusReqType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSymbol.offset - 1 - FieldUnderlyingSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSymbolSfx.offset - 1 - FieldUnderlyingSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityID.offset - 1 - FieldUnderlyingSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityIDSource.offset - 1 - FieldUnderlyingSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyingSecurityAltID.offset - 1 - FieldNoUnderlyingSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyingSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldUnderlyingProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingProduct.offset - 1 - FieldUnderlyingProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCFICode.offset - 1 - FieldUnderlyingCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityType.offset - 1 - FieldUnderlyingSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecuritySubType.offset - 1 - FieldUnderlyingSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingMaturityMonthYear.offset - 1 - FieldUnderlyingMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingMaturityDate.offset - 1 - FieldUnderlyingMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingPutOrCall.offset - 1 - FieldUnderlyingPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCouponPaymentDate.offset - 1 - FieldUnderlyingCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingIssueDate.offset - 1 - FieldUnderlyingIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepoCollateralSecurityType.offset - 1 - FieldUnderlyingRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepurchaseTerm.offset - 1 - FieldUnderlyingRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRepurchaseRate.offset - 1 - FieldUnderlyingRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingFactor.offset - 1 - FieldUnderlyingFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCreditRating.offset - 1 - FieldUnderlyingCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingInstrRegistry.offset - 1 - FieldUnderlyingInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCountryOfIssue.offset - 1 - FieldUnderlyingCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStateOrProvinceOfIssue.offset - 1 - FieldUnderlyingStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingLocaleOfIssue.offset - 1 - FieldUnderlyingLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingRedemptionDate.offset - 1 - FieldUnderlyingRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStrikePrice.offset - 1 - FieldUnderlyingStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStrikeCurrency.offset - 1 - FieldUnderlyingStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingOptAttribute.offset - 1 - FieldUnderlyingOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingContractMultiplier.offset - 1 - FieldUnderlyingContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCouponRate.offset - 1 - FieldUnderlyingCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityExchange.offset - 1 - FieldUnderlyingSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingIssuer.offset - 1 - FieldUnderlyingIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingIssuerLen.offset - 1 - FieldEncodedUnderlyingIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingIssuer.offset - 1 - FieldEncodedUnderlyingIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSecurityDesc.offset - 1 - FieldUnderlyingSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingSecurityDescLen.offset - 1 - FieldEncodedUnderlyingSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedUnderlyingSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedUnderlyingSecurityDesc.offset - 1 - FieldEncodedUnderlyingSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedUnderlyingSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCPProgram.offset - 1 - FieldUnderlyingCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCPRegType.offset - 1 - FieldUnderlyingCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCurrency.offset - 1 - FieldUnderlyingCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingQty.offset - 1 - FieldUnderlyingQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingQty.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingPx.offset - 1 - FieldUnderlyingPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingPx.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingDirtyPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingDirtyPrice.offset - 1 - FieldUnderlyingDirtyPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingDirtyPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingEndPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingEndPrice.offset - 1 - FieldUnderlyingEndPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingEndPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingStartValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingStartValue.offset - 1 - FieldUnderlyingStartValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingStartValue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingCurrentValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingCurrentValue.offset - 1 - FieldUnderlyingCurrentValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingCurrentValue.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingEndValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingEndValue.offset - 1 - FieldUnderlyingEndValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingEndValue.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyingStips.offset - 1 - FieldNoUnderlyingStips::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyingStips.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageQuoteRequestReject::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteReqID.offset - 1 - FieldQuoteReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldRFQReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRFQReqID.offset - 1 - FieldRFQReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRFQReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteRequestRejectReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteRequestRejectReason.offset - 1 - FieldQuoteRequestRejectReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteRequestRejectReason.offset] == 1 ) return tagPtr;
   }
   if( fieldNoRelatedSym.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRelatedSym.offset] == 1 ) return tagPtr;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageRFQRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldRFQReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRFQReqID.offset - 1 - FieldRFQReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRFQReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoRelatedSym.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoRelatedSym.offset] == 1 ) return tagPtr;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageQuoteStatusReport::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteStatusReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteStatusReqID.offset - 1 - FieldQuoteStatusReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteStatusReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteReqID.offset - 1 - FieldQuoteReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteID.offset - 1 - FieldQuoteID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteRespID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteRespID.offset - 1 - FieldQuoteRespID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteRespID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteType.offset - 1 - FieldQuoteType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOrderQty.offset - 1 - FieldCashOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderPercent.offset - 1 - FieldOrderPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingModulus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingModulus.offset - 1 - FieldRoundingModulus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingModulus.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate2.offset - 1 - FieldSettlDate2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate2.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty2.offset - 1 - FieldOrderQty2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty2.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoQuoteQualifiers.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoQuoteQualifiers.offset - 1 - FieldNoQuoteQualifiers::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoQuoteQualifiers.offset] == 1 ) return tagPtr;
     for( auto & g : groupsQuoteQualifiers ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldExpireTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireTime.offset - 1 - FieldExpireTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireTime.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBidPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidPx.offset - 1 - FieldBidPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidPx.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferPx.offset - 1 - FieldOfferPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferPx.offset] == 1 ) return tagPtr;
   }
   if( fieldMktBidPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMktBidPx.offset - 1 - FieldMktBidPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMktBidPx.offset] == 1 ) return tagPtr;
   }
   if( fieldMktOfferPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMktOfferPx.offset - 1 - FieldMktOfferPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMktOfferPx.offset] == 1 ) return tagPtr;
   }
   if( fieldMinBidSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinBidSize.offset - 1 - FieldMinBidSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinBidSize.offset] == 1 ) return tagPtr;
   }
   if( fieldBidSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidSize.offset - 1 - FieldBidSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidSize.offset] == 1 ) return tagPtr;
   }
   if( fieldMinOfferSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinOfferSize.offset - 1 - FieldMinOfferSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinOfferSize.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferSize.offset - 1 - FieldOfferSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferSize.offset] == 1 ) return tagPtr;
   }
   if( fieldValidUntilTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldValidUntilTime.offset - 1 - FieldValidUntilTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldValidUntilTime.offset] == 1 ) return tagPtr;
   }
   if( fieldBidSpotRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidSpotRate.offset - 1 - FieldBidSpotRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidSpotRate.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferSpotRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferSpotRate.offset - 1 - FieldOfferSpotRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferSpotRate.offset] == 1 ) return tagPtr;
   }
   if( fieldBidForwardPoints.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidForwardPoints.offset - 1 - FieldBidForwardPoints::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidForwardPoints.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferForwardPoints.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferForwardPoints.offset - 1 - FieldOfferForwardPoints::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferForwardPoints.offset] == 1 ) return tagPtr;
   }
   if( fieldMidPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMidPx.offset - 1 - FieldMidPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMidPx.offset] == 1 ) return tagPtr;
   }
   if( fieldBidYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidYield.offset - 1 - FieldBidYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidYield.offset] == 1 ) return tagPtr;
   }
   if( fieldMidYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMidYield.offset - 1 - FieldMidYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMidYield.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferYield.offset - 1 - FieldOfferYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferYield.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldBidForwardPoints2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidForwardPoints2.offset - 1 - FieldBidForwardPoints2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidForwardPoints2.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferForwardPoints2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferForwardPoints2.offset - 1 - FieldOfferForwardPoints2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferForwardPoints2.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrBidFxRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrBidFxRate.offset - 1 - FieldSettlCurrBidFxRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrBidFxRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrOfferFxRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrOfferFxRate.offset - 1 - FieldSettlCurrOfferFxRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrOfferFxRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrFxRateCalc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrFxRateCalc.offset - 1 - FieldSettlCurrFxRateCalc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrFxRateCalc.offset] == 1 ) return tagPtr;
   }
   if( fieldCommType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommType.offset] == 1 ) return tagPtr;
   }
   if( fieldCommission.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommission.offset - 1 - FieldCommission::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommission.offset] == 1 ) return tagPtr;
   }
   if( fieldCustOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCustOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldExDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExDestination.offset - 1 - FieldExDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteStatus.offset - 1 - FieldQuoteStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageQuoteResponse::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteRespID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteRespID.offset - 1 - FieldQuoteRespID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteRespID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteID.offset - 1 - FieldQuoteID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteRespType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteRespType.offset - 1 - FieldQuoteRespType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteRespType.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldIOIID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIOIID.offset - 1 - FieldIOIID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIOIID.offset] == 1 ) return tagPtr;
   }
   if( fieldQuoteType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuoteType.offset - 1 - FieldQuoteType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuoteType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoQuoteQualifiers.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoQuoteQualifiers.offset - 1 - FieldNoQuoteQualifiers::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoQuoteQualifiers.offset] == 1 ) return tagPtr;
     for( auto & g : groupsQuoteQualifiers ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOrderQty.offset - 1 - FieldCashOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderPercent.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderPercent.offset - 1 - FieldOrderPercent::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderPercent.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingDirection.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingDirection.offset] == 1 ) return tagPtr;
   }
   if( fieldRoundingModulus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRoundingModulus.offset - 1 - FieldRoundingModulus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRoundingModulus.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate2.offset - 1 - FieldSettlDate2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate2.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty2.offset - 1 - FieldOrderQty2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty2.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldBidPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidPx.offset - 1 - FieldBidPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidPx.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferPx.offset - 1 - FieldOfferPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferPx.offset] == 1 ) return tagPtr;
   }
   if( fieldMktBidPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMktBidPx.offset - 1 - FieldMktBidPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMktBidPx.offset] == 1 ) return tagPtr;
   }
   if( fieldMktOfferPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMktOfferPx.offset - 1 - FieldMktOfferPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMktOfferPx.offset] == 1 ) return tagPtr;
   }
   if( fieldMinBidSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinBidSize.offset - 1 - FieldMinBidSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinBidSize.offset] == 1 ) return tagPtr;
   }
   if( fieldBidSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidSize.offset - 1 - FieldBidSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidSize.offset] == 1 ) return tagPtr;
   }
   if( fieldMinOfferSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMinOfferSize.offset - 1 - FieldMinOfferSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMinOfferSize.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferSize.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferSize.offset - 1 - FieldOfferSize::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferSize.offset] == 1 ) return tagPtr;
   }
   if( fieldValidUntilTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldValidUntilTime.offset - 1 - FieldValidUntilTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldValidUntilTime.offset] == 1 ) return tagPtr;
   }
   if( fieldBidSpotRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidSpotRate.offset - 1 - FieldBidSpotRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidSpotRate.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferSpotRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferSpotRate.offset - 1 - FieldOfferSpotRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferSpotRate.offset] == 1 ) return tagPtr;
   }
   if( fieldBidForwardPoints.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidForwardPoints.offset - 1 - FieldBidForwardPoints::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidForwardPoints.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferForwardPoints.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferForwardPoints.offset - 1 - FieldOfferForwardPoints::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferForwardPoints.offset] == 1 ) return tagPtr;
   }
   if( fieldMidPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMidPx.offset - 1 - FieldMidPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMidPx.offset] == 1 ) return tagPtr;
   }
   if( fieldBidYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidYield.offset - 1 - FieldBidYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidYield.offset] == 1 ) return tagPtr;
   }
   if( fieldMidYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMidYield.offset - 1 - FieldMidYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMidYield.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferYield.offset - 1 - FieldOfferYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferYield.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldBidForwardPoints2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBidForwardPoints2.offset - 1 - FieldBidForwardPoints2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBidForwardPoints2.offset] == 1 ) return tagPtr;
   }
   if( fieldOfferForwardPoints2.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOfferForwardPoints2.offset - 1 - FieldOfferForwardPoints2::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOfferForwardPoints2.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrBidFxRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrBidFxRate.offset - 1 - FieldSettlCurrBidFxRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrBidFxRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrOfferFxRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrOfferFxRate.offset - 1 - FieldSettlCurrOfferFxRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrOfferFxRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrFxRateCalc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrFxRateCalc.offset - 1 - FieldSettlCurrFxRateCalc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrFxRateCalc.offset] == 1 ) return tagPtr;
   }
   if( fieldCommission.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommission.offset - 1 - FieldCommission::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommission.offset] == 1 ) return tagPtr;
   }
   if( fieldCommType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommType.offset] == 1 ) return tagPtr;
   }
   if( fieldCustOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCustOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldExDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExDestination.offset - 1 - FieldExDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageConfirmation::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldConfirmID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConfirmID.offset - 1 - FieldConfirmID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConfirmID.offset] == 1 ) return tagPtr;
   }
   if( fieldConfirmRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConfirmRefID.offset - 1 - FieldConfirmRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConfirmRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldConfirmReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConfirmReqID.offset - 1 - FieldConfirmReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConfirmReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldConfirmTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConfirmTransType.offset - 1 - FieldConfirmTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConfirmTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldConfirmType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConfirmType.offset - 1 - FieldConfirmType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConfirmType.offset] == 1 ) return tagPtr;
   }
   if( fieldCopyMsgIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCopyMsgIndicator.offset - 1 - FieldCopyMsgIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCopyMsgIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldLegalConfirm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLegalConfirm.offset - 1 - FieldLegalConfirm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLegalConfirm.offset] == 1 ) return tagPtr;
   }
   if( fieldConfirmStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConfirmStatus.offset - 1 - FieldConfirmStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConfirmStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoOrders.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoOrders.offset - 1 - FieldNoOrders::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoOrders.offset] == 1 ) return tagPtr;
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocID.offset - 1 - FieldAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryAllocID.offset - 1 - FieldSecondaryAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldIndividualAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIndividualAllocID.offset - 1 - FieldIndividualAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIndividualAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrdRegTimestamps.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryForm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryForm.offset] == 1 ) return tagPtr;
   }
   if( fieldPctAtRisk.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPctAtRisk.offset - 1 - FieldPctAtRisk::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPctAtRisk.offset] == 1 ) return tagPtr;
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoInstrAttrib.offset] == 1 ) return tagPtr;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocQty.offset - 1 - FieldAllocQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocQty.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldLastMkt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastMkt.offset - 1 - FieldLastMkt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastMkt.offset] == 1 ) return tagPtr;
   }
   if( fieldNoCapacities.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoCapacities.offset - 1 - FieldNoCapacities::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoCapacities.offset] == 1 ) return tagPtr;
     for( auto & g : groupsCapacities ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAllocAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocAccount.offset - 1 - FieldAllocAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocAcctIDSource.offset - 1 - FieldAllocAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocAccountType.offset - 1 - FieldAllocAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgPx.offset - 1 - FieldAvgPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgPx.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgPxPrecision.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgPxPrecision.offset - 1 - FieldAvgPxPrecision::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgPxPrecision.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgParPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgParPx.offset - 1 - FieldAvgParPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgParPx.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldReportedPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldReportedPx.offset - 1 - FieldReportedPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldReportedPx.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldProcessCode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProcessCode.offset - 1 - FieldProcessCode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProcessCode.offset] == 1 ) return tagPtr;
   }
   if( fieldGrossTradeAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldGrossTradeAmt.offset - 1 - FieldGrossTradeAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldGrossTradeAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldNumDaysInterest.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNumDaysInterest.offset - 1 - FieldNumDaysInterest::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNumDaysInterest.offset] == 1 ) return tagPtr;
   }
   if( fieldExDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExDate.offset - 1 - FieldExDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestRate.offset - 1 - FieldAccruedInterestRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestRate.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestAmt.offset - 1 - FieldAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAtMaturity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAtMaturity.offset - 1 - FieldInterestAtMaturity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAtMaturity.offset] == 1 ) return tagPtr;
   }
   if( fieldEndAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndAccruedInterestAmt.offset - 1 - FieldEndAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldStartCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartCash.offset - 1 - FieldStartCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartCash.offset] == 1 ) return tagPtr;
   }
   if( fieldEndCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndCash.offset - 1 - FieldEndCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndCash.offset] == 1 ) return tagPtr;
   }
   if( fieldConcession.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConcession.offset - 1 - FieldConcession::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConcession.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalTakedown.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalTakedown.offset - 1 - FieldTotalTakedown::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalTakedown.offset] == 1 ) return tagPtr;
   }
   if( fieldNetMoney.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNetMoney.offset - 1 - FieldNetMoney::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNetMoney.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityNetMoney.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityNetMoney.offset - 1 - FieldMaturityNetMoney::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityNetMoney.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrAmt.offset - 1 - FieldSettlCurrAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrency.offset - 1 - FieldSettlCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrFxRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrFxRate.offset - 1 - FieldSettlCurrFxRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrFxRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlCurrFxRateCalc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlCurrFxRateCalc.offset - 1 - FieldSettlCurrFxRateCalc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlCurrFxRateCalc.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDeliveryType.offset - 1 - FieldSettlDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbType.offset - 1 - FieldStandInstDbType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbType.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbName.offset - 1 - FieldStandInstDbName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbName.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbID.offset - 1 - FieldStandInstDbID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoDlvyInst.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoDlvyInst.offset - 1 - FieldNoDlvyInst::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoDlvyInst.offset] == 1 ) return tagPtr;
     for( auto & g : groupsDlvyInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldCommission.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommission.offset - 1 - FieldCommission::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommission.offset] == 1 ) return tagPtr;
   }
   if( fieldCommType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommType.offset] == 1 ) return tagPtr;
   }
   if( fieldCommCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCommCurrency.offset - 1 - FieldCommCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCommCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldFundRenewWaiv.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFundRenewWaiv.offset - 1 - FieldFundRenewWaiv::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFundRenewWaiv.offset] == 1 ) return tagPtr;
   }
   if( fieldSharedCommission.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSharedCommission.offset - 1 - FieldSharedCommission::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSharedCommission.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoMiscFees.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoMiscFees.offset - 1 - FieldNoMiscFees::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoMiscFees.offset] == 1 ) return tagPtr;
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessagePositionMaintenanceRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldPosReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosReqID.offset - 1 - FieldPosReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldPosTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosTransType.offset - 1 - FieldPosTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldPosMaintAction.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosMaintAction.offset - 1 - FieldPosMaintAction::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosMaintAction.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigPosReqRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigPosReqRefID.offset - 1 - FieldOrigPosReqRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigPosReqRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldPosMaintRptRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosMaintRptRefID.offset - 1 - FieldPosMaintRptRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosMaintRptRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingBusinessDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingBusinessDate.offset - 1 - FieldClearingBusinessDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingBusinessDate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessSubID.offset - 1 - FieldSettlSessSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTradingSessions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPositions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPositions.offset - 1 - FieldNoPositions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPositions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPositions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAdjustmentType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAdjustmentType.offset - 1 - FieldAdjustmentType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAdjustmentType.offset] == 1 ) return tagPtr;
   }
   if( fieldContraryInstructionIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContraryInstructionIndicator.offset - 1 - FieldContraryInstructionIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContraryInstructionIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldPriorSpreadIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriorSpreadIndicator.offset - 1 - FieldPriorSpreadIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriorSpreadIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldThresholdAmount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldThresholdAmount.offset - 1 - FieldThresholdAmount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldThresholdAmount.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessagePositionMaintenanceReport::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldPosMaintRptID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosMaintRptID.offset - 1 - FieldPosMaintRptID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosMaintRptID.offset] == 1 ) return tagPtr;
   }
   if( fieldPosTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosTransType.offset - 1 - FieldPosTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldPosReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosReqID.offset - 1 - FieldPosReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldPosMaintAction.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosMaintAction.offset - 1 - FieldPosMaintAction::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosMaintAction.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigPosReqRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigPosReqRefID.offset - 1 - FieldOrigPosReqRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigPosReqRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldPosMaintStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosMaintStatus.offset - 1 - FieldPosMaintStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosMaintStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldPosMaintResult.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosMaintResult.offset - 1 - FieldPosMaintResult::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosMaintResult.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingBusinessDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingBusinessDate.offset - 1 - FieldClearingBusinessDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingBusinessDate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessSubID.offset - 1 - FieldSettlSessSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTradingSessions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPositions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPositions.offset - 1 - FieldNoPositions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPositions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPositions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPosAmt.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPosAmt.offset - 1 - FieldNoPosAmt::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPosAmt.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPosAmt ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAdjustmentType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAdjustmentType.offset - 1 - FieldAdjustmentType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAdjustmentType.offset] == 1 ) return tagPtr;
   }
   if( fieldThresholdAmount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldThresholdAmount.offset - 1 - FieldThresholdAmount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldThresholdAmount.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageRequestForPositions::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldPosReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosReqID.offset - 1 - FieldPosReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldPosReqType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosReqType.offset - 1 - FieldPosReqType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosReqType.offset] == 1 ) return tagPtr;
   }
   if( fieldMatchStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMatchStatus.offset - 1 - FieldMatchStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMatchStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldClearingBusinessDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingBusinessDate.offset - 1 - FieldClearingBusinessDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingBusinessDate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessSubID.offset - 1 - FieldSettlSessSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTradingSessions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTradingSessions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldResponseTransportType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseTransportType.offset] == 1 ) return tagPtr;
   }
   if( fieldResponseDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseDestination.offset - 1 - FieldResponseDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageRequestForPositionsAck::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldPosMaintRptID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosMaintRptID.offset - 1 - FieldPosMaintRptID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosMaintRptID.offset] == 1 ) return tagPtr;
   }
   if( fieldPosReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosReqID.offset - 1 - FieldPosReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalNumPosReports.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalNumPosReports.offset - 1 - FieldTotalNumPosReports::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalNumPosReports.offset] == 1 ) return tagPtr;
   }
   if( fieldUnsolicitedIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnsolicitedIndicator.offset - 1 - FieldUnsolicitedIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnsolicitedIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldPosReqResult.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosReqResult.offset - 1 - FieldPosReqResult::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosReqResult.offset] == 1 ) return tagPtr;
   }
   if( fieldPosReqStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosReqStatus.offset - 1 - FieldPosReqStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosReqStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldResponseTransportType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseTransportType.offset] == 1 ) return tagPtr;
   }
   if( fieldResponseDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseDestination.offset - 1 - FieldResponseDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessagePositionReport::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldPosMaintRptID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosMaintRptID.offset - 1 - FieldPosMaintRptID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosMaintRptID.offset] == 1 ) return tagPtr;
   }
   if( fieldPosReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosReqID.offset - 1 - FieldPosReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldPosReqType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosReqType.offset - 1 - FieldPosReqType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosReqType.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalNumPosReports.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalNumPosReports.offset - 1 - FieldTotalNumPosReports::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalNumPosReports.offset] == 1 ) return tagPtr;
   }
   if( fieldUnsolicitedIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnsolicitedIndicator.offset - 1 - FieldUnsolicitedIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnsolicitedIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldPosReqResult.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPosReqResult.offset - 1 - FieldPosReqResult::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPosReqResult.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingBusinessDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingBusinessDate.offset - 1 - FieldClearingBusinessDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingBusinessDate.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessSubID.offset - 1 - FieldSettlSessSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlPrice.offset - 1 - FieldSettlPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlPriceType.offset - 1 - FieldSettlPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldPriorSettlPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriorSettlPrice.offset - 1 - FieldPriorSettlPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriorSettlPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPositions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPositions.offset - 1 - FieldNoPositions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPositions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPositions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPosAmt.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPosAmt.offset - 1 - FieldNoPosAmt::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPosAmt.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPosAmt ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldRegistStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRegistStatus.offset - 1 - FieldRegistStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRegistStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryDate.offset - 1 - FieldDeliveryDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryDate.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageTradeCaptureReportRequestAck::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTradeRequestID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeRequestID.offset - 1 - FieldTradeRequestID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeRequestID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeRequestType.offset - 1 - FieldTradeRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNumTradeReports.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNumTradeReports.offset - 1 - FieldTotNumTradeReports::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNumTradeReports.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeRequestResult.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeRequestResult.offset - 1 - FieldTradeRequestResult::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeRequestResult.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeRequestStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeRequestStatus.offset - 1 - FieldTradeRequestStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeRequestStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldMultiLegReportingType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMultiLegReportingType.offset - 1 - FieldMultiLegReportingType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMultiLegReportingType.offset] == 1 ) return tagPtr;
   }
   if( fieldResponseTransportType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseTransportType.offset] == 1 ) return tagPtr;
   }
   if( fieldResponseDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseDestination.offset - 1 - FieldResponseDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageTradeCaptureReportAck::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTradeReportID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeReportID.offset - 1 - FieldTradeReportID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeReportID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeReportTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeReportTransType.offset - 1 - FieldTradeReportTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeReportTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeReportType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeReportType.offset - 1 - FieldTradeReportType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeReportType.offset] == 1 ) return tagPtr;
   }
   if( fieldTrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTrdType.offset - 1 - FieldTrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldTrdSubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTrdSubType.offset - 1 - FieldTrdSubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTrdSubType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryTrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryTrdType.offset - 1 - FieldSecondaryTrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryTrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldTransferReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransferReason.offset - 1 - FieldTransferReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransferReason.offset] == 1 ) return tagPtr;
   }
   if( fieldExecType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecType.offset - 1 - FieldExecType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeReportRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeReportRefID.offset - 1 - FieldTradeReportRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeReportRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryTradeReportRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryTradeReportRefID.offset - 1 - FieldSecondaryTradeReportRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryTradeReportRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldTrdRptStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTrdRptStatus.offset - 1 - FieldTrdRptStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTrdRptStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeReportRejectReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeReportRejectReason.offset - 1 - FieldTradeReportRejectReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeReportRejectReason.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryTradeReportID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryTradeReportID.offset - 1 - FieldSecondaryTradeReportID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryTradeReportID.offset] == 1 ) return tagPtr;
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeLinkID.offset - 1 - FieldTradeLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldTrdMatchID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTrdMatchID.offset - 1 - FieldTrdMatchID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTrdMatchID.offset] == 1 ) return tagPtr;
   }
   if( fieldExecID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecID.offset - 1 - FieldExecID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryExecID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryExecID.offset - 1 - FieldSecondaryExecID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryExecID.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrdRegTimestamps.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldResponseTransportType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseTransportType.offset] == 1 ) return tagPtr;
   }
   if( fieldResponseDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseDestination.offset - 1 - FieldResponseDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldClearingFeeIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingFeeIndicator.offset - 1 - FieldClearingFeeIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingFeeIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderRestrictions.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderRestrictions.offset - 1 - FieldOrderRestrictions::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderRestrictions.offset] == 1 ) return tagPtr;
   }
   if( fieldCustOrderCapacity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCustOrderCapacity.offset] == 1 ) return tagPtr;
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldPositionEffect.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPositionEffect.offset] == 1 ) return tagPtr;
   }
   if( fieldPreallocMethod.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPreallocMethod.offset - 1 - FieldPreallocMethod::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPreallocMethod.offset] == 1 ) return tagPtr;
   }
   if( fieldNoAllocs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoAllocs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageAllocationReport::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldAllocReportID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocReportID.offset - 1 - FieldAllocReportID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocReportID.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocID.offset - 1 - FieldAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocTransType.offset - 1 - FieldAllocTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocReportRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocReportRefID.offset - 1 - FieldAllocReportRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocReportRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocCancReplaceReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocCancReplaceReason.offset - 1 - FieldAllocCancReplaceReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocCancReplaceReason.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryAllocID.offset - 1 - FieldSecondaryAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocReportType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocReportType.offset - 1 - FieldAllocReportType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocReportType.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocStatus.offset - 1 - FieldAllocStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocRejCode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocRejCode.offset - 1 - FieldAllocRejCode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocRejCode.offset] == 1 ) return tagPtr;
   }
   if( fieldRefAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRefAllocID.offset - 1 - FieldRefAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRefAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocIntermedReqType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocIntermedReqType.offset - 1 - FieldAllocIntermedReqType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocIntermedReqType.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocLinkID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocLinkID.offset - 1 - FieldAllocLinkID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocLinkID.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocLinkType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocLinkType.offset - 1 - FieldAllocLinkType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocLinkType.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingRefID.offset - 1 - FieldBookingRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocNoOrdersType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocNoOrdersType.offset - 1 - FieldAllocNoOrdersType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocNoOrdersType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoOrders.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoOrders.offset - 1 - FieldNoOrders::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoOrders.offset] == 1 ) return tagPtr;
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoExecs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoExecs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPreviouslyReported.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPreviouslyReported.offset - 1 - FieldPreviouslyReported::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPreviouslyReported.offset] == 1 ) return tagPtr;
   }
   if( fieldReversalIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldReversalIndicator.offset - 1 - FieldReversalIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldReversalIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldMatchType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMatchType.offset - 1 - FieldMatchType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMatchType.offset] == 1 ) return tagPtr;
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryForm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryForm.offset] == 1 ) return tagPtr;
   }
   if( fieldPctAtRisk.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPctAtRisk.offset - 1 - FieldPctAtRisk::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPctAtRisk.offset] == 1 ) return tagPtr;
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoInstrAttrib.offset] == 1 ) return tagPtr;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldQuantity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuantity.offset - 1 - FieldQuantity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuantity.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldLastMkt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastMkt.offset - 1 - FieldLastMkt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastMkt.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeOriginationDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeOriginationDate.offset - 1 - FieldTradeOriginationDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeOriginationDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgPx.offset - 1 - FieldAvgPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgPx.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgParPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgParPx.offset - 1 - FieldAvgParPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgParPx.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgPxPrecision.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgPxPrecision.offset - 1 - FieldAvgPxPrecision::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgPxPrecision.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlType.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldBookingType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBookingType.offset] == 1 ) return tagPtr;
   }
   if( fieldGrossTradeAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldGrossTradeAmt.offset - 1 - FieldGrossTradeAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldGrossTradeAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldConcession.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConcession.offset - 1 - FieldConcession::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConcession.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalTakedown.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalTakedown.offset - 1 - FieldTotalTakedown::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalTakedown.offset] == 1 ) return tagPtr;
   }
   if( fieldNetMoney.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNetMoney.offset - 1 - FieldNetMoney::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNetMoney.offset] == 1 ) return tagPtr;
   }
   if( fieldPositionEffect.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPositionEffect.offset] == 1 ) return tagPtr;
   }
   if( fieldAutoAcceptIndicator.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAutoAcceptIndicator.offset - 1 - FieldAutoAcceptIndicator::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAutoAcceptIndicator.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldNumDaysInterest.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNumDaysInterest.offset - 1 - FieldNumDaysInterest::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNumDaysInterest.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestRate.offset - 1 - FieldAccruedInterestRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestRate.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestAmt.offset - 1 - FieldAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalAccruedInterestAmt.offset - 1 - FieldTotalAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAtMaturity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAtMaturity.offset - 1 - FieldInterestAtMaturity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAtMaturity.offset] == 1 ) return tagPtr;
   }
   if( fieldEndAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndAccruedInterestAmt.offset - 1 - FieldEndAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldStartCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartCash.offset - 1 - FieldStartCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartCash.offset] == 1 ) return tagPtr;
   }
   if( fieldEndCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndCash.offset - 1 - FieldEndCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndCash.offset] == 1 ) return tagPtr;
   }
   if( fieldLegalConfirm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLegalConfirm.offset - 1 - FieldLegalConfirm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLegalConfirm.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldYieldType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldType.offset] == 1 ) return tagPtr;
   }
   if( fieldYield.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYield.offset - 1 - FieldYield::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYield.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldCalcDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldCalcDate.offset - 1 - FieldYieldCalcDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldCalcDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionDate.offset - 1 - FieldYieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPrice.offset - 1 - FieldYieldRedemptionPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldYieldRedemptionPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldYieldRedemptionPriceType.offset - 1 - FieldYieldRedemptionPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldYieldRedemptionPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNoAllocs.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNoAllocs.offset - 1 - FieldTotNoAllocs::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNoAllocs.offset] == 1 ) return tagPtr;
   }
   if( fieldLastFragment.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastFragment.offset] == 1 ) return tagPtr;
   }
   if( fieldNoAllocs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoAllocs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageAllocationReportAck::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldAllocReportID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocReportID.offset - 1 - FieldAllocReportID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocReportID.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocID.offset - 1 - FieldAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecondaryAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryAllocID.offset - 1 - FieldSecondaryAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocStatus.offset - 1 - FieldAllocStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocRejCode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocRejCode.offset - 1 - FieldAllocRejCode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocRejCode.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocReportType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocReportType.offset - 1 - FieldAllocReportType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocReportType.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocIntermedReqType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocIntermedReqType.offset - 1 - FieldAllocIntermedReqType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocIntermedReqType.offset] == 1 ) return tagPtr;
   }
   if( fieldMatchStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMatchStatus.offset - 1 - FieldMatchStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMatchStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   if( fieldNoAllocs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoAllocs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageConfirmationAck::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldConfirmID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConfirmID.offset - 1 - FieldConfirmID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConfirmID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradeDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradeDate.offset - 1 - FieldTradeDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradeDate.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldAffirmStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAffirmStatus.offset - 1 - FieldAffirmStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAffirmStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldConfirmRejReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConfirmRejReason.offset - 1 - FieldConfirmRejReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConfirmRejReason.offset] == 1 ) return tagPtr;
   }
   if( fieldMatchStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMatchStatus.offset - 1 - FieldMatchStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMatchStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageSettlementInstructionRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSettlInstReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlInstReqID.offset - 1 - FieldSettlInstReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlInstReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAllocAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocAccount.offset - 1 - FieldAllocAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocAcctIDSource.offset - 1 - FieldAllocAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldEffectiveTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEffectiveTime.offset - 1 - FieldEffectiveTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEffectiveTime.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireTime.offset - 1 - FieldExpireTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireTime.offset] == 1 ) return tagPtr;
   }
   if( fieldLastUpdateTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastUpdateTime.offset - 1 - FieldLastUpdateTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastUpdateTime.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbType.offset - 1 - FieldStandInstDbType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbType.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbName.offset - 1 - FieldStandInstDbName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbName.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbID.offset - 1 - FieldStandInstDbID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbID.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageAssignmentReport::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldAsgnRptID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAsgnRptID.offset - 1 - FieldAsgnRptID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAsgnRptID.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNumAssignmentReports.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNumAssignmentReports.offset - 1 - FieldTotNumAssignmentReports::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNumAssignmentReports.offset] == 1 ) return tagPtr;
   }
   if( fieldLastRptRequested.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastRptRequested.offset - 1 - FieldLastRptRequested::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastRptRequested.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPositions.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPositions.offset - 1 - FieldNoPositions::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPositions.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPositions ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPosAmt.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPosAmt.offset - 1 - FieldNoPosAmt::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPosAmt.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPosAmt ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldThresholdAmount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldThresholdAmount.offset - 1 - FieldThresholdAmount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldThresholdAmount.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlPrice.offset - 1 - FieldSettlPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlPriceType.offset - 1 - FieldSettlPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldUnderlyingSettlPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUnderlyingSettlPrice.offset - 1 - FieldUnderlyingSettlPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUnderlyingSettlPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireDate.offset - 1 - FieldExpireDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAssignmentMethod.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAssignmentMethod.offset - 1 - FieldAssignmentMethod::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAssignmentMethod.offset] == 1 ) return tagPtr;
   }
   if( fieldAssignmentUnit.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAssignmentUnit.offset - 1 - FieldAssignmentUnit::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAssignmentUnit.offset] == 1 ) return tagPtr;
   }
   if( fieldOpenInterest.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOpenInterest.offset - 1 - FieldOpenInterest::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOpenInterest.offset] == 1 ) return tagPtr;
   }
   if( fieldExerciseMethod.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExerciseMethod.offset - 1 - FieldExerciseMethod::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExerciseMethod.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessSubID.offset - 1 - FieldSettlSessSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingBusinessDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingBusinessDate.offset - 1 - FieldClearingBusinessDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingBusinessDate.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageCollateralRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCollReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollReqID.offset - 1 - FieldCollReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldCollAsgnReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollAsgnReason.offset - 1 - FieldCollAsgnReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollAsgnReason.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireTime.offset - 1 - FieldExpireTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryOrderID.offset - 1 - FieldSecondaryOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoExecs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoExecs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrades.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrades.offset - 1 - FieldNoTrades::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrades.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldQuantity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuantity.offset - 1 - FieldQuantity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuantity.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldMarginExcess.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginExcess.offset - 1 - FieldMarginExcess::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginExcess.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalNetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalNetValue.offset - 1 - FieldTotalNetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalNetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOutstanding.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOutstanding.offset - 1 - FieldCashOutstanding::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOutstanding.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrdRegTimestamps.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldNoMiscFees.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoMiscFees.offset - 1 - FieldNoMiscFees::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoMiscFees.offset] == 1 ) return tagPtr;
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestAmt.offset - 1 - FieldAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldEndAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndAccruedInterestAmt.offset - 1 - FieldEndAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldStartCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartCash.offset - 1 - FieldStartCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartCash.offset] == 1 ) return tagPtr;
   }
   if( fieldEndCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndCash.offset - 1 - FieldEndCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndCash.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessSubID.offset - 1 - FieldSettlSessSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingBusinessDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingBusinessDate.offset - 1 - FieldClearingBusinessDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingBusinessDate.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageCollateralAssignment::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCollAsgnID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollAsgnID.offset - 1 - FieldCollAsgnID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollAsgnID.offset] == 1 ) return tagPtr;
   }
   if( fieldCollReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollReqID.offset - 1 - FieldCollReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldCollAsgnReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollAsgnReason.offset - 1 - FieldCollAsgnReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollAsgnReason.offset] == 1 ) return tagPtr;
   }
   if( fieldCollAsgnTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollAsgnTransType.offset - 1 - FieldCollAsgnTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollAsgnTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldCollAsgnRefID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollAsgnRefID.offset - 1 - FieldCollAsgnRefID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollAsgnRefID.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldExpireTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExpireTime.offset - 1 - FieldExpireTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExpireTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryOrderID.offset - 1 - FieldSecondaryOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoExecs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoExecs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrades.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrades.offset - 1 - FieldNoTrades::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrades.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldQuantity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuantity.offset - 1 - FieldQuantity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuantity.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldMarginExcess.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginExcess.offset - 1 - FieldMarginExcess::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginExcess.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalNetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalNetValue.offset - 1 - FieldTotalNetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalNetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOutstanding.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOutstanding.offset - 1 - FieldCashOutstanding::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOutstanding.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrdRegTimestamps.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldNoMiscFees.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoMiscFees.offset - 1 - FieldNoMiscFees::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoMiscFees.offset] == 1 ) return tagPtr;
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestAmt.offset - 1 - FieldAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldEndAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndAccruedInterestAmt.offset - 1 - FieldEndAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldStartCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartCash.offset - 1 - FieldStartCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartCash.offset] == 1 ) return tagPtr;
   }
   if( fieldEndCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndCash.offset - 1 - FieldEndCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndCash.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDeliveryType.offset - 1 - FieldSettlDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbType.offset - 1 - FieldStandInstDbType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbType.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbName.offset - 1 - FieldStandInstDbName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbName.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbID.offset - 1 - FieldStandInstDbID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoDlvyInst.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoDlvyInst.offset - 1 - FieldNoDlvyInst::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoDlvyInst.offset] == 1 ) return tagPtr;
     for( auto & g : groupsDlvyInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessSubID.offset - 1 - FieldSettlSessSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingBusinessDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingBusinessDate.offset - 1 - FieldClearingBusinessDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingBusinessDate.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageCollateralResponse::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCollRespID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollRespID.offset - 1 - FieldCollRespID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollRespID.offset] == 1 ) return tagPtr;
   }
   if( fieldCollAsgnID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollAsgnID.offset - 1 - FieldCollAsgnID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollAsgnID.offset] == 1 ) return tagPtr;
   }
   if( fieldCollReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollReqID.offset - 1 - FieldCollReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldCollAsgnReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollAsgnReason.offset - 1 - FieldCollAsgnReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollAsgnReason.offset] == 1 ) return tagPtr;
   }
   if( fieldCollAsgnTransType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollAsgnTransType.offset - 1 - FieldCollAsgnTransType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollAsgnTransType.offset] == 1 ) return tagPtr;
   }
   if( fieldCollAsgnRespType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollAsgnRespType.offset - 1 - FieldCollAsgnRespType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollAsgnRespType.offset] == 1 ) return tagPtr;
   }
   if( fieldCollAsgnRejectReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollAsgnRejectReason.offset - 1 - FieldCollAsgnRejectReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollAsgnRejectReason.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryOrderID.offset - 1 - FieldSecondaryOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoExecs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoExecs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrades.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrades.offset - 1 - FieldNoTrades::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrades.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldQuantity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuantity.offset - 1 - FieldQuantity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuantity.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldMarginExcess.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginExcess.offset - 1 - FieldMarginExcess::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginExcess.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalNetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalNetValue.offset - 1 - FieldTotalNetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalNetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOutstanding.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOutstanding.offset - 1 - FieldCashOutstanding::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOutstanding.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrdRegTimestamps.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldNoMiscFees.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoMiscFees.offset - 1 - FieldNoMiscFees::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoMiscFees.offset] == 1 ) return tagPtr;
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestAmt.offset - 1 - FieldAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldEndAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndAccruedInterestAmt.offset - 1 - FieldEndAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldStartCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartCash.offset - 1 - FieldStartCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartCash.offset] == 1 ) return tagPtr;
   }
   if( fieldEndCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndCash.offset - 1 - FieldEndCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndCash.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageCollateralReport::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCollRptID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollRptID.offset - 1 - FieldCollRptID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollRptID.offset] == 1 ) return tagPtr;
   }
   if( fieldCollInquiryID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollInquiryID.offset - 1 - FieldCollInquiryID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollInquiryID.offset] == 1 ) return tagPtr;
   }
   if( fieldCollStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollStatus.offset - 1 - FieldCollStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldTotNumReports.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNumReports.offset - 1 - FieldTotNumReports::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNumReports.offset] == 1 ) return tagPtr;
   }
   if( fieldLastRptRequested.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastRptRequested.offset - 1 - FieldLastRptRequested::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastRptRequested.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryOrderID.offset - 1 - FieldSecondaryOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoExecs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoExecs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrades.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrades.offset - 1 - FieldNoTrades::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrades.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldQuantity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuantity.offset - 1 - FieldQuantity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuantity.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldMarginExcess.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginExcess.offset - 1 - FieldMarginExcess::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginExcess.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalNetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalNetValue.offset - 1 - FieldTotalNetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalNetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOutstanding.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOutstanding.offset - 1 - FieldCashOutstanding::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOutstanding.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrdRegTimestamps.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldNoMiscFees.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoMiscFees.offset - 1 - FieldNoMiscFees::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoMiscFees.offset] == 1 ) return tagPtr;
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestAmt.offset - 1 - FieldAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldEndAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndAccruedInterestAmt.offset - 1 - FieldEndAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldStartCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartCash.offset - 1 - FieldStartCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartCash.offset] == 1 ) return tagPtr;
   }
   if( fieldEndCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndCash.offset - 1 - FieldEndCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndCash.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDeliveryType.offset - 1 - FieldSettlDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbType.offset - 1 - FieldStandInstDbType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbType.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbName.offset - 1 - FieldStandInstDbName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbName.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbID.offset - 1 - FieldStandInstDbID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoDlvyInst.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoDlvyInst.offset - 1 - FieldNoDlvyInst::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoDlvyInst.offset] == 1 ) return tagPtr;
     for( auto & g : groupsDlvyInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessSubID.offset - 1 - FieldSettlSessSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingBusinessDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingBusinessDate.offset - 1 - FieldClearingBusinessDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingBusinessDate.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageCollateralInquiry::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCollInquiryID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollInquiryID.offset - 1 - FieldCollInquiryID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollInquiryID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoCollInquiryQualifier.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoCollInquiryQualifier.offset - 1 - FieldNoCollInquiryQualifier::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoCollInquiryQualifier.offset] == 1 ) return tagPtr;
     for( auto & g : groupsCollInquiryQualifier ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSubscriptionRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSubscriptionRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldResponseTransportType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseTransportType.offset] == 1 ) return tagPtr;
   }
   if( fieldResponseDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseDestination.offset - 1 - FieldResponseDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryOrderID.offset - 1 - FieldSecondaryOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoExecs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoExecs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrades.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrades.offset - 1 - FieldNoTrades::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrades.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldQuantity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuantity.offset - 1 - FieldQuantity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuantity.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldMarginExcess.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginExcess.offset - 1 - FieldMarginExcess::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginExcess.offset] == 1 ) return tagPtr;
   }
   if( fieldTotalNetValue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotalNetValue.offset - 1 - FieldTotalNetValue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotalNetValue.offset] == 1 ) return tagPtr;
   }
   if( fieldCashOutstanding.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCashOutstanding.offset - 1 - FieldCashOutstanding::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCashOutstanding.offset] == 1 ) return tagPtr;
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrdRegTimestamps.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccruedInterestAmt.offset - 1 - FieldAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldEndAccruedInterestAmt.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndAccruedInterestAmt.offset - 1 - FieldEndAccruedInterestAmt::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndAccruedInterestAmt.offset] == 1 ) return tagPtr;
   }
   if( fieldStartCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartCash.offset - 1 - FieldStartCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartCash.offset] == 1 ) return tagPtr;
   }
   if( fieldEndCash.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndCash.offset - 1 - FieldEndCash::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndCash.offset] == 1 ) return tagPtr;
   }
   if( fieldSpread.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSpread.offset - 1 - FieldSpread::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSpread.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveCurrency.offset - 1 - FieldBenchmarkCurveCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurveName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurveName.offset - 1 - FieldBenchmarkCurveName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurveName.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkCurvePoint.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkCurvePoint.offset - 1 - FieldBenchmarkCurvePoint::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkCurvePoint.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPrice.offset - 1 - FieldBenchmarkPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkPriceType.offset - 1 - FieldBenchmarkPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityID.offset - 1 - FieldBenchmarkSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldBenchmarkSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBenchmarkSecurityIDSource.offset - 1 - FieldBenchmarkSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBenchmarkSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoStipulations.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoStipulations.offset] == 1 ) return tagPtr;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDeliveryType.offset - 1 - FieldSettlDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbType.offset - 1 - FieldStandInstDbType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbType.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbName.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbName.offset - 1 - FieldStandInstDbName::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbName.offset] == 1 ) return tagPtr;
   }
   if( fieldStandInstDbID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStandInstDbID.offset - 1 - FieldStandInstDbID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStandInstDbID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoDlvyInst.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoDlvyInst.offset - 1 - FieldNoDlvyInst::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoDlvyInst.offset] == 1 ) return tagPtr;
     for( auto & g : groupsDlvyInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessSubID.offset - 1 - FieldSettlSessSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingBusinessDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingBusinessDate.offset - 1 - FieldClearingBusinessDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingBusinessDate.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageNetworkCounterpartySystemStatusRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNetworkRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNetworkRequestType.offset - 1 - FieldNetworkRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNetworkRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldNetworkRequestID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNetworkRequestID.offset - 1 - FieldNetworkRequestID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNetworkRequestID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoCompIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoCompIDs.offset - 1 - FieldNoCompIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoCompIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsCompIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageNetworkCounterpartySystemStatusResponse::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNetworkStatusResponseType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNetworkStatusResponseType.offset - 1 - FieldNetworkStatusResponseType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNetworkStatusResponseType.offset] == 1 ) return tagPtr;
   }
   if( fieldNetworkRequestID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNetworkRequestID.offset - 1 - FieldNetworkRequestID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNetworkRequestID.offset] == 1 ) return tagPtr;
   }
   if( fieldNetworkResponseID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNetworkResponseID.offset - 1 - FieldNetworkResponseID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNetworkResponseID.offset] == 1 ) return tagPtr;
   }
   if( fieldLastNetworkResponseID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastNetworkResponseID.offset - 1 - FieldLastNetworkResponseID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastNetworkResponseID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoCompIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoCompIDs.offset - 1 - FieldNoCompIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoCompIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsCompIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageUserRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldUserRequestID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUserRequestID.offset - 1 - FieldUserRequestID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUserRequestID.offset] == 1 ) return tagPtr;
   }
   if( fieldUserRequestType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUserRequestType.offset - 1 - FieldUserRequestType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUserRequestType.offset] == 1 ) return tagPtr;
   }
   if( fieldUsername.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUsername.offset - 1 - FieldUsername::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUsername.offset] == 1 ) return tagPtr;
   }
   if( fieldPassword.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPassword.offset - 1 - FieldPassword::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPassword.offset] == 1 ) return tagPtr;
   }
   if( fieldNewPassword.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldNewPassword.offset - 1 - FieldNewPassword::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldNewPassword.offset] == 1 ) return tagPtr;
   }
   if( fieldRawDataLength.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRawDataLength.offset - 1 - FieldRawDataLength::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRawDataLength.offset] == 1 ) return tagPtr;
   }
   if( fieldRawData.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRawData.offset - 1 - FieldRawData::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRawData.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageUserResponse::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldUserRequestID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUserRequestID.offset - 1 - FieldUserRequestID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUserRequestID.offset] == 1 ) return tagPtr;
   }
   if( fieldUsername.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUsername.offset - 1 - FieldUsername::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUsername.offset] == 1 ) return tagPtr;
   }
   if( fieldUserStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUserStatus.offset - 1 - FieldUserStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUserStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldUserStatusText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldUserStatusText.offset - 1 - FieldUserStatusText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldUserStatusText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageCollateralInquiryAck::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCollInquiryID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollInquiryID.offset - 1 - FieldCollInquiryID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollInquiryID.offset] == 1 ) return tagPtr;
   }
   if( fieldCollInquiryStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollInquiryStatus.offset - 1 - FieldCollInquiryStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollInquiryStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldCollInquiryResult.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCollInquiryResult.offset - 1 - FieldCollInquiryResult::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCollInquiryResult.offset] == 1 ) return tagPtr;
   }
   if( fieldNoCollInquiryQualifier.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoCollInquiryQualifier.offset - 1 - FieldNoCollInquiryQualifier::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoCollInquiryQualifier.offset] == 1 ) return tagPtr;
     for( auto & g : groupsCollInquiryQualifier ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTotNumReports.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTotNumReports.offset - 1 - FieldTotNumReports::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTotNumReports.offset] == 1 ) return tagPtr;
   }
   if( fieldNoPartyIDs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoPartyIDs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryOrderID.offset - 1 - FieldSecondaryOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryClOrdID.offset - 1 - FieldSecondaryClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldNoExecs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoExecs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrades.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoTrades.offset - 1 - FieldNoTrades::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoTrades.offset] == 1 ) return tagPtr;
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbolSfx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbolSfx.offset - 1 - FieldSymbolSfx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbolSfx.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoSecurityAltID.offset] == 1 ) return tagPtr;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldCFICode.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCFICode.offset - 1 - FieldCFICode::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCFICode.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldSecuritySubType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecuritySubType.offset - 1 - FieldSecuritySubType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecuritySubType.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityMonthYear.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityMonthYear.offset - 1 - FieldMaturityMonthYear::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityMonthYear.offset] == 1 ) return tagPtr;
   }
   if( fieldMaturityDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMaturityDate.offset - 1 - FieldMaturityDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMaturityDate.offset] == 1 ) return tagPtr;
   }
   if( fieldPutOrCall.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPutOrCall.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponPaymentDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponPaymentDate.offset - 1 - FieldCouponPaymentDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponPaymentDate.offset] == 1 ) return tagPtr;
   }
   if( fieldIssueDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssueDate.offset - 1 - FieldIssueDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssueDate.offset] == 1 ) return tagPtr;
   }
   if( fieldRepoCollateralSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepoCollateralSecurityType.offset - 1 - FieldRepoCollateralSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepoCollateralSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseTerm.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseTerm.offset - 1 - FieldRepurchaseTerm::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseTerm.offset] == 1 ) return tagPtr;
   }
   if( fieldRepurchaseRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRepurchaseRate.offset - 1 - FieldRepurchaseRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRepurchaseRate.offset] == 1 ) return tagPtr;
   }
   if( fieldFactor.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldFactor.offset - 1 - FieldFactor::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldFactor.offset] == 1 ) return tagPtr;
   }
   if( fieldCreditRating.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCreditRating.offset - 1 - FieldCreditRating::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCreditRating.offset] == 1 ) return tagPtr;
   }
   if( fieldInstrRegistry.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInstrRegistry.offset - 1 - FieldInstrRegistry::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInstrRegistry.offset] == 1 ) return tagPtr;
   }
   if( fieldCountryOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCountryOfIssue.offset - 1 - FieldCountryOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCountryOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldStateOrProvinceOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStateOrProvinceOfIssue.offset - 1 - FieldStateOrProvinceOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStateOrProvinceOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldLocaleOfIssue.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLocaleOfIssue.offset - 1 - FieldLocaleOfIssue::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLocaleOfIssue.offset] == 1 ) return tagPtr;
   }
   if( fieldRedemptionDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldRedemptionDate.offset - 1 - FieldRedemptionDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldRedemptionDate.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikePrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikePrice.offset - 1 - FieldStrikePrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikePrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStrikeCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStrikeCurrency.offset - 1 - FieldStrikeCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStrikeCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldOptAttribute.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOptAttribute.offset - 1 - FieldOptAttribute::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOptAttribute.offset] == 1 ) return tagPtr;
   }
   if( fieldContractMultiplier.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractMultiplier.offset - 1 - FieldContractMultiplier::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractMultiplier.offset] == 1 ) return tagPtr;
   }
   if( fieldCouponRate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCouponRate.offset - 1 - FieldCouponRate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCouponRate.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityExchange.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityExchange.offset - 1 - FieldSecurityExchange::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityExchange.offset] == 1 ) return tagPtr;
   }
   if( fieldIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIssuer.offset - 1 - FieldIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuerLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuerLen.offset - 1 - FieldEncodedIssuerLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuerLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedIssuer.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedIssuer.offset - 1 - FieldEncodedIssuer::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedIssuer.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityDesc.offset - 1 - FieldSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDescLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDescLen.offset - 1 - FieldEncodedSecurityDescLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDescLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedSecurityDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedSecurityDesc.offset - 1 - FieldEncodedSecurityDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedSecurityDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldPool.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPool.offset - 1 - FieldPool::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPool.offset] == 1 ) return tagPtr;
   }
   if( fieldContractSettlMonth.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldContractSettlMonth.offset - 1 - FieldContractSettlMonth::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldContractSettlMonth.offset] == 1 ) return tagPtr;
   }
   if( fieldCPProgram.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPProgram.offset] == 1 ) return tagPtr;
   }
   if( fieldCPRegType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCPRegType.offset - 1 - FieldCPRegType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCPRegType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoEvents.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoEvents.offset] == 1 ) return tagPtr;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDatedDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDatedDate.offset - 1 - FieldDatedDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDatedDate.offset] == 1 ) return tagPtr;
   }
   if( fieldInterestAccrualDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldInterestAccrualDate.offset - 1 - FieldInterestAccrualDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldInterestAccrualDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDesc.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDesc.offset - 1 - FieldAgreementDesc::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDesc.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementID.offset - 1 - FieldAgreementID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementID.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementDate.offset - 1 - FieldAgreementDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementDate.offset] == 1 ) return tagPtr;
   }
   if( fieldAgreementCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAgreementCurrency.offset - 1 - FieldAgreementCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAgreementCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTerminationType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTerminationType.offset] == 1 ) return tagPtr;
   }
   if( fieldStartDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStartDate.offset - 1 - FieldStartDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStartDate.offset] == 1 ) return tagPtr;
   }
   if( fieldEndDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEndDate.offset - 1 - FieldEndDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEndDate.offset] == 1 ) return tagPtr;
   }
   if( fieldDeliveryType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldDeliveryType.offset] == 1 ) return tagPtr;
   }
   if( fieldMarginRatio.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMarginRatio.offset - 1 - FieldMarginRatio::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMarginRatio.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlDate.offset - 1 - FieldSettlDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlDate.offset] == 1 ) return tagPtr;
   }
   if( fieldQuantity.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQuantity.offset - 1 - FieldQuantity::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQuantity.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoUnderlyings.offset] == 1 ) return tagPtr;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTradingSessionID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionID.offset - 1 - FieldTradingSessionID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionID.offset] == 1 ) return tagPtr;
   }
   if( fieldTradingSessionSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTradingSessionSubID.offset - 1 - FieldTradingSessionSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTradingSessionSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessID.offset] == 1 ) return tagPtr;
   }
   if( fieldSettlSessSubID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSettlSessSubID.offset - 1 - FieldSettlSessSubID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSettlSessSubID.offset] == 1 ) return tagPtr;
   }
   if( fieldClearingBusinessDate.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClearingBusinessDate.offset - 1 - FieldClearingBusinessDate::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClearingBusinessDate.offset] == 1 ) return tagPtr;
   }
   if( fieldResponseTransportType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseTransportType.offset] == 1 ) return tagPtr;
   }
   if( fieldResponseDestination.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldResponseDestination.offset - 1 - FieldResponseDestination::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldResponseDestination.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageConfirmationRequest::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldConfirmReqID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConfirmReqID.offset - 1 - FieldConfirmReqID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConfirmReqID.offset] == 1 ) return tagPtr;
   }
   if( fieldConfirmType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldConfirmType.offset - 1 - FieldConfirmType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldConfirmType.offset] == 1 ) return tagPtr;
   }
   if( fieldNoOrders.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoOrders.offset - 1 - FieldNoOrders::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoOrders.offset] == 1 ) return tagPtr;
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocID.offset - 1 - FieldAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecondaryAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecondaryAllocID.offset - 1 - FieldSecondaryAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecondaryAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldIndividualAllocID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldIndividualAllocID.offset - 1 - FieldIndividualAllocID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldIndividualAllocID.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocAccount.offset - 1 - FieldAllocAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocAcctIDSource.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocAcctIDSource.offset - 1 - FieldAllocAcctIDSource::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocAcctIDSource.offset] == 1 ) return tagPtr;
   }
   if( fieldAllocAccountType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAllocAccountType.offset - 1 - FieldAllocAccountType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAllocAccountType.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedTextLen.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedTextLen.offset - 1 - FieldEncodedTextLen::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedTextLen.offset] == 1 ) return tagPtr;
   }
   if( fieldEncodedText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldEncodedText.offset - 1 - FieldEncodedText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldEncodedText.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

// ---------------------------------- findBadGroup ---------------------------------

const char * MessageHeader::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoHops.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoHops.offset );
     unsigned received = 0;
     for( auto & g : groupsHops ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoHops.offset - 1 - FieldNoHops::tagWidth(); }
   }
   return nullptr;
}

const char * MessageHeartbeat::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageTestRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageResendRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageReject::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageSequenceReset::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageLogout::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageIOI::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoIOIQualifiers.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoIOIQualifiers.offset );
     unsigned received = 0;
     for( auto & g : groupsIOIQualifiers ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoIOIQualifiers.offset - 1 - FieldNoIOIQualifiers::tagWidth(); }
   }
   if( fieldNoRoutingIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoRoutingIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsRoutingIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoRoutingIDs.offset - 1 - FieldNoRoutingIDs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageAdvertisement::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   return nullptr;
}

const char * MessageExecutionReport::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoContraBrokers.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoContraBrokers.offset );
     unsigned received = 0;
     for( auto & g : groupsContraBrokers ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoContraBrokers.offset - 1 - FieldNoContraBrokers::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   if( fieldNoContAmts.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoContAmts.offset );
     unsigned received = 0;
     for( auto & g : groupsContAmts ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoContAmts.offset - 1 - FieldNoContAmts::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoMiscFees.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoMiscFees.offset );
     unsigned received = 0;
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoMiscFees.offset - 1 - FieldNoMiscFees::tagWidth(); }
   }
   return nullptr;
}

const char * MessageOrderCancelReject::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageLogon::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoMsgTypes.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoMsgTypes.offset );
     unsigned received = 0;
     for( auto & g : groupsMsgTypes ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoMsgTypes.offset - 1 - FieldNoMsgTypes::tagWidth(); }
   }
   return nullptr;
}

const char * MessageNews::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoRoutingIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoRoutingIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsRoutingIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoRoutingIDs.offset - 1 - FieldNoRoutingIDs::tagWidth(); }
   }
   if( fieldNoRelatedSym.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoRelatedSym.offset );
     unsigned received = 0;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLinesOfText.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLinesOfText.offset );
     unsigned received = 0;
     for( auto & g : groupsLinesOfText ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLinesOfText.offset - 1 - FieldNoLinesOfText::tagWidth(); }
   }
   return nullptr;
}

const char * MessageEmail::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoRoutingIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoRoutingIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsRoutingIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoRoutingIDs.offset - 1 - FieldNoRoutingIDs::tagWidth(); }
   }
   if( fieldNoRelatedSym.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoRelatedSym.offset );
     unsigned received = 0;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoLinesOfText.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLinesOfText.offset );
     unsigned received = 0;
     for( auto & g : groupsLinesOfText ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLinesOfText.offset - 1 - FieldNoLinesOfText::tagWidth(); }
   }
   return nullptr;
}

const char * MessageNewOrderSingle::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoAllocs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoAllocs.offset );
     unsigned received = 0;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth(); }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTradingSessions.offset );
     unsigned received = 0;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   return nullptr;
}

const char * MessageNewOrderList::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoOrders.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoOrders.offset );
     unsigned received = 0;
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoOrders.offset - 1 - FieldNoOrders::tagWidth(); }
   }
   return nullptr;
}

const char * MessageOrderCancelRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   return nullptr;
}

const char * MessageOrderCancelReplaceRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoAllocs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoAllocs.offset );
     unsigned received = 0;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth(); }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTradingSessions.offset );
     unsigned received = 0;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   return nullptr;
}

const char * MessageOrderStatusRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   return nullptr;
}

const char * MessageAllocationInstruction::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoOrders.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoOrders.offset );
     unsigned received = 0;
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoOrders.offset - 1 - FieldNoOrders::tagWidth(); }
   }
   if( fieldNoExecs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoExecs.offset );
     unsigned received = 0;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoInstrAttrib.offset );
     unsigned received = 0;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   if( fieldNoAllocs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoAllocs.offset );
     unsigned received = 0;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageListCancelRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageListExecute::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageListStatusRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageListStatus::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoOrders.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoOrders.offset );
     unsigned received = 0;
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoOrders.offset - 1 - FieldNoOrders::tagWidth(); }
   }
   return nullptr;
}

const char * MessageAllocationInstructionAck::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoAllocs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoAllocs.offset );
     unsigned received = 0;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageDontKnowTrade::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageQuoteRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoRelatedSym.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoRelatedSym.offset );
     unsigned received = 0;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth(); }
   }
   return nullptr;
}

const char * MessageQuote::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoQuoteQualifiers.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoQuoteQualifiers.offset );
     unsigned received = 0;
     for( auto & g : groupsQuoteQualifiers ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoQuoteQualifiers.offset - 1 - FieldNoQuoteQualifiers::tagWidth(); }
   }
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageSettlementInstructions::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSettlInst.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSettlInst.offset );
     unsigned received = 0;
     for( auto & g : groupsSettlInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSettlInst.offset - 1 - FieldNoSettlInst::tagWidth(); }
   }
   return nullptr;
}

const char * MessageMarketDataRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoMDEntryTypes.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoMDEntryTypes.offset );
     unsigned received = 0;
     for( auto & g : groupsMDEntryTypes ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoMDEntryTypes.offset - 1 - FieldNoMDEntryTypes::tagWidth(); }
   }
   if( fieldNoRelatedSym.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoRelatedSym.offset );
     unsigned received = 0;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth(); }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTradingSessions.offset );
     unsigned received = 0;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth(); }
   }
   return nullptr;
}

const char * MessageMarketDataSnapshotFullRefresh::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoMDEntries.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoMDEntries.offset );
     unsigned received = 0;
     for( auto & g : groupsMDEntries ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoMDEntries.offset - 1 - FieldNoMDEntries::tagWidth(); }
   }
   return nullptr;
}

const char * MessageMarketDataIncrementalRefresh::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoMDEntries.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoMDEntries.offset );
     unsigned received = 0;
     for( auto & g : groupsMDEntries ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoMDEntries.offset - 1 - FieldNoMDEntries::tagWidth(); }
   }
   return nullptr;
}

const char * MessageMarketDataRequestReject::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoAltMDSource.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoAltMDSource.offset );
     unsigned received = 0;
     for( auto & g : groupsAltMDSource ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoAltMDSource.offset - 1 - FieldNoAltMDSource::tagWidth(); }
   }
   return nullptr;
}

const char * MessageQuoteCancel::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoQuoteEntries.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoQuoteEntries.offset );
     unsigned received = 0;
     for( auto & g : groupsQuoteEntries ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoQuoteEntries.offset - 1 - FieldNoQuoteEntries::tagWidth(); }
   }
   return nullptr;
}

const char * MessageQuoteStatusRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageMassQuoteAcknowledgement::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoQuoteSets.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoQuoteSets.offset );
     unsigned received = 0;
     for( auto & g : groupsQuoteSets ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoQuoteSets.offset - 1 - FieldNoQuoteSets::tagWidth(); }
   }
   return nullptr;
}

const char * MessageSecurityDefinitionRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoInstrAttrib.offset );
     unsigned received = 0;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageSecurityDefinition::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoInstrAttrib.offset );
     unsigned received = 0;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageSecurityStatusRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoInstrAttrib.offset );
     unsigned received = 0;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageSecurityStatus::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoInstrAttrib.offset );
     unsigned received = 0;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageTradingSessionStatusRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageTradingSessionStatus::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageMassQuote::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoQuoteSets.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoQuoteSets.offset );
     unsigned received = 0;
     for( auto & g : groupsQuoteSets ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoQuoteSets.offset - 1 - FieldNoQuoteSets::tagWidth(); }
   }
   return nullptr;
}

const char * MessageBusinessMessageReject::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageBidRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoBidDescriptors.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoBidDescriptors.offset );
     unsigned received = 0;
     for( auto & g : groupsBidDescriptors ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoBidDescriptors.offset - 1 - FieldNoBidDescriptors::tagWidth(); }
   }
   if( fieldNoBidComponents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoBidComponents.offset );
     unsigned received = 0;
     for( auto & g : groupsBidComponents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoBidComponents.offset - 1 - FieldNoBidComponents::tagWidth(); }
   }
   return nullptr;
}

const char * MessageBidResponse::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoBidComponents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoBidComponents.offset );
     unsigned received = 0;
     for( auto & g : groupsBidComponents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoBidComponents.offset - 1 - FieldNoBidComponents::tagWidth(); }
   }
   return nullptr;
}

const char * MessageListStrikePrice::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoStrikes.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStrikes.offset );
     unsigned received = 0;
     for( auto & g : groupsStrikes ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStrikes.offset - 1 - FieldNoStrikes::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   return nullptr;
}

const char * MessageXMLnonFIX::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageRegistrationInstructions::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoRegistDtls.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoRegistDtls.offset );
     unsigned received = 0;
     for( auto & g : groupsRegistDtls ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoRegistDtls.offset - 1 - FieldNoRegistDtls::tagWidth(); }
   }
   if( fieldNoDistribInsts.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoDistribInsts.offset );
     unsigned received = 0;
     for( auto & g : groupsDistribInsts ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoDistribInsts.offset - 1 - FieldNoDistribInsts::tagWidth(); }
   }
   return nullptr;
}

const char * MessageRegistrationInstructionsResponse::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageOrderMassCancelRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyingSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyingSecurityAltID.offset - 1 - FieldNoUnderlyingSecurityAltID::tagWidth(); }
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyingStips.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyingStips.offset - 1 - FieldNoUnderlyingStips::tagWidth(); }
   }
   return nullptr;
}

const char * MessageOrderMassCancelReport::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoAffectedOrders.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoAffectedOrders.offset );
     unsigned received = 0;
     for( auto & g : groupsAffectedOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoAffectedOrders.offset - 1 - FieldNoAffectedOrders::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyingSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyingSecurityAltID.offset - 1 - FieldNoUnderlyingSecurityAltID::tagWidth(); }
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyingStips.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyingStips.offset - 1 - FieldNoUnderlyingStips::tagWidth(); }
   }
   return nullptr;
}

const char * MessageNewOrderCross::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSides.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSides.offset );
     unsigned received = 0;
     for( auto & g : groupsSides ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSides.offset - 1 - FieldNoSides::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTradingSessions.offset );
     unsigned received = 0;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   return nullptr;
}

const char * MessageCrossOrderCancelReplaceRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSides.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSides.offset );
     unsigned received = 0;
     for( auto & g : groupsSides ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSides.offset - 1 - FieldNoSides::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTradingSessions.offset );
     unsigned received = 0;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   return nullptr;
}

const char * MessageCrossOrderCancelRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSides.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSides.offset );
     unsigned received = 0;
     for( auto & g : groupsSides ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSides.offset - 1 - FieldNoSides::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageSecurityTypeRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageSecurityTypes::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityTypes.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityTypes.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityTypes ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityTypes.offset - 1 - FieldNoSecurityTypes::tagWidth(); }
   }
   return nullptr;
}

const char * MessageSecurityListRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoInstrAttrib.offset );
     unsigned received = 0;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageSecurityList::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoRelatedSym.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoRelatedSym.offset );
     unsigned received = 0;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth(); }
   }
   return nullptr;
}

const char * MessageDerivativeSecurityListRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyingSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyingSecurityAltID.offset - 1 - FieldNoUnderlyingSecurityAltID::tagWidth(); }
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyingStips.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyingStips.offset - 1 - FieldNoUnderlyingStips::tagWidth(); }
   }
   return nullptr;
}

const char * MessageDerivativeSecurityList::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyingSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyingSecurityAltID.offset - 1 - FieldNoUnderlyingSecurityAltID::tagWidth(); }
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyingStips.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyingStips.offset - 1 - FieldNoUnderlyingStips::tagWidth(); }
   }
   if( fieldNoRelatedSym.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoRelatedSym.offset );
     unsigned received = 0;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth(); }
   }
   return nullptr;
}

const char * MessageNewOrderMultileg::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoAllocs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoAllocs.offset );
     unsigned received = 0;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth(); }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTradingSessions.offset );
     unsigned received = 0;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageMultilegOrderCancelReplace::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoAllocs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoAllocs.offset );
     unsigned received = 0;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth(); }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTradingSessions.offset );
     unsigned received = 0;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageTradeCaptureReportRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoInstrAttrib.offset );
     unsigned received = 0;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoDates.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoDates.offset );
     unsigned received = 0;
     for( auto & g : groupsDates ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoDates.offset - 1 - FieldNoDates::tagWidth(); }
   }
   return nullptr;
}

const char * MessageTradeCaptureReport::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoPosAmt.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPosAmt.offset );
     unsigned received = 0;
     for( auto & g : groupsPosAmt ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPosAmt.offset - 1 - FieldNoPosAmt::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrdRegTimestamps.offset );
     unsigned received = 0;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth(); }
   }
   if( fieldNoSides.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSides.offset );
     unsigned received = 0;
     for( auto & g : groupsSides ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSides.offset - 1 - FieldNoSides::tagWidth(); }
   }
   return nullptr;
}

const char * MessageOrderMassStatusRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyingSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyingSecurityAltID.offset - 1 - FieldNoUnderlyingSecurityAltID::tagWidth(); }
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyingStips.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyingStips.offset - 1 - FieldNoUnderlyingStips::tagWidth(); }
   }
   return nullptr;
}

const char * MessageQuoteRequestReject::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoRelatedSym.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoRelatedSym.offset );
     unsigned received = 0;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth(); }
   }
   return nullptr;
}

const char * MessageRFQRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoRelatedSym.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoRelatedSym.offset );
     unsigned received = 0;
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoRelatedSym.offset - 1 - FieldNoRelatedSym::tagWidth(); }
   }
   return nullptr;
}

const char * MessageQuoteStatusReport::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoQuoteQualifiers.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoQuoteQualifiers.offset );
     unsigned received = 0;
     for( auto & g : groupsQuoteQualifiers ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoQuoteQualifiers.offset - 1 - FieldNoQuoteQualifiers::tagWidth(); }
   }
   return nullptr;
}

const char * MessageQuoteResponse::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoQuoteQualifiers.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoQuoteQualifiers.offset );
     unsigned received = 0;
     for( auto & g : groupsQuoteQualifiers ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoQuoteQualifiers.offset - 1 - FieldNoQuoteQualifiers::tagWidth(); }
   }
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageConfirmation::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoOrders.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoOrders.offset );
     unsigned received = 0;
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoOrders.offset - 1 - FieldNoOrders::tagWidth(); }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrdRegTimestamps.offset );
     unsigned received = 0;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoInstrAttrib.offset );
     unsigned received = 0;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoCapacities.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoCapacities.offset );
     unsigned received = 0;
     for( auto & g : groupsCapacities ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoCapacities.offset - 1 - FieldNoCapacities::tagWidth(); }
   }
   if( fieldNoDlvyInst.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoDlvyInst.offset );
     unsigned received = 0;
     for( auto & g : groupsDlvyInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoDlvyInst.offset - 1 - FieldNoDlvyInst::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   if( fieldNoMiscFees.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoMiscFees.offset );
     unsigned received = 0;
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoMiscFees.offset - 1 - FieldNoMiscFees::tagWidth(); }
   }
   return nullptr;
}

const char * MessagePositionMaintenanceRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTradingSessions.offset );
     unsigned received = 0;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth(); }
   }
   if( fieldNoPositions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPositions.offset );
     unsigned received = 0;
     for( auto & g : groupsPositions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPositions.offset - 1 - FieldNoPositions::tagWidth(); }
   }
   return nullptr;
}

const char * MessagePositionMaintenanceReport::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTradingSessions.offset );
     unsigned received = 0;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth(); }
   }
   if( fieldNoPositions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPositions.offset );
     unsigned received = 0;
     for( auto & g : groupsPositions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPositions.offset - 1 - FieldNoPositions::tagWidth(); }
   }
   if( fieldNoPosAmt.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPosAmt.offset );
     unsigned received = 0;
     for( auto & g : groupsPosAmt ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPosAmt.offset - 1 - FieldNoPosAmt::tagWidth(); }
   }
   return nullptr;
}

const char * MessageRequestForPositions::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTradingSessions.offset );
     unsigned received = 0;
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTradingSessions.offset - 1 - FieldNoTradingSessions::tagWidth(); }
   }
   return nullptr;
}

const char * MessageRequestForPositionsAck::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   return nullptr;
}

const char * MessagePositionReport::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoPositions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPositions.offset );
     unsigned received = 0;
     for( auto & g : groupsPositions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPositions.offset - 1 - FieldNoPositions::tagWidth(); }
   }
   if( fieldNoPosAmt.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPosAmt.offset );
     unsigned received = 0;
     for( auto & g : groupsPosAmt ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPosAmt.offset - 1 - FieldNoPosAmt::tagWidth(); }
   }
   return nullptr;
}

const char * MessageTradeCaptureReportRequestAck::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageTradeCaptureReportAck::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrdRegTimestamps.offset );
     unsigned received = 0;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoAllocs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoAllocs.offset );
     unsigned received = 0;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageAllocationReport::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoOrders.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoOrders.offset );
     unsigned received = 0;
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoOrders.offset - 1 - FieldNoOrders::tagWidth(); }
   }
   if( fieldNoExecs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoExecs.offset );
     unsigned received = 0;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoInstrAttrib.offset );
     unsigned received = 0;
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoInstrAttrib.offset - 1 - FieldNoInstrAttrib::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   if( fieldNoAllocs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoAllocs.offset );
     unsigned received = 0;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageAllocationReportAck::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoAllocs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoAllocs.offset );
     unsigned received = 0;
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoAllocs.offset - 1 - FieldNoAllocs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageConfirmationAck::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageSettlementInstructionRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageAssignmentReport::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoPositions.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPositions.offset );
     unsigned received = 0;
     for( auto & g : groupsPositions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPositions.offset - 1 - FieldNoPositions::tagWidth(); }
   }
   if( fieldNoPosAmt.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPosAmt.offset );
     unsigned received = 0;
     for( auto & g : groupsPosAmt ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPosAmt.offset - 1 - FieldNoPosAmt::tagWidth(); }
   }
   return nullptr;
}

const char * MessageCollateralRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoExecs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoExecs.offset );
     unsigned received = 0;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth(); }
   }
   if( fieldNoTrades.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrades.offset );
     unsigned received = 0;
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrades.offset - 1 - FieldNoTrades::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrdRegTimestamps.offset );
     unsigned received = 0;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth(); }
   }
   if( fieldNoMiscFees.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoMiscFees.offset );
     unsigned received = 0;
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoMiscFees.offset - 1 - FieldNoMiscFees::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   return nullptr;
}

const char * MessageCollateralAssignment::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoExecs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoExecs.offset );
     unsigned received = 0;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth(); }
   }
   if( fieldNoTrades.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrades.offset );
     unsigned received = 0;
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrades.offset - 1 - FieldNoTrades::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrdRegTimestamps.offset );
     unsigned received = 0;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth(); }
   }
   if( fieldNoMiscFees.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoMiscFees.offset );
     unsigned received = 0;
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoMiscFees.offset - 1 - FieldNoMiscFees::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   if( fieldNoDlvyInst.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoDlvyInst.offset );
     unsigned received = 0;
     for( auto & g : groupsDlvyInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoDlvyInst.offset - 1 - FieldNoDlvyInst::tagWidth(); }
   }
   return nullptr;
}

const char * MessageCollateralResponse::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoExecs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoExecs.offset );
     unsigned received = 0;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth(); }
   }
   if( fieldNoTrades.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrades.offset );
     unsigned received = 0;
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrades.offset - 1 - FieldNoTrades::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrdRegTimestamps.offset );
     unsigned received = 0;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth(); }
   }
   if( fieldNoMiscFees.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoMiscFees.offset );
     unsigned received = 0;
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoMiscFees.offset - 1 - FieldNoMiscFees::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   return nullptr;
}

const char * MessageCollateralReport::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoExecs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoExecs.offset );
     unsigned received = 0;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth(); }
   }
   if( fieldNoTrades.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrades.offset );
     unsigned received = 0;
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrades.offset - 1 - FieldNoTrades::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrdRegTimestamps.offset );
     unsigned received = 0;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth(); }
   }
   if( fieldNoMiscFees.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoMiscFees.offset );
     unsigned received = 0;
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoMiscFees.offset - 1 - FieldNoMiscFees::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   if( fieldNoDlvyInst.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoDlvyInst.offset );
     unsigned received = 0;
     for( auto & g : groupsDlvyInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoDlvyInst.offset - 1 - FieldNoDlvyInst::tagWidth(); }
   }
   return nullptr;
}

const char * MessageCollateralInquiry::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoCollInquiryQualifier.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoCollInquiryQualifier.offset );
     unsigned received = 0;
     for( auto & g : groupsCollInquiryQualifier ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoCollInquiryQualifier.offset - 1 - FieldNoCollInquiryQualifier::tagWidth(); }
   }
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoExecs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoExecs.offset );
     unsigned received = 0;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth(); }
   }
   if( fieldNoTrades.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrades.offset );
     unsigned received = 0;
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrades.offset - 1 - FieldNoTrades::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrdRegTimestamps.offset );
     unsigned received = 0;
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrdRegTimestamps.offset - 1 - FieldNoTrdRegTimestamps::tagWidth(); }
   }
   if( fieldNoStipulations.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoStipulations.offset );
     unsigned received = 0;
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoStipulations.offset - 1 - FieldNoStipulations::tagWidth(); }
   }
   if( fieldNoDlvyInst.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoDlvyInst.offset );
     unsigned received = 0;
     for( auto & g : groupsDlvyInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoDlvyInst.offset - 1 - FieldNoDlvyInst::tagWidth(); }
   }
   return nullptr;
}

const char * MessageNetworkCounterpartySystemStatusRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoCompIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoCompIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsCompIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoCompIDs.offset - 1 - FieldNoCompIDs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageNetworkCounterpartySystemStatusResponse::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoCompIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoCompIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsCompIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoCompIDs.offset - 1 - FieldNoCompIDs::tagWidth(); }
   }
   return nullptr;
}

const char * MessageUserRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageUserResponse::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageCollateralInquiryAck::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoCollInquiryQualifier.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoCollInquiryQualifier.offset );
     unsigned received = 0;
     for( auto & g : groupsCollInquiryQualifier ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoCollInquiryQualifier.offset - 1 - FieldNoCollInquiryQualifier::tagWidth(); }
   }
   if( fieldNoPartyIDs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoPartyIDs.offset );
     unsigned received = 0;
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoPartyIDs.offset - 1 - FieldNoPartyIDs::tagWidth(); }
   }
   if( fieldNoExecs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoExecs.offset );
     unsigned received = 0;
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoExecs.offset - 1 - FieldNoExecs::tagWidth(); }
   }
   if( fieldNoTrades.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoTrades.offset );
     unsigned received = 0;
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoTrades.offset - 1 - FieldNoTrades::tagWidth(); }
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoSecurityAltID.offset );
     unsigned received = 0;
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoSecurityAltID.offset - 1 - FieldNoSecurityAltID::tagWidth(); }
   }
   if( fieldNoEvents.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoEvents.offset );
     unsigned received = 0;
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoEvents.offset - 1 - FieldNoEvents::tagWidth(); }
   }
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoUnderlyings.offset );
     unsigned received = 0;
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoUnderlyings.offset - 1 - FieldNoUnderlyings::tagWidth(); }
   }
   return nullptr;
}

const char * MessageConfirmationRequest::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoOrders.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoOrders.offset );
     unsigned received = 0;
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoOrders.offset - 1 - FieldNoOrders::tagWidth(); }
   }
   return nullptr;
}

// ---------------------------------- findBadEnum ---------------------------------

const char * MessageHeader::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldMsgType.offset > 0 and MsgTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMsgType.offset ) ) == nullptr ){
       return _fixPtr + fieldMsgType.offset - 1 - FieldMsgType::tagWidth();
   }
   if( fieldPossDupFlag.offset > 0 and PossDupFlagEnums::findEnum( toRawEnum( _fixPtr + fieldPossDupFlag.offset ) ) == nullptr ){
       return _fixPtr + fieldPossDupFlag.offset - 1 - FieldPossDupFlag::tagWidth();
   }
   if( fieldPossResend.offset > 0 and PossResendEnums::findEnum( toRawEnum( _fixPtr + fieldPossResend.offset ) ) == nullptr ){
       return _fixPtr + fieldPossResend.offset - 1 - FieldPossResend::tagWidth();
   }
   if( fieldMessageEncoding.offset > 0 and MessageEncodingEnums::findEnum( toRawEnum( _fixPtr + fieldMessageEncoding.offset ) ) == nullptr ){
       return _fixPtr + fieldMessageEncoding.offset - 1 - FieldMessageEncoding::tagWidth();
   }
   if( fieldNoHops.offset > 0 ){
     for( auto & g : groupsHops ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageHeartbeat::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageTestRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageResendRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageReject::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSessionRejectReason.offset > 0 and SessionRejectReasonEnums::findEnum( toRawEnum( _fixPtr + fieldSessionRejectReason.offset ) ) == nullptr ){
       return _fixPtr + fieldSessionRejectReason.offset - 1 - FieldSessionRejectReason::tagWidth();
   }
   return nullptr;
}

const char * MessageSequenceReset::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldGapFillFlag.offset > 0 and GapFillFlagEnums::findEnum( toRawEnum( _fixPtr + fieldGapFillFlag.offset ) ) == nullptr ){
       return _fixPtr + fieldGapFillFlag.offset - 1 - FieldGapFillFlag::tagWidth();
   }
   return nullptr;
}

const char * MessageLogout::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageIOI::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldIOITransType.offset > 0 and IOITransTypeEnums::findEnum( toRawEnum( _fixPtr + fieldIOITransType.offset ) ) == nullptr ){
       return _fixPtr + fieldIOITransType.offset - 1 - FieldIOITransType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldRoundingDirection.offset > 0 and RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldRoundingDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
   }
   if( fieldIOIQty.offset > 0 and IOIQtyEnums::findEnum( toRawEnum( _fixPtr + fieldIOIQty.offset ) ) == nullptr ){
       return _fixPtr + fieldIOIQty.offset - 1 - FieldIOIQty::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldIOIQltyInd.offset > 0 and IOIQltyIndEnums::findEnum( toRawEnum( _fixPtr + fieldIOIQltyInd.offset ) ) == nullptr ){
       return _fixPtr + fieldIOIQltyInd.offset - 1 - FieldIOIQltyInd::tagWidth();
   }
   if( fieldIOINaturalFlag.offset > 0 and IOINaturalFlagEnums::findEnum( toRawEnum( _fixPtr + fieldIOINaturalFlag.offset ) ) == nullptr ){
       return _fixPtr + fieldIOINaturalFlag.offset - 1 - FieldIOINaturalFlag::tagWidth();
   }
   if( fieldNoIOIQualifiers.offset > 0 ){
     for( auto & g : groupsIOIQualifiers ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoRoutingIDs.offset > 0 ){
     for( auto & g : groupsRoutingIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   return nullptr;
}

const char * MessageAdvertisement::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldAdvTransType.offset > 0 and AdvTransTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAdvTransType.offset ) ) == nullptr ){
       return _fixPtr + fieldAdvTransType.offset - 1 - FieldAdvTransType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAdvSide.offset > 0 and AdvSideEnums::findEnum( toRawEnum( _fixPtr + fieldAdvSide.offset ) ) == nullptr ){
       return _fixPtr + fieldAdvSide.offset - 1 - FieldAdvSide::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   return nullptr;
}

const char * MessageExecutionReport::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoContraBrokers.offset > 0 ){
     for( auto & g : groupsContraBrokers ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldCrossType.offset > 0 and CrossTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCrossType.offset ) ) == nullptr ){
       return _fixPtr + fieldCrossType.offset - 1 - FieldCrossType::tagWidth();
   }
   if( fieldExecType.offset > 0 and ExecTypeEnums::findEnum( toRawEnum( _fixPtr + fieldExecType.offset ) ) == nullptr ){
       return _fixPtr + fieldExecType.offset - 1 - FieldExecType::tagWidth();
   }
   if( fieldOrdStatus.offset > 0 and OrdStatusEnums::findEnum( toRawEnum( _fixPtr + fieldOrdStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdStatus.offset - 1 - FieldOrdStatus::tagWidth();
   }
   if( fieldWorkingIndicator.offset > 0 and WorkingIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldWorkingIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldWorkingIndicator.offset - 1 - FieldWorkingIndicator::tagWidth();
   }
   if( fieldOrdRejReason.offset > 0 and OrdRejReasonEnums::findEnum( toRawEnum( _fixPtr + fieldOrdRejReason.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdRejReason.offset - 1 - FieldOrdRejReason::tagWidth();
   }
   if( fieldExecRestatementReason.offset > 0 and ExecRestatementReasonEnums::findEnum( toRawEnum( _fixPtr + fieldExecRestatementReason.offset ) ) == nullptr ){
       return _fixPtr + fieldExecRestatementReason.offset - 1 - FieldExecRestatementReason::tagWidth();
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldDayBookingInst.offset > 0 and DayBookingInstEnums::findEnum( toRawEnum( _fixPtr + fieldDayBookingInst.offset ) ) == nullptr ){
       return _fixPtr + fieldDayBookingInst.offset - 1 - FieldDayBookingInst::tagWidth();
   }
   if( fieldBookingUnit.offset > 0 and BookingUnitEnums::findEnum( toRawEnum( _fixPtr + fieldBookingUnit.offset ) ) == nullptr ){
       return _fixPtr + fieldBookingUnit.offset - 1 - FieldBookingUnit::tagWidth();
   }
   if( fieldPreallocMethod.offset > 0 and PreallocMethodEnums::findEnum( toRawEnum( _fixPtr + fieldPreallocMethod.offset ) ) == nullptr ){
       return _fixPtr + fieldPreallocMethod.offset - 1 - FieldPreallocMethod::tagWidth();
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldCashMargin.offset > 0 and CashMarginEnums::findEnum( toRawEnum( _fixPtr + fieldCashMargin.offset ) ) == nullptr ){
       return _fixPtr + fieldCashMargin.offset - 1 - FieldCashMargin::tagWidth();
   }
   if( fieldClearingFeeIndicator.offset > 0 and ClearingFeeIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldClearingFeeIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldClearingFeeIndicator.offset - 1 - FieldClearingFeeIndicator::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldRoundingDirection.offset > 0 and RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldRoundingDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
   }
   if( fieldOrdType.offset > 0 and OrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldPegMoveType.offset > 0 and PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
   }
   if( fieldPegOffsetType.offset > 0 and PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
   }
   if( fieldPegLimitType.offset > 0 and PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
   }
   if( fieldPegRoundDirection.offset > 0 and PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldPegRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
   }
   if( fieldPegScope.offset > 0 and PegScopeEnums::findEnum( toRawEnum( _fixPtr + fieldPegScope.offset ) ) == nullptr ){
       return _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
   }
   if( fieldDiscretionInst.offset > 0 and DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionInst.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
   }
   if( fieldDiscretionMoveType.offset > 0 and DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
   }
   if( fieldDiscretionOffsetType.offset > 0 and DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
   }
   if( fieldDiscretionLimitType.offset > 0 and DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
   }
   if( fieldDiscretionRoundDirection.offset > 0 and DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
   }
   if( fieldDiscretionScope.offset > 0 and DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionScope.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
   }
   if( fieldTargetStrategy.offset > 0 and TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + fieldTargetStrategy.offset ) ) == nullptr ){
       return _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
   }
   if( fieldSolicitedFlag.offset > 0 and SolicitedFlagEnums::findEnum( toRawEnum( _fixPtr + fieldSolicitedFlag.offset ) ) == nullptr ){
       return _fixPtr + fieldSolicitedFlag.offset - 1 - FieldSolicitedFlag::tagWidth();
   }
   if( fieldTimeInForce.offset > 0 and TimeInForceEnums::findEnum( toRawEnum( _fixPtr + fieldTimeInForce.offset ) ) == nullptr ){
       return _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
   }
   if( fieldExecInst.offset > 0 and ExecInstEnums::findEnum( toRawEnum( _fixPtr + fieldExecInst.offset ) ) == nullptr ){
       return _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
   }
   if( fieldOrderCapacity.offset > 0 and OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
   }
   if( fieldOrderRestrictions.offset > 0 and OrderRestrictionsEnums::findEnum( toRawEnum( _fixPtr + fieldOrderRestrictions.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderRestrictions.offset - 1 - FieldOrderRestrictions::tagWidth();
   }
   if( fieldCustOrderCapacity.offset > 0 and CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldCustOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
   }
   if( fieldLastCapacity.offset > 0 and LastCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldLastCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldLastCapacity.offset - 1 - FieldLastCapacity::tagWidth();
   }
   if( fieldGTBookingInst.offset > 0 and GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + fieldGTBookingInst.offset ) ) == nullptr ){
       return _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
   }
   if( fieldReportToExch.offset > 0 and ReportToExchEnums::findEnum( toRawEnum( _fixPtr + fieldReportToExch.offset ) ) == nullptr ){
       return _fixPtr + fieldReportToExch.offset - 1 - FieldReportToExch::tagWidth();
   }
   if( fieldCommType.offset > 0 and CommTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCommType.offset ) ) == nullptr ){
       return _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
   }
   if( fieldFundRenewWaiv.offset > 0 and FundRenewWaivEnums::findEnum( toRawEnum( _fixPtr + fieldFundRenewWaiv.offset ) ) == nullptr ){
       return _fixPtr + fieldFundRenewWaiv.offset - 1 - FieldFundRenewWaiv::tagWidth();
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   if( fieldTradedFlatSwitch.offset > 0 and TradedFlatSwitchEnums::findEnum( toRawEnum( _fixPtr + fieldTradedFlatSwitch.offset ) ) == nullptr ){
       return _fixPtr + fieldTradedFlatSwitch.offset - 1 - FieldTradedFlatSwitch::tagWidth();
   }
   if( fieldSettlCurrFxRateCalc.offset > 0 and SettlCurrFxRateCalcEnums::findEnum( toRawEnum( _fixPtr + fieldSettlCurrFxRateCalc.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlCurrFxRateCalc.offset - 1 - FieldSettlCurrFxRateCalc::tagWidth();
   }
   if( fieldHandlInst.offset > 0 and HandlInstEnums::findEnum( toRawEnum( _fixPtr + fieldHandlInst.offset ) ) == nullptr ){
       return _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
   }
   if( fieldPositionEffect.offset > 0 and PositionEffectEnums::findEnum( toRawEnum( _fixPtr + fieldPositionEffect.offset ) ) == nullptr ){
       return _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
   }
   if( fieldBookingType.offset > 0 and BookingTypeEnums::findEnum( toRawEnum( _fixPtr + fieldBookingType.offset ) ) == nullptr ){
       return _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
   }
   if( fieldMultiLegReportingType.offset > 0 and MultiLegReportingTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMultiLegReportingType.offset ) ) == nullptr ){
       return _fixPtr + fieldMultiLegReportingType.offset - 1 - FieldMultiLegReportingType::tagWidth();
   }
   if( fieldCancellationRights.offset > 0 and CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + fieldCancellationRights.offset ) ) == nullptr ){
       return _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
   }
   if( fieldMoneyLaunderingStatus.offset > 0 and MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMoneyLaunderingStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
   }
   if( fieldExecPriceType.offset > 0 and ExecPriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldExecPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldExecPriceType.offset - 1 - FieldExecPriceType::tagWidth();
   }
   if( fieldPriorityIndicator.offset > 0 and PriorityIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldPriorityIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldPriorityIndicator.offset - 1 - FieldPriorityIndicator::tagWidth();
   }
   if( fieldLastLiquidityInd.offset > 0 and LastLiquidityIndEnums::findEnum( toRawEnum( _fixPtr + fieldLastLiquidityInd.offset ) ) == nullptr ){
       return _fixPtr + fieldLastLiquidityInd.offset - 1 - FieldLastLiquidityInd::tagWidth();
   }
   if( fieldNoContAmts.offset > 0 ){
     for( auto & g : groupsContAmts ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoMiscFees.offset > 0 ){
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageOrderCancelReject::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrdStatus.offset > 0 and OrdStatusEnums::findEnum( toRawEnum( _fixPtr + fieldOrdStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdStatus.offset - 1 - FieldOrdStatus::tagWidth();
   }
   if( fieldWorkingIndicator.offset > 0 and WorkingIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldWorkingIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldWorkingIndicator.offset - 1 - FieldWorkingIndicator::tagWidth();
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldCxlRejResponseTo.offset > 0 and CxlRejResponseToEnums::findEnum( toRawEnum( _fixPtr + fieldCxlRejResponseTo.offset ) ) == nullptr ){
       return _fixPtr + fieldCxlRejResponseTo.offset - 1 - FieldCxlRejResponseTo::tagWidth();
   }
   if( fieldCxlRejReason.offset > 0 and CxlRejReasonEnums::findEnum( toRawEnum( _fixPtr + fieldCxlRejReason.offset ) ) == nullptr ){
       return _fixPtr + fieldCxlRejReason.offset - 1 - FieldCxlRejReason::tagWidth();
   }
   return nullptr;
}

const char * MessageLogon::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldEncryptMethod.offset > 0 and EncryptMethodEnums::findEnum( toRawEnum( _fixPtr + fieldEncryptMethod.offset ) ) == nullptr ){
       return _fixPtr + fieldEncryptMethod.offset - 1 - FieldEncryptMethod::tagWidth();
   }
   if( fieldResetSeqNumFlag.offset > 0 and ResetSeqNumFlagEnums::findEnum( toRawEnum( _fixPtr + fieldResetSeqNumFlag.offset ) ) == nullptr ){
       return _fixPtr + fieldResetSeqNumFlag.offset - 1 - FieldResetSeqNumFlag::tagWidth();
   }
   if( fieldNoMsgTypes.offset > 0 ){
     for( auto & g : groupsMsgTypes ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTestMessageIndicator.offset > 0 and TestMessageIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldTestMessageIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldTestMessageIndicator.offset - 1 - FieldTestMessageIndicator::tagWidth();
   }
   return nullptr;
}

const char * MessageNews::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldUrgency.offset > 0 and UrgencyEnums::findEnum( toRawEnum( _fixPtr + fieldUrgency.offset ) ) == nullptr ){
       return _fixPtr + fieldUrgency.offset - 1 - FieldUrgency::tagWidth();
   }
   if( fieldNoRoutingIDs.offset > 0 ){
     for( auto & g : groupsRoutingIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoRelatedSym.offset > 0 ){
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLinesOfText.offset > 0 ){
     for( auto & g : groupsLinesOfText ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageEmail::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldEmailType.offset > 0 and EmailTypeEnums::findEnum( toRawEnum( _fixPtr + fieldEmailType.offset ) ) == nullptr ){
       return _fixPtr + fieldEmailType.offset - 1 - FieldEmailType::tagWidth();
   }
   if( fieldNoRoutingIDs.offset > 0 ){
     for( auto & g : groupsRoutingIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoRelatedSym.offset > 0 ){
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLinesOfText.offset > 0 ){
     for( auto & g : groupsLinesOfText ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageNewOrderSingle::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldDayBookingInst.offset > 0 and DayBookingInstEnums::findEnum( toRawEnum( _fixPtr + fieldDayBookingInst.offset ) ) == nullptr ){
       return _fixPtr + fieldDayBookingInst.offset - 1 - FieldDayBookingInst::tagWidth();
   }
   if( fieldBookingUnit.offset > 0 and BookingUnitEnums::findEnum( toRawEnum( _fixPtr + fieldBookingUnit.offset ) ) == nullptr ){
       return _fixPtr + fieldBookingUnit.offset - 1 - FieldBookingUnit::tagWidth();
   }
   if( fieldPreallocMethod.offset > 0 and PreallocMethodEnums::findEnum( toRawEnum( _fixPtr + fieldPreallocMethod.offset ) ) == nullptr ){
       return _fixPtr + fieldPreallocMethod.offset - 1 - FieldPreallocMethod::tagWidth();
   }
   if( fieldNoAllocs.offset > 0 ){
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldCashMargin.offset > 0 and CashMarginEnums::findEnum( toRawEnum( _fixPtr + fieldCashMargin.offset ) ) == nullptr ){
       return _fixPtr + fieldCashMargin.offset - 1 - FieldCashMargin::tagWidth();
   }
   if( fieldClearingFeeIndicator.offset > 0 and ClearingFeeIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldClearingFeeIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldClearingFeeIndicator.offset - 1 - FieldClearingFeeIndicator::tagWidth();
   }
   if( fieldHandlInst.offset > 0 and HandlInstEnums::findEnum( toRawEnum( _fixPtr + fieldHandlInst.offset ) ) == nullptr ){
       return _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
   }
   if( fieldExecInst.offset > 0 and ExecInstEnums::findEnum( toRawEnum( _fixPtr + fieldExecInst.offset ) ) == nullptr ){
       return _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
   }
   if( fieldNoTradingSessions.offset > 0 ){
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProcessCode.offset > 0 and ProcessCodeEnums::findEnum( toRawEnum( _fixPtr + fieldProcessCode.offset ) ) == nullptr ){
       return _fixPtr + fieldProcessCode.offset - 1 - FieldProcessCode::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldLocateReqd.offset > 0 and LocateReqdEnums::findEnum( toRawEnum( _fixPtr + fieldLocateReqd.offset ) ) == nullptr ){
       return _fixPtr + fieldLocateReqd.offset - 1 - FieldLocateReqd::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldRoundingDirection.offset > 0 and RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldRoundingDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
   }
   if( fieldOrdType.offset > 0 and OrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   if( fieldSolicitedFlag.offset > 0 and SolicitedFlagEnums::findEnum( toRawEnum( _fixPtr + fieldSolicitedFlag.offset ) ) == nullptr ){
       return _fixPtr + fieldSolicitedFlag.offset - 1 - FieldSolicitedFlag::tagWidth();
   }
   if( fieldTimeInForce.offset > 0 and TimeInForceEnums::findEnum( toRawEnum( _fixPtr + fieldTimeInForce.offset ) ) == nullptr ){
       return _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
   }
   if( fieldGTBookingInst.offset > 0 and GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + fieldGTBookingInst.offset ) ) == nullptr ){
       return _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
   }
   if( fieldCommType.offset > 0 and CommTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCommType.offset ) ) == nullptr ){
       return _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
   }
   if( fieldFundRenewWaiv.offset > 0 and FundRenewWaivEnums::findEnum( toRawEnum( _fixPtr + fieldFundRenewWaiv.offset ) ) == nullptr ){
       return _fixPtr + fieldFundRenewWaiv.offset - 1 - FieldFundRenewWaiv::tagWidth();
   }
   if( fieldOrderCapacity.offset > 0 and OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
   }
   if( fieldOrderRestrictions.offset > 0 and OrderRestrictionsEnums::findEnum( toRawEnum( _fixPtr + fieldOrderRestrictions.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderRestrictions.offset - 1 - FieldOrderRestrictions::tagWidth();
   }
   if( fieldCustOrderCapacity.offset > 0 and CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldCustOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
   }
   if( fieldForexReq.offset > 0 and ForexReqEnums::findEnum( toRawEnum( _fixPtr + fieldForexReq.offset ) ) == nullptr ){
       return _fixPtr + fieldForexReq.offset - 1 - FieldForexReq::tagWidth();
   }
   if( fieldBookingType.offset > 0 and BookingTypeEnums::findEnum( toRawEnum( _fixPtr + fieldBookingType.offset ) ) == nullptr ){
       return _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
   }
   if( fieldPositionEffect.offset > 0 and PositionEffectEnums::findEnum( toRawEnum( _fixPtr + fieldPositionEffect.offset ) ) == nullptr ){
       return _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
   }
   if( fieldCoveredOrUncovered.offset > 0 and CoveredOrUncoveredEnums::findEnum( toRawEnum( _fixPtr + fieldCoveredOrUncovered.offset ) ) == nullptr ){
       return _fixPtr + fieldCoveredOrUncovered.offset - 1 - FieldCoveredOrUncovered::tagWidth();
   }
   if( fieldPegMoveType.offset > 0 and PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
   }
   if( fieldPegOffsetType.offset > 0 and PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
   }
   if( fieldPegLimitType.offset > 0 and PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
   }
   if( fieldPegRoundDirection.offset > 0 and PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldPegRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
   }
   if( fieldPegScope.offset > 0 and PegScopeEnums::findEnum( toRawEnum( _fixPtr + fieldPegScope.offset ) ) == nullptr ){
       return _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
   }
   if( fieldDiscretionInst.offset > 0 and DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionInst.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
   }
   if( fieldDiscretionMoveType.offset > 0 and DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
   }
   if( fieldDiscretionOffsetType.offset > 0 and DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
   }
   if( fieldDiscretionLimitType.offset > 0 and DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
   }
   if( fieldDiscretionRoundDirection.offset > 0 and DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
   }
   if( fieldDiscretionScope.offset > 0 and DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionScope.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
   }
   if( fieldTargetStrategy.offset > 0 and TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + fieldTargetStrategy.offset ) ) == nullptr ){
       return _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
   }
   if( fieldCancellationRights.offset > 0 and CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + fieldCancellationRights.offset ) ) == nullptr ){
       return _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
   }
   if( fieldMoneyLaunderingStatus.offset > 0 and MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMoneyLaunderingStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
   }
   return nullptr;
}

const char * MessageNewOrderList::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldProgRptReqs.offset > 0 and ProgRptReqsEnums::findEnum( toRawEnum( _fixPtr + fieldProgRptReqs.offset ) ) == nullptr ){
       return _fixPtr + fieldProgRptReqs.offset - 1 - FieldProgRptReqs::tagWidth();
   }
   if( fieldBidType.offset > 0 and BidTypeEnums::findEnum( toRawEnum( _fixPtr + fieldBidType.offset ) ) == nullptr ){
       return _fixPtr + fieldBidType.offset - 1 - FieldBidType::tagWidth();
   }
   if( fieldCancellationRights.offset > 0 and CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + fieldCancellationRights.offset ) ) == nullptr ){
       return _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
   }
   if( fieldMoneyLaunderingStatus.offset > 0 and MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMoneyLaunderingStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
   }
   if( fieldListExecInstType.offset > 0 and ListExecInstTypeEnums::findEnum( toRawEnum( _fixPtr + fieldListExecInstType.offset ) ) == nullptr ){
       return _fixPtr + fieldListExecInstType.offset - 1 - FieldListExecInstType::tagWidth();
   }
   if( fieldLastFragment.offset > 0 and LastFragmentEnums::findEnum( toRawEnum( _fixPtr + fieldLastFragment.offset ) ) == nullptr ){
       return _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
   }
   if( fieldNoOrders.offset > 0 ){
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageOrderCancelRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldRoundingDirection.offset > 0 and RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldRoundingDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
   }
   return nullptr;
}

const char * MessageOrderCancelReplaceRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldDayBookingInst.offset > 0 and DayBookingInstEnums::findEnum( toRawEnum( _fixPtr + fieldDayBookingInst.offset ) ) == nullptr ){
       return _fixPtr + fieldDayBookingInst.offset - 1 - FieldDayBookingInst::tagWidth();
   }
   if( fieldBookingUnit.offset > 0 and BookingUnitEnums::findEnum( toRawEnum( _fixPtr + fieldBookingUnit.offset ) ) == nullptr ){
       return _fixPtr + fieldBookingUnit.offset - 1 - FieldBookingUnit::tagWidth();
   }
   if( fieldPreallocMethod.offset > 0 and PreallocMethodEnums::findEnum( toRawEnum( _fixPtr + fieldPreallocMethod.offset ) ) == nullptr ){
       return _fixPtr + fieldPreallocMethod.offset - 1 - FieldPreallocMethod::tagWidth();
   }
   if( fieldNoAllocs.offset > 0 ){
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldCashMargin.offset > 0 and CashMarginEnums::findEnum( toRawEnum( _fixPtr + fieldCashMargin.offset ) ) == nullptr ){
       return _fixPtr + fieldCashMargin.offset - 1 - FieldCashMargin::tagWidth();
   }
   if( fieldClearingFeeIndicator.offset > 0 and ClearingFeeIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldClearingFeeIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldClearingFeeIndicator.offset - 1 - FieldClearingFeeIndicator::tagWidth();
   }
   if( fieldHandlInst.offset > 0 and HandlInstEnums::findEnum( toRawEnum( _fixPtr + fieldHandlInst.offset ) ) == nullptr ){
       return _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
   }
   if( fieldExecInst.offset > 0 and ExecInstEnums::findEnum( toRawEnum( _fixPtr + fieldExecInst.offset ) ) == nullptr ){
       return _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
   }
   if( fieldNoTradingSessions.offset > 0 ){
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldRoundingDirection.offset > 0 and RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldRoundingDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
   }
   if( fieldOrdType.offset > 0 and OrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   if( fieldPegMoveType.offset > 0 and PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
   }
   if( fieldPegOffsetType.offset > 0 and PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
   }
   if( fieldPegLimitType.offset > 0 and PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
   }
   if( fieldPegRoundDirection.offset > 0 and PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldPegRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
   }
   if( fieldPegScope.offset > 0 and PegScopeEnums::findEnum( toRawEnum( _fixPtr + fieldPegScope.offset ) ) == nullptr ){
       return _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
   }
   if( fieldDiscretionInst.offset > 0 and DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionInst.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
   }
   if( fieldDiscretionMoveType.offset > 0 and DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
   }
   if( fieldDiscretionOffsetType.offset > 0 and DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
   }
   if( fieldDiscretionLimitType.offset > 0 and DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
   }
   if( fieldDiscretionRoundDirection.offset > 0 and DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
   }
   if( fieldDiscretionScope.offset > 0 and DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionScope.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
   }
   if( fieldTargetStrategy.offset > 0 and TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + fieldTargetStrategy.offset ) ) == nullptr ){
       return _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
   }
   if( fieldSolicitedFlag.offset > 0 and SolicitedFlagEnums::findEnum( toRawEnum( _fixPtr + fieldSolicitedFlag.offset ) ) == nullptr ){
       return _fixPtr + fieldSolicitedFlag.offset - 1 - FieldSolicitedFlag::tagWidth();
   }
   if( fieldTimeInForce.offset > 0 and TimeInForceEnums::findEnum( toRawEnum( _fixPtr + fieldTimeInForce.offset ) ) == nullptr ){
       return _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
   }
   if( fieldGTBookingInst.offset > 0 and GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + fieldGTBookingInst.offset ) ) == nullptr ){
       return _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
   }
   if( fieldCommType.offset > 0 and CommTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCommType.offset ) ) == nullptr ){
       return _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
   }
   if( fieldFundRenewWaiv.offset > 0 and FundRenewWaivEnums::findEnum( toRawEnum( _fixPtr + fieldFundRenewWaiv.offset ) ) == nullptr ){
       return _fixPtr + fieldFundRenewWaiv.offset - 1 - FieldFundRenewWaiv::tagWidth();
   }
   if( fieldOrderCapacity.offset > 0 and OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
   }
   if( fieldOrderRestrictions.offset > 0 and OrderRestrictionsEnums::findEnum( toRawEnum( _fixPtr + fieldOrderRestrictions.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderRestrictions.offset - 1 - FieldOrderRestrictions::tagWidth();
   }
   if( fieldCustOrderCapacity.offset > 0 and CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldCustOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
   }
   if( fieldForexReq.offset > 0 and ForexReqEnums::findEnum( toRawEnum( _fixPtr + fieldForexReq.offset ) ) == nullptr ){
       return _fixPtr + fieldForexReq.offset - 1 - FieldForexReq::tagWidth();
   }
   if( fieldBookingType.offset > 0 and BookingTypeEnums::findEnum( toRawEnum( _fixPtr + fieldBookingType.offset ) ) == nullptr ){
       return _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
   }
   if( fieldPositionEffect.offset > 0 and PositionEffectEnums::findEnum( toRawEnum( _fixPtr + fieldPositionEffect.offset ) ) == nullptr ){
       return _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
   }
   if( fieldCoveredOrUncovered.offset > 0 and CoveredOrUncoveredEnums::findEnum( toRawEnum( _fixPtr + fieldCoveredOrUncovered.offset ) ) == nullptr ){
       return _fixPtr + fieldCoveredOrUncovered.offset - 1 - FieldCoveredOrUncovered::tagWidth();
   }
   if( fieldLocateReqd.offset > 0 and LocateReqdEnums::findEnum( toRawEnum( _fixPtr + fieldLocateReqd.offset ) ) == nullptr ){
       return _fixPtr + fieldLocateReqd.offset - 1 - FieldLocateReqd::tagWidth();
   }
   if( fieldCancellationRights.offset > 0 and CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + fieldCancellationRights.offset ) ) == nullptr ){
       return _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
   }
   if( fieldMoneyLaunderingStatus.offset > 0 and MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMoneyLaunderingStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
   }
   return nullptr;
}

const char * MessageOrderStatusRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   return nullptr;
}

const char * MessageAllocationInstruction::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldAllocTransType.offset > 0 and AllocTransTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocTransType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocTransType.offset - 1 - FieldAllocTransType::tagWidth();
   }
   if( fieldAllocType.offset > 0 and AllocTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocType.offset - 1 - FieldAllocType::tagWidth();
   }
   if( fieldAllocCancReplaceReason.offset > 0 and AllocCancReplaceReasonEnums::findEnum( toRawEnum( _fixPtr + fieldAllocCancReplaceReason.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocCancReplaceReason.offset - 1 - FieldAllocCancReplaceReason::tagWidth();
   }
   if( fieldAllocIntermedReqType.offset > 0 and AllocIntermedReqTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocIntermedReqType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocIntermedReqType.offset - 1 - FieldAllocIntermedReqType::tagWidth();
   }
   if( fieldAllocLinkType.offset > 0 and AllocLinkTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocLinkType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocLinkType.offset - 1 - FieldAllocLinkType::tagWidth();
   }
   if( fieldAllocNoOrdersType.offset > 0 and AllocNoOrdersTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocNoOrdersType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocNoOrdersType.offset - 1 - FieldAllocNoOrdersType::tagWidth();
   }
   if( fieldNoOrders.offset > 0 ){
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoExecs.offset > 0 ){
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPreviouslyReported.offset > 0 and PreviouslyReportedEnums::findEnum( toRawEnum( _fixPtr + fieldPreviouslyReported.offset ) ) == nullptr ){
       return _fixPtr + fieldPreviouslyReported.offset - 1 - FieldPreviouslyReported::tagWidth();
   }
   if( fieldMatchType.offset > 0 and MatchTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMatchType.offset ) ) == nullptr ){
       return _fixPtr + fieldMatchType.offset - 1 - FieldMatchType::tagWidth();
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDeliveryForm.offset > 0 and DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryForm.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldBookingType.offset > 0 and BookingTypeEnums::findEnum( toRawEnum( _fixPtr + fieldBookingType.offset ) ) == nullptr ){
       return _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
   }
   if( fieldPositionEffect.offset > 0 and PositionEffectEnums::findEnum( toRawEnum( _fixPtr + fieldPositionEffect.offset ) ) == nullptr ){
       return _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
   }
   if( fieldLegalConfirm.offset > 0 and LegalConfirmEnums::findEnum( toRawEnum( _fixPtr + fieldLegalConfirm.offset ) ) == nullptr ){
       return _fixPtr + fieldLegalConfirm.offset - 1 - FieldLegalConfirm::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   if( fieldLastFragment.offset > 0 and LastFragmentEnums::findEnum( toRawEnum( _fixPtr + fieldLastFragment.offset ) ) == nullptr ){
       return _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
   }
   if( fieldNoAllocs.offset > 0 ){
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageListCancelRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageListExecute::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageListStatusRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageListStatus::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldListStatusType.offset > 0 and ListStatusTypeEnums::findEnum( toRawEnum( _fixPtr + fieldListStatusType.offset ) ) == nullptr ){
       return _fixPtr + fieldListStatusType.offset - 1 - FieldListStatusType::tagWidth();
   }
   if( fieldListOrderStatus.offset > 0 and ListOrderStatusEnums::findEnum( toRawEnum( _fixPtr + fieldListOrderStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldListOrderStatus.offset - 1 - FieldListOrderStatus::tagWidth();
   }
   if( fieldLastFragment.offset > 0 and LastFragmentEnums::findEnum( toRawEnum( _fixPtr + fieldLastFragment.offset ) ) == nullptr ){
       return _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
   }
   if( fieldNoOrders.offset > 0 ){
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageAllocationInstructionAck::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAllocStatus.offset > 0 and AllocStatusEnums::findEnum( toRawEnum( _fixPtr + fieldAllocStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocStatus.offset - 1 - FieldAllocStatus::tagWidth();
   }
   if( fieldAllocRejCode.offset > 0 and AllocRejCodeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocRejCode.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocRejCode.offset - 1 - FieldAllocRejCode::tagWidth();
   }
   if( fieldAllocType.offset > 0 and AllocTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocType.offset - 1 - FieldAllocType::tagWidth();
   }
   if( fieldAllocIntermedReqType.offset > 0 and AllocIntermedReqTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocIntermedReqType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocIntermedReqType.offset - 1 - FieldAllocIntermedReqType::tagWidth();
   }
   if( fieldMatchStatus.offset > 0 and MatchStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMatchStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMatchStatus.offset - 1 - FieldMatchStatus::tagWidth();
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldNoAllocs.offset > 0 ){
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageDontKnowTrade::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldDKReason.offset > 0 and DKReasonEnums::findEnum( toRawEnum( _fixPtr + fieldDKReason.offset ) ) == nullptr ){
       return _fixPtr + fieldDKReason.offset - 1 - FieldDKReason::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldRoundingDirection.offset > 0 and RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldRoundingDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
   }
   return nullptr;
}

const char * MessageQuoteRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrderCapacity.offset > 0 and OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
   }
   if( fieldNoRelatedSym.offset > 0 ){
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageQuote::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteType.offset > 0 and QuoteTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteType.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteType.offset - 1 - FieldQuoteType::tagWidth();
   }
   if( fieldNoQuoteQualifiers.offset > 0 ){
     for( auto & g : groupsQuoteQualifiers ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldQuoteResponseLevel.offset > 0 and QuoteResponseLevelEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteResponseLevel.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteResponseLevel.offset - 1 - FieldQuoteResponseLevel::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldRoundingDirection.offset > 0 and RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldRoundingDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldOrdType.offset > 0 and OrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
   }
   if( fieldSettlCurrFxRateCalc.offset > 0 and SettlCurrFxRateCalcEnums::findEnum( toRawEnum( _fixPtr + fieldSettlCurrFxRateCalc.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlCurrFxRateCalc.offset - 1 - FieldSettlCurrFxRateCalc::tagWidth();
   }
   if( fieldCommType.offset > 0 and CommTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCommType.offset ) ) == nullptr ){
       return _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
   }
   if( fieldCustOrderCapacity.offset > 0 and CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldCustOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
   }
   if( fieldOrderCapacity.offset > 0 and OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   return nullptr;
}

const char * MessageSettlementInstructions::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSettlInstMode.offset > 0 and SettlInstModeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlInstMode.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlInstMode.offset - 1 - FieldSettlInstMode::tagWidth();
   }
   if( fieldSettlInstReqRejCode.offset > 0 and SettlInstReqRejCodeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlInstReqRejCode.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlInstReqRejCode.offset - 1 - FieldSettlInstReqRejCode::tagWidth();
   }
   if( fieldNoSettlInst.offset > 0 ){
     for( auto & g : groupsSettlInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageMarketDataRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   if( fieldMDUpdateType.offset > 0 and MDUpdateTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMDUpdateType.offset ) ) == nullptr ){
       return _fixPtr + fieldMDUpdateType.offset - 1 - FieldMDUpdateType::tagWidth();
   }
   if( fieldAggregatedBook.offset > 0 and AggregatedBookEnums::findEnum( toRawEnum( _fixPtr + fieldAggregatedBook.offset ) ) == nullptr ){
       return _fixPtr + fieldAggregatedBook.offset - 1 - FieldAggregatedBook::tagWidth();
   }
   if( fieldOpenCloseSettlFlag.offset > 0 and OpenCloseSettlFlagEnums::findEnum( toRawEnum( _fixPtr + fieldOpenCloseSettlFlag.offset ) ) == nullptr ){
       return _fixPtr + fieldOpenCloseSettlFlag.offset - 1 - FieldOpenCloseSettlFlag::tagWidth();
   }
   if( fieldScope.offset > 0 and ScopeEnums::findEnum( toRawEnum( _fixPtr + fieldScope.offset ) ) == nullptr ){
       return _fixPtr + fieldScope.offset - 1 - FieldScope::tagWidth();
   }
   if( fieldMDImplicitDelete.offset > 0 and MDImplicitDeleteEnums::findEnum( toRawEnum( _fixPtr + fieldMDImplicitDelete.offset ) ) == nullptr ){
       return _fixPtr + fieldMDImplicitDelete.offset - 1 - FieldMDImplicitDelete::tagWidth();
   }
   if( fieldNoMDEntryTypes.offset > 0 ){
     for( auto & g : groupsMDEntryTypes ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoRelatedSym.offset > 0 ){
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldApplQueueAction.offset > 0 and ApplQueueActionEnums::findEnum( toRawEnum( _fixPtr + fieldApplQueueAction.offset ) ) == nullptr ){
       return _fixPtr + fieldApplQueueAction.offset - 1 - FieldApplQueueAction::tagWidth();
   }
   return nullptr;
}

const char * MessageMarketDataSnapshotFullRefresh::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldFinancialStatus.offset > 0 and FinancialStatusEnums::findEnum( toRawEnum( _fixPtr + fieldFinancialStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldFinancialStatus.offset - 1 - FieldFinancialStatus::tagWidth();
   }
   if( fieldCorporateAction.offset > 0 and CorporateActionEnums::findEnum( toRawEnum( _fixPtr + fieldCorporateAction.offset ) ) == nullptr ){
       return _fixPtr + fieldCorporateAction.offset - 1 - FieldCorporateAction::tagWidth();
   }
   if( fieldNoMDEntries.offset > 0 ){
     for( auto & g : groupsMDEntries ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldApplQueueResolution.offset > 0 and ApplQueueResolutionEnums::findEnum( toRawEnum( _fixPtr + fieldApplQueueResolution.offset ) ) == nullptr ){
       return _fixPtr + fieldApplQueueResolution.offset - 1 - FieldApplQueueResolution::tagWidth();
   }
   return nullptr;
}

const char * MessageMarketDataIncrementalRefresh::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoMDEntries.offset > 0 ){
     for( auto & g : groupsMDEntries ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldApplQueueResolution.offset > 0 and ApplQueueResolutionEnums::findEnum( toRawEnum( _fixPtr + fieldApplQueueResolution.offset ) ) == nullptr ){
       return _fixPtr + fieldApplQueueResolution.offset - 1 - FieldApplQueueResolution::tagWidth();
   }
   return nullptr;
}

const char * MessageMarketDataRequestReject::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldMDReqRejReason.offset > 0 and MDReqRejReasonEnums::findEnum( toRawEnum( _fixPtr + fieldMDReqRejReason.offset ) ) == nullptr ){
       return _fixPtr + fieldMDReqRejReason.offset - 1 - FieldMDReqRejReason::tagWidth();
   }
   if( fieldNoAltMDSource.offset > 0 ){
     for( auto & g : groupsAltMDSource ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageQuoteCancel::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteCancelType.offset > 0 and QuoteCancelTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteCancelType.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteCancelType.offset - 1 - FieldQuoteCancelType::tagWidth();
   }
   if( fieldQuoteResponseLevel.offset > 0 and QuoteResponseLevelEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteResponseLevel.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteResponseLevel.offset - 1 - FieldQuoteResponseLevel::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoQuoteEntries.offset > 0 ){
     for( auto & g : groupsQuoteEntries ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageQuoteStatusRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   return nullptr;
}

const char * MessageMassQuoteAcknowledgement::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteStatus.offset > 0 and QuoteStatusEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteStatus.offset - 1 - FieldQuoteStatus::tagWidth();
   }
   if( fieldQuoteRejectReason.offset > 0 and QuoteRejectReasonEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteRejectReason.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteRejectReason.offset - 1 - FieldQuoteRejectReason::tagWidth();
   }
   if( fieldQuoteResponseLevel.offset > 0 and QuoteResponseLevelEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteResponseLevel.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteResponseLevel.offset - 1 - FieldQuoteResponseLevel::tagWidth();
   }
   if( fieldQuoteType.offset > 0 and QuoteTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteType.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteType.offset - 1 - FieldQuoteType::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoQuoteSets.offset > 0 ){
     for( auto & g : groupsQuoteSets ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageSecurityDefinitionRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityRequestType.offset > 0 and SecurityRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityRequestType.offset - 1 - FieldSecurityRequestType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDeliveryForm.offset > 0 and DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryForm.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldExpirationCycle.offset > 0 and ExpirationCycleEnums::findEnum( toRawEnum( _fixPtr + fieldExpirationCycle.offset ) ) == nullptr ){
       return _fixPtr + fieldExpirationCycle.offset - 1 - FieldExpirationCycle::tagWidth();
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   return nullptr;
}

const char * MessageSecurityDefinition::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityResponseType.offset > 0 and SecurityResponseTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityResponseType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityResponseType.offset - 1 - FieldSecurityResponseType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDeliveryForm.offset > 0 and DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryForm.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldExpirationCycle.offset > 0 and ExpirationCycleEnums::findEnum( toRawEnum( _fixPtr + fieldExpirationCycle.offset ) ) == nullptr ){
       return _fixPtr + fieldExpirationCycle.offset - 1 - FieldExpirationCycle::tagWidth();
   }
   return nullptr;
}

const char * MessageSecurityStatusRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDeliveryForm.offset > 0 and DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryForm.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   return nullptr;
}

const char * MessageSecurityStatus::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDeliveryForm.offset > 0 and DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryForm.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldUnsolicitedIndicator.offset > 0 and UnsolicitedIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldUnsolicitedIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldUnsolicitedIndicator.offset - 1 - FieldUnsolicitedIndicator::tagWidth();
   }
   if( fieldSecurityTradingStatus.offset > 0 and SecurityTradingStatusEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityTradingStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityTradingStatus.offset - 1 - FieldSecurityTradingStatus::tagWidth();
   }
   if( fieldFinancialStatus.offset > 0 and FinancialStatusEnums::findEnum( toRawEnum( _fixPtr + fieldFinancialStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldFinancialStatus.offset - 1 - FieldFinancialStatus::tagWidth();
   }
   if( fieldCorporateAction.offset > 0 and CorporateActionEnums::findEnum( toRawEnum( _fixPtr + fieldCorporateAction.offset ) ) == nullptr ){
       return _fixPtr + fieldCorporateAction.offset - 1 - FieldCorporateAction::tagWidth();
   }
   if( fieldHaltReasonChar.offset > 0 and HaltReasonCharEnums::findEnum( toRawEnum( _fixPtr + fieldHaltReasonChar.offset ) ) == nullptr ){
       return _fixPtr + fieldHaltReasonChar.offset - 1 - FieldHaltReasonChar::tagWidth();
   }
   if( fieldInViewOfCommon.offset > 0 and InViewOfCommonEnums::findEnum( toRawEnum( _fixPtr + fieldInViewOfCommon.offset ) ) == nullptr ){
       return _fixPtr + fieldInViewOfCommon.offset - 1 - FieldInViewOfCommon::tagWidth();
   }
   if( fieldDueToRelated.offset > 0 and DueToRelatedEnums::findEnum( toRawEnum( _fixPtr + fieldDueToRelated.offset ) ) == nullptr ){
       return _fixPtr + fieldDueToRelated.offset - 1 - FieldDueToRelated::tagWidth();
   }
   if( fieldAdjustment.offset > 0 and AdjustmentEnums::findEnum( toRawEnum( _fixPtr + fieldAdjustment.offset ) ) == nullptr ){
       return _fixPtr + fieldAdjustment.offset - 1 - FieldAdjustment::tagWidth();
   }
   return nullptr;
}

const char * MessageTradingSessionStatusRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTradSesMethod.offset > 0 and TradSesMethodEnums::findEnum( toRawEnum( _fixPtr + fieldTradSesMethod.offset ) ) == nullptr ){
       return _fixPtr + fieldTradSesMethod.offset - 1 - FieldTradSesMethod::tagWidth();
   }
   if( fieldTradSesMode.offset > 0 and TradSesModeEnums::findEnum( toRawEnum( _fixPtr + fieldTradSesMode.offset ) ) == nullptr ){
       return _fixPtr + fieldTradSesMode.offset - 1 - FieldTradSesMode::tagWidth();
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   return nullptr;
}

const char * MessageTradingSessionStatus::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTradSesMethod.offset > 0 and TradSesMethodEnums::findEnum( toRawEnum( _fixPtr + fieldTradSesMethod.offset ) ) == nullptr ){
       return _fixPtr + fieldTradSesMethod.offset - 1 - FieldTradSesMethod::tagWidth();
   }
   if( fieldTradSesMode.offset > 0 and TradSesModeEnums::findEnum( toRawEnum( _fixPtr + fieldTradSesMode.offset ) ) == nullptr ){
       return _fixPtr + fieldTradSesMode.offset - 1 - FieldTradSesMode::tagWidth();
   }
   if( fieldUnsolicitedIndicator.offset > 0 and UnsolicitedIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldUnsolicitedIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldUnsolicitedIndicator.offset - 1 - FieldUnsolicitedIndicator::tagWidth();
   }
   if( fieldTradSesStatus.offset > 0 and TradSesStatusEnums::findEnum( toRawEnum( _fixPtr + fieldTradSesStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldTradSesStatus.offset - 1 - FieldTradSesStatus::tagWidth();
   }
   if( fieldTradSesStatusRejReason.offset > 0 and TradSesStatusRejReasonEnums::findEnum( toRawEnum( _fixPtr + fieldTradSesStatusRejReason.offset ) ) == nullptr ){
       return _fixPtr + fieldTradSesStatusRejReason.offset - 1 - FieldTradSesStatusRejReason::tagWidth();
   }
   return nullptr;
}

const char * MessageMassQuote::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteType.offset > 0 and QuoteTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteType.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteType.offset - 1 - FieldQuoteType::tagWidth();
   }
   if( fieldQuoteResponseLevel.offset > 0 and QuoteResponseLevelEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteResponseLevel.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteResponseLevel.offset - 1 - FieldQuoteResponseLevel::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoQuoteSets.offset > 0 ){
     for( auto & g : groupsQuoteSets ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageBusinessMessageReject::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldBusinessRejectReason.offset > 0 and BusinessRejectReasonEnums::findEnum( toRawEnum( _fixPtr + fieldBusinessRejectReason.offset ) ) == nullptr ){
       return _fixPtr + fieldBusinessRejectReason.offset - 1 - FieldBusinessRejectReason::tagWidth();
   }
   return nullptr;
}

const char * MessageBidRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldBidRequestTransType.offset > 0 and BidRequestTransTypeEnums::findEnum( toRawEnum( _fixPtr + fieldBidRequestTransType.offset ) ) == nullptr ){
       return _fixPtr + fieldBidRequestTransType.offset - 1 - FieldBidRequestTransType::tagWidth();
   }
   if( fieldBidType.offset > 0 and BidTypeEnums::findEnum( toRawEnum( _fixPtr + fieldBidType.offset ) ) == nullptr ){
       return _fixPtr + fieldBidType.offset - 1 - FieldBidType::tagWidth();
   }
   if( fieldNoBidDescriptors.offset > 0 ){
     for( auto & g : groupsBidDescriptors ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoBidComponents.offset > 0 ){
     for( auto & g : groupsBidComponents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldLiquidityIndType.offset > 0 and LiquidityIndTypeEnums::findEnum( toRawEnum( _fixPtr + fieldLiquidityIndType.offset ) ) == nullptr ){
       return _fixPtr + fieldLiquidityIndType.offset - 1 - FieldLiquidityIndType::tagWidth();
   }
   if( fieldExchangeForPhysical.offset > 0 and ExchangeForPhysicalEnums::findEnum( toRawEnum( _fixPtr + fieldExchangeForPhysical.offset ) ) == nullptr ){
       return _fixPtr + fieldExchangeForPhysical.offset - 1 - FieldExchangeForPhysical::tagWidth();
   }
   if( fieldProgRptReqs.offset > 0 and ProgRptReqsEnums::findEnum( toRawEnum( _fixPtr + fieldProgRptReqs.offset ) ) == nullptr ){
       return _fixPtr + fieldProgRptReqs.offset - 1 - FieldProgRptReqs::tagWidth();
   }
   if( fieldIncTaxInd.offset > 0 and IncTaxIndEnums::findEnum( toRawEnum( _fixPtr + fieldIncTaxInd.offset ) ) == nullptr ){
       return _fixPtr + fieldIncTaxInd.offset - 1 - FieldIncTaxInd::tagWidth();
   }
   if( fieldForexReq.offset > 0 and ForexReqEnums::findEnum( toRawEnum( _fixPtr + fieldForexReq.offset ) ) == nullptr ){
       return _fixPtr + fieldForexReq.offset - 1 - FieldForexReq::tagWidth();
   }
   if( fieldBidTradeType.offset > 0 and BidTradeTypeEnums::findEnum( toRawEnum( _fixPtr + fieldBidTradeType.offset ) ) == nullptr ){
       return _fixPtr + fieldBidTradeType.offset - 1 - FieldBidTradeType::tagWidth();
   }
   if( fieldBasisPxType.offset > 0 and BasisPxTypeEnums::findEnum( toRawEnum( _fixPtr + fieldBasisPxType.offset ) ) == nullptr ){
       return _fixPtr + fieldBasisPxType.offset - 1 - FieldBasisPxType::tagWidth();
   }
   return nullptr;
}

const char * MessageBidResponse::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoBidComponents.offset > 0 ){
     for( auto & g : groupsBidComponents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageListStrikePrice::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldLastFragment.offset > 0 and LastFragmentEnums::findEnum( toRawEnum( _fixPtr + fieldLastFragment.offset ) ) == nullptr ){
       return _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
   }
   if( fieldNoStrikes.offset > 0 ){
     for( auto & g : groupsStrikes ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageXMLnonFIX::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageRegistrationInstructions::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldRegistTransType.offset > 0 and RegistTransTypeEnums::findEnum( toRawEnum( _fixPtr + fieldRegistTransType.offset ) ) == nullptr ){
       return _fixPtr + fieldRegistTransType.offset - 1 - FieldRegistTransType::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldTaxAdvantageType.offset > 0 and TaxAdvantageTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTaxAdvantageType.offset ) ) == nullptr ){
       return _fixPtr + fieldTaxAdvantageType.offset - 1 - FieldTaxAdvantageType::tagWidth();
   }
   if( fieldOwnershipType.offset > 0 and OwnershipTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOwnershipType.offset ) ) == nullptr ){
       return _fixPtr + fieldOwnershipType.offset - 1 - FieldOwnershipType::tagWidth();
   }
   if( fieldNoRegistDtls.offset > 0 ){
     for( auto & g : groupsRegistDtls ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoDistribInsts.offset > 0 ){
     for( auto & g : groupsDistribInsts ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageRegistrationInstructionsResponse::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldRegistTransType.offset > 0 and RegistTransTypeEnums::findEnum( toRawEnum( _fixPtr + fieldRegistTransType.offset ) ) == nullptr ){
       return _fixPtr + fieldRegistTransType.offset - 1 - FieldRegistTransType::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldRegistStatus.offset > 0 and RegistStatusEnums::findEnum( toRawEnum( _fixPtr + fieldRegistStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldRegistStatus.offset - 1 - FieldRegistStatus::tagWidth();
   }
   if( fieldRegistRejReasonCode.offset > 0 and RegistRejReasonCodeEnums::findEnum( toRawEnum( _fixPtr + fieldRegistRejReasonCode.offset ) ) == nullptr ){
       return _fixPtr + fieldRegistRejReasonCode.offset - 1 - FieldRegistRejReasonCode::tagWidth();
   }
   return nullptr;
}

const char * MessageOrderMassCancelRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldMassCancelRequestType.offset > 0 and MassCancelRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMassCancelRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldMassCancelRequestType.offset - 1 - FieldMassCancelRequestType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   return nullptr;
}

const char * MessageOrderMassCancelReport::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldMassCancelRequestType.offset > 0 and MassCancelRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMassCancelRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldMassCancelRequestType.offset - 1 - FieldMassCancelRequestType::tagWidth();
   }
   if( fieldMassCancelResponse.offset > 0 and MassCancelResponseEnums::findEnum( toRawEnum( _fixPtr + fieldMassCancelResponse.offset ) ) == nullptr ){
       return _fixPtr + fieldMassCancelResponse.offset - 1 - FieldMassCancelResponse::tagWidth();
   }
   if( fieldMassCancelRejectReason.offset > 0 and MassCancelRejectReasonEnums::findEnum( toRawEnum( _fixPtr + fieldMassCancelRejectReason.offset ) ) == nullptr ){
       return _fixPtr + fieldMassCancelRejectReason.offset - 1 - FieldMassCancelRejectReason::tagWidth();
   }
   if( fieldNoAffectedOrders.offset > 0 ){
     for( auto & g : groupsAffectedOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   return nullptr;
}

const char * MessageNewOrderCross::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCrossType.offset > 0 and CrossTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCrossType.offset ) ) == nullptr ){
       return _fixPtr + fieldCrossType.offset - 1 - FieldCrossType::tagWidth();
   }
   if( fieldCrossPrioritization.offset > 0 and CrossPrioritizationEnums::findEnum( toRawEnum( _fixPtr + fieldCrossPrioritization.offset ) ) == nullptr ){
       return _fixPtr + fieldCrossPrioritization.offset - 1 - FieldCrossPrioritization::tagWidth();
   }
   if( fieldNoSides.offset > 0 ){
     for( auto & g : groupsSides ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldHandlInst.offset > 0 and HandlInstEnums::findEnum( toRawEnum( _fixPtr + fieldHandlInst.offset ) ) == nullptr ){
       return _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
   }
   if( fieldExecInst.offset > 0 and ExecInstEnums::findEnum( toRawEnum( _fixPtr + fieldExecInst.offset ) ) == nullptr ){
       return _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
   }
   if( fieldNoTradingSessions.offset > 0 ){
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProcessCode.offset > 0 and ProcessCodeEnums::findEnum( toRawEnum( _fixPtr + fieldProcessCode.offset ) ) == nullptr ){
       return _fixPtr + fieldProcessCode.offset - 1 - FieldProcessCode::tagWidth();
   }
   if( fieldLocateReqd.offset > 0 and LocateReqdEnums::findEnum( toRawEnum( _fixPtr + fieldLocateReqd.offset ) ) == nullptr ){
       return _fixPtr + fieldLocateReqd.offset - 1 - FieldLocateReqd::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldOrdType.offset > 0 and OrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   if( fieldTimeInForce.offset > 0 and TimeInForceEnums::findEnum( toRawEnum( _fixPtr + fieldTimeInForce.offset ) ) == nullptr ){
       return _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
   }
   if( fieldGTBookingInst.offset > 0 and GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + fieldGTBookingInst.offset ) ) == nullptr ){
       return _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
   }
   if( fieldPegMoveType.offset > 0 and PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
   }
   if( fieldPegOffsetType.offset > 0 and PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
   }
   if( fieldPegLimitType.offset > 0 and PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
   }
   if( fieldPegRoundDirection.offset > 0 and PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldPegRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
   }
   if( fieldPegScope.offset > 0 and PegScopeEnums::findEnum( toRawEnum( _fixPtr + fieldPegScope.offset ) ) == nullptr ){
       return _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
   }
   if( fieldDiscretionInst.offset > 0 and DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionInst.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
   }
   if( fieldDiscretionMoveType.offset > 0 and DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
   }
   if( fieldDiscretionOffsetType.offset > 0 and DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
   }
   if( fieldDiscretionLimitType.offset > 0 and DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
   }
   if( fieldDiscretionRoundDirection.offset > 0 and DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
   }
   if( fieldDiscretionScope.offset > 0 and DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionScope.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
   }
   if( fieldTargetStrategy.offset > 0 and TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + fieldTargetStrategy.offset ) ) == nullptr ){
       return _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
   }
   if( fieldCancellationRights.offset > 0 and CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + fieldCancellationRights.offset ) ) == nullptr ){
       return _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
   }
   if( fieldMoneyLaunderingStatus.offset > 0 and MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMoneyLaunderingStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
   }
   return nullptr;
}

const char * MessageCrossOrderCancelReplaceRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCrossType.offset > 0 and CrossTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCrossType.offset ) ) == nullptr ){
       return _fixPtr + fieldCrossType.offset - 1 - FieldCrossType::tagWidth();
   }
   if( fieldCrossPrioritization.offset > 0 and CrossPrioritizationEnums::findEnum( toRawEnum( _fixPtr + fieldCrossPrioritization.offset ) ) == nullptr ){
       return _fixPtr + fieldCrossPrioritization.offset - 1 - FieldCrossPrioritization::tagWidth();
   }
   if( fieldNoSides.offset > 0 ){
     for( auto & g : groupsSides ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldHandlInst.offset > 0 and HandlInstEnums::findEnum( toRawEnum( _fixPtr + fieldHandlInst.offset ) ) == nullptr ){
       return _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
   }
   if( fieldExecInst.offset > 0 and ExecInstEnums::findEnum( toRawEnum( _fixPtr + fieldExecInst.offset ) ) == nullptr ){
       return _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
   }
   if( fieldNoTradingSessions.offset > 0 ){
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProcessCode.offset > 0 and ProcessCodeEnums::findEnum( toRawEnum( _fixPtr + fieldProcessCode.offset ) ) == nullptr ){
       return _fixPtr + fieldProcessCode.offset - 1 - FieldProcessCode::tagWidth();
   }
   if( fieldLocateReqd.offset > 0 and LocateReqdEnums::findEnum( toRawEnum( _fixPtr + fieldLocateReqd.offset ) ) == nullptr ){
       return _fixPtr + fieldLocateReqd.offset - 1 - FieldLocateReqd::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldOrdType.offset > 0 and OrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   if( fieldTimeInForce.offset > 0 and TimeInForceEnums::findEnum( toRawEnum( _fixPtr + fieldTimeInForce.offset ) ) == nullptr ){
       return _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
   }
   if( fieldGTBookingInst.offset > 0 and GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + fieldGTBookingInst.offset ) ) == nullptr ){
       return _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
   }
   if( fieldPegMoveType.offset > 0 and PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
   }
   if( fieldPegOffsetType.offset > 0 and PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
   }
   if( fieldPegLimitType.offset > 0 and PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
   }
   if( fieldPegRoundDirection.offset > 0 and PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldPegRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
   }
   if( fieldPegScope.offset > 0 and PegScopeEnums::findEnum( toRawEnum( _fixPtr + fieldPegScope.offset ) ) == nullptr ){
       return _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
   }
   if( fieldDiscretionInst.offset > 0 and DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionInst.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
   }
   if( fieldDiscretionMoveType.offset > 0 and DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
   }
   if( fieldDiscretionOffsetType.offset > 0 and DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
   }
   if( fieldDiscretionLimitType.offset > 0 and DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
   }
   if( fieldDiscretionRoundDirection.offset > 0 and DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
   }
   if( fieldDiscretionScope.offset > 0 and DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionScope.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
   }
   if( fieldTargetStrategy.offset > 0 and TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + fieldTargetStrategy.offset ) ) == nullptr ){
       return _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
   }
   if( fieldCancellationRights.offset > 0 and CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + fieldCancellationRights.offset ) ) == nullptr ){
       return _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
   }
   if( fieldMoneyLaunderingStatus.offset > 0 and MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMoneyLaunderingStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
   }
   return nullptr;
}

const char * MessageCrossOrderCancelRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCrossType.offset > 0 and CrossTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCrossType.offset ) ) == nullptr ){
       return _fixPtr + fieldCrossType.offset - 1 - FieldCrossType::tagWidth();
   }
   if( fieldCrossPrioritization.offset > 0 and CrossPrioritizationEnums::findEnum( toRawEnum( _fixPtr + fieldCrossPrioritization.offset ) ) == nullptr ){
       return _fixPtr + fieldCrossPrioritization.offset - 1 - FieldCrossPrioritization::tagWidth();
   }
   if( fieldNoSides.offset > 0 ){
     for( auto & g : groupsSides ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageSecurityTypeRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   return nullptr;
}

const char * MessageSecurityTypes::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityResponseType.offset > 0 and SecurityResponseTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityResponseType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityResponseType.offset - 1 - FieldSecurityResponseType::tagWidth();
   }
   if( fieldLastFragment.offset > 0 and LastFragmentEnums::findEnum( toRawEnum( _fixPtr + fieldLastFragment.offset ) ) == nullptr ){
       return _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
   }
   if( fieldNoSecurityTypes.offset > 0 ){
     for( auto & g : groupsSecurityTypes ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   return nullptr;
}

const char * MessageSecurityListRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityListRequestType.offset > 0 and SecurityListRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityListRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityListRequestType.offset - 1 - FieldSecurityListRequestType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDeliveryForm.offset > 0 and DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryForm.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   return nullptr;
}

const char * MessageSecurityList::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityRequestResult.offset > 0 and SecurityRequestResultEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityRequestResult.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityRequestResult.offset - 1 - FieldSecurityRequestResult::tagWidth();
   }
   if( fieldLastFragment.offset > 0 and LastFragmentEnums::findEnum( toRawEnum( _fixPtr + fieldLastFragment.offset ) ) == nullptr ){
       return _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
   }
   if( fieldNoRelatedSym.offset > 0 ){
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageDerivativeSecurityListRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityListRequestType.offset > 0 and SecurityListRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityListRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityListRequestType.offset - 1 - FieldSecurityListRequestType::tagWidth();
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   return nullptr;
}

const char * MessageDerivativeSecurityList::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSecurityRequestResult.offset > 0 and SecurityRequestResultEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityRequestResult.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityRequestResult.offset - 1 - FieldSecurityRequestResult::tagWidth();
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldLastFragment.offset > 0 and LastFragmentEnums::findEnum( toRawEnum( _fixPtr + fieldLastFragment.offset ) ) == nullptr ){
       return _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
   }
   if( fieldNoRelatedSym.offset > 0 ){
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageNewOrderMultileg::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldDayBookingInst.offset > 0 and DayBookingInstEnums::findEnum( toRawEnum( _fixPtr + fieldDayBookingInst.offset ) ) == nullptr ){
       return _fixPtr + fieldDayBookingInst.offset - 1 - FieldDayBookingInst::tagWidth();
   }
   if( fieldBookingUnit.offset > 0 and BookingUnitEnums::findEnum( toRawEnum( _fixPtr + fieldBookingUnit.offset ) ) == nullptr ){
       return _fixPtr + fieldBookingUnit.offset - 1 - FieldBookingUnit::tagWidth();
   }
   if( fieldPreallocMethod.offset > 0 and PreallocMethodEnums::findEnum( toRawEnum( _fixPtr + fieldPreallocMethod.offset ) ) == nullptr ){
       return _fixPtr + fieldPreallocMethod.offset - 1 - FieldPreallocMethod::tagWidth();
   }
   if( fieldNoAllocs.offset > 0 ){
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldCashMargin.offset > 0 and CashMarginEnums::findEnum( toRawEnum( _fixPtr + fieldCashMargin.offset ) ) == nullptr ){
       return _fixPtr + fieldCashMargin.offset - 1 - FieldCashMargin::tagWidth();
   }
   if( fieldClearingFeeIndicator.offset > 0 and ClearingFeeIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldClearingFeeIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldClearingFeeIndicator.offset - 1 - FieldClearingFeeIndicator::tagWidth();
   }
   if( fieldHandlInst.offset > 0 and HandlInstEnums::findEnum( toRawEnum( _fixPtr + fieldHandlInst.offset ) ) == nullptr ){
       return _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
   }
   if( fieldExecInst.offset > 0 and ExecInstEnums::findEnum( toRawEnum( _fixPtr + fieldExecInst.offset ) ) == nullptr ){
       return _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
   }
   if( fieldNoTradingSessions.offset > 0 ){
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProcessCode.offset > 0 and ProcessCodeEnums::findEnum( toRawEnum( _fixPtr + fieldProcessCode.offset ) ) == nullptr ){
       return _fixPtr + fieldProcessCode.offset - 1 - FieldProcessCode::tagWidth();
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldLocateReqd.offset > 0 and LocateReqdEnums::findEnum( toRawEnum( _fixPtr + fieldLocateReqd.offset ) ) == nullptr ){
       return _fixPtr + fieldLocateReqd.offset - 1 - FieldLocateReqd::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldRoundingDirection.offset > 0 and RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldRoundingDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
   }
   if( fieldOrdType.offset > 0 and OrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldSolicitedFlag.offset > 0 and SolicitedFlagEnums::findEnum( toRawEnum( _fixPtr + fieldSolicitedFlag.offset ) ) == nullptr ){
       return _fixPtr + fieldSolicitedFlag.offset - 1 - FieldSolicitedFlag::tagWidth();
   }
   if( fieldTimeInForce.offset > 0 and TimeInForceEnums::findEnum( toRawEnum( _fixPtr + fieldTimeInForce.offset ) ) == nullptr ){
       return _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
   }
   if( fieldGTBookingInst.offset > 0 and GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + fieldGTBookingInst.offset ) ) == nullptr ){
       return _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
   }
   if( fieldCommType.offset > 0 and CommTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCommType.offset ) ) == nullptr ){
       return _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
   }
   if( fieldFundRenewWaiv.offset > 0 and FundRenewWaivEnums::findEnum( toRawEnum( _fixPtr + fieldFundRenewWaiv.offset ) ) == nullptr ){
       return _fixPtr + fieldFundRenewWaiv.offset - 1 - FieldFundRenewWaiv::tagWidth();
   }
   if( fieldOrderCapacity.offset > 0 and OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
   }
   if( fieldOrderRestrictions.offset > 0 and OrderRestrictionsEnums::findEnum( toRawEnum( _fixPtr + fieldOrderRestrictions.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderRestrictions.offset - 1 - FieldOrderRestrictions::tagWidth();
   }
   if( fieldCustOrderCapacity.offset > 0 and CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldCustOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
   }
   if( fieldForexReq.offset > 0 and ForexReqEnums::findEnum( toRawEnum( _fixPtr + fieldForexReq.offset ) ) == nullptr ){
       return _fixPtr + fieldForexReq.offset - 1 - FieldForexReq::tagWidth();
   }
   if( fieldBookingType.offset > 0 and BookingTypeEnums::findEnum( toRawEnum( _fixPtr + fieldBookingType.offset ) ) == nullptr ){
       return _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
   }
   if( fieldPositionEffect.offset > 0 and PositionEffectEnums::findEnum( toRawEnum( _fixPtr + fieldPositionEffect.offset ) ) == nullptr ){
       return _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
   }
   if( fieldCoveredOrUncovered.offset > 0 and CoveredOrUncoveredEnums::findEnum( toRawEnum( _fixPtr + fieldCoveredOrUncovered.offset ) ) == nullptr ){
       return _fixPtr + fieldCoveredOrUncovered.offset - 1 - FieldCoveredOrUncovered::tagWidth();
   }
   if( fieldPegMoveType.offset > 0 and PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
   }
   if( fieldPegOffsetType.offset > 0 and PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
   }
   if( fieldPegLimitType.offset > 0 and PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
   }
   if( fieldPegRoundDirection.offset > 0 and PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldPegRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
   }
   if( fieldPegScope.offset > 0 and PegScopeEnums::findEnum( toRawEnum( _fixPtr + fieldPegScope.offset ) ) == nullptr ){
       return _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
   }
   if( fieldDiscretionInst.offset > 0 and DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionInst.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
   }
   if( fieldDiscretionMoveType.offset > 0 and DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
   }
   if( fieldDiscretionOffsetType.offset > 0 and DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
   }
   if( fieldDiscretionLimitType.offset > 0 and DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
   }
   if( fieldDiscretionRoundDirection.offset > 0 and DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
   }
   if( fieldDiscretionScope.offset > 0 and DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionScope.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
   }
   if( fieldTargetStrategy.offset > 0 and TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + fieldTargetStrategy.offset ) ) == nullptr ){
       return _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
   }
   if( fieldCancellationRights.offset > 0 and CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + fieldCancellationRights.offset ) ) == nullptr ){
       return _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
   }
   if( fieldMoneyLaunderingStatus.offset > 0 and MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMoneyLaunderingStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
   }
   if( fieldMultiLegRptTypeReq.offset > 0 and MultiLegRptTypeReqEnums::findEnum( toRawEnum( _fixPtr + fieldMultiLegRptTypeReq.offset ) ) == nullptr ){
       return _fixPtr + fieldMultiLegRptTypeReq.offset - 1 - FieldMultiLegRptTypeReq::tagWidth();
   }
   return nullptr;
}

const char * MessageMultilegOrderCancelReplace::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldDayBookingInst.offset > 0 and DayBookingInstEnums::findEnum( toRawEnum( _fixPtr + fieldDayBookingInst.offset ) ) == nullptr ){
       return _fixPtr + fieldDayBookingInst.offset - 1 - FieldDayBookingInst::tagWidth();
   }
   if( fieldBookingUnit.offset > 0 and BookingUnitEnums::findEnum( toRawEnum( _fixPtr + fieldBookingUnit.offset ) ) == nullptr ){
       return _fixPtr + fieldBookingUnit.offset - 1 - FieldBookingUnit::tagWidth();
   }
   if( fieldPreallocMethod.offset > 0 and PreallocMethodEnums::findEnum( toRawEnum( _fixPtr + fieldPreallocMethod.offset ) ) == nullptr ){
       return _fixPtr + fieldPreallocMethod.offset - 1 - FieldPreallocMethod::tagWidth();
   }
   if( fieldNoAllocs.offset > 0 ){
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldCashMargin.offset > 0 and CashMarginEnums::findEnum( toRawEnum( _fixPtr + fieldCashMargin.offset ) ) == nullptr ){
       return _fixPtr + fieldCashMargin.offset - 1 - FieldCashMargin::tagWidth();
   }
   if( fieldClearingFeeIndicator.offset > 0 and ClearingFeeIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldClearingFeeIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldClearingFeeIndicator.offset - 1 - FieldClearingFeeIndicator::tagWidth();
   }
   if( fieldHandlInst.offset > 0 and HandlInstEnums::findEnum( toRawEnum( _fixPtr + fieldHandlInst.offset ) ) == nullptr ){
       return _fixPtr + fieldHandlInst.offset - 1 - FieldHandlInst::tagWidth();
   }
   if( fieldExecInst.offset > 0 and ExecInstEnums::findEnum( toRawEnum( _fixPtr + fieldExecInst.offset ) ) == nullptr ){
       return _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
   }
   if( fieldNoTradingSessions.offset > 0 ){
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProcessCode.offset > 0 and ProcessCodeEnums::findEnum( toRawEnum( _fixPtr + fieldProcessCode.offset ) ) == nullptr ){
       return _fixPtr + fieldProcessCode.offset - 1 - FieldProcessCode::tagWidth();
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldLocateReqd.offset > 0 and LocateReqdEnums::findEnum( toRawEnum( _fixPtr + fieldLocateReqd.offset ) ) == nullptr ){
       return _fixPtr + fieldLocateReqd.offset - 1 - FieldLocateReqd::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldRoundingDirection.offset > 0 and RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldRoundingDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
   }
   if( fieldOrdType.offset > 0 and OrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldSolicitedFlag.offset > 0 and SolicitedFlagEnums::findEnum( toRawEnum( _fixPtr + fieldSolicitedFlag.offset ) ) == nullptr ){
       return _fixPtr + fieldSolicitedFlag.offset - 1 - FieldSolicitedFlag::tagWidth();
   }
   if( fieldTimeInForce.offset > 0 and TimeInForceEnums::findEnum( toRawEnum( _fixPtr + fieldTimeInForce.offset ) ) == nullptr ){
       return _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
   }
   if( fieldGTBookingInst.offset > 0 and GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + fieldGTBookingInst.offset ) ) == nullptr ){
       return _fixPtr + fieldGTBookingInst.offset - 1 - FieldGTBookingInst::tagWidth();
   }
   if( fieldCommType.offset > 0 and CommTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCommType.offset ) ) == nullptr ){
       return _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
   }
   if( fieldFundRenewWaiv.offset > 0 and FundRenewWaivEnums::findEnum( toRawEnum( _fixPtr + fieldFundRenewWaiv.offset ) ) == nullptr ){
       return _fixPtr + fieldFundRenewWaiv.offset - 1 - FieldFundRenewWaiv::tagWidth();
   }
   if( fieldOrderCapacity.offset > 0 and OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
   }
   if( fieldOrderRestrictions.offset > 0 and OrderRestrictionsEnums::findEnum( toRawEnum( _fixPtr + fieldOrderRestrictions.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderRestrictions.offset - 1 - FieldOrderRestrictions::tagWidth();
   }
   if( fieldCustOrderCapacity.offset > 0 and CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldCustOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
   }
   if( fieldForexReq.offset > 0 and ForexReqEnums::findEnum( toRawEnum( _fixPtr + fieldForexReq.offset ) ) == nullptr ){
       return _fixPtr + fieldForexReq.offset - 1 - FieldForexReq::tagWidth();
   }
   if( fieldBookingType.offset > 0 and BookingTypeEnums::findEnum( toRawEnum( _fixPtr + fieldBookingType.offset ) ) == nullptr ){
       return _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
   }
   if( fieldPositionEffect.offset > 0 and PositionEffectEnums::findEnum( toRawEnum( _fixPtr + fieldPositionEffect.offset ) ) == nullptr ){
       return _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
   }
   if( fieldCoveredOrUncovered.offset > 0 and CoveredOrUncoveredEnums::findEnum( toRawEnum( _fixPtr + fieldCoveredOrUncovered.offset ) ) == nullptr ){
       return _fixPtr + fieldCoveredOrUncovered.offset - 1 - FieldCoveredOrUncovered::tagWidth();
   }
   if( fieldPegMoveType.offset > 0 and PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegMoveType.offset - 1 - FieldPegMoveType::tagWidth();
   }
   if( fieldPegOffsetType.offset > 0 and PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegOffsetType.offset - 1 - FieldPegOffsetType::tagWidth();
   }
   if( fieldPegLimitType.offset > 0 and PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPegLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldPegLimitType.offset - 1 - FieldPegLimitType::tagWidth();
   }
   if( fieldPegRoundDirection.offset > 0 and PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldPegRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldPegRoundDirection.offset - 1 - FieldPegRoundDirection::tagWidth();
   }
   if( fieldPegScope.offset > 0 and PegScopeEnums::findEnum( toRawEnum( _fixPtr + fieldPegScope.offset ) ) == nullptr ){
       return _fixPtr + fieldPegScope.offset - 1 - FieldPegScope::tagWidth();
   }
   if( fieldDiscretionInst.offset > 0 and DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionInst.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionInst.offset - 1 - FieldDiscretionInst::tagWidth();
   }
   if( fieldDiscretionMoveType.offset > 0 and DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionMoveType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionMoveType.offset - 1 - FieldDiscretionMoveType::tagWidth();
   }
   if( fieldDiscretionOffsetType.offset > 0 and DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionOffsetType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionOffsetType.offset - 1 - FieldDiscretionOffsetType::tagWidth();
   }
   if( fieldDiscretionLimitType.offset > 0 and DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionLimitType.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionLimitType.offset - 1 - FieldDiscretionLimitType::tagWidth();
   }
   if( fieldDiscretionRoundDirection.offset > 0 and DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionRoundDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionRoundDirection.offset - 1 - FieldDiscretionRoundDirection::tagWidth();
   }
   if( fieldDiscretionScope.offset > 0 and DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + fieldDiscretionScope.offset ) ) == nullptr ){
       return _fixPtr + fieldDiscretionScope.offset - 1 - FieldDiscretionScope::tagWidth();
   }
   if( fieldTargetStrategy.offset > 0 and TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + fieldTargetStrategy.offset ) ) == nullptr ){
       return _fixPtr + fieldTargetStrategy.offset - 1 - FieldTargetStrategy::tagWidth();
   }
   if( fieldCancellationRights.offset > 0 and CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + fieldCancellationRights.offset ) ) == nullptr ){
       return _fixPtr + fieldCancellationRights.offset - 1 - FieldCancellationRights::tagWidth();
   }
   if( fieldMoneyLaunderingStatus.offset > 0 and MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMoneyLaunderingStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMoneyLaunderingStatus.offset - 1 - FieldMoneyLaunderingStatus::tagWidth();
   }
   if( fieldMultiLegRptTypeReq.offset > 0 and MultiLegRptTypeReqEnums::findEnum( toRawEnum( _fixPtr + fieldMultiLegRptTypeReq.offset ) ) == nullptr ){
       return _fixPtr + fieldMultiLegRptTypeReq.offset - 1 - FieldMultiLegRptTypeReq::tagWidth();
   }
   return nullptr;
}

const char * MessageTradeCaptureReportRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTradeRequestType.offset > 0 and TradeRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTradeRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldTradeRequestType.offset - 1 - FieldTradeRequestType::tagWidth();
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   if( fieldExecType.offset > 0 and ExecTypeEnums::findEnum( toRawEnum( _fixPtr + fieldExecType.offset ) ) == nullptr ){
       return _fixPtr + fieldExecType.offset - 1 - FieldExecType::tagWidth();
   }
   if( fieldMatchStatus.offset > 0 and MatchStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMatchStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMatchStatus.offset - 1 - FieldMatchStatus::tagWidth();
   }
   if( fieldTrdType.offset > 0 and TrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldTrdType.offset - 1 - FieldTrdType::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDeliveryForm.offset > 0 and DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryForm.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoDates.offset > 0 ){
     for( auto & g : groupsDates ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldMultiLegReportingType.offset > 0 and MultiLegReportingTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMultiLegReportingType.offset ) ) == nullptr ){
       return _fixPtr + fieldMultiLegReportingType.offset - 1 - FieldMultiLegReportingType::tagWidth();
   }
   if( fieldResponseTransportType.offset > 0 and ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + fieldResponseTransportType.offset ) ) == nullptr ){
       return _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
   }
   return nullptr;
}

const char * MessageTradeCaptureReport::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTradeReportType.offset > 0 and TradeReportTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTradeReportType.offset ) ) == nullptr ){
       return _fixPtr + fieldTradeReportType.offset - 1 - FieldTradeReportType::tagWidth();
   }
   if( fieldTrdType.offset > 0 and TrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldTrdType.offset - 1 - FieldTrdType::tagWidth();
   }
   if( fieldExecType.offset > 0 and ExecTypeEnums::findEnum( toRawEnum( _fixPtr + fieldExecType.offset ) ) == nullptr ){
       return _fixPtr + fieldExecType.offset - 1 - FieldExecType::tagWidth();
   }
   if( fieldUnsolicitedIndicator.offset > 0 and UnsolicitedIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldUnsolicitedIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldUnsolicitedIndicator.offset - 1 - FieldUnsolicitedIndicator::tagWidth();
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   if( fieldOrdStatus.offset > 0 and OrdStatusEnums::findEnum( toRawEnum( _fixPtr + fieldOrdStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdStatus.offset - 1 - FieldOrdStatus::tagWidth();
   }
   if( fieldExecRestatementReason.offset > 0 and ExecRestatementReasonEnums::findEnum( toRawEnum( _fixPtr + fieldExecRestatementReason.offset ) ) == nullptr ){
       return _fixPtr + fieldExecRestatementReason.offset - 1 - FieldExecRestatementReason::tagWidth();
   }
   if( fieldPreviouslyReported.offset > 0 and PreviouslyReportedEnums::findEnum( toRawEnum( _fixPtr + fieldPreviouslyReported.offset ) ) == nullptr ){
       return _fixPtr + fieldPreviouslyReported.offset - 1 - FieldPreviouslyReported::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldRoundingDirection.offset > 0 and RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldRoundingDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAvgPxIndicator.offset > 0 and AvgPxIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldAvgPxIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldAvgPxIndicator.offset - 1 - FieldAvgPxIndicator::tagWidth();
   }
   if( fieldNoPosAmt.offset > 0 ){
     for( auto & g : groupsPosAmt ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldMultiLegReportingType.offset > 0 and MultiLegReportingTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMultiLegReportingType.offset ) ) == nullptr ){
       return _fixPtr + fieldMultiLegReportingType.offset - 1 - FieldMultiLegReportingType::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldMatchStatus.offset > 0 and MatchStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMatchStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMatchStatus.offset - 1 - FieldMatchStatus::tagWidth();
   }
   if( fieldMatchType.offset > 0 and MatchTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMatchType.offset ) ) == nullptr ){
       return _fixPtr + fieldMatchType.offset - 1 - FieldMatchType::tagWidth();
   }
   if( fieldNoSides.offset > 0 ){
     for( auto & g : groupsSides ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPublishTrdIndicator.offset > 0 and PublishTrdIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldPublishTrdIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldPublishTrdIndicator.offset - 1 - FieldPublishTrdIndicator::tagWidth();
   }
   if( fieldShortSaleReason.offset > 0 and ShortSaleReasonEnums::findEnum( toRawEnum( _fixPtr + fieldShortSaleReason.offset ) ) == nullptr ){
       return _fixPtr + fieldShortSaleReason.offset - 1 - FieldShortSaleReason::tagWidth();
   }
   return nullptr;
}

const char * MessageOrderMassStatusRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldMassStatusReqType.offset > 0 and MassStatusReqTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMassStatusReqType.offset ) ) == nullptr ){
       return _fixPtr + fieldMassStatusReqType.offset - 1 - FieldMassStatusReqType::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyingSecurityAltID.offset > 0 ){
     for( auto & g : groupsUnderlyingSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyingStips.offset > 0 ){
     for( auto & g : groupsUnderlyingStips ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   return nullptr;
}

const char * MessageQuoteRequestReject::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteRequestRejectReason.offset > 0 and QuoteRequestRejectReasonEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteRequestRejectReason.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteRequestRejectReason.offset - 1 - FieldQuoteRequestRejectReason::tagWidth();
   }
   if( fieldNoRelatedSym.offset > 0 ){
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageRFQRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoRelatedSym.offset > 0 ){
     for( auto & g : groupsRelatedSym ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   return nullptr;
}

const char * MessageQuoteStatusReport::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteType.offset > 0 and QuoteTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteType.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteType.offset - 1 - FieldQuoteType::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldRoundingDirection.offset > 0 and RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldRoundingDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoQuoteQualifiers.offset > 0 ){
     for( auto & g : groupsQuoteQualifiers ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   if( fieldOrdType.offset > 0 and OrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
   }
   if( fieldSettlCurrFxRateCalc.offset > 0 and SettlCurrFxRateCalcEnums::findEnum( toRawEnum( _fixPtr + fieldSettlCurrFxRateCalc.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlCurrFxRateCalc.offset - 1 - FieldSettlCurrFxRateCalc::tagWidth();
   }
   if( fieldCommType.offset > 0 and CommTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCommType.offset ) ) == nullptr ){
       return _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
   }
   if( fieldCustOrderCapacity.offset > 0 and CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldCustOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
   }
   if( fieldQuoteStatus.offset > 0 and QuoteStatusEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteStatus.offset - 1 - FieldQuoteStatus::tagWidth();
   }
   return nullptr;
}

const char * MessageQuoteResponse::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldQuoteRespType.offset > 0 and QuoteRespTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteRespType.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteRespType.offset - 1 - FieldQuoteRespType::tagWidth();
   }
   if( fieldOrderCapacity.offset > 0 and OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
   }
   if( fieldQuoteType.offset > 0 and QuoteTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQuoteType.offset ) ) == nullptr ){
       return _fixPtr + fieldQuoteType.offset - 1 - FieldQuoteType::tagWidth();
   }
   if( fieldNoQuoteQualifiers.offset > 0 ){
     for( auto & g : groupsQuoteQualifiers ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldRoundingDirection.offset > 0 and RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + fieldRoundingDirection.offset ) ) == nullptr ){
       return _fixPtr + fieldRoundingDirection.offset - 1 - FieldRoundingDirection::tagWidth();
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldOrdType.offset > 0 and OrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
   }
   if( fieldSettlCurrFxRateCalc.offset > 0 and SettlCurrFxRateCalcEnums::findEnum( toRawEnum( _fixPtr + fieldSettlCurrFxRateCalc.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlCurrFxRateCalc.offset - 1 - FieldSettlCurrFxRateCalc::tagWidth();
   }
   if( fieldCommType.offset > 0 and CommTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCommType.offset ) ) == nullptr ){
       return _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
   }
   if( fieldCustOrderCapacity.offset > 0 and CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldCustOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   return nullptr;
}

const char * MessageConfirmation::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldConfirmTransType.offset > 0 and ConfirmTransTypeEnums::findEnum( toRawEnum( _fixPtr + fieldConfirmTransType.offset ) ) == nullptr ){
       return _fixPtr + fieldConfirmTransType.offset - 1 - FieldConfirmTransType::tagWidth();
   }
   if( fieldConfirmType.offset > 0 and ConfirmTypeEnums::findEnum( toRawEnum( _fixPtr + fieldConfirmType.offset ) ) == nullptr ){
       return _fixPtr + fieldConfirmType.offset - 1 - FieldConfirmType::tagWidth();
   }
   if( fieldLegalConfirm.offset > 0 and LegalConfirmEnums::findEnum( toRawEnum( _fixPtr + fieldLegalConfirm.offset ) ) == nullptr ){
       return _fixPtr + fieldLegalConfirm.offset - 1 - FieldLegalConfirm::tagWidth();
   }
   if( fieldConfirmStatus.offset > 0 and ConfirmStatusEnums::findEnum( toRawEnum( _fixPtr + fieldConfirmStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldConfirmStatus.offset - 1 - FieldConfirmStatus::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoOrders.offset > 0 ){
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDeliveryForm.offset > 0 and DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryForm.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldNoCapacities.offset > 0 ){
     for( auto & g : groupsCapacities ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAllocAccountType.offset > 0 and AllocAccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocAccountType.offset - 1 - FieldAllocAccountType::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldProcessCode.offset > 0 and ProcessCodeEnums::findEnum( toRawEnum( _fixPtr + fieldProcessCode.offset ) ) == nullptr ){
       return _fixPtr + fieldProcessCode.offset - 1 - FieldProcessCode::tagWidth();
   }
   if( fieldSettlCurrFxRateCalc.offset > 0 and SettlCurrFxRateCalcEnums::findEnum( toRawEnum( _fixPtr + fieldSettlCurrFxRateCalc.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlCurrFxRateCalc.offset - 1 - FieldSettlCurrFxRateCalc::tagWidth();
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldSettlDeliveryType.offset > 0 and SettlDeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlDeliveryType.offset - 1 - FieldSettlDeliveryType::tagWidth();
   }
   if( fieldStandInstDbType.offset > 0 and StandInstDbTypeEnums::findEnum( toRawEnum( _fixPtr + fieldStandInstDbType.offset ) ) == nullptr ){
       return _fixPtr + fieldStandInstDbType.offset - 1 - FieldStandInstDbType::tagWidth();
   }
   if( fieldNoDlvyInst.offset > 0 ){
     for( auto & g : groupsDlvyInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldCommType.offset > 0 and CommTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCommType.offset ) ) == nullptr ){
       return _fixPtr + fieldCommType.offset - 1 - FieldCommType::tagWidth();
   }
   if( fieldFundRenewWaiv.offset > 0 and FundRenewWaivEnums::findEnum( toRawEnum( _fixPtr + fieldFundRenewWaiv.offset ) ) == nullptr ){
       return _fixPtr + fieldFundRenewWaiv.offset - 1 - FieldFundRenewWaiv::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoMiscFees.offset > 0 ){
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessagePositionMaintenanceRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldPosTransType.offset > 0 and PosTransTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPosTransType.offset ) ) == nullptr ){
       return _fixPtr + fieldPosTransType.offset - 1 - FieldPosTransType::tagWidth();
   }
   if( fieldPosMaintAction.offset > 0 and PosMaintActionEnums::findEnum( toRawEnum( _fixPtr + fieldPosMaintAction.offset ) ) == nullptr ){
       return _fixPtr + fieldPosMaintAction.offset - 1 - FieldPosMaintAction::tagWidth();
   }
   if( fieldSettlSessID.offset > 0 and SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + fieldSettlSessID.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPositions.offset > 0 ){
     for( auto & g : groupsPositions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAdjustmentType.offset > 0 and AdjustmentTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAdjustmentType.offset ) ) == nullptr ){
       return _fixPtr + fieldAdjustmentType.offset - 1 - FieldAdjustmentType::tagWidth();
   }
   return nullptr;
}

const char * MessagePositionMaintenanceReport::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldPosTransType.offset > 0 and PosTransTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPosTransType.offset ) ) == nullptr ){
       return _fixPtr + fieldPosTransType.offset - 1 - FieldPosTransType::tagWidth();
   }
   if( fieldPosMaintAction.offset > 0 and PosMaintActionEnums::findEnum( toRawEnum( _fixPtr + fieldPosMaintAction.offset ) ) == nullptr ){
       return _fixPtr + fieldPosMaintAction.offset - 1 - FieldPosMaintAction::tagWidth();
   }
   if( fieldPosMaintStatus.offset > 0 and PosMaintStatusEnums::findEnum( toRawEnum( _fixPtr + fieldPosMaintStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldPosMaintStatus.offset - 1 - FieldPosMaintStatus::tagWidth();
   }
   if( fieldPosMaintResult.offset > 0 and PosMaintResultEnums::findEnum( toRawEnum( _fixPtr + fieldPosMaintResult.offset ) ) == nullptr ){
       return _fixPtr + fieldPosMaintResult.offset - 1 - FieldPosMaintResult::tagWidth();
   }
   if( fieldSettlSessID.offset > 0 and SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + fieldSettlSessID.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTradingSessions.offset > 0 ){
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPositions.offset > 0 ){
     for( auto & g : groupsPositions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPosAmt.offset > 0 ){
     for( auto & g : groupsPosAmt ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAdjustmentType.offset > 0 and AdjustmentTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAdjustmentType.offset ) ) == nullptr ){
       return _fixPtr + fieldAdjustmentType.offset - 1 - FieldAdjustmentType::tagWidth();
   }
   return nullptr;
}

const char * MessageRequestForPositions::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldPosReqType.offset > 0 and PosReqTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPosReqType.offset ) ) == nullptr ){
       return _fixPtr + fieldPosReqType.offset - 1 - FieldPosReqType::tagWidth();
   }
   if( fieldMatchStatus.offset > 0 and MatchStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMatchStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMatchStatus.offset - 1 - FieldMatchStatus::tagWidth();
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlSessID.offset > 0 and SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + fieldSettlSessID.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
   }
   if( fieldNoTradingSessions.offset > 0 ){
     for( auto & g : groupsTradingSessions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldResponseTransportType.offset > 0 and ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + fieldResponseTransportType.offset ) ) == nullptr ){
       return _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
   }
   return nullptr;
}

const char * MessageRequestForPositionsAck::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldUnsolicitedIndicator.offset > 0 and UnsolicitedIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldUnsolicitedIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldUnsolicitedIndicator.offset - 1 - FieldUnsolicitedIndicator::tagWidth();
   }
   if( fieldPosReqResult.offset > 0 and PosReqResultEnums::findEnum( toRawEnum( _fixPtr + fieldPosReqResult.offset ) ) == nullptr ){
       return _fixPtr + fieldPosReqResult.offset - 1 - FieldPosReqResult::tagWidth();
   }
   if( fieldPosReqStatus.offset > 0 and PosReqStatusEnums::findEnum( toRawEnum( _fixPtr + fieldPosReqStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldPosReqStatus.offset - 1 - FieldPosReqStatus::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldResponseTransportType.offset > 0 and ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + fieldResponseTransportType.offset ) ) == nullptr ){
       return _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
   }
   return nullptr;
}

const char * MessagePositionReport::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldPosReqType.offset > 0 and PosReqTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPosReqType.offset ) ) == nullptr ){
       return _fixPtr + fieldPosReqType.offset - 1 - FieldPosReqType::tagWidth();
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   if( fieldUnsolicitedIndicator.offset > 0 and UnsolicitedIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldUnsolicitedIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldUnsolicitedIndicator.offset - 1 - FieldUnsolicitedIndicator::tagWidth();
   }
   if( fieldPosReqResult.offset > 0 and PosReqResultEnums::findEnum( toRawEnum( _fixPtr + fieldPosReqResult.offset ) ) == nullptr ){
       return _fixPtr + fieldPosReqResult.offset - 1 - FieldPosReqResult::tagWidth();
   }
   if( fieldSettlSessID.offset > 0 and SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + fieldSettlSessID.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlPriceType.offset > 0 and SettlPriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlPriceType.offset - 1 - FieldSettlPriceType::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPositions.offset > 0 ){
     for( auto & g : groupsPositions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPosAmt.offset > 0 ){
     for( auto & g : groupsPosAmt ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldRegistStatus.offset > 0 and RegistStatusEnums::findEnum( toRawEnum( _fixPtr + fieldRegistStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldRegistStatus.offset - 1 - FieldRegistStatus::tagWidth();
   }
   return nullptr;
}

const char * MessageTradeCaptureReportRequestAck::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTradeRequestType.offset > 0 and TradeRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTradeRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldTradeRequestType.offset - 1 - FieldTradeRequestType::tagWidth();
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   if( fieldTradeRequestResult.offset > 0 and TradeRequestResultEnums::findEnum( toRawEnum( _fixPtr + fieldTradeRequestResult.offset ) ) == nullptr ){
       return _fixPtr + fieldTradeRequestResult.offset - 1 - FieldTradeRequestResult::tagWidth();
   }
   if( fieldTradeRequestStatus.offset > 0 and TradeRequestStatusEnums::findEnum( toRawEnum( _fixPtr + fieldTradeRequestStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldTradeRequestStatus.offset - 1 - FieldTradeRequestStatus::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldMultiLegReportingType.offset > 0 and MultiLegReportingTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMultiLegReportingType.offset ) ) == nullptr ){
       return _fixPtr + fieldMultiLegReportingType.offset - 1 - FieldMultiLegReportingType::tagWidth();
   }
   if( fieldResponseTransportType.offset > 0 and ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + fieldResponseTransportType.offset ) ) == nullptr ){
       return _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
   }
   return nullptr;
}

const char * MessageTradeCaptureReportAck::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldTradeReportType.offset > 0 and TradeReportTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTradeReportType.offset ) ) == nullptr ){
       return _fixPtr + fieldTradeReportType.offset - 1 - FieldTradeReportType::tagWidth();
   }
   if( fieldTrdType.offset > 0 and TrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldTrdType.offset - 1 - FieldTrdType::tagWidth();
   }
   if( fieldExecType.offset > 0 and ExecTypeEnums::findEnum( toRawEnum( _fixPtr + fieldExecType.offset ) ) == nullptr ){
       return _fixPtr + fieldExecType.offset - 1 - FieldExecType::tagWidth();
   }
   if( fieldTrdRptStatus.offset > 0 and TrdRptStatusEnums::findEnum( toRawEnum( _fixPtr + fieldTrdRptStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldTrdRptStatus.offset - 1 - FieldTrdRptStatus::tagWidth();
   }
   if( fieldTradeReportRejectReason.offset > 0 and TradeReportRejectReasonEnums::findEnum( toRawEnum( _fixPtr + fieldTradeReportRejectReason.offset ) ) == nullptr ){
       return _fixPtr + fieldTradeReportRejectReason.offset - 1 - FieldTradeReportRejectReason::tagWidth();
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldResponseTransportType.offset > 0 and ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + fieldResponseTransportType.offset ) ) == nullptr ){
       return _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldClearingFeeIndicator.offset > 0 and ClearingFeeIndicatorEnums::findEnum( toRawEnum( _fixPtr + fieldClearingFeeIndicator.offset ) ) == nullptr ){
       return _fixPtr + fieldClearingFeeIndicator.offset - 1 - FieldClearingFeeIndicator::tagWidth();
   }
   if( fieldOrderCapacity.offset > 0 and OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderCapacity.offset - 1 - FieldOrderCapacity::tagWidth();
   }
   if( fieldOrderRestrictions.offset > 0 and OrderRestrictionsEnums::findEnum( toRawEnum( _fixPtr + fieldOrderRestrictions.offset ) ) == nullptr ){
       return _fixPtr + fieldOrderRestrictions.offset - 1 - FieldOrderRestrictions::tagWidth();
   }
   if( fieldCustOrderCapacity.offset > 0 and CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + fieldCustOrderCapacity.offset ) ) == nullptr ){
       return _fixPtr + fieldCustOrderCapacity.offset - 1 - FieldCustOrderCapacity::tagWidth();
   }
   if( fieldAcctIDSource.offset > 0 and AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldAcctIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldAcctIDSource.offset - 1 - FieldAcctIDSource::tagWidth();
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldPositionEffect.offset > 0 and PositionEffectEnums::findEnum( toRawEnum( _fixPtr + fieldPositionEffect.offset ) ) == nullptr ){
       return _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
   }
   if( fieldPreallocMethod.offset > 0 and PreallocMethodEnums::findEnum( toRawEnum( _fixPtr + fieldPreallocMethod.offset ) ) == nullptr ){
       return _fixPtr + fieldPreallocMethod.offset - 1 - FieldPreallocMethod::tagWidth();
   }
   if( fieldNoAllocs.offset > 0 ){
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageAllocationReport::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldAllocTransType.offset > 0 and AllocTransTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocTransType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocTransType.offset - 1 - FieldAllocTransType::tagWidth();
   }
   if( fieldAllocCancReplaceReason.offset > 0 and AllocCancReplaceReasonEnums::findEnum( toRawEnum( _fixPtr + fieldAllocCancReplaceReason.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocCancReplaceReason.offset - 1 - FieldAllocCancReplaceReason::tagWidth();
   }
   if( fieldAllocReportType.offset > 0 and AllocReportTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocReportType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocReportType.offset - 1 - FieldAllocReportType::tagWidth();
   }
   if( fieldAllocStatus.offset > 0 and AllocStatusEnums::findEnum( toRawEnum( _fixPtr + fieldAllocStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocStatus.offset - 1 - FieldAllocStatus::tagWidth();
   }
   if( fieldAllocRejCode.offset > 0 and AllocRejCodeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocRejCode.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocRejCode.offset - 1 - FieldAllocRejCode::tagWidth();
   }
   if( fieldAllocIntermedReqType.offset > 0 and AllocIntermedReqTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocIntermedReqType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocIntermedReqType.offset - 1 - FieldAllocIntermedReqType::tagWidth();
   }
   if( fieldAllocLinkType.offset > 0 and AllocLinkTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocLinkType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocLinkType.offset - 1 - FieldAllocLinkType::tagWidth();
   }
   if( fieldAllocNoOrdersType.offset > 0 and AllocNoOrdersTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocNoOrdersType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocNoOrdersType.offset - 1 - FieldAllocNoOrdersType::tagWidth();
   }
   if( fieldNoOrders.offset > 0 ){
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoExecs.offset > 0 ){
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPreviouslyReported.offset > 0 and PreviouslyReportedEnums::findEnum( toRawEnum( _fixPtr + fieldPreviouslyReported.offset ) ) == nullptr ){
       return _fixPtr + fieldPreviouslyReported.offset - 1 - FieldPreviouslyReported::tagWidth();
   }
   if( fieldMatchType.offset > 0 and MatchTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMatchType.offset ) ) == nullptr ){
       return _fixPtr + fieldMatchType.offset - 1 - FieldMatchType::tagWidth();
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldDeliveryForm.offset > 0 and DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryForm.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryForm.offset - 1 - FieldDeliveryForm::tagWidth();
   }
   if( fieldNoInstrAttrib.offset > 0 ){
     for( auto & g : groupsInstrAttrib ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlType.offset > 0 and SettlTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlType.offset - 1 - FieldSettlType::tagWidth();
   }
   if( fieldBookingType.offset > 0 and BookingTypeEnums::findEnum( toRawEnum( _fixPtr + fieldBookingType.offset ) ) == nullptr ){
       return _fixPtr + fieldBookingType.offset - 1 - FieldBookingType::tagWidth();
   }
   if( fieldPositionEffect.offset > 0 and PositionEffectEnums::findEnum( toRawEnum( _fixPtr + fieldPositionEffect.offset ) ) == nullptr ){
       return _fixPtr + fieldPositionEffect.offset - 1 - FieldPositionEffect::tagWidth();
   }
   if( fieldLegalConfirm.offset > 0 and LegalConfirmEnums::findEnum( toRawEnum( _fixPtr + fieldLegalConfirm.offset ) ) == nullptr ){
       return _fixPtr + fieldLegalConfirm.offset - 1 - FieldLegalConfirm::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldYieldType.offset > 0 and YieldTypeEnums::findEnum( toRawEnum( _fixPtr + fieldYieldType.offset ) ) == nullptr ){
       return _fixPtr + fieldYieldType.offset - 1 - FieldYieldType::tagWidth();
   }
   if( fieldLastFragment.offset > 0 and LastFragmentEnums::findEnum( toRawEnum( _fixPtr + fieldLastFragment.offset ) ) == nullptr ){
       return _fixPtr + fieldLastFragment.offset - 1 - FieldLastFragment::tagWidth();
   }
   if( fieldNoAllocs.offset > 0 ){
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageAllocationReportAck::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAllocStatus.offset > 0 and AllocStatusEnums::findEnum( toRawEnum( _fixPtr + fieldAllocStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocStatus.offset - 1 - FieldAllocStatus::tagWidth();
   }
   if( fieldAllocRejCode.offset > 0 and AllocRejCodeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocRejCode.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocRejCode.offset - 1 - FieldAllocRejCode::tagWidth();
   }
   if( fieldAllocReportType.offset > 0 and AllocReportTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocReportType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocReportType.offset - 1 - FieldAllocReportType::tagWidth();
   }
   if( fieldAllocIntermedReqType.offset > 0 and AllocIntermedReqTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocIntermedReqType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocIntermedReqType.offset - 1 - FieldAllocIntermedReqType::tagWidth();
   }
   if( fieldMatchStatus.offset > 0 and MatchStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMatchStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMatchStatus.offset - 1 - FieldMatchStatus::tagWidth();
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldNoAllocs.offset > 0 ){
     for( auto & g : groupsAllocs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageConfirmationAck::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldAffirmStatus.offset > 0 and AffirmStatusEnums::findEnum( toRawEnum( _fixPtr + fieldAffirmStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldAffirmStatus.offset - 1 - FieldAffirmStatus::tagWidth();
   }
   if( fieldConfirmRejReason.offset > 0 and ConfirmRejReasonEnums::findEnum( toRawEnum( _fixPtr + fieldConfirmRejReason.offset ) ) == nullptr ){
       return _fixPtr + fieldConfirmRejReason.offset - 1 - FieldConfirmRejReason::tagWidth();
   }
   if( fieldMatchStatus.offset > 0 and MatchStatusEnums::findEnum( toRawEnum( _fixPtr + fieldMatchStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldMatchStatus.offset - 1 - FieldMatchStatus::tagWidth();
   }
   return nullptr;
}

const char * MessageSettlementInstructionRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldStandInstDbType.offset > 0 and StandInstDbTypeEnums::findEnum( toRawEnum( _fixPtr + fieldStandInstDbType.offset ) ) == nullptr ){
       return _fixPtr + fieldStandInstDbType.offset - 1 - FieldStandInstDbType::tagWidth();
   }
   return nullptr;
}

const char * MessageAssignmentReport::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPositions.offset > 0 ){
     for( auto & g : groupsPositions ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPosAmt.offset > 0 ){
     for( auto & g : groupsPosAmt ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlPriceType.offset > 0 and SettlPriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlPriceType.offset - 1 - FieldSettlPriceType::tagWidth();
   }
   if( fieldAssignmentMethod.offset > 0 and AssignmentMethodEnums::findEnum( toRawEnum( _fixPtr + fieldAssignmentMethod.offset ) ) == nullptr ){
       return _fixPtr + fieldAssignmentMethod.offset - 1 - FieldAssignmentMethod::tagWidth();
   }
   if( fieldExerciseMethod.offset > 0 and ExerciseMethodEnums::findEnum( toRawEnum( _fixPtr + fieldExerciseMethod.offset ) ) == nullptr ){
       return _fixPtr + fieldExerciseMethod.offset - 1 - FieldExerciseMethod::tagWidth();
   }
   if( fieldSettlSessID.offset > 0 and SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + fieldSettlSessID.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
   }
   return nullptr;
}

const char * MessageCollateralRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCollAsgnReason.offset > 0 and CollAsgnReasonEnums::findEnum( toRawEnum( _fixPtr + fieldCollAsgnReason.offset ) ) == nullptr ){
       return _fixPtr + fieldCollAsgnReason.offset - 1 - FieldCollAsgnReason::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoExecs.offset > 0 ){
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrades.offset > 0 ){
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldNoMiscFees.offset > 0 ){
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlSessID.offset > 0 and SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + fieldSettlSessID.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
   }
   return nullptr;
}

const char * MessageCollateralAssignment::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCollAsgnReason.offset > 0 and CollAsgnReasonEnums::findEnum( toRawEnum( _fixPtr + fieldCollAsgnReason.offset ) ) == nullptr ){
       return _fixPtr + fieldCollAsgnReason.offset - 1 - FieldCollAsgnReason::tagWidth();
   }
   if( fieldCollAsgnTransType.offset > 0 and CollAsgnTransTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCollAsgnTransType.offset ) ) == nullptr ){
       return _fixPtr + fieldCollAsgnTransType.offset - 1 - FieldCollAsgnTransType::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoExecs.offset > 0 ){
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrades.offset > 0 ){
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldNoMiscFees.offset > 0 ){
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlDeliveryType.offset > 0 and SettlDeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlDeliveryType.offset - 1 - FieldSettlDeliveryType::tagWidth();
   }
   if( fieldStandInstDbType.offset > 0 and StandInstDbTypeEnums::findEnum( toRawEnum( _fixPtr + fieldStandInstDbType.offset ) ) == nullptr ){
       return _fixPtr + fieldStandInstDbType.offset - 1 - FieldStandInstDbType::tagWidth();
   }
   if( fieldNoDlvyInst.offset > 0 ){
     for( auto & g : groupsDlvyInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlSessID.offset > 0 and SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + fieldSettlSessID.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
   }
   return nullptr;
}

const char * MessageCollateralResponse::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCollAsgnReason.offset > 0 and CollAsgnReasonEnums::findEnum( toRawEnum( _fixPtr + fieldCollAsgnReason.offset ) ) == nullptr ){
       return _fixPtr + fieldCollAsgnReason.offset - 1 - FieldCollAsgnReason::tagWidth();
   }
   if( fieldCollAsgnTransType.offset > 0 and CollAsgnTransTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCollAsgnTransType.offset ) ) == nullptr ){
       return _fixPtr + fieldCollAsgnTransType.offset - 1 - FieldCollAsgnTransType::tagWidth();
   }
   if( fieldCollAsgnRespType.offset > 0 and CollAsgnRespTypeEnums::findEnum( toRawEnum( _fixPtr + fieldCollAsgnRespType.offset ) ) == nullptr ){
       return _fixPtr + fieldCollAsgnRespType.offset - 1 - FieldCollAsgnRespType::tagWidth();
   }
   if( fieldCollAsgnRejectReason.offset > 0 and CollAsgnRejectReasonEnums::findEnum( toRawEnum( _fixPtr + fieldCollAsgnRejectReason.offset ) ) == nullptr ){
       return _fixPtr + fieldCollAsgnRejectReason.offset - 1 - FieldCollAsgnRejectReason::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoExecs.offset > 0 ){
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrades.offset > 0 ){
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldNoMiscFees.offset > 0 ){
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageCollateralReport::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCollStatus.offset > 0 and CollStatusEnums::findEnum( toRawEnum( _fixPtr + fieldCollStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldCollStatus.offset - 1 - FieldCollStatus::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoExecs.offset > 0 ){
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrades.offset > 0 ){
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldNoMiscFees.offset > 0 ){
     for( auto & g : groupsMiscFees ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlDeliveryType.offset > 0 and SettlDeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlDeliveryType.offset - 1 - FieldSettlDeliveryType::tagWidth();
   }
   if( fieldStandInstDbType.offset > 0 and StandInstDbTypeEnums::findEnum( toRawEnum( _fixPtr + fieldStandInstDbType.offset ) ) == nullptr ){
       return _fixPtr + fieldStandInstDbType.offset - 1 - FieldStandInstDbType::tagWidth();
   }
   if( fieldNoDlvyInst.offset > 0 ){
     for( auto & g : groupsDlvyInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlSessID.offset > 0 and SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + fieldSettlSessID.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
   }
   return nullptr;
}

const char * MessageCollateralInquiry::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoCollInquiryQualifier.offset > 0 ){
     for( auto & g : groupsCollInquiryQualifier ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSubscriptionRequestType.offset > 0 and SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSubscriptionRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldSubscriptionRequestType.offset - 1 - FieldSubscriptionRequestType::tagWidth();
   }
   if( fieldResponseTransportType.offset > 0 and ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + fieldResponseTransportType.offset ) ) == nullptr ){
       return _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoExecs.offset > 0 ){
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrades.offset > 0 ){
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrdRegTimestamps.offset > 0 ){
     for( auto & g : groupsTrdRegTimestamps ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldNoStipulations.offset > 0 ){
     for( auto & g : groupsStipulations ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlDeliveryType.offset > 0 and SettlDeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSettlDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlDeliveryType.offset - 1 - FieldSettlDeliveryType::tagWidth();
   }
   if( fieldStandInstDbType.offset > 0 and StandInstDbTypeEnums::findEnum( toRawEnum( _fixPtr + fieldStandInstDbType.offset ) ) == nullptr ){
       return _fixPtr + fieldStandInstDbType.offset - 1 - FieldStandInstDbType::tagWidth();
   }
   if( fieldNoDlvyInst.offset > 0 ){
     for( auto & g : groupsDlvyInst ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlSessID.offset > 0 and SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + fieldSettlSessID.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
   }
   return nullptr;
}

const char * MessageNetworkCounterpartySystemStatusRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNetworkRequestType.offset > 0 and NetworkRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldNetworkRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldNetworkRequestType.offset - 1 - FieldNetworkRequestType::tagWidth();
   }
   if( fieldNoCompIDs.offset > 0 ){
     for( auto & g : groupsCompIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageNetworkCounterpartySystemStatusResponse::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNetworkStatusResponseType.offset > 0 and NetworkStatusResponseTypeEnums::findEnum( toRawEnum( _fixPtr + fieldNetworkStatusResponseType.offset ) ) == nullptr ){
       return _fixPtr + fieldNetworkStatusResponseType.offset - 1 - FieldNetworkStatusResponseType::tagWidth();
   }
   if( fieldNoCompIDs.offset > 0 ){
     for( auto & g : groupsCompIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

const char * MessageUserRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldUserRequestType.offset > 0 and UserRequestTypeEnums::findEnum( toRawEnum( _fixPtr + fieldUserRequestType.offset ) ) == nullptr ){
       return _fixPtr + fieldUserRequestType.offset - 1 - FieldUserRequestType::tagWidth();
   }
   return nullptr;
}

const char * MessageUserResponse::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldUserStatus.offset > 0 and UserStatusEnums::findEnum( toRawEnum( _fixPtr + fieldUserStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldUserStatus.offset - 1 - FieldUserStatus::tagWidth();
   }
   return nullptr;
}

const char * MessageCollateralInquiryAck::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldCollInquiryStatus.offset > 0 and CollInquiryStatusEnums::findEnum( toRawEnum( _fixPtr + fieldCollInquiryStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldCollInquiryStatus.offset - 1 - FieldCollInquiryStatus::tagWidth();
   }
   if( fieldCollInquiryResult.offset > 0 and CollInquiryResultEnums::findEnum( toRawEnum( _fixPtr + fieldCollInquiryResult.offset ) ) == nullptr ){
       return _fixPtr + fieldCollInquiryResult.offset - 1 - FieldCollInquiryResult::tagWidth();
   }
   if( fieldNoCollInquiryQualifier.offset > 0 ){
     for( auto & g : groupsCollInquiryQualifier ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoPartyIDs.offset > 0 ){
     for( auto & g : groupsPartyIDs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAccountType.offset > 0 and AccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAccountType.offset - 1 - FieldAccountType::tagWidth();
   }
   if( fieldNoExecs.offset > 0 ){
     for( auto & g : groupsExecs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoTrades.offset > 0 ){
     for( auto & g : groupsTrades ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSecurityIDSource.offset > 0 and SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityIDSource.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityIDSource.offset - 1 - FieldSecurityIDSource::tagWidth();
   }
   if( fieldNoSecurityAltID.offset > 0 ){
     for( auto & g : groupsSecurityAltID ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldPutOrCall.offset > 0 and PutOrCallEnums::findEnum( toRawEnum( _fixPtr + fieldPutOrCall.offset ) ) == nullptr ){
       return _fixPtr + fieldPutOrCall.offset - 1 - FieldPutOrCall::tagWidth();
   }
   if( fieldCPProgram.offset > 0 and CPProgramEnums::findEnum( toRawEnum( _fixPtr + fieldCPProgram.offset ) ) == nullptr ){
       return _fixPtr + fieldCPProgram.offset - 1 - FieldCPProgram::tagWidth();
   }
   if( fieldNoEvents.offset > 0 ){
     for( auto & g : groupsEvents ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldTerminationType.offset > 0 and TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + fieldTerminationType.offset ) ) == nullptr ){
       return _fixPtr + fieldTerminationType.offset - 1 - FieldTerminationType::tagWidth();
   }
   if( fieldDeliveryType.offset > 0 and DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + fieldDeliveryType.offset ) ) == nullptr ){
       return _fixPtr + fieldDeliveryType.offset - 1 - FieldDeliveryType::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldNoUnderlyings.offset > 0 ){
     for( auto & g : groupsUnderlyings ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldSettlSessID.offset > 0 and SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + fieldSettlSessID.offset ) ) == nullptr ){
       return _fixPtr + fieldSettlSessID.offset - 1 - FieldSettlSessID::tagWidth();
   }
   if( fieldResponseTransportType.offset > 0 and ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + fieldResponseTransportType.offset ) ) == nullptr ){
       return _fixPtr + fieldResponseTransportType.offset - 1 - FieldResponseTransportType::tagWidth();
   }
   return nullptr;
}

const char * MessageConfirmationRequest::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldConfirmType.offset > 0 and ConfirmTypeEnums::findEnum( toRawEnum( _fixPtr + fieldConfirmType.offset ) ) == nullptr ){
       return _fixPtr + fieldConfirmType.offset - 1 - FieldConfirmType::tagWidth();
   }
   if( fieldNoOrders.offset > 0 ){
     for( auto & g : groupsOrders ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   if( fieldAllocAccountType.offset > 0 and AllocAccountTypeEnums::findEnum( toRawEnum( _fixPtr + fieldAllocAccountType.offset ) ) == nullptr ){
       return _fixPtr + fieldAllocAccountType.offset - 1 - FieldAllocAccountType::tagWidth();
   }
   return nullptr;
}
// end of MessageSanity.cxx


} // namespace fix44
