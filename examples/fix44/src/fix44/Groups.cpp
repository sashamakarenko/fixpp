// Generated by https://github.com/sashamakarenko/fixpp
// Copyright (c) 2021 sashamakarenko
// https://github.com/sashamakarenko/fixpp/blob/main/LICENSE

#include <fix44/Groups.h>

namespace fix44
{

// start of Groups.cxx

// Generated

// -------------------------------------- getMessageName -------------------------------

const char * GroupLegStipulations::getMessageName(){
     return "LegStipulations";
}

const char * GroupEvents::getMessageName(){
     return "Events";
}

const char * GroupLegSecurityAltID::getMessageName(){
     return "LegSecurityAltID";
}

const char * GroupCapacities::getMessageName(){
     return "Capacities";
}

const char * GroupNested3PartySubIDs::getMessageName(){
     return "Nested3PartySubIDs";
}

const char * GroupPartySubIDs::getMessageName(){
     return "PartySubIDs";
}

const char * GroupNested2PartySubIDs::getMessageName(){
     return "Nested2PartySubIDs";
}

const char * GroupNested2PartyIDs::getMessageName(){
     return "Nested2PartyIDs";
}

const char * GroupHops::getMessageName(){
     return "Hops";
}

const char * GroupCollInquiryQualifier::getMessageName(){
     return "CollInquiryQualifier";
}

const char * GroupPartyIDs::getMessageName(){
     return "PartyIDs";
}

const char * GroupAllocs::getMessageName(){
     return "Allocs";
}

const char * GroupTradingSessions::getMessageName(){
     return "TradingSessions";
}

const char * GroupSecurityAltID::getMessageName(){
     return "SecurityAltID";
}

const char * GroupUnderlyingSecurityAltID::getMessageName(){
     return "UnderlyingSecurityAltID";
}

const char * GroupUnderlyingStips::getMessageName(){
     return "UnderlyingStips";
}

const char * GroupUnderlyings::getMessageName(){
     return "Underlyings";
}

const char * GroupStipulations::getMessageName(){
     return "Stipulations";
}

const char * GroupOrders::getMessageName(){
     return "Orders";
}

const char * GroupSettlPartySubIDs::getMessageName(){
     return "SettlPartySubIDs";
}

const char * GroupSettlPartyIDs::getMessageName(){
     return "SettlPartyIDs";
}

const char * GroupDlvyInst::getMessageName(){
     return "DlvyInst";
}

const char * GroupClearingInstructions::getMessageName(){
     return "ClearingInstructions";
}

const char * GroupNestedPartySubIDs::getMessageName(){
     return "NestedPartySubIDs";
}

const char * GroupNestedPartyIDs::getMessageName(){
     return "NestedPartyIDs";
}

const char * GroupLegs::getMessageName(){
     return "Legs";
}

const char * GroupQuoteEntries::getMessageName(){
     return "QuoteEntries";
}

const char * GroupQuoteSets::getMessageName(){
     return "QuoteSets";
}

const char * GroupSecurityTypes::getMessageName(){
     return "SecurityTypes";
}

const char * GroupNested3PartyIDs::getMessageName(){
     return "Nested3PartyIDs";
}

const char * GroupPositions::getMessageName(){
     return "Positions";
}

const char * GroupAffectedOrders::getMessageName(){
     return "AffectedOrders";
}

const char * GroupExecs::getMessageName(){
     return "Execs";
}

const char * GroupMsgTypes::getMessageName(){
     return "MsgTypes";
}

const char * GroupBidComponents::getMessageName(){
     return "BidComponents";
}

const char * GroupSettlInst::getMessageName(){
     return "SettlInst";
}

const char * GroupInstrAttrib::getMessageName(){
     return "InstrAttrib";
}

const char * GroupMiscFees::getMessageName(){
     return "MiscFees";
}

const char * GroupQuoteQualifiers::getMessageName(){
     return "QuoteQualifiers";
}

const char * GroupDistribInsts::getMessageName(){
     return "DistribInsts";
}

const char * GroupTrdRegTimestamps::getMessageName(){
     return "TrdRegTimestamps";
}

const char * GroupAltMDSource::getMessageName(){
     return "AltMDSource";
}

const char * GroupSides::getMessageName(){
     return "Sides";
}

const char * GroupRoutingIDs::getMessageName(){
     return "RoutingIDs";
}

const char * GroupPosAmt::getMessageName(){
     return "PosAmt";
}

const char * GroupLinesOfText::getMessageName(){
     return "LinesOfText";
}

const char * GroupIOIQualifiers::getMessageName(){
     return "IOIQualifiers";
}

const char * GroupDates::getMessageName(){
     return "Dates";
}

const char * GroupMDEntryTypes::getMessageName(){
     return "MDEntryTypes";
}

const char * GroupRelatedSym::getMessageName(){
     return "RelatedSym";
}

const char * GroupContraBrokers::getMessageName(){
     return "ContraBrokers";
}

const char * GroupTrades::getMessageName(){
     return "Trades";
}

const char * GroupStrikes::getMessageName(){
     return "Strikes";
}

const char * GroupBidDescriptors::getMessageName(){
     return "BidDescriptors";
}

const char * GroupCompIDs::getMessageName(){
     return "CompIDs";
}

const char * GroupLegAllocs::getMessageName(){
     return "LegAllocs";
}

const char * GroupRegistDtls::getMessageName(){
     return "RegistDtls";
}

const char * GroupContAmts::getMessageName(){
     return "ContAmts";
}

const char * GroupMDEntries::getMessageName(){
     return "MDEntries";
}

// -------------------------------------- constructor ----------------------------------------

GroupLegStipulations::GroupLegStipulations(){

}

GroupEvents::GroupEvents(){

}

GroupLegSecurityAltID::GroupLegSecurityAltID(){

}

GroupCapacities::GroupCapacities(){

}

GroupNested3PartySubIDs::GroupNested3PartySubIDs(){

}

GroupPartySubIDs::GroupPartySubIDs(){

}

GroupNested2PartySubIDs::GroupNested2PartySubIDs(){

}

GroupNested2PartyIDs::GroupNested2PartyIDs(){

     groupsNested2PartySubIDs.assign( 10, {} );

}

GroupHops::GroupHops(){

}

GroupCollInquiryQualifier::GroupCollInquiryQualifier(){

}

GroupPartyIDs::GroupPartyIDs(){

     groupsPartySubIDs.assign( 10, {} );

}

GroupAllocs::GroupAllocs(){

}

GroupTradingSessions::GroupTradingSessions(){

}

GroupSecurityAltID::GroupSecurityAltID(){

}

GroupUnderlyingSecurityAltID::GroupUnderlyingSecurityAltID(){

}

GroupUnderlyingStips::GroupUnderlyingStips(){

}

GroupUnderlyings::GroupUnderlyings(){

     groupsUnderlyingSecurityAltID.assign( 10, {} );

     groupsUnderlyingStips.assign( 10, {} );

}

GroupStipulations::GroupStipulations(){

}

GroupOrders::GroupOrders(){

     groupsPartyIDs.assign( 10, {} );

     groupsAllocs.assign( 10, {} );

     groupsTradingSessions.assign( 10, {} );

     groupsSecurityAltID.assign( 10, {} );

     groupsEvents.assign( 10, {} );

     groupsUnderlyings.assign( 10, {} );

     groupsStipulations.assign( 10, {} );

}

GroupSettlPartySubIDs::GroupSettlPartySubIDs(){

}

GroupSettlPartyIDs::GroupSettlPartyIDs(){

     groupsSettlPartySubIDs.assign( 10, {} );

}

GroupDlvyInst::GroupDlvyInst(){

     groupsSettlPartyIDs.assign( 10, {} );

}

GroupClearingInstructions::GroupClearingInstructions(){

}

GroupNestedPartySubIDs::GroupNestedPartySubIDs(){

}

GroupNestedPartyIDs::GroupNestedPartyIDs(){

     groupsNestedPartySubIDs.assign( 10, {} );

}

GroupLegs::GroupLegs(){

     groupsLegSecurityAltID.assign( 10, {} );

     groupsLegStipulations.assign( 10, {} );

     groupsNestedPartyIDs.assign( 10, {} );

}

GroupQuoteEntries::GroupQuoteEntries(){

     groupsSecurityAltID.assign( 10, {} );

     groupsEvents.assign( 10, {} );

     groupsUnderlyings.assign( 10, {} );

     groupsLegs.assign( 10, {} );

}

GroupQuoteSets::GroupQuoteSets(){

     groupsUnderlyingSecurityAltID.assign( 10, {} );

     groupsUnderlyingStips.assign( 10, {} );

     groupsQuoteEntries.assign( 10, {} );

}

GroupSecurityTypes::GroupSecurityTypes(){

}

GroupNested3PartyIDs::GroupNested3PartyIDs(){

     groupsNested3PartySubIDs.assign( 10, {} );

}

GroupPositions::GroupPositions(){

     groupsNestedPartyIDs.assign( 10, {} );

}

GroupAffectedOrders::GroupAffectedOrders(){

}

GroupExecs::GroupExecs(){

}

GroupMsgTypes::GroupMsgTypes(){

}

GroupBidComponents::GroupBidComponents(){

}

GroupSettlInst::GroupSettlInst(){

     groupsPartyIDs.assign( 10, {} );

     groupsDlvyInst.assign( 10, {} );

}

GroupInstrAttrib::GroupInstrAttrib(){

}

GroupMiscFees::GroupMiscFees(){

}

GroupQuoteQualifiers::GroupQuoteQualifiers(){

}

GroupDistribInsts::GroupDistribInsts(){

}

GroupTrdRegTimestamps::GroupTrdRegTimestamps(){

}

GroupAltMDSource::GroupAltMDSource(){

}

GroupSides::GroupSides(){

     groupsPartyIDs.assign( 10, {} );

}

GroupRoutingIDs::GroupRoutingIDs(){

}

GroupPosAmt::GroupPosAmt(){

}

GroupLinesOfText::GroupLinesOfText(){

}

GroupIOIQualifiers::GroupIOIQualifiers(){

}

GroupDates::GroupDates(){

}

GroupMDEntryTypes::GroupMDEntryTypes(){

}

GroupRelatedSym::GroupRelatedSym(){

     groupsSecurityAltID.assign( 10, {} );

     groupsEvents.assign( 10, {} );

}

GroupContraBrokers::GroupContraBrokers(){

}

GroupTrades::GroupTrades(){

}

GroupStrikes::GroupStrikes(){

     groupsSecurityAltID.assign( 10, {} );

     groupsEvents.assign( 10, {} );

}

GroupBidDescriptors::GroupBidDescriptors(){

}

GroupCompIDs::GroupCompIDs(){

}

GroupLegAllocs::GroupLegAllocs(){

     groupsNested2PartyIDs.assign( 10, {} );

}

GroupRegistDtls::GroupRegistDtls(){

     groupsNestedPartyIDs.assign( 10, {} );

}

GroupContAmts::GroupContAmts(){

}

GroupMDEntries::GroupMDEntries(){

}

// ---------------------------------- getFieldDepth ---------------------------------

GetDepthMethod GroupLegStipulations::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupEvents::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupLegSecurityAltID::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupCapacities::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupNested3PartySubIDs::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupPartySubIDs::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupNested2PartySubIDs::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupNested2PartyIDs::groupGetDepthMethods[] = {
   GroupNested2PartySubIDs::getFieldDepth,
   nullptr };

GetDepthMethod GroupHops::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupCollInquiryQualifier::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupPartyIDs::groupGetDepthMethods[] = {
   GroupPartySubIDs::getFieldDepth,
   nullptr };

GetDepthMethod GroupAllocs::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupTradingSessions::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupSecurityAltID::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupUnderlyingSecurityAltID::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupUnderlyingStips::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupUnderlyings::groupGetDepthMethods[] = {
   GroupUnderlyingSecurityAltID::getFieldDepth,
   GroupUnderlyingStips::getFieldDepth,
   nullptr };

GetDepthMethod GroupStipulations::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupOrders::groupGetDepthMethods[] = {
   GroupPartyIDs::getFieldDepth,
   GroupAllocs::getFieldDepth,
   GroupTradingSessions::getFieldDepth,
   GroupSecurityAltID::getFieldDepth,
   GroupEvents::getFieldDepth,
   GroupUnderlyings::getFieldDepth,
   GroupStipulations::getFieldDepth,
   nullptr };

GetDepthMethod GroupSettlPartySubIDs::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupSettlPartyIDs::groupGetDepthMethods[] = {
   GroupSettlPartySubIDs::getFieldDepth,
   nullptr };

GetDepthMethod GroupDlvyInst::groupGetDepthMethods[] = {
   GroupSettlPartyIDs::getFieldDepth,
   nullptr };

GetDepthMethod GroupClearingInstructions::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupNestedPartySubIDs::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupNestedPartyIDs::groupGetDepthMethods[] = {
   GroupNestedPartySubIDs::getFieldDepth,
   nullptr };

GetDepthMethod GroupLegs::groupGetDepthMethods[] = {
   GroupLegSecurityAltID::getFieldDepth,
   GroupLegStipulations::getFieldDepth,
   GroupNestedPartyIDs::getFieldDepth,
   nullptr };

GetDepthMethod GroupQuoteEntries::groupGetDepthMethods[] = {
   GroupSecurityAltID::getFieldDepth,
   GroupEvents::getFieldDepth,
   GroupUnderlyings::getFieldDepth,
   GroupLegs::getFieldDepth,
   nullptr };

GetDepthMethod GroupQuoteSets::groupGetDepthMethods[] = {
   GroupUnderlyingSecurityAltID::getFieldDepth,
   GroupUnderlyingStips::getFieldDepth,
   GroupQuoteEntries::getFieldDepth,
   nullptr };

GetDepthMethod GroupSecurityTypes::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupNested3PartyIDs::groupGetDepthMethods[] = {
   GroupNested3PartySubIDs::getFieldDepth,
   nullptr };

GetDepthMethod GroupPositions::groupGetDepthMethods[] = {
   GroupNestedPartyIDs::getFieldDepth,
   nullptr };

GetDepthMethod GroupAffectedOrders::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupExecs::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupMsgTypes::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupBidComponents::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupSettlInst::groupGetDepthMethods[] = {
   GroupPartyIDs::getFieldDepth,
   GroupDlvyInst::getFieldDepth,
   nullptr };

GetDepthMethod GroupInstrAttrib::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupMiscFees::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupQuoteQualifiers::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupDistribInsts::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupTrdRegTimestamps::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupAltMDSource::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupSides::groupGetDepthMethods[] = {
   GroupPartyIDs::getFieldDepth,
   nullptr };

GetDepthMethod GroupRoutingIDs::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupPosAmt::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupLinesOfText::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupIOIQualifiers::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupDates::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupMDEntryTypes::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupRelatedSym::groupGetDepthMethods[] = {
   GroupSecurityAltID::getFieldDepth,
   GroupEvents::getFieldDepth,
   nullptr };

GetDepthMethod GroupContraBrokers::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupTrades::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupStrikes::groupGetDepthMethods[] = {
   GroupSecurityAltID::getFieldDepth,
   GroupEvents::getFieldDepth,
   nullptr };

GetDepthMethod GroupBidDescriptors::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupCompIDs::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupLegAllocs::groupGetDepthMethods[] = {
   GroupNested2PartyIDs::getFieldDepth,
   nullptr };

GetDepthMethod GroupRegistDtls::groupGetDepthMethods[] = {
   GroupNestedPartyIDs::getFieldDepth,
   nullptr };

GetDepthMethod GroupContAmts::groupGetDepthMethods[] = {
   nullptr };

GetDepthMethod GroupMDEntries::groupGetDepthMethods[] = {
   nullptr };

FieldDepth GroupLegStipulations::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldLegStipulationType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldLegStipulationValue::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupEvents::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldEventType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldEventDate::RAW_TAG :
     case FieldEventPx::RAW_TAG :
     case FieldEventText::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupLegSecurityAltID::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldLegSecurityAltID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldLegSecurityAltIDSource::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupCapacities::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderCapacity::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldOrderRestrictions::RAW_TAG :
     case FieldOrderCapacityQty::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupNested3PartySubIDs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldNested3PartySubID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldNested3PartySubIDType::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupPartySubIDs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPartySubID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldPartySubIDType::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupNested2PartySubIDs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldNested2PartySubID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldNested2PartySubIDType::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupNested2PartyIDs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldNested2PartyID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldNested2PartyIDSource::RAW_TAG :
     case FieldNested2PartyRole::RAW_TAG :
     case FieldNoNested2PartySubIDs::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupHops::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldHopCompID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldHopSendingTime::RAW_TAG :
     case FieldHopRefID::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupCollInquiryQualifier::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollInquiryQualifier::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupPartyIDs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPartyID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldPartyIDSource::RAW_TAG :
     case FieldPartyRole::RAW_TAG :
     case FieldNoPartySubIDs::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupAllocs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAllocAccount::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldAllocAcctIDSource::RAW_TAG :
     case FieldAllocPrice::RAW_TAG :
     case FieldIndividualAllocID::RAW_TAG :
     case FieldIndividualAllocRejCode::RAW_TAG :
     case FieldAllocText::RAW_TAG :
     case FieldEncodedAllocTextLen::RAW_TAG :
     case FieldEncodedAllocText::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupTradingSessions::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradingSessionID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldTradingSessionSubID::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupSecurityAltID::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityAltID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldSecurityAltIDSource::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupUnderlyingSecurityAltID::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldUnderlyingSecurityAltID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldUnderlyingSecurityAltIDSource::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupUnderlyingStips::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldUnderlyingStipType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldUnderlyingStipValue::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupUnderlyings::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldUnderlyingSymbol::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldUnderlyingSymbolSfx::RAW_TAG :
     case FieldUnderlyingSecurityID::RAW_TAG :
     case FieldUnderlyingSecurityIDSource::RAW_TAG :
     case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     case FieldUnderlyingProduct::RAW_TAG :
     case FieldUnderlyingCFICode::RAW_TAG :
     case FieldUnderlyingSecurityType::RAW_TAG :
     case FieldUnderlyingSecuritySubType::RAW_TAG :
     case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     case FieldUnderlyingMaturityDate::RAW_TAG :
     case FieldUnderlyingPutOrCall::RAW_TAG :
     case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     case FieldUnderlyingIssueDate::RAW_TAG :
     case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     case FieldUnderlyingRepurchaseRate::RAW_TAG :
     case FieldUnderlyingFactor::RAW_TAG :
     case FieldUnderlyingCreditRating::RAW_TAG :
     case FieldUnderlyingInstrRegistry::RAW_TAG :
     case FieldUnderlyingCountryOfIssue::RAW_TAG :
     case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     case FieldUnderlyingRedemptionDate::RAW_TAG :
     case FieldUnderlyingStrikePrice::RAW_TAG :
     case FieldUnderlyingStrikeCurrency::RAW_TAG :
     case FieldUnderlyingOptAttribute::RAW_TAG :
     case FieldUnderlyingContractMultiplier::RAW_TAG :
     case FieldUnderlyingCouponRate::RAW_TAG :
     case FieldUnderlyingSecurityExchange::RAW_TAG :
     case FieldUnderlyingIssuer::RAW_TAG :
     case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     case FieldEncodedUnderlyingIssuer::RAW_TAG :
     case FieldUnderlyingSecurityDesc::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     case FieldUnderlyingCPProgram::RAW_TAG :
     case FieldUnderlyingCPRegType::RAW_TAG :
     case FieldUnderlyingCurrency::RAW_TAG :
     case FieldUnderlyingQty::RAW_TAG :
     case FieldUnderlyingPx::RAW_TAG :
     case FieldUnderlyingDirtyPrice::RAW_TAG :
     case FieldUnderlyingEndPrice::RAW_TAG :
     case FieldUnderlyingStartValue::RAW_TAG :
     case FieldUnderlyingCurrentValue::RAW_TAG :
     case FieldUnderlyingEndValue::RAW_TAG :
     case FieldNoUnderlyingStips::RAW_TAG :
     case FieldUnderlyingSettlPrice::RAW_TAG :
     case FieldUnderlyingSettlPriceType::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupStipulations::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldStipulationType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldStipulationValue::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupOrders::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldClOrdID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldListSeqNo::RAW_TAG :
     case FieldClOrdLinkID::RAW_TAG :
     case FieldSettlInstMode::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldTradeOriginationDate::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldDayBookingInst::RAW_TAG :
     case FieldBookingUnit::RAW_TAG :
     case FieldAllocID::RAW_TAG :
     case FieldPreallocMethod::RAW_TAG :
     case FieldNoAllocs::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldCashMargin::RAW_TAG :
     case FieldClearingFeeIndicator::RAW_TAG :
     case FieldHandlInst::RAW_TAG :
     case FieldExecInst::RAW_TAG :
     case FieldMinQty::RAW_TAG :
     case FieldMaxFloor::RAW_TAG :
     case FieldExDestination::RAW_TAG :
     case FieldNoTradingSessions::RAW_TAG :
     case FieldProcessCode::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldPrevClosePx::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldSideValueInd::RAW_TAG :
     case FieldLocateReqd::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldOrdType::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldStopPx::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldComplianceID::RAW_TAG :
     case FieldSolicitedFlag::RAW_TAG :
     case FieldIOIID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldTimeInForce::RAW_TAG :
     case FieldEffectiveTime::RAW_TAG :
     case FieldExpireDate::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldGTBookingInst::RAW_TAG :
     case FieldCommission::RAW_TAG :
     case FieldCommType::RAW_TAG :
     case FieldCommCurrency::RAW_TAG :
     case FieldFundRenewWaiv::RAW_TAG :
     case FieldOrderCapacity::RAW_TAG :
     case FieldOrderRestrictions::RAW_TAG :
     case FieldCustOrderCapacity::RAW_TAG :
     case FieldForexReq::RAW_TAG :
     case FieldSettlCurrency::RAW_TAG :
     case FieldBookingType::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldSettlDate2::RAW_TAG :
     case FieldOrderQty2::RAW_TAG :
     case FieldPrice2::RAW_TAG :
     case FieldPositionEffect::RAW_TAG :
     case FieldCoveredOrUncovered::RAW_TAG :
     case FieldMaxShow::RAW_TAG :
     case FieldPegOffsetValue::RAW_TAG :
     case FieldPegMoveType::RAW_TAG :
     case FieldPegOffsetType::RAW_TAG :
     case FieldPegLimitType::RAW_TAG :
     case FieldPegRoundDirection::RAW_TAG :
     case FieldPegScope::RAW_TAG :
     case FieldDiscretionInst::RAW_TAG :
     case FieldDiscretionOffsetValue::RAW_TAG :
     case FieldDiscretionMoveType::RAW_TAG :
     case FieldDiscretionOffsetType::RAW_TAG :
     case FieldDiscretionLimitType::RAW_TAG :
     case FieldDiscretionRoundDirection::RAW_TAG :
     case FieldDiscretionScope::RAW_TAG :
     case FieldTargetStrategy::RAW_TAG :
     case FieldTargetStrategyParameters::RAW_TAG :
     case FieldParticipationRate::RAW_TAG :
     case FieldDesignation::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupSettlPartySubIDs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSettlPartySubID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldSettlPartySubIDType::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupSettlPartyIDs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSettlPartyID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldSettlPartyIDSource::RAW_TAG :
     case FieldSettlPartyRole::RAW_TAG :
     case FieldNoSettlPartySubIDs::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupDlvyInst::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSettlInstSource::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldDlvyInstType::RAW_TAG :
     case FieldNoSettlPartyIDs::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupClearingInstructions::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldClearingInstruction::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupNestedPartySubIDs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldNestedPartySubID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldNestedPartySubIDType::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupNestedPartyIDs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldNestedPartyID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldNestedPartyIDSource::RAW_TAG :
     case FieldNestedPartyRole::RAW_TAG :
     case FieldNoNestedPartySubIDs::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupLegs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldLegSymbol::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldLegSymbolSfx::RAW_TAG :
     case FieldLegSecurityID::RAW_TAG :
     case FieldLegSecurityIDSource::RAW_TAG :
     case FieldNoLegSecurityAltID::RAW_TAG :
     case FieldLegProduct::RAW_TAG :
     case FieldLegCFICode::RAW_TAG :
     case FieldLegSecurityType::RAW_TAG :
     case FieldLegSecuritySubType::RAW_TAG :
     case FieldLegMaturityMonthYear::RAW_TAG :
     case FieldLegMaturityDate::RAW_TAG :
     case FieldLegCouponPaymentDate::RAW_TAG :
     case FieldLegIssueDate::RAW_TAG :
     case FieldLegRepoCollateralSecurityType::RAW_TAG :
     case FieldLegRepurchaseTerm::RAW_TAG :
     case FieldLegRepurchaseRate::RAW_TAG :
     case FieldLegFactor::RAW_TAG :
     case FieldLegCreditRating::RAW_TAG :
     case FieldLegInstrRegistry::RAW_TAG :
     case FieldLegCountryOfIssue::RAW_TAG :
     case FieldLegStateOrProvinceOfIssue::RAW_TAG :
     case FieldLegLocaleOfIssue::RAW_TAG :
     case FieldLegRedemptionDate::RAW_TAG :
     case FieldLegStrikePrice::RAW_TAG :
     case FieldLegStrikeCurrency::RAW_TAG :
     case FieldLegOptAttribute::RAW_TAG :
     case FieldLegContractMultiplier::RAW_TAG :
     case FieldLegCouponRate::RAW_TAG :
     case FieldLegSecurityExchange::RAW_TAG :
     case FieldLegIssuer::RAW_TAG :
     case FieldEncodedLegIssuerLen::RAW_TAG :
     case FieldEncodedLegIssuer::RAW_TAG :
     case FieldLegSecurityDesc::RAW_TAG :
     case FieldEncodedLegSecurityDescLen::RAW_TAG :
     case FieldEncodedLegSecurityDesc::RAW_TAG :
     case FieldLegRatioQty::RAW_TAG :
     case FieldLegSide::RAW_TAG :
     case FieldLegCurrency::RAW_TAG :
     case FieldLegPool::RAW_TAG :
     case FieldLegDatedDate::RAW_TAG :
     case FieldLegContractSettlMonth::RAW_TAG :
     case FieldLegInterestAccrualDate::RAW_TAG :
     case FieldLegQty::RAW_TAG :
     case FieldLegSwapType::RAW_TAG :
     case FieldNoLegStipulations::RAW_TAG :
     case FieldLegPositionEffect::RAW_TAG :
     case FieldLegCoveredOrUncovered::RAW_TAG :
     case FieldNoNestedPartyIDs::RAW_TAG :
     case FieldLegRefID::RAW_TAG :
     case FieldLegPrice::RAW_TAG :
     case FieldLegSettlType::RAW_TAG :
     case FieldLegSettlDate::RAW_TAG :
     case FieldLegLastPx::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupQuoteEntries::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSymbol::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupQuoteSets::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteSetID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldUnderlyingSymbol::RAW_TAG :
     case FieldUnderlyingSymbolSfx::RAW_TAG :
     case FieldUnderlyingSecurityID::RAW_TAG :
     case FieldUnderlyingSecurityIDSource::RAW_TAG :
     case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     case FieldUnderlyingProduct::RAW_TAG :
     case FieldUnderlyingCFICode::RAW_TAG :
     case FieldUnderlyingSecurityType::RAW_TAG :
     case FieldUnderlyingSecuritySubType::RAW_TAG :
     case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     case FieldUnderlyingMaturityDate::RAW_TAG :
     case FieldUnderlyingPutOrCall::RAW_TAG :
     case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     case FieldUnderlyingIssueDate::RAW_TAG :
     case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     case FieldUnderlyingRepurchaseRate::RAW_TAG :
     case FieldUnderlyingFactor::RAW_TAG :
     case FieldUnderlyingCreditRating::RAW_TAG :
     case FieldUnderlyingInstrRegistry::RAW_TAG :
     case FieldUnderlyingCountryOfIssue::RAW_TAG :
     case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     case FieldUnderlyingRedemptionDate::RAW_TAG :
     case FieldUnderlyingStrikePrice::RAW_TAG :
     case FieldUnderlyingStrikeCurrency::RAW_TAG :
     case FieldUnderlyingOptAttribute::RAW_TAG :
     case FieldUnderlyingContractMultiplier::RAW_TAG :
     case FieldUnderlyingCouponRate::RAW_TAG :
     case FieldUnderlyingSecurityExchange::RAW_TAG :
     case FieldUnderlyingIssuer::RAW_TAG :
     case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     case FieldEncodedUnderlyingIssuer::RAW_TAG :
     case FieldUnderlyingSecurityDesc::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     case FieldUnderlyingCPProgram::RAW_TAG :
     case FieldUnderlyingCPRegType::RAW_TAG :
     case FieldUnderlyingCurrency::RAW_TAG :
     case FieldUnderlyingQty::RAW_TAG :
     case FieldUnderlyingPx::RAW_TAG :
     case FieldUnderlyingDirtyPrice::RAW_TAG :
     case FieldUnderlyingEndPrice::RAW_TAG :
     case FieldUnderlyingStartValue::RAW_TAG :
     case FieldUnderlyingCurrentValue::RAW_TAG :
     case FieldUnderlyingEndValue::RAW_TAG :
     case FieldNoUnderlyingStips::RAW_TAG :
     case FieldTotNoQuoteEntries::RAW_TAG :
     case FieldLastFragment::RAW_TAG :
     case FieldNoQuoteEntries::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupSecurityTypes::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldSecuritySubType::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupNested3PartyIDs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldNested3PartyID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldNested3PartyIDSource::RAW_TAG :
     case FieldNested3PartyRole::RAW_TAG :
     case FieldNoNested3PartySubIDs::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupPositions::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPosType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldLongQty::RAW_TAG :
     case FieldShortQty::RAW_TAG :
     case FieldPosQtyStatus::RAW_TAG :
     case FieldNoNestedPartyIDs::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupAffectedOrders::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrigClOrdID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldAffectedOrderID::RAW_TAG :
     case FieldAffectedSecondaryOrderID::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupExecs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldLastQty::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldExecID::RAW_TAG :
     case FieldSecondaryExecID::RAW_TAG :
     case FieldLastPx::RAW_TAG :
     case FieldLastParPx::RAW_TAG :
     case FieldLastCapacity::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupMsgTypes::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRefMsgType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldMsgDirection::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupBidComponents::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldSide::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldNetGrossInd::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupSettlInst::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSettlInstID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldSettlInstTransType::RAW_TAG :
     case FieldSettlInstRefID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldEffectiveTime::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldLastUpdateTime::RAW_TAG :
     case FieldSettlDeliveryType::RAW_TAG :
     case FieldStandInstDbType::RAW_TAG :
     case FieldStandInstDbName::RAW_TAG :
     case FieldStandInstDbID::RAW_TAG :
     case FieldNoDlvyInst::RAW_TAG :
     case FieldPaymentMethod::RAW_TAG :
     case FieldPaymentRef::RAW_TAG :
     case FieldCardHolderName::RAW_TAG :
     case FieldCardNumber::RAW_TAG :
     case FieldCardStartDate::RAW_TAG :
     case FieldCardExpDate::RAW_TAG :
     case FieldCardIssNum::RAW_TAG :
     case FieldPaymentDate::RAW_TAG :
     case FieldPaymentRemitterID::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupInstrAttrib::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldInstrAttribType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldInstrAttribValue::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupMiscFees::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMiscFeeAmt::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldMiscFeeCurr::RAW_TAG :
     case FieldMiscFeeType::RAW_TAG :
     case FieldMiscFeeBasis::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupQuoteQualifiers::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteQualifier::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupDistribInsts::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldDistribPaymentMethod::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldDistribPercentage::RAW_TAG :
     case FieldCashDistribCurr::RAW_TAG :
     case FieldCashDistribAgentName::RAW_TAG :
     case FieldCashDistribAgentCode::RAW_TAG :
     case FieldCashDistribAgentAcctNumber::RAW_TAG :
     case FieldCashDistribPayRef::RAW_TAG :
     case FieldCashDistribAgentAcctName::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupTrdRegTimestamps::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTrdRegTimestamp::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldTrdRegTimestampType::RAW_TAG :
     case FieldTrdRegTimestampOrigin::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupAltMDSource::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAltMDSourceID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupSides::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSide::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldOrigClOrdID::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldClOrdLinkID::RAW_TAG :
     case FieldOrigOrdModTime::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldTradeOriginationDate::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldComplianceID::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupRoutingIDs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRoutingType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldRoutingID::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupPosAmt::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPosAmtType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldPosAmt::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupLinesOfText::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldText::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupIOIQualifiers::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldIOIQualifier::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupDates::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradeDate::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldTransactTime::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupMDEntryTypes::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMDEntryType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupRelatedSym::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSymbol::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupContraBrokers::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldContraBroker::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldContraTrader::RAW_TAG :
     case FieldContraTradeQty::RAW_TAG :
     case FieldContraTradeTime::RAW_TAG :
     case FieldContraLegRefID::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupTrades::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradeReportID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldSecondaryTradeReportID::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupStrikes::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSymbol::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupBidDescriptors::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldBidDescriptorType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldBidDescriptor::RAW_TAG :
     case FieldSideValueInd::RAW_TAG :
     case FieldLiquidityValue::RAW_TAG :
     case FieldLiquidityNumSecurities::RAW_TAG :
     case FieldLiquidityPctLow::RAW_TAG :
     case FieldLiquidityPctHigh::RAW_TAG :
     case FieldEFPTrackingError::RAW_TAG :
     case FieldFairValue::RAW_TAG :
     case FieldOutsideIndexPct::RAW_TAG :
     case FieldValueOfFutures::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupCompIDs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRefCompID::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldRefSubID::RAW_TAG :
     case FieldLocationID::RAW_TAG :
     case FieldDeskID::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupLegAllocs::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldLegAllocAccount::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldLegIndividualAllocID::RAW_TAG :
     case FieldNoNested2PartyIDs::RAW_TAG :
     case FieldLegAllocQty::RAW_TAG :
     case FieldLegAllocAcctIDSource::RAW_TAG :
     case FieldLegSettlCurrency::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupRegistDtls::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRegistDtls::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldRegistEmail::RAW_TAG :
     case FieldMailingDtls::RAW_TAG :
     case FieldMailingInst::RAW_TAG :
     case FieldNoNestedPartyIDs::RAW_TAG :
     case FieldOwnerType::RAW_TAG :
     case FieldDateOfBirth::RAW_TAG :
     case FieldInvestorCountryOfResidence::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupContAmts::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldContAmtType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldContAmtValue::RAW_TAG :
     case FieldContAmtCurr::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth GroupMDEntries::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMDEntryType::RAW_TAG :
     ret.isFirstInGroup = true;
     [[fallthrough]];
     case FieldMDEntryPx::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldMDEntrySize::RAW_TAG :
     case FieldMDEntryDate::RAW_TAG :
     case FieldMDEntryTime::RAW_TAG :
     case FieldTickDirection::RAW_TAG :
     case FieldMDMkt::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldQuoteCondition::RAW_TAG :
     case FieldTradeCondition::RAW_TAG :
     case FieldMDEntryOriginator::RAW_TAG :
     case FieldLocationID::RAW_TAG :
     case FieldDeskID::RAW_TAG :
     case FieldOpenCloseSettlFlag::RAW_TAG :
     case FieldTimeInForce::RAW_TAG :
     case FieldExpireDate::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldMinQty::RAW_TAG :
     case FieldExecInst::RAW_TAG :
     case FieldSellerDays::RAW_TAG :
     case FieldOrderID::RAW_TAG :
     case FieldQuoteEntryID::RAW_TAG :
     case FieldMDEntryBuyer::RAW_TAG :
     case FieldMDEntrySeller::RAW_TAG :
     case FieldNumberOfOrders::RAW_TAG :
     case FieldMDEntryPositionNo::RAW_TAG :
     case FieldScope::RAW_TAG :
     case FieldPriceDelta::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :

     case 0: 
     ret.depth = 0;
     return ret;
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

// ---------------------------------- getFieldValue ---------------------------------

const char * GroupLegStipulations::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldLegStipulationType::TAG : return fieldLegStipulationType.offset > 0 ? _fixPtr + fieldLegStipulationType.offset : nullptr;
     case FieldLegStipulationValue::TAG : return fieldLegStipulationValue.offset > 0 ? _fixPtr + fieldLegStipulationValue.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupEvents::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldEventType::TAG : return fieldEventType.offset > 0 ? _fixPtr + fieldEventType.offset : nullptr;
     case FieldEventDate::TAG : return fieldEventDate.offset > 0 ? _fixPtr + fieldEventDate.offset : nullptr;
     case FieldEventPx::TAG : return fieldEventPx.offset > 0 ? _fixPtr + fieldEventPx.offset : nullptr;
     case FieldEventText::TAG : return fieldEventText.offset > 0 ? _fixPtr + fieldEventText.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupLegSecurityAltID::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldLegSecurityAltID::TAG : return fieldLegSecurityAltID.offset > 0 ? _fixPtr + fieldLegSecurityAltID.offset : nullptr;
     case FieldLegSecurityAltIDSource::TAG : return fieldLegSecurityAltIDSource.offset > 0 ? _fixPtr + fieldLegSecurityAltIDSource.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupCapacities::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset > 0 ? _fixPtr + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::TAG : return fieldOrderRestrictions.offset > 0 ? _fixPtr + fieldOrderRestrictions.offset : nullptr;
     case FieldOrderCapacityQty::TAG : return fieldOrderCapacityQty.offset > 0 ? _fixPtr + fieldOrderCapacityQty.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupNested3PartySubIDs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldNested3PartySubID::TAG : return fieldNested3PartySubID.offset > 0 ? _fixPtr + fieldNested3PartySubID.offset : nullptr;
     case FieldNested3PartySubIDType::TAG : return fieldNested3PartySubIDType.offset > 0 ? _fixPtr + fieldNested3PartySubIDType.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupPartySubIDs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldPartySubID::TAG : return fieldPartySubID.offset > 0 ? _fixPtr + fieldPartySubID.offset : nullptr;
     case FieldPartySubIDType::TAG : return fieldPartySubIDType.offset > 0 ? _fixPtr + fieldPartySubIDType.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupNested2PartySubIDs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldNested2PartySubID::TAG : return fieldNested2PartySubID.offset > 0 ? _fixPtr + fieldNested2PartySubID.offset : nullptr;
     case FieldNested2PartySubIDType::TAG : return fieldNested2PartySubIDType.offset > 0 ? _fixPtr + fieldNested2PartySubIDType.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupNested2PartyIDs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldNested2PartyID::TAG : return fieldNested2PartyID.offset > 0 ? _fixPtr + fieldNested2PartyID.offset : nullptr;
     case FieldNested2PartyIDSource::TAG : return fieldNested2PartyIDSource.offset > 0 ? _fixPtr + fieldNested2PartyIDSource.offset : nullptr;
     case FieldNested2PartyRole::TAG : return fieldNested2PartyRole.offset > 0 ? _fixPtr + fieldNested2PartyRole.offset : nullptr;
     case FieldNoNested2PartySubIDs::TAG : return fieldNoNested2PartySubIDs.offset > 0 ? _fixPtr + fieldNoNested2PartySubIDs.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupHops::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldHopCompID::TAG : return fieldHopCompID.offset > 0 ? _fixPtr + fieldHopCompID.offset : nullptr;
     case FieldHopSendingTime::TAG : return fieldHopSendingTime.offset > 0 ? _fixPtr + fieldHopSendingTime.offset : nullptr;
     case FieldHopRefID::TAG : return fieldHopRefID.offset > 0 ? _fixPtr + fieldHopRefID.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupCollInquiryQualifier::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollInquiryQualifier::TAG : return fieldCollInquiryQualifier.offset > 0 ? _fixPtr + fieldCollInquiryQualifier.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupPartyIDs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldPartyID::TAG : return fieldPartyID.offset > 0 ? _fixPtr + fieldPartyID.offset : nullptr;
     case FieldPartyIDSource::TAG : return fieldPartyIDSource.offset > 0 ? _fixPtr + fieldPartyIDSource.offset : nullptr;
     case FieldPartyRole::TAG : return fieldPartyRole.offset > 0 ? _fixPtr + fieldPartyRole.offset : nullptr;
     case FieldNoPartySubIDs::TAG : return fieldNoPartySubIDs.offset > 0 ? _fixPtr + fieldNoPartySubIDs.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupAllocs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldAllocAccount::TAG : return fieldAllocAccount.offset > 0 ? _fixPtr + fieldAllocAccount.offset : nullptr;
     case FieldAllocAcctIDSource::TAG : return fieldAllocAcctIDSource.offset > 0 ? _fixPtr + fieldAllocAcctIDSource.offset : nullptr;
     case FieldAllocPrice::TAG : return fieldAllocPrice.offset > 0 ? _fixPtr + fieldAllocPrice.offset : nullptr;
     case FieldIndividualAllocID::TAG : return fieldIndividualAllocID.offset > 0 ? _fixPtr + fieldIndividualAllocID.offset : nullptr;
     case FieldIndividualAllocRejCode::TAG : return fieldIndividualAllocRejCode.offset > 0 ? _fixPtr + fieldIndividualAllocRejCode.offset : nullptr;
     case FieldAllocText::TAG : return fieldAllocText.offset > 0 ? _fixPtr + fieldAllocText.offset : nullptr;
     case FieldEncodedAllocTextLen::TAG : return fieldEncodedAllocTextLen.offset > 0 ? _fixPtr + fieldEncodedAllocTextLen.offset : nullptr;
     case FieldEncodedAllocText::TAG : return fieldEncodedAllocText.offset > 0 ? _fixPtr + fieldEncodedAllocText.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupTradingSessions::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset > 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset > 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupSecurityAltID::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityAltID::TAG : return fieldSecurityAltID.offset > 0 ? _fixPtr + fieldSecurityAltID.offset : nullptr;
     case FieldSecurityAltIDSource::TAG : return fieldSecurityAltIDSource.offset > 0 ? _fixPtr + fieldSecurityAltIDSource.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupUnderlyingSecurityAltID::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldUnderlyingSecurityAltID::TAG : return fieldUnderlyingSecurityAltID.offset > 0 ? _fixPtr + fieldUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingSecurityAltIDSource::TAG : return fieldUnderlyingSecurityAltIDSource.offset > 0 ? _fixPtr + fieldUnderlyingSecurityAltIDSource.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupUnderlyingStips::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldUnderlyingStipType::TAG : return fieldUnderlyingStipType.offset > 0 ? _fixPtr + fieldUnderlyingStipType.offset : nullptr;
     case FieldUnderlyingStipValue::TAG : return fieldUnderlyingStipValue.offset > 0 ? _fixPtr + fieldUnderlyingStipValue.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupUnderlyings::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldUnderlyingSymbol::TAG : return fieldUnderlyingSymbol.offset > 0 ? _fixPtr + fieldUnderlyingSymbol.offset : nullptr;
     case FieldUnderlyingSymbolSfx::TAG : return fieldUnderlyingSymbolSfx.offset > 0 ? _fixPtr + fieldUnderlyingSymbolSfx.offset : nullptr;
     case FieldUnderlyingSecurityID::TAG : return fieldUnderlyingSecurityID.offset > 0 ? _fixPtr + fieldUnderlyingSecurityID.offset : nullptr;
     case FieldUnderlyingSecurityIDSource::TAG : return fieldUnderlyingSecurityIDSource.offset > 0 ? _fixPtr + fieldUnderlyingSecurityIDSource.offset : nullptr;
     case FieldNoUnderlyingSecurityAltID::TAG : return fieldNoUnderlyingSecurityAltID.offset > 0 ? _fixPtr + fieldNoUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingProduct::TAG : return fieldUnderlyingProduct.offset > 0 ? _fixPtr + fieldUnderlyingProduct.offset : nullptr;
     case FieldUnderlyingCFICode::TAG : return fieldUnderlyingCFICode.offset > 0 ? _fixPtr + fieldUnderlyingCFICode.offset : nullptr;
     case FieldUnderlyingSecurityType::TAG : return fieldUnderlyingSecurityType.offset > 0 ? _fixPtr + fieldUnderlyingSecurityType.offset : nullptr;
     case FieldUnderlyingSecuritySubType::TAG : return fieldUnderlyingSecuritySubType.offset > 0 ? _fixPtr + fieldUnderlyingSecuritySubType.offset : nullptr;
     case FieldUnderlyingMaturityMonthYear::TAG : return fieldUnderlyingMaturityMonthYear.offset > 0 ? _fixPtr + fieldUnderlyingMaturityMonthYear.offset : nullptr;
     case FieldUnderlyingMaturityDate::TAG : return fieldUnderlyingMaturityDate.offset > 0 ? _fixPtr + fieldUnderlyingMaturityDate.offset : nullptr;
     case FieldUnderlyingPutOrCall::TAG : return fieldUnderlyingPutOrCall.offset > 0 ? _fixPtr + fieldUnderlyingPutOrCall.offset : nullptr;
     case FieldUnderlyingCouponPaymentDate::TAG : return fieldUnderlyingCouponPaymentDate.offset > 0 ? _fixPtr + fieldUnderlyingCouponPaymentDate.offset : nullptr;
     case FieldUnderlyingIssueDate::TAG : return fieldUnderlyingIssueDate.offset > 0 ? _fixPtr + fieldUnderlyingIssueDate.offset : nullptr;
     case FieldUnderlyingRepoCollateralSecurityType::TAG : return fieldUnderlyingRepoCollateralSecurityType.offset > 0 ? _fixPtr + fieldUnderlyingRepoCollateralSecurityType.offset : nullptr;
     case FieldUnderlyingRepurchaseTerm::TAG : return fieldUnderlyingRepurchaseTerm.offset > 0 ? _fixPtr + fieldUnderlyingRepurchaseTerm.offset : nullptr;
     case FieldUnderlyingRepurchaseRate::TAG : return fieldUnderlyingRepurchaseRate.offset > 0 ? _fixPtr + fieldUnderlyingRepurchaseRate.offset : nullptr;
     case FieldUnderlyingFactor::TAG : return fieldUnderlyingFactor.offset > 0 ? _fixPtr + fieldUnderlyingFactor.offset : nullptr;
     case FieldUnderlyingCreditRating::TAG : return fieldUnderlyingCreditRating.offset > 0 ? _fixPtr + fieldUnderlyingCreditRating.offset : nullptr;
     case FieldUnderlyingInstrRegistry::TAG : return fieldUnderlyingInstrRegistry.offset > 0 ? _fixPtr + fieldUnderlyingInstrRegistry.offset : nullptr;
     case FieldUnderlyingCountryOfIssue::TAG : return fieldUnderlyingCountryOfIssue.offset > 0 ? _fixPtr + fieldUnderlyingCountryOfIssue.offset : nullptr;
     case FieldUnderlyingStateOrProvinceOfIssue::TAG : return fieldUnderlyingStateOrProvinceOfIssue.offset > 0 ? _fixPtr + fieldUnderlyingStateOrProvinceOfIssue.offset : nullptr;
     case FieldUnderlyingLocaleOfIssue::TAG : return fieldUnderlyingLocaleOfIssue.offset > 0 ? _fixPtr + fieldUnderlyingLocaleOfIssue.offset : nullptr;
     case FieldUnderlyingRedemptionDate::TAG : return fieldUnderlyingRedemptionDate.offset > 0 ? _fixPtr + fieldUnderlyingRedemptionDate.offset : nullptr;
     case FieldUnderlyingStrikePrice::TAG : return fieldUnderlyingStrikePrice.offset > 0 ? _fixPtr + fieldUnderlyingStrikePrice.offset : nullptr;
     case FieldUnderlyingStrikeCurrency::TAG : return fieldUnderlyingStrikeCurrency.offset > 0 ? _fixPtr + fieldUnderlyingStrikeCurrency.offset : nullptr;
     case FieldUnderlyingOptAttribute::TAG : return fieldUnderlyingOptAttribute.offset > 0 ? _fixPtr + fieldUnderlyingOptAttribute.offset : nullptr;
     case FieldUnderlyingContractMultiplier::TAG : return fieldUnderlyingContractMultiplier.offset > 0 ? _fixPtr + fieldUnderlyingContractMultiplier.offset : nullptr;
     case FieldUnderlyingCouponRate::TAG : return fieldUnderlyingCouponRate.offset > 0 ? _fixPtr + fieldUnderlyingCouponRate.offset : nullptr;
     case FieldUnderlyingSecurityExchange::TAG : return fieldUnderlyingSecurityExchange.offset > 0 ? _fixPtr + fieldUnderlyingSecurityExchange.offset : nullptr;
     case FieldUnderlyingIssuer::TAG : return fieldUnderlyingIssuer.offset > 0 ? _fixPtr + fieldUnderlyingIssuer.offset : nullptr;
     case FieldEncodedUnderlyingIssuerLen::TAG : return fieldEncodedUnderlyingIssuerLen.offset > 0 ? _fixPtr + fieldEncodedUnderlyingIssuerLen.offset : nullptr;
     case FieldEncodedUnderlyingIssuer::TAG : return fieldEncodedUnderlyingIssuer.offset > 0 ? _fixPtr + fieldEncodedUnderlyingIssuer.offset : nullptr;
     case FieldUnderlyingSecurityDesc::TAG : return fieldUnderlyingSecurityDesc.offset > 0 ? _fixPtr + fieldUnderlyingSecurityDesc.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDescLen::TAG : return fieldEncodedUnderlyingSecurityDescLen.offset > 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDescLen.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDesc::TAG : return fieldEncodedUnderlyingSecurityDesc.offset > 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDesc.offset : nullptr;
     case FieldUnderlyingCPProgram::TAG : return fieldUnderlyingCPProgram.offset > 0 ? _fixPtr + fieldUnderlyingCPProgram.offset : nullptr;
     case FieldUnderlyingCPRegType::TAG : return fieldUnderlyingCPRegType.offset > 0 ? _fixPtr + fieldUnderlyingCPRegType.offset : nullptr;
     case FieldUnderlyingCurrency::TAG : return fieldUnderlyingCurrency.offset > 0 ? _fixPtr + fieldUnderlyingCurrency.offset : nullptr;
     case FieldUnderlyingQty::TAG : return fieldUnderlyingQty.offset > 0 ? _fixPtr + fieldUnderlyingQty.offset : nullptr;
     case FieldUnderlyingPx::TAG : return fieldUnderlyingPx.offset > 0 ? _fixPtr + fieldUnderlyingPx.offset : nullptr;
     case FieldUnderlyingDirtyPrice::TAG : return fieldUnderlyingDirtyPrice.offset > 0 ? _fixPtr + fieldUnderlyingDirtyPrice.offset : nullptr;
     case FieldUnderlyingEndPrice::TAG : return fieldUnderlyingEndPrice.offset > 0 ? _fixPtr + fieldUnderlyingEndPrice.offset : nullptr;
     case FieldUnderlyingStartValue::TAG : return fieldUnderlyingStartValue.offset > 0 ? _fixPtr + fieldUnderlyingStartValue.offset : nullptr;
     case FieldUnderlyingCurrentValue::TAG : return fieldUnderlyingCurrentValue.offset > 0 ? _fixPtr + fieldUnderlyingCurrentValue.offset : nullptr;
     case FieldUnderlyingEndValue::TAG : return fieldUnderlyingEndValue.offset > 0 ? _fixPtr + fieldUnderlyingEndValue.offset : nullptr;
     case FieldNoUnderlyingStips::TAG : return fieldNoUnderlyingStips.offset > 0 ? _fixPtr + fieldNoUnderlyingStips.offset : nullptr;
     case FieldUnderlyingSettlPrice::TAG : return fieldUnderlyingSettlPrice.offset > 0 ? _fixPtr + fieldUnderlyingSettlPrice.offset : nullptr;
     case FieldUnderlyingSettlPriceType::TAG : return fieldUnderlyingSettlPriceType.offset > 0 ? _fixPtr + fieldUnderlyingSettlPriceType.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupStipulations::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldStipulationType::TAG : return fieldStipulationType.offset > 0 ? _fixPtr + fieldStipulationType.offset : nullptr;
     case FieldStipulationValue::TAG : return fieldStipulationValue.offset > 0 ? _fixPtr + fieldStipulationValue.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupOrders::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldClOrdID::TAG : return fieldClOrdID.offset > 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset > 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldListSeqNo::TAG : return fieldListSeqNo.offset > 0 ? _fixPtr + fieldListSeqNo.offset : nullptr;
     case FieldClOrdLinkID::TAG : return fieldClOrdLinkID.offset > 0 ? _fixPtr + fieldClOrdLinkID.offset : nullptr;
     case FieldSettlInstMode::TAG : return fieldSettlInstMode.offset > 0 ? _fixPtr + fieldSettlInstMode.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset > 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset > 0 ? _fixPtr + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset > 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset > 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset > 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset > 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldDayBookingInst::TAG : return fieldDayBookingInst.offset > 0 ? _fixPtr + fieldDayBookingInst.offset : nullptr;
     case FieldBookingUnit::TAG : return fieldBookingUnit.offset > 0 ? _fixPtr + fieldBookingUnit.offset : nullptr;
     case FieldAllocID::TAG : return fieldAllocID.offset > 0 ? _fixPtr + fieldAllocID.offset : nullptr;
     case FieldPreallocMethod::TAG : return fieldPreallocMethod.offset > 0 ? _fixPtr + fieldPreallocMethod.offset : nullptr;
     case FieldNoAllocs::TAG : return fieldNoAllocs.offset > 0 ? _fixPtr + fieldNoAllocs.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset > 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset > 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldCashMargin::TAG : return fieldCashMargin.offset > 0 ? _fixPtr + fieldCashMargin.offset : nullptr;
     case FieldClearingFeeIndicator::TAG : return fieldClearingFeeIndicator.offset > 0 ? _fixPtr + fieldClearingFeeIndicator.offset : nullptr;
     case FieldHandlInst::TAG : return fieldHandlInst.offset > 0 ? _fixPtr + fieldHandlInst.offset : nullptr;
     case FieldExecInst::TAG : return fieldExecInst.offset > 0 ? _fixPtr + fieldExecInst.offset : nullptr;
     case FieldMinQty::TAG : return fieldMinQty.offset > 0 ? _fixPtr + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::TAG : return fieldMaxFloor.offset > 0 ? _fixPtr + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::TAG : return fieldExDestination.offset > 0 ? _fixPtr + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::TAG : return fieldNoTradingSessions.offset > 0 ? _fixPtr + fieldNoTradingSessions.offset : nullptr;
     case FieldProcessCode::TAG : return fieldProcessCode.offset > 0 ? _fixPtr + fieldProcessCode.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset > 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset > 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset > 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset > 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset > 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset > 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset > 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset > 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset > 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset > 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset > 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset > 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset > 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset > 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset > 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset > 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset > 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset > 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset > 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset > 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset > 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset > 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset > 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset > 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset > 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset > 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset > 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset > 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset > 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset > 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset > 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset > 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset > 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset > 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset > 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset > 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset > 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset > 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset > 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset > 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset > 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset > 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset > 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset > 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldPrevClosePx::TAG : return fieldPrevClosePx.offset > 0 ? _fixPtr + fieldPrevClosePx.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset > 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldSideValueInd::TAG : return fieldSideValueInd.offset > 0 ? _fixPtr + fieldSideValueInd.offset : nullptr;
     case FieldLocateReqd::TAG : return fieldLocateReqd.offset > 0 ? _fixPtr + fieldLocateReqd.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset > 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset > 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset > 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset > 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset > 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset > 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset > 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset > 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldOrdType::TAG : return fieldOrdType.offset > 0 ? _fixPtr + fieldOrdType.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset > 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset > 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldStopPx::TAG : return fieldStopPx.offset > 0 ? _fixPtr + fieldStopPx.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset > 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset > 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset > 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset > 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset > 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset > 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset > 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset > 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset > 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset > 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset > 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset > 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset > 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset > 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset > 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldComplianceID::TAG : return fieldComplianceID.offset > 0 ? _fixPtr + fieldComplianceID.offset : nullptr;
     case FieldSolicitedFlag::TAG : return fieldSolicitedFlag.offset > 0 ? _fixPtr + fieldSolicitedFlag.offset : nullptr;
     case FieldIOIID::TAG : return fieldIOIID.offset > 0 ? _fixPtr + fieldIOIID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset > 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldTimeInForce::TAG : return fieldTimeInForce.offset > 0 ? _fixPtr + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::TAG : return fieldEffectiveTime.offset > 0 ? _fixPtr + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::TAG : return fieldExpireDate.offset > 0 ? _fixPtr + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset > 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::TAG : return fieldGTBookingInst.offset > 0 ? _fixPtr + fieldGTBookingInst.offset : nullptr;
     case FieldCommission::TAG : return fieldCommission.offset > 0 ? _fixPtr + fieldCommission.offset : nullptr;
     case FieldCommType::TAG : return fieldCommType.offset > 0 ? _fixPtr + fieldCommType.offset : nullptr;
     case FieldCommCurrency::TAG : return fieldCommCurrency.offset > 0 ? _fixPtr + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::TAG : return fieldFundRenewWaiv.offset > 0 ? _fixPtr + fieldFundRenewWaiv.offset : nullptr;
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset > 0 ? _fixPtr + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::TAG : return fieldOrderRestrictions.offset > 0 ? _fixPtr + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::TAG : return fieldCustOrderCapacity.offset > 0 ? _fixPtr + fieldCustOrderCapacity.offset : nullptr;
     case FieldForexReq::TAG : return fieldForexReq.offset > 0 ? _fixPtr + fieldForexReq.offset : nullptr;
     case FieldSettlCurrency::TAG : return fieldSettlCurrency.offset > 0 ? _fixPtr + fieldSettlCurrency.offset : nullptr;
     case FieldBookingType::TAG : return fieldBookingType.offset > 0 ? _fixPtr + fieldBookingType.offset : nullptr;
     case FieldText::TAG : return fieldText.offset > 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset > 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset > 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldSettlDate2::TAG : return fieldSettlDate2.offset > 0 ? _fixPtr + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::TAG : return fieldOrderQty2.offset > 0 ? _fixPtr + fieldOrderQty2.offset : nullptr;
     case FieldPrice2::TAG : return fieldPrice2.offset > 0 ? _fixPtr + fieldPrice2.offset : nullptr;
     case FieldPositionEffect::TAG : return fieldPositionEffect.offset > 0 ? _fixPtr + fieldPositionEffect.offset : nullptr;
     case FieldCoveredOrUncovered::TAG : return fieldCoveredOrUncovered.offset > 0 ? _fixPtr + fieldCoveredOrUncovered.offset : nullptr;
     case FieldMaxShow::TAG : return fieldMaxShow.offset > 0 ? _fixPtr + fieldMaxShow.offset : nullptr;
     case FieldPegOffsetValue::TAG : return fieldPegOffsetValue.offset > 0 ? _fixPtr + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::TAG : return fieldPegMoveType.offset > 0 ? _fixPtr + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::TAG : return fieldPegOffsetType.offset > 0 ? _fixPtr + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::TAG : return fieldPegLimitType.offset > 0 ? _fixPtr + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::TAG : return fieldPegRoundDirection.offset > 0 ? _fixPtr + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::TAG : return fieldPegScope.offset > 0 ? _fixPtr + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::TAG : return fieldDiscretionInst.offset > 0 ? _fixPtr + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::TAG : return fieldDiscretionOffsetValue.offset > 0 ? _fixPtr + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::TAG : return fieldDiscretionMoveType.offset > 0 ? _fixPtr + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::TAG : return fieldDiscretionOffsetType.offset > 0 ? _fixPtr + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::TAG : return fieldDiscretionLimitType.offset > 0 ? _fixPtr + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::TAG : return fieldDiscretionRoundDirection.offset > 0 ? _fixPtr + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::TAG : return fieldDiscretionScope.offset > 0 ? _fixPtr + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::TAG : return fieldTargetStrategy.offset > 0 ? _fixPtr + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::TAG : return fieldTargetStrategyParameters.offset > 0 ? _fixPtr + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::TAG : return fieldParticipationRate.offset > 0 ? _fixPtr + fieldParticipationRate.offset : nullptr;
     case FieldDesignation::TAG : return fieldDesignation.offset > 0 ? _fixPtr + fieldDesignation.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupSettlPartySubIDs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSettlPartySubID::TAG : return fieldSettlPartySubID.offset > 0 ? _fixPtr + fieldSettlPartySubID.offset : nullptr;
     case FieldSettlPartySubIDType::TAG : return fieldSettlPartySubIDType.offset > 0 ? _fixPtr + fieldSettlPartySubIDType.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupSettlPartyIDs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSettlPartyID::TAG : return fieldSettlPartyID.offset > 0 ? _fixPtr + fieldSettlPartyID.offset : nullptr;
     case FieldSettlPartyIDSource::TAG : return fieldSettlPartyIDSource.offset > 0 ? _fixPtr + fieldSettlPartyIDSource.offset : nullptr;
     case FieldSettlPartyRole::TAG : return fieldSettlPartyRole.offset > 0 ? _fixPtr + fieldSettlPartyRole.offset : nullptr;
     case FieldNoSettlPartySubIDs::TAG : return fieldNoSettlPartySubIDs.offset > 0 ? _fixPtr + fieldNoSettlPartySubIDs.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupDlvyInst::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSettlInstSource::TAG : return fieldSettlInstSource.offset > 0 ? _fixPtr + fieldSettlInstSource.offset : nullptr;
     case FieldDlvyInstType::TAG : return fieldDlvyInstType.offset > 0 ? _fixPtr + fieldDlvyInstType.offset : nullptr;
     case FieldNoSettlPartyIDs::TAG : return fieldNoSettlPartyIDs.offset > 0 ? _fixPtr + fieldNoSettlPartyIDs.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupClearingInstructions::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldClearingInstruction::TAG : return fieldClearingInstruction.offset > 0 ? _fixPtr + fieldClearingInstruction.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupNestedPartySubIDs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldNestedPartySubID::TAG : return fieldNestedPartySubID.offset > 0 ? _fixPtr + fieldNestedPartySubID.offset : nullptr;
     case FieldNestedPartySubIDType::TAG : return fieldNestedPartySubIDType.offset > 0 ? _fixPtr + fieldNestedPartySubIDType.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupNestedPartyIDs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldNestedPartyID::TAG : return fieldNestedPartyID.offset > 0 ? _fixPtr + fieldNestedPartyID.offset : nullptr;
     case FieldNestedPartyIDSource::TAG : return fieldNestedPartyIDSource.offset > 0 ? _fixPtr + fieldNestedPartyIDSource.offset : nullptr;
     case FieldNestedPartyRole::TAG : return fieldNestedPartyRole.offset > 0 ? _fixPtr + fieldNestedPartyRole.offset : nullptr;
     case FieldNoNestedPartySubIDs::TAG : return fieldNoNestedPartySubIDs.offset > 0 ? _fixPtr + fieldNoNestedPartySubIDs.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupLegs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldLegSymbol::TAG : return fieldLegSymbol.offset > 0 ? _fixPtr + fieldLegSymbol.offset : nullptr;
     case FieldLegSymbolSfx::TAG : return fieldLegSymbolSfx.offset > 0 ? _fixPtr + fieldLegSymbolSfx.offset : nullptr;
     case FieldLegSecurityID::TAG : return fieldLegSecurityID.offset > 0 ? _fixPtr + fieldLegSecurityID.offset : nullptr;
     case FieldLegSecurityIDSource::TAG : return fieldLegSecurityIDSource.offset > 0 ? _fixPtr + fieldLegSecurityIDSource.offset : nullptr;
     case FieldNoLegSecurityAltID::TAG : return fieldNoLegSecurityAltID.offset > 0 ? _fixPtr + fieldNoLegSecurityAltID.offset : nullptr;
     case FieldLegProduct::TAG : return fieldLegProduct.offset > 0 ? _fixPtr + fieldLegProduct.offset : nullptr;
     case FieldLegCFICode::TAG : return fieldLegCFICode.offset > 0 ? _fixPtr + fieldLegCFICode.offset : nullptr;
     case FieldLegSecurityType::TAG : return fieldLegSecurityType.offset > 0 ? _fixPtr + fieldLegSecurityType.offset : nullptr;
     case FieldLegSecuritySubType::TAG : return fieldLegSecuritySubType.offset > 0 ? _fixPtr + fieldLegSecuritySubType.offset : nullptr;
     case FieldLegMaturityMonthYear::TAG : return fieldLegMaturityMonthYear.offset > 0 ? _fixPtr + fieldLegMaturityMonthYear.offset : nullptr;
     case FieldLegMaturityDate::TAG : return fieldLegMaturityDate.offset > 0 ? _fixPtr + fieldLegMaturityDate.offset : nullptr;
     case FieldLegCouponPaymentDate::TAG : return fieldLegCouponPaymentDate.offset > 0 ? _fixPtr + fieldLegCouponPaymentDate.offset : nullptr;
     case FieldLegIssueDate::TAG : return fieldLegIssueDate.offset > 0 ? _fixPtr + fieldLegIssueDate.offset : nullptr;
     case FieldLegRepoCollateralSecurityType::TAG : return fieldLegRepoCollateralSecurityType.offset > 0 ? _fixPtr + fieldLegRepoCollateralSecurityType.offset : nullptr;
     case FieldLegRepurchaseTerm::TAG : return fieldLegRepurchaseTerm.offset > 0 ? _fixPtr + fieldLegRepurchaseTerm.offset : nullptr;
     case FieldLegRepurchaseRate::TAG : return fieldLegRepurchaseRate.offset > 0 ? _fixPtr + fieldLegRepurchaseRate.offset : nullptr;
     case FieldLegFactor::TAG : return fieldLegFactor.offset > 0 ? _fixPtr + fieldLegFactor.offset : nullptr;
     case FieldLegCreditRating::TAG : return fieldLegCreditRating.offset > 0 ? _fixPtr + fieldLegCreditRating.offset : nullptr;
     case FieldLegInstrRegistry::TAG : return fieldLegInstrRegistry.offset > 0 ? _fixPtr + fieldLegInstrRegistry.offset : nullptr;
     case FieldLegCountryOfIssue::TAG : return fieldLegCountryOfIssue.offset > 0 ? _fixPtr + fieldLegCountryOfIssue.offset : nullptr;
     case FieldLegStateOrProvinceOfIssue::TAG : return fieldLegStateOrProvinceOfIssue.offset > 0 ? _fixPtr + fieldLegStateOrProvinceOfIssue.offset : nullptr;
     case FieldLegLocaleOfIssue::TAG : return fieldLegLocaleOfIssue.offset > 0 ? _fixPtr + fieldLegLocaleOfIssue.offset : nullptr;
     case FieldLegRedemptionDate::TAG : return fieldLegRedemptionDate.offset > 0 ? _fixPtr + fieldLegRedemptionDate.offset : nullptr;
     case FieldLegStrikePrice::TAG : return fieldLegStrikePrice.offset > 0 ? _fixPtr + fieldLegStrikePrice.offset : nullptr;
     case FieldLegStrikeCurrency::TAG : return fieldLegStrikeCurrency.offset > 0 ? _fixPtr + fieldLegStrikeCurrency.offset : nullptr;
     case FieldLegOptAttribute::TAG : return fieldLegOptAttribute.offset > 0 ? _fixPtr + fieldLegOptAttribute.offset : nullptr;
     case FieldLegContractMultiplier::TAG : return fieldLegContractMultiplier.offset > 0 ? _fixPtr + fieldLegContractMultiplier.offset : nullptr;
     case FieldLegCouponRate::TAG : return fieldLegCouponRate.offset > 0 ? _fixPtr + fieldLegCouponRate.offset : nullptr;
     case FieldLegSecurityExchange::TAG : return fieldLegSecurityExchange.offset > 0 ? _fixPtr + fieldLegSecurityExchange.offset : nullptr;
     case FieldLegIssuer::TAG : return fieldLegIssuer.offset > 0 ? _fixPtr + fieldLegIssuer.offset : nullptr;
     case FieldEncodedLegIssuerLen::TAG : return fieldEncodedLegIssuerLen.offset > 0 ? _fixPtr + fieldEncodedLegIssuerLen.offset : nullptr;
     case FieldEncodedLegIssuer::TAG : return fieldEncodedLegIssuer.offset > 0 ? _fixPtr + fieldEncodedLegIssuer.offset : nullptr;
     case FieldLegSecurityDesc::TAG : return fieldLegSecurityDesc.offset > 0 ? _fixPtr + fieldLegSecurityDesc.offset : nullptr;
     case FieldEncodedLegSecurityDescLen::TAG : return fieldEncodedLegSecurityDescLen.offset > 0 ? _fixPtr + fieldEncodedLegSecurityDescLen.offset : nullptr;
     case FieldEncodedLegSecurityDesc::TAG : return fieldEncodedLegSecurityDesc.offset > 0 ? _fixPtr + fieldEncodedLegSecurityDesc.offset : nullptr;
     case FieldLegRatioQty::TAG : return fieldLegRatioQty.offset > 0 ? _fixPtr + fieldLegRatioQty.offset : nullptr;
     case FieldLegSide::TAG : return fieldLegSide.offset > 0 ? _fixPtr + fieldLegSide.offset : nullptr;
     case FieldLegCurrency::TAG : return fieldLegCurrency.offset > 0 ? _fixPtr + fieldLegCurrency.offset : nullptr;
     case FieldLegPool::TAG : return fieldLegPool.offset > 0 ? _fixPtr + fieldLegPool.offset : nullptr;
     case FieldLegDatedDate::TAG : return fieldLegDatedDate.offset > 0 ? _fixPtr + fieldLegDatedDate.offset : nullptr;
     case FieldLegContractSettlMonth::TAG : return fieldLegContractSettlMonth.offset > 0 ? _fixPtr + fieldLegContractSettlMonth.offset : nullptr;
     case FieldLegInterestAccrualDate::TAG : return fieldLegInterestAccrualDate.offset > 0 ? _fixPtr + fieldLegInterestAccrualDate.offset : nullptr;
     case FieldLegQty::TAG : return fieldLegQty.offset > 0 ? _fixPtr + fieldLegQty.offset : nullptr;
     case FieldLegSwapType::TAG : return fieldLegSwapType.offset > 0 ? _fixPtr + fieldLegSwapType.offset : nullptr;
     case FieldNoLegStipulations::TAG : return fieldNoLegStipulations.offset > 0 ? _fixPtr + fieldNoLegStipulations.offset : nullptr;
     case FieldLegPositionEffect::TAG : return fieldLegPositionEffect.offset > 0 ? _fixPtr + fieldLegPositionEffect.offset : nullptr;
     case FieldLegCoveredOrUncovered::TAG : return fieldLegCoveredOrUncovered.offset > 0 ? _fixPtr + fieldLegCoveredOrUncovered.offset : nullptr;
     case FieldNoNestedPartyIDs::TAG : return fieldNoNestedPartyIDs.offset > 0 ? _fixPtr + fieldNoNestedPartyIDs.offset : nullptr;
     case FieldLegRefID::TAG : return fieldLegRefID.offset > 0 ? _fixPtr + fieldLegRefID.offset : nullptr;
     case FieldLegPrice::TAG : return fieldLegPrice.offset > 0 ? _fixPtr + fieldLegPrice.offset : nullptr;
     case FieldLegSettlType::TAG : return fieldLegSettlType.offset > 0 ? _fixPtr + fieldLegSettlType.offset : nullptr;
     case FieldLegSettlDate::TAG : return fieldLegSettlDate.offset > 0 ? _fixPtr + fieldLegSettlDate.offset : nullptr;
     case FieldLegLastPx::TAG : return fieldLegLastPx.offset > 0 ? _fixPtr + fieldLegLastPx.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupQuoteEntries::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSymbol::TAG : return fieldSymbol.offset > 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset > 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset > 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset > 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset > 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset > 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset > 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset > 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset > 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset > 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset > 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset > 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset > 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset > 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset > 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset > 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset > 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset > 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset > 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset > 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset > 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset > 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset > 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset > 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset > 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset > 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset > 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset > 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset > 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset > 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset > 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset > 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset > 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset > 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset > 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset > 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset > 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset > 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset > 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset > 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset > 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset > 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset > 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset > 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset > 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset > 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset > 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset > 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset > 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset > 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset > 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset > 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset > 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset > 0 ? _fixPtr + fieldNoLegs.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupQuoteSets::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteSetID::TAG : return fieldQuoteSetID.offset > 0 ? _fixPtr + fieldQuoteSetID.offset : nullptr;
     case FieldUnderlyingSymbol::TAG : return fieldUnderlyingSymbol.offset > 0 ? _fixPtr + fieldUnderlyingSymbol.offset : nullptr;
     case FieldUnderlyingSymbolSfx::TAG : return fieldUnderlyingSymbolSfx.offset > 0 ? _fixPtr + fieldUnderlyingSymbolSfx.offset : nullptr;
     case FieldUnderlyingSecurityID::TAG : return fieldUnderlyingSecurityID.offset > 0 ? _fixPtr + fieldUnderlyingSecurityID.offset : nullptr;
     case FieldUnderlyingSecurityIDSource::TAG : return fieldUnderlyingSecurityIDSource.offset > 0 ? _fixPtr + fieldUnderlyingSecurityIDSource.offset : nullptr;
     case FieldNoUnderlyingSecurityAltID::TAG : return fieldNoUnderlyingSecurityAltID.offset > 0 ? _fixPtr + fieldNoUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingProduct::TAG : return fieldUnderlyingProduct.offset > 0 ? _fixPtr + fieldUnderlyingProduct.offset : nullptr;
     case FieldUnderlyingCFICode::TAG : return fieldUnderlyingCFICode.offset > 0 ? _fixPtr + fieldUnderlyingCFICode.offset : nullptr;
     case FieldUnderlyingSecurityType::TAG : return fieldUnderlyingSecurityType.offset > 0 ? _fixPtr + fieldUnderlyingSecurityType.offset : nullptr;
     case FieldUnderlyingSecuritySubType::TAG : return fieldUnderlyingSecuritySubType.offset > 0 ? _fixPtr + fieldUnderlyingSecuritySubType.offset : nullptr;
     case FieldUnderlyingMaturityMonthYear::TAG : return fieldUnderlyingMaturityMonthYear.offset > 0 ? _fixPtr + fieldUnderlyingMaturityMonthYear.offset : nullptr;
     case FieldUnderlyingMaturityDate::TAG : return fieldUnderlyingMaturityDate.offset > 0 ? _fixPtr + fieldUnderlyingMaturityDate.offset : nullptr;
     case FieldUnderlyingPutOrCall::TAG : return fieldUnderlyingPutOrCall.offset > 0 ? _fixPtr + fieldUnderlyingPutOrCall.offset : nullptr;
     case FieldUnderlyingCouponPaymentDate::TAG : return fieldUnderlyingCouponPaymentDate.offset > 0 ? _fixPtr + fieldUnderlyingCouponPaymentDate.offset : nullptr;
     case FieldUnderlyingIssueDate::TAG : return fieldUnderlyingIssueDate.offset > 0 ? _fixPtr + fieldUnderlyingIssueDate.offset : nullptr;
     case FieldUnderlyingRepoCollateralSecurityType::TAG : return fieldUnderlyingRepoCollateralSecurityType.offset > 0 ? _fixPtr + fieldUnderlyingRepoCollateralSecurityType.offset : nullptr;
     case FieldUnderlyingRepurchaseTerm::TAG : return fieldUnderlyingRepurchaseTerm.offset > 0 ? _fixPtr + fieldUnderlyingRepurchaseTerm.offset : nullptr;
     case FieldUnderlyingRepurchaseRate::TAG : return fieldUnderlyingRepurchaseRate.offset > 0 ? _fixPtr + fieldUnderlyingRepurchaseRate.offset : nullptr;
     case FieldUnderlyingFactor::TAG : return fieldUnderlyingFactor.offset > 0 ? _fixPtr + fieldUnderlyingFactor.offset : nullptr;
     case FieldUnderlyingCreditRating::TAG : return fieldUnderlyingCreditRating.offset > 0 ? _fixPtr + fieldUnderlyingCreditRating.offset : nullptr;
     case FieldUnderlyingInstrRegistry::TAG : return fieldUnderlyingInstrRegistry.offset > 0 ? _fixPtr + fieldUnderlyingInstrRegistry.offset : nullptr;
     case FieldUnderlyingCountryOfIssue::TAG : return fieldUnderlyingCountryOfIssue.offset > 0 ? _fixPtr + fieldUnderlyingCountryOfIssue.offset : nullptr;
     case FieldUnderlyingStateOrProvinceOfIssue::TAG : return fieldUnderlyingStateOrProvinceOfIssue.offset > 0 ? _fixPtr + fieldUnderlyingStateOrProvinceOfIssue.offset : nullptr;
     case FieldUnderlyingLocaleOfIssue::TAG : return fieldUnderlyingLocaleOfIssue.offset > 0 ? _fixPtr + fieldUnderlyingLocaleOfIssue.offset : nullptr;
     case FieldUnderlyingRedemptionDate::TAG : return fieldUnderlyingRedemptionDate.offset > 0 ? _fixPtr + fieldUnderlyingRedemptionDate.offset : nullptr;
     case FieldUnderlyingStrikePrice::TAG : return fieldUnderlyingStrikePrice.offset > 0 ? _fixPtr + fieldUnderlyingStrikePrice.offset : nullptr;
     case FieldUnderlyingStrikeCurrency::TAG : return fieldUnderlyingStrikeCurrency.offset > 0 ? _fixPtr + fieldUnderlyingStrikeCurrency.offset : nullptr;
     case FieldUnderlyingOptAttribute::TAG : return fieldUnderlyingOptAttribute.offset > 0 ? _fixPtr + fieldUnderlyingOptAttribute.offset : nullptr;
     case FieldUnderlyingContractMultiplier::TAG : return fieldUnderlyingContractMultiplier.offset > 0 ? _fixPtr + fieldUnderlyingContractMultiplier.offset : nullptr;
     case FieldUnderlyingCouponRate::TAG : return fieldUnderlyingCouponRate.offset > 0 ? _fixPtr + fieldUnderlyingCouponRate.offset : nullptr;
     case FieldUnderlyingSecurityExchange::TAG : return fieldUnderlyingSecurityExchange.offset > 0 ? _fixPtr + fieldUnderlyingSecurityExchange.offset : nullptr;
     case FieldUnderlyingIssuer::TAG : return fieldUnderlyingIssuer.offset > 0 ? _fixPtr + fieldUnderlyingIssuer.offset : nullptr;
     case FieldEncodedUnderlyingIssuerLen::TAG : return fieldEncodedUnderlyingIssuerLen.offset > 0 ? _fixPtr + fieldEncodedUnderlyingIssuerLen.offset : nullptr;
     case FieldEncodedUnderlyingIssuer::TAG : return fieldEncodedUnderlyingIssuer.offset > 0 ? _fixPtr + fieldEncodedUnderlyingIssuer.offset : nullptr;
     case FieldUnderlyingSecurityDesc::TAG : return fieldUnderlyingSecurityDesc.offset > 0 ? _fixPtr + fieldUnderlyingSecurityDesc.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDescLen::TAG : return fieldEncodedUnderlyingSecurityDescLen.offset > 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDescLen.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDesc::TAG : return fieldEncodedUnderlyingSecurityDesc.offset > 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDesc.offset : nullptr;
     case FieldUnderlyingCPProgram::TAG : return fieldUnderlyingCPProgram.offset > 0 ? _fixPtr + fieldUnderlyingCPProgram.offset : nullptr;
     case FieldUnderlyingCPRegType::TAG : return fieldUnderlyingCPRegType.offset > 0 ? _fixPtr + fieldUnderlyingCPRegType.offset : nullptr;
     case FieldUnderlyingCurrency::TAG : return fieldUnderlyingCurrency.offset > 0 ? _fixPtr + fieldUnderlyingCurrency.offset : nullptr;
     case FieldUnderlyingQty::TAG : return fieldUnderlyingQty.offset > 0 ? _fixPtr + fieldUnderlyingQty.offset : nullptr;
     case FieldUnderlyingPx::TAG : return fieldUnderlyingPx.offset > 0 ? _fixPtr + fieldUnderlyingPx.offset : nullptr;
     case FieldUnderlyingDirtyPrice::TAG : return fieldUnderlyingDirtyPrice.offset > 0 ? _fixPtr + fieldUnderlyingDirtyPrice.offset : nullptr;
     case FieldUnderlyingEndPrice::TAG : return fieldUnderlyingEndPrice.offset > 0 ? _fixPtr + fieldUnderlyingEndPrice.offset : nullptr;
     case FieldUnderlyingStartValue::TAG : return fieldUnderlyingStartValue.offset > 0 ? _fixPtr + fieldUnderlyingStartValue.offset : nullptr;
     case FieldUnderlyingCurrentValue::TAG : return fieldUnderlyingCurrentValue.offset > 0 ? _fixPtr + fieldUnderlyingCurrentValue.offset : nullptr;
     case FieldUnderlyingEndValue::TAG : return fieldUnderlyingEndValue.offset > 0 ? _fixPtr + fieldUnderlyingEndValue.offset : nullptr;
     case FieldNoUnderlyingStips::TAG : return fieldNoUnderlyingStips.offset > 0 ? _fixPtr + fieldNoUnderlyingStips.offset : nullptr;
     case FieldTotNoQuoteEntries::TAG : return fieldTotNoQuoteEntries.offset > 0 ? _fixPtr + fieldTotNoQuoteEntries.offset : nullptr;
     case FieldLastFragment::TAG : return fieldLastFragment.offset > 0 ? _fixPtr + fieldLastFragment.offset : nullptr;
     case FieldNoQuoteEntries::TAG : return fieldNoQuoteEntries.offset > 0 ? _fixPtr + fieldNoQuoteEntries.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupSecurityTypes::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityType::TAG : return fieldSecurityType.offset > 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset > 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset > 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset > 0 ? _fixPtr + fieldCFICode.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupNested3PartyIDs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldNested3PartyID::TAG : return fieldNested3PartyID.offset > 0 ? _fixPtr + fieldNested3PartyID.offset : nullptr;
     case FieldNested3PartyIDSource::TAG : return fieldNested3PartyIDSource.offset > 0 ? _fixPtr + fieldNested3PartyIDSource.offset : nullptr;
     case FieldNested3PartyRole::TAG : return fieldNested3PartyRole.offset > 0 ? _fixPtr + fieldNested3PartyRole.offset : nullptr;
     case FieldNoNested3PartySubIDs::TAG : return fieldNoNested3PartySubIDs.offset > 0 ? _fixPtr + fieldNoNested3PartySubIDs.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupPositions::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldPosType::TAG : return fieldPosType.offset > 0 ? _fixPtr + fieldPosType.offset : nullptr;
     case FieldLongQty::TAG : return fieldLongQty.offset > 0 ? _fixPtr + fieldLongQty.offset : nullptr;
     case FieldShortQty::TAG : return fieldShortQty.offset > 0 ? _fixPtr + fieldShortQty.offset : nullptr;
     case FieldPosQtyStatus::TAG : return fieldPosQtyStatus.offset > 0 ? _fixPtr + fieldPosQtyStatus.offset : nullptr;
     case FieldNoNestedPartyIDs::TAG : return fieldNoNestedPartyIDs.offset > 0 ? _fixPtr + fieldNoNestedPartyIDs.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupAffectedOrders::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrigClOrdID::TAG : return fieldOrigClOrdID.offset > 0 ? _fixPtr + fieldOrigClOrdID.offset : nullptr;
     case FieldAffectedOrderID::TAG : return fieldAffectedOrderID.offset > 0 ? _fixPtr + fieldAffectedOrderID.offset : nullptr;
     case FieldAffectedSecondaryOrderID::TAG : return fieldAffectedSecondaryOrderID.offset > 0 ? _fixPtr + fieldAffectedSecondaryOrderID.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupExecs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldLastQty::TAG : return fieldLastQty.offset > 0 ? _fixPtr + fieldLastQty.offset : nullptr;
     case FieldExecID::TAG : return fieldExecID.offset > 0 ? _fixPtr + fieldExecID.offset : nullptr;
     case FieldSecondaryExecID::TAG : return fieldSecondaryExecID.offset > 0 ? _fixPtr + fieldSecondaryExecID.offset : nullptr;
     case FieldLastPx::TAG : return fieldLastPx.offset > 0 ? _fixPtr + fieldLastPx.offset : nullptr;
     case FieldLastParPx::TAG : return fieldLastParPx.offset > 0 ? _fixPtr + fieldLastParPx.offset : nullptr;
     case FieldLastCapacity::TAG : return fieldLastCapacity.offset > 0 ? _fixPtr + fieldLastCapacity.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupMsgTypes::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldRefMsgType::TAG : return fieldRefMsgType.offset > 0 ? _fixPtr + fieldRefMsgType.offset : nullptr;
     case FieldMsgDirection::TAG : return fieldMsgDirection.offset > 0 ? _fixPtr + fieldMsgDirection.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupBidComponents::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::TAG : return fieldListID.offset > 0 ? _fixPtr + fieldListID.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset > 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset > 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset > 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldNetGrossInd::TAG : return fieldNetGrossInd.offset > 0 ? _fixPtr + fieldNetGrossInd.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset > 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset > 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset > 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset > 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupSettlInst::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSettlInstID::TAG : return fieldSettlInstID.offset > 0 ? _fixPtr + fieldSettlInstID.offset : nullptr;
     case FieldSettlInstTransType::TAG : return fieldSettlInstTransType.offset > 0 ? _fixPtr + fieldSettlInstTransType.offset : nullptr;
     case FieldSettlInstRefID::TAG : return fieldSettlInstRefID.offset > 0 ? _fixPtr + fieldSettlInstRefID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset > 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset > 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset > 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset > 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset > 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldEffectiveTime::TAG : return fieldEffectiveTime.offset > 0 ? _fixPtr + fieldEffectiveTime.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset > 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldLastUpdateTime::TAG : return fieldLastUpdateTime.offset > 0 ? _fixPtr + fieldLastUpdateTime.offset : nullptr;
     case FieldSettlDeliveryType::TAG : return fieldSettlDeliveryType.offset > 0 ? _fixPtr + fieldSettlDeliveryType.offset : nullptr;
     case FieldStandInstDbType::TAG : return fieldStandInstDbType.offset > 0 ? _fixPtr + fieldStandInstDbType.offset : nullptr;
     case FieldStandInstDbName::TAG : return fieldStandInstDbName.offset > 0 ? _fixPtr + fieldStandInstDbName.offset : nullptr;
     case FieldStandInstDbID::TAG : return fieldStandInstDbID.offset > 0 ? _fixPtr + fieldStandInstDbID.offset : nullptr;
     case FieldNoDlvyInst::TAG : return fieldNoDlvyInst.offset > 0 ? _fixPtr + fieldNoDlvyInst.offset : nullptr;
     case FieldPaymentMethod::TAG : return fieldPaymentMethod.offset > 0 ? _fixPtr + fieldPaymentMethod.offset : nullptr;
     case FieldPaymentRef::TAG : return fieldPaymentRef.offset > 0 ? _fixPtr + fieldPaymentRef.offset : nullptr;
     case FieldCardHolderName::TAG : return fieldCardHolderName.offset > 0 ? _fixPtr + fieldCardHolderName.offset : nullptr;
     case FieldCardNumber::TAG : return fieldCardNumber.offset > 0 ? _fixPtr + fieldCardNumber.offset : nullptr;
     case FieldCardStartDate::TAG : return fieldCardStartDate.offset > 0 ? _fixPtr + fieldCardStartDate.offset : nullptr;
     case FieldCardExpDate::TAG : return fieldCardExpDate.offset > 0 ? _fixPtr + fieldCardExpDate.offset : nullptr;
     case FieldCardIssNum::TAG : return fieldCardIssNum.offset > 0 ? _fixPtr + fieldCardIssNum.offset : nullptr;
     case FieldPaymentDate::TAG : return fieldPaymentDate.offset > 0 ? _fixPtr + fieldPaymentDate.offset : nullptr;
     case FieldPaymentRemitterID::TAG : return fieldPaymentRemitterID.offset > 0 ? _fixPtr + fieldPaymentRemitterID.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupInstrAttrib::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldInstrAttribType::TAG : return fieldInstrAttribType.offset > 0 ? _fixPtr + fieldInstrAttribType.offset : nullptr;
     case FieldInstrAttribValue::TAG : return fieldInstrAttribValue.offset > 0 ? _fixPtr + fieldInstrAttribValue.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupMiscFees::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldMiscFeeAmt::TAG : return fieldMiscFeeAmt.offset > 0 ? _fixPtr + fieldMiscFeeAmt.offset : nullptr;
     case FieldMiscFeeCurr::TAG : return fieldMiscFeeCurr.offset > 0 ? _fixPtr + fieldMiscFeeCurr.offset : nullptr;
     case FieldMiscFeeType::TAG : return fieldMiscFeeType.offset > 0 ? _fixPtr + fieldMiscFeeType.offset : nullptr;
     case FieldMiscFeeBasis::TAG : return fieldMiscFeeBasis.offset > 0 ? _fixPtr + fieldMiscFeeBasis.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupQuoteQualifiers::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteQualifier::TAG : return fieldQuoteQualifier.offset > 0 ? _fixPtr + fieldQuoteQualifier.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupDistribInsts::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldDistribPaymentMethod::TAG : return fieldDistribPaymentMethod.offset > 0 ? _fixPtr + fieldDistribPaymentMethod.offset : nullptr;
     case FieldDistribPercentage::TAG : return fieldDistribPercentage.offset > 0 ? _fixPtr + fieldDistribPercentage.offset : nullptr;
     case FieldCashDistribCurr::TAG : return fieldCashDistribCurr.offset > 0 ? _fixPtr + fieldCashDistribCurr.offset : nullptr;
     case FieldCashDistribAgentName::TAG : return fieldCashDistribAgentName.offset > 0 ? _fixPtr + fieldCashDistribAgentName.offset : nullptr;
     case FieldCashDistribAgentCode::TAG : return fieldCashDistribAgentCode.offset > 0 ? _fixPtr + fieldCashDistribAgentCode.offset : nullptr;
     case FieldCashDistribAgentAcctNumber::TAG : return fieldCashDistribAgentAcctNumber.offset > 0 ? _fixPtr + fieldCashDistribAgentAcctNumber.offset : nullptr;
     case FieldCashDistribPayRef::TAG : return fieldCashDistribPayRef.offset > 0 ? _fixPtr + fieldCashDistribPayRef.offset : nullptr;
     case FieldCashDistribAgentAcctName::TAG : return fieldCashDistribAgentAcctName.offset > 0 ? _fixPtr + fieldCashDistribAgentAcctName.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupTrdRegTimestamps::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldTrdRegTimestamp::TAG : return fieldTrdRegTimestamp.offset > 0 ? _fixPtr + fieldTrdRegTimestamp.offset : nullptr;
     case FieldTrdRegTimestampType::TAG : return fieldTrdRegTimestampType.offset > 0 ? _fixPtr + fieldTrdRegTimestampType.offset : nullptr;
     case FieldTrdRegTimestampOrigin::TAG : return fieldTrdRegTimestampOrigin.offset > 0 ? _fixPtr + fieldTrdRegTimestampOrigin.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupAltMDSource::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldAltMDSourceID::TAG : return fieldAltMDSourceID.offset > 0 ? _fixPtr + fieldAltMDSourceID.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupSides::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSide::TAG : return fieldSide.offset > 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldOrigClOrdID::TAG : return fieldOrigClOrdID.offset > 0 ? _fixPtr + fieldOrigClOrdID.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset > 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset > 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::TAG : return fieldClOrdLinkID.offset > 0 ? _fixPtr + fieldClOrdLinkID.offset : nullptr;
     case FieldOrigOrdModTime::TAG : return fieldOrigOrdModTime.offset > 0 ? _fixPtr + fieldOrigOrdModTime.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset > 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset > 0 ? _fixPtr + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset > 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset > 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset > 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset > 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset > 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset > 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldComplianceID::TAG : return fieldComplianceID.offset > 0 ? _fixPtr + fieldComplianceID.offset : nullptr;
     case FieldText::TAG : return fieldText.offset > 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset > 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset > 0 ? _fixPtr + fieldEncodedText.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupRoutingIDs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldRoutingType::TAG : return fieldRoutingType.offset > 0 ? _fixPtr + fieldRoutingType.offset : nullptr;
     case FieldRoutingID::TAG : return fieldRoutingID.offset > 0 ? _fixPtr + fieldRoutingID.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupPosAmt::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldPosAmtType::TAG : return fieldPosAmtType.offset > 0 ? _fixPtr + fieldPosAmtType.offset : nullptr;
     case FieldPosAmt::TAG : return fieldPosAmt.offset > 0 ? _fixPtr + fieldPosAmt.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupLinesOfText::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldText::TAG : return fieldText.offset > 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset > 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset > 0 ? _fixPtr + fieldEncodedText.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupIOIQualifiers::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldIOIQualifier::TAG : return fieldIOIQualifier.offset > 0 ? _fixPtr + fieldIOIQualifier.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupDates::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradeDate::TAG : return fieldTradeDate.offset > 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset > 0 ? _fixPtr + fieldTransactTime.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupMDEntryTypes::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldMDEntryType::TAG : return fieldMDEntryType.offset > 0 ? _fixPtr + fieldMDEntryType.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupRelatedSym::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSymbol::TAG : return fieldSymbol.offset > 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset > 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset > 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset > 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset > 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset > 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset > 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset > 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset > 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset > 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset > 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset > 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset > 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset > 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset > 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset > 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset > 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset > 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset > 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset > 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset > 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset > 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset > 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset > 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset > 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset > 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset > 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset > 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset > 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset > 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset > 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset > 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset > 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset > 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset > 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset > 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset > 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset > 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset > 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset > 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset > 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset > 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset > 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupContraBrokers::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldContraBroker::TAG : return fieldContraBroker.offset > 0 ? _fixPtr + fieldContraBroker.offset : nullptr;
     case FieldContraTrader::TAG : return fieldContraTrader.offset > 0 ? _fixPtr + fieldContraTrader.offset : nullptr;
     case FieldContraTradeQty::TAG : return fieldContraTradeQty.offset > 0 ? _fixPtr + fieldContraTradeQty.offset : nullptr;
     case FieldContraTradeTime::TAG : return fieldContraTradeTime.offset > 0 ? _fixPtr + fieldContraTradeTime.offset : nullptr;
     case FieldContraLegRefID::TAG : return fieldContraLegRefID.offset > 0 ? _fixPtr + fieldContraLegRefID.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupTrades::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradeReportID::TAG : return fieldTradeReportID.offset > 0 ? _fixPtr + fieldTradeReportID.offset : nullptr;
     case FieldSecondaryTradeReportID::TAG : return fieldSecondaryTradeReportID.offset > 0 ? _fixPtr + fieldSecondaryTradeReportID.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupStrikes::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSymbol::TAG : return fieldSymbol.offset > 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset > 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset > 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset > 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset > 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset > 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset > 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset > 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset > 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset > 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset > 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset > 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset > 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset > 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset > 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset > 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset > 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset > 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset > 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset > 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset > 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset > 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset > 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset > 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset > 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset > 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset > 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset > 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset > 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset > 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset > 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset > 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset > 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset > 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset > 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset > 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset > 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset > 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset > 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset > 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset > 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset > 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset > 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupBidDescriptors::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldBidDescriptorType::TAG : return fieldBidDescriptorType.offset > 0 ? _fixPtr + fieldBidDescriptorType.offset : nullptr;
     case FieldBidDescriptor::TAG : return fieldBidDescriptor.offset > 0 ? _fixPtr + fieldBidDescriptor.offset : nullptr;
     case FieldSideValueInd::TAG : return fieldSideValueInd.offset > 0 ? _fixPtr + fieldSideValueInd.offset : nullptr;
     case FieldLiquidityValue::TAG : return fieldLiquidityValue.offset > 0 ? _fixPtr + fieldLiquidityValue.offset : nullptr;
     case FieldLiquidityNumSecurities::TAG : return fieldLiquidityNumSecurities.offset > 0 ? _fixPtr + fieldLiquidityNumSecurities.offset : nullptr;
     case FieldLiquidityPctLow::TAG : return fieldLiquidityPctLow.offset > 0 ? _fixPtr + fieldLiquidityPctLow.offset : nullptr;
     case FieldLiquidityPctHigh::TAG : return fieldLiquidityPctHigh.offset > 0 ? _fixPtr + fieldLiquidityPctHigh.offset : nullptr;
     case FieldEFPTrackingError::TAG : return fieldEFPTrackingError.offset > 0 ? _fixPtr + fieldEFPTrackingError.offset : nullptr;
     case FieldFairValue::TAG : return fieldFairValue.offset > 0 ? _fixPtr + fieldFairValue.offset : nullptr;
     case FieldOutsideIndexPct::TAG : return fieldOutsideIndexPct.offset > 0 ? _fixPtr + fieldOutsideIndexPct.offset : nullptr;
     case FieldValueOfFutures::TAG : return fieldValueOfFutures.offset > 0 ? _fixPtr + fieldValueOfFutures.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupCompIDs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldRefCompID::TAG : return fieldRefCompID.offset > 0 ? _fixPtr + fieldRefCompID.offset : nullptr;
     case FieldRefSubID::TAG : return fieldRefSubID.offset > 0 ? _fixPtr + fieldRefSubID.offset : nullptr;
     case FieldLocationID::TAG : return fieldLocationID.offset > 0 ? _fixPtr + fieldLocationID.offset : nullptr;
     case FieldDeskID::TAG : return fieldDeskID.offset > 0 ? _fixPtr + fieldDeskID.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupLegAllocs::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldLegAllocAccount::TAG : return fieldLegAllocAccount.offset > 0 ? _fixPtr + fieldLegAllocAccount.offset : nullptr;
     case FieldLegIndividualAllocID::TAG : return fieldLegIndividualAllocID.offset > 0 ? _fixPtr + fieldLegIndividualAllocID.offset : nullptr;
     case FieldNoNested2PartyIDs::TAG : return fieldNoNested2PartyIDs.offset > 0 ? _fixPtr + fieldNoNested2PartyIDs.offset : nullptr;
     case FieldLegAllocQty::TAG : return fieldLegAllocQty.offset > 0 ? _fixPtr + fieldLegAllocQty.offset : nullptr;
     case FieldLegAllocAcctIDSource::TAG : return fieldLegAllocAcctIDSource.offset > 0 ? _fixPtr + fieldLegAllocAcctIDSource.offset : nullptr;
     case FieldLegSettlCurrency::TAG : return fieldLegSettlCurrency.offset > 0 ? _fixPtr + fieldLegSettlCurrency.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupRegistDtls::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldRegistDtls::TAG : return fieldRegistDtls.offset > 0 ? _fixPtr + fieldRegistDtls.offset : nullptr;
     case FieldRegistEmail::TAG : return fieldRegistEmail.offset > 0 ? _fixPtr + fieldRegistEmail.offset : nullptr;
     case FieldMailingDtls::TAG : return fieldMailingDtls.offset > 0 ? _fixPtr + fieldMailingDtls.offset : nullptr;
     case FieldMailingInst::TAG : return fieldMailingInst.offset > 0 ? _fixPtr + fieldMailingInst.offset : nullptr;
     case FieldNoNestedPartyIDs::TAG : return fieldNoNestedPartyIDs.offset > 0 ? _fixPtr + fieldNoNestedPartyIDs.offset : nullptr;
     case FieldOwnerType::TAG : return fieldOwnerType.offset > 0 ? _fixPtr + fieldOwnerType.offset : nullptr;
     case FieldDateOfBirth::TAG : return fieldDateOfBirth.offset > 0 ? _fixPtr + fieldDateOfBirth.offset : nullptr;
     case FieldInvestorCountryOfResidence::TAG : return fieldInvestorCountryOfResidence.offset > 0 ? _fixPtr + fieldInvestorCountryOfResidence.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupContAmts::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldContAmtType::TAG : return fieldContAmtType.offset > 0 ? _fixPtr + fieldContAmtType.offset : nullptr;
     case FieldContAmtValue::TAG : return fieldContAmtValue.offset > 0 ? _fixPtr + fieldContAmtValue.offset : nullptr;
     case FieldContAmtCurr::TAG : return fieldContAmtCurr.offset > 0 ? _fixPtr + fieldContAmtCurr.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

const char * GroupMDEntries::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldMDEntryType::TAG : return fieldMDEntryType.offset > 0 ? _fixPtr + fieldMDEntryType.offset : nullptr;
     case FieldMDEntryPx::TAG : return fieldMDEntryPx.offset > 0 ? _fixPtr + fieldMDEntryPx.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset > 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldMDEntrySize::TAG : return fieldMDEntrySize.offset > 0 ? _fixPtr + fieldMDEntrySize.offset : nullptr;
     case FieldMDEntryDate::TAG : return fieldMDEntryDate.offset > 0 ? _fixPtr + fieldMDEntryDate.offset : nullptr;
     case FieldMDEntryTime::TAG : return fieldMDEntryTime.offset > 0 ? _fixPtr + fieldMDEntryTime.offset : nullptr;
     case FieldTickDirection::TAG : return fieldTickDirection.offset > 0 ? _fixPtr + fieldTickDirection.offset : nullptr;
     case FieldMDMkt::TAG : return fieldMDMkt.offset > 0 ? _fixPtr + fieldMDMkt.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset > 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset > 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldQuoteCondition::TAG : return fieldQuoteCondition.offset > 0 ? _fixPtr + fieldQuoteCondition.offset : nullptr;
     case FieldTradeCondition::TAG : return fieldTradeCondition.offset > 0 ? _fixPtr + fieldTradeCondition.offset : nullptr;
     case FieldMDEntryOriginator::TAG : return fieldMDEntryOriginator.offset > 0 ? _fixPtr + fieldMDEntryOriginator.offset : nullptr;
     case FieldLocationID::TAG : return fieldLocationID.offset > 0 ? _fixPtr + fieldLocationID.offset : nullptr;
     case FieldDeskID::TAG : return fieldDeskID.offset > 0 ? _fixPtr + fieldDeskID.offset : nullptr;
     case FieldOpenCloseSettlFlag::TAG : return fieldOpenCloseSettlFlag.offset > 0 ? _fixPtr + fieldOpenCloseSettlFlag.offset : nullptr;
     case FieldTimeInForce::TAG : return fieldTimeInForce.offset > 0 ? _fixPtr + fieldTimeInForce.offset : nullptr;
     case FieldExpireDate::TAG : return fieldExpireDate.offset > 0 ? _fixPtr + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset > 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldMinQty::TAG : return fieldMinQty.offset > 0 ? _fixPtr + fieldMinQty.offset : nullptr;
     case FieldExecInst::TAG : return fieldExecInst.offset > 0 ? _fixPtr + fieldExecInst.offset : nullptr;
     case FieldSellerDays::TAG : return fieldSellerDays.offset > 0 ? _fixPtr + fieldSellerDays.offset : nullptr;
     case FieldOrderID::TAG : return fieldOrderID.offset > 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldQuoteEntryID::TAG : return fieldQuoteEntryID.offset > 0 ? _fixPtr + fieldQuoteEntryID.offset : nullptr;
     case FieldMDEntryBuyer::TAG : return fieldMDEntryBuyer.offset > 0 ? _fixPtr + fieldMDEntryBuyer.offset : nullptr;
     case FieldMDEntrySeller::TAG : return fieldMDEntrySeller.offset > 0 ? _fixPtr + fieldMDEntrySeller.offset : nullptr;
     case FieldNumberOfOrders::TAG : return fieldNumberOfOrders.offset > 0 ? _fixPtr + fieldNumberOfOrders.offset : nullptr;
     case FieldMDEntryPositionNo::TAG : return fieldMDEntryPositionNo.offset > 0 ? _fixPtr + fieldMDEntryPositionNo.offset : nullptr;
     case FieldScope::TAG : return fieldScope.offset > 0 ? _fixPtr + fieldScope.offset : nullptr;
     case FieldPriceDelta::TAG : return fieldPriceDelta.offset > 0 ? _fixPtr + fieldPriceDelta.offset : nullptr;
     case FieldText::TAG : return fieldText.offset > 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset > 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset > 0 ? _fixPtr + fieldEncodedText.offset : nullptr;

     default : return nullptr; 
   }
   return nullptr;
}

// ---------------------------------- isFieldSet ---------------------------------

bool GroupLegStipulations::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldLegStipulationType::TAG : return fieldLegStipulationType.offset > 0 ;
     case FieldLegStipulationValue::TAG : return fieldLegStipulationValue.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupEvents::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldEventType::TAG : return fieldEventType.offset > 0 ;
     case FieldEventDate::TAG : return fieldEventDate.offset > 0;
     case FieldEventPx::TAG : return fieldEventPx.offset > 0;
     case FieldEventText::TAG : return fieldEventText.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupLegSecurityAltID::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldLegSecurityAltID::TAG : return fieldLegSecurityAltID.offset > 0 ;
     case FieldLegSecurityAltIDSource::TAG : return fieldLegSecurityAltIDSource.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupCapacities::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset > 0 ;
     case FieldOrderRestrictions::TAG : return fieldOrderRestrictions.offset > 0;
     case FieldOrderCapacityQty::TAG : return fieldOrderCapacityQty.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupNested3PartySubIDs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldNested3PartySubID::TAG : return fieldNested3PartySubID.offset > 0 ;
     case FieldNested3PartySubIDType::TAG : return fieldNested3PartySubIDType.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupPartySubIDs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldPartySubID::TAG : return fieldPartySubID.offset > 0 ;
     case FieldPartySubIDType::TAG : return fieldPartySubIDType.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupNested2PartySubIDs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldNested2PartySubID::TAG : return fieldNested2PartySubID.offset > 0 ;
     case FieldNested2PartySubIDType::TAG : return fieldNested2PartySubIDType.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupNested2PartyIDs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldNested2PartyID::TAG : return fieldNested2PartyID.offset > 0 ;
     case FieldNested2PartyIDSource::TAG : return fieldNested2PartyIDSource.offset > 0;
     case FieldNested2PartyRole::TAG : return fieldNested2PartyRole.offset > 0;
     case FieldNoNested2PartySubIDs::TAG : return fieldNoNested2PartySubIDs.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupHops::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldHopCompID::TAG : return fieldHopCompID.offset > 0 ;
     case FieldHopSendingTime::TAG : return fieldHopSendingTime.offset > 0;
     case FieldHopRefID::TAG : return fieldHopRefID.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupCollInquiryQualifier::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldCollInquiryQualifier::TAG : return fieldCollInquiryQualifier.offset > 0 ;

     default : return false; 
   }
   return false;
}

bool GroupPartyIDs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldPartyID::TAG : return fieldPartyID.offset > 0 ;
     case FieldPartyIDSource::TAG : return fieldPartyIDSource.offset > 0;
     case FieldPartyRole::TAG : return fieldPartyRole.offset > 0;
     case FieldNoPartySubIDs::TAG : return fieldNoPartySubIDs.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupAllocs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldAllocAccount::TAG : return fieldAllocAccount.offset > 0 ;
     case FieldAllocAcctIDSource::TAG : return fieldAllocAcctIDSource.offset > 0;
     case FieldAllocPrice::TAG : return fieldAllocPrice.offset > 0;
     case FieldIndividualAllocID::TAG : return fieldIndividualAllocID.offset > 0;
     case FieldIndividualAllocRejCode::TAG : return fieldIndividualAllocRejCode.offset > 0;
     case FieldAllocText::TAG : return fieldAllocText.offset > 0;
     case FieldEncodedAllocTextLen::TAG : return fieldEncodedAllocTextLen.offset > 0;
     case FieldEncodedAllocText::TAG : return fieldEncodedAllocText.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupTradingSessions::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset > 0 ;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupSecurityAltID::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldSecurityAltID::TAG : return fieldSecurityAltID.offset > 0 ;
     case FieldSecurityAltIDSource::TAG : return fieldSecurityAltIDSource.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupUnderlyingSecurityAltID::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldUnderlyingSecurityAltID::TAG : return fieldUnderlyingSecurityAltID.offset > 0 ;
     case FieldUnderlyingSecurityAltIDSource::TAG : return fieldUnderlyingSecurityAltIDSource.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupUnderlyingStips::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldUnderlyingStipType::TAG : return fieldUnderlyingStipType.offset > 0 ;
     case FieldUnderlyingStipValue::TAG : return fieldUnderlyingStipValue.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupUnderlyings::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldUnderlyingSymbol::TAG : return fieldUnderlyingSymbol.offset > 0 ;
     case FieldUnderlyingSymbolSfx::TAG : return fieldUnderlyingSymbolSfx.offset > 0;
     case FieldUnderlyingSecurityID::TAG : return fieldUnderlyingSecurityID.offset > 0;
     case FieldUnderlyingSecurityIDSource::TAG : return fieldUnderlyingSecurityIDSource.offset > 0;
     case FieldNoUnderlyingSecurityAltID::TAG : return fieldNoUnderlyingSecurityAltID.offset > 0;
     case FieldUnderlyingProduct::TAG : return fieldUnderlyingProduct.offset > 0;
     case FieldUnderlyingCFICode::TAG : return fieldUnderlyingCFICode.offset > 0;
     case FieldUnderlyingSecurityType::TAG : return fieldUnderlyingSecurityType.offset > 0;
     case FieldUnderlyingSecuritySubType::TAG : return fieldUnderlyingSecuritySubType.offset > 0;
     case FieldUnderlyingMaturityMonthYear::TAG : return fieldUnderlyingMaturityMonthYear.offset > 0;
     case FieldUnderlyingMaturityDate::TAG : return fieldUnderlyingMaturityDate.offset > 0;
     case FieldUnderlyingPutOrCall::TAG : return fieldUnderlyingPutOrCall.offset > 0;
     case FieldUnderlyingCouponPaymentDate::TAG : return fieldUnderlyingCouponPaymentDate.offset > 0;
     case FieldUnderlyingIssueDate::TAG : return fieldUnderlyingIssueDate.offset > 0;
     case FieldUnderlyingRepoCollateralSecurityType::TAG : return fieldUnderlyingRepoCollateralSecurityType.offset > 0;
     case FieldUnderlyingRepurchaseTerm::TAG : return fieldUnderlyingRepurchaseTerm.offset > 0;
     case FieldUnderlyingRepurchaseRate::TAG : return fieldUnderlyingRepurchaseRate.offset > 0;
     case FieldUnderlyingFactor::TAG : return fieldUnderlyingFactor.offset > 0;
     case FieldUnderlyingCreditRating::TAG : return fieldUnderlyingCreditRating.offset > 0;
     case FieldUnderlyingInstrRegistry::TAG : return fieldUnderlyingInstrRegistry.offset > 0;
     case FieldUnderlyingCountryOfIssue::TAG : return fieldUnderlyingCountryOfIssue.offset > 0;
     case FieldUnderlyingStateOrProvinceOfIssue::TAG : return fieldUnderlyingStateOrProvinceOfIssue.offset > 0;
     case FieldUnderlyingLocaleOfIssue::TAG : return fieldUnderlyingLocaleOfIssue.offset > 0;
     case FieldUnderlyingRedemptionDate::TAG : return fieldUnderlyingRedemptionDate.offset > 0;
     case FieldUnderlyingStrikePrice::TAG : return fieldUnderlyingStrikePrice.offset > 0;
     case FieldUnderlyingStrikeCurrency::TAG : return fieldUnderlyingStrikeCurrency.offset > 0;
     case FieldUnderlyingOptAttribute::TAG : return fieldUnderlyingOptAttribute.offset > 0;
     case FieldUnderlyingContractMultiplier::TAG : return fieldUnderlyingContractMultiplier.offset > 0;
     case FieldUnderlyingCouponRate::TAG : return fieldUnderlyingCouponRate.offset > 0;
     case FieldUnderlyingSecurityExchange::TAG : return fieldUnderlyingSecurityExchange.offset > 0;
     case FieldUnderlyingIssuer::TAG : return fieldUnderlyingIssuer.offset > 0;
     case FieldEncodedUnderlyingIssuerLen::TAG : return fieldEncodedUnderlyingIssuerLen.offset > 0;
     case FieldEncodedUnderlyingIssuer::TAG : return fieldEncodedUnderlyingIssuer.offset > 0;
     case FieldUnderlyingSecurityDesc::TAG : return fieldUnderlyingSecurityDesc.offset > 0;
     case FieldEncodedUnderlyingSecurityDescLen::TAG : return fieldEncodedUnderlyingSecurityDescLen.offset > 0;
     case FieldEncodedUnderlyingSecurityDesc::TAG : return fieldEncodedUnderlyingSecurityDesc.offset > 0;
     case FieldUnderlyingCPProgram::TAG : return fieldUnderlyingCPProgram.offset > 0;
     case FieldUnderlyingCPRegType::TAG : return fieldUnderlyingCPRegType.offset > 0;
     case FieldUnderlyingCurrency::TAG : return fieldUnderlyingCurrency.offset > 0;
     case FieldUnderlyingQty::TAG : return fieldUnderlyingQty.offset > 0;
     case FieldUnderlyingPx::TAG : return fieldUnderlyingPx.offset > 0;
     case FieldUnderlyingDirtyPrice::TAG : return fieldUnderlyingDirtyPrice.offset > 0;
     case FieldUnderlyingEndPrice::TAG : return fieldUnderlyingEndPrice.offset > 0;
     case FieldUnderlyingStartValue::TAG : return fieldUnderlyingStartValue.offset > 0;
     case FieldUnderlyingCurrentValue::TAG : return fieldUnderlyingCurrentValue.offset > 0;
     case FieldUnderlyingEndValue::TAG : return fieldUnderlyingEndValue.offset > 0;
     case FieldNoUnderlyingStips::TAG : return fieldNoUnderlyingStips.offset > 0;
     case FieldUnderlyingSettlPrice::TAG : return fieldUnderlyingSettlPrice.offset > 0;
     case FieldUnderlyingSettlPriceType::TAG : return fieldUnderlyingSettlPriceType.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupStipulations::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldStipulationType::TAG : return fieldStipulationType.offset > 0 ;
     case FieldStipulationValue::TAG : return fieldStipulationValue.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupOrders::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldClOrdID::TAG : return fieldClOrdID.offset > 0 ;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset > 0;
     case FieldListSeqNo::TAG : return fieldListSeqNo.offset > 0;
     case FieldClOrdLinkID::TAG : return fieldClOrdLinkID.offset > 0;
     case FieldSettlInstMode::TAG : return fieldSettlInstMode.offset > 0;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset > 0;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset > 0;
     case FieldTradeDate::TAG : return fieldTradeDate.offset > 0;
     case FieldAccount::TAG : return fieldAccount.offset > 0;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset > 0;
     case FieldAccountType::TAG : return fieldAccountType.offset > 0;
     case FieldDayBookingInst::TAG : return fieldDayBookingInst.offset > 0;
     case FieldBookingUnit::TAG : return fieldBookingUnit.offset > 0;
     case FieldAllocID::TAG : return fieldAllocID.offset > 0;
     case FieldPreallocMethod::TAG : return fieldPreallocMethod.offset > 0;
     case FieldNoAllocs::TAG : return fieldNoAllocs.offset > 0;
     case FieldSettlType::TAG : return fieldSettlType.offset > 0;
     case FieldSettlDate::TAG : return fieldSettlDate.offset > 0;
     case FieldCashMargin::TAG : return fieldCashMargin.offset > 0;
     case FieldClearingFeeIndicator::TAG : return fieldClearingFeeIndicator.offset > 0;
     case FieldHandlInst::TAG : return fieldHandlInst.offset > 0;
     case FieldExecInst::TAG : return fieldExecInst.offset > 0;
     case FieldMinQty::TAG : return fieldMinQty.offset > 0;
     case FieldMaxFloor::TAG : return fieldMaxFloor.offset > 0;
     case FieldExDestination::TAG : return fieldExDestination.offset > 0;
     case FieldNoTradingSessions::TAG : return fieldNoTradingSessions.offset > 0;
     case FieldProcessCode::TAG : return fieldProcessCode.offset > 0;
     case FieldSymbol::TAG : return fieldSymbol.offset > 0;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset > 0;
     case FieldSecurityID::TAG : return fieldSecurityID.offset > 0;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset > 0;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset > 0;
     case FieldProduct::TAG : return fieldProduct.offset > 0;
     case FieldCFICode::TAG : return fieldCFICode.offset > 0;
     case FieldSecurityType::TAG : return fieldSecurityType.offset > 0;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset > 0;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset > 0;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset > 0;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset > 0;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset > 0;
     case FieldIssueDate::TAG : return fieldIssueDate.offset > 0;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset > 0;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset > 0;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset > 0;
     case FieldFactor::TAG : return fieldFactor.offset > 0;
     case FieldCreditRating::TAG : return fieldCreditRating.offset > 0;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset > 0;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset > 0;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset > 0;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset > 0;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset > 0;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset > 0;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset > 0;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset > 0;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset > 0;
     case FieldCouponRate::TAG : return fieldCouponRate.offset > 0;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset > 0;
     case FieldIssuer::TAG : return fieldIssuer.offset > 0;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset > 0;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset > 0;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset > 0;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset > 0;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset > 0;
     case FieldPool::TAG : return fieldPool.offset > 0;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset > 0;
     case FieldCPProgram::TAG : return fieldCPProgram.offset > 0;
     case FieldCPRegType::TAG : return fieldCPRegType.offset > 0;
     case FieldNoEvents::TAG : return fieldNoEvents.offset > 0;
     case FieldDatedDate::TAG : return fieldDatedDate.offset > 0;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset > 0;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset > 0;
     case FieldPrevClosePx::TAG : return fieldPrevClosePx.offset > 0;
     case FieldSide::TAG : return fieldSide.offset > 0;
     case FieldSideValueInd::TAG : return fieldSideValueInd.offset > 0;
     case FieldLocateReqd::TAG : return fieldLocateReqd.offset > 0;
     case FieldTransactTime::TAG : return fieldTransactTime.offset > 0;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset > 0;
     case FieldQtyType::TAG : return fieldQtyType.offset > 0;
     case FieldOrderQty::TAG : return fieldOrderQty.offset > 0;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset > 0;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset > 0;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset > 0;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset > 0;
     case FieldOrdType::TAG : return fieldOrdType.offset > 0;
     case FieldPriceType::TAG : return fieldPriceType.offset > 0;
     case FieldPrice::TAG : return fieldPrice.offset > 0;
     case FieldStopPx::TAG : return fieldStopPx.offset > 0;
     case FieldSpread::TAG : return fieldSpread.offset > 0;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset > 0;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset > 0;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset > 0;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset > 0;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset > 0;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset > 0;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset > 0;
     case FieldYieldType::TAG : return fieldYieldType.offset > 0;
     case FieldYield::TAG : return fieldYield.offset > 0;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset > 0;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset > 0;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset > 0;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset > 0;
     case FieldCurrency::TAG : return fieldCurrency.offset > 0;
     case FieldComplianceID::TAG : return fieldComplianceID.offset > 0;
     case FieldSolicitedFlag::TAG : return fieldSolicitedFlag.offset > 0;
     case FieldIOIID::TAG : return fieldIOIID.offset > 0;
     case FieldQuoteID::TAG : return fieldQuoteID.offset > 0;
     case FieldTimeInForce::TAG : return fieldTimeInForce.offset > 0;
     case FieldEffectiveTime::TAG : return fieldEffectiveTime.offset > 0;
     case FieldExpireDate::TAG : return fieldExpireDate.offset > 0;
     case FieldExpireTime::TAG : return fieldExpireTime.offset > 0;
     case FieldGTBookingInst::TAG : return fieldGTBookingInst.offset > 0;
     case FieldCommission::TAG : return fieldCommission.offset > 0;
     case FieldCommType::TAG : return fieldCommType.offset > 0;
     case FieldCommCurrency::TAG : return fieldCommCurrency.offset > 0;
     case FieldFundRenewWaiv::TAG : return fieldFundRenewWaiv.offset > 0;
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset > 0;
     case FieldOrderRestrictions::TAG : return fieldOrderRestrictions.offset > 0;
     case FieldCustOrderCapacity::TAG : return fieldCustOrderCapacity.offset > 0;
     case FieldForexReq::TAG : return fieldForexReq.offset > 0;
     case FieldSettlCurrency::TAG : return fieldSettlCurrency.offset > 0;
     case FieldBookingType::TAG : return fieldBookingType.offset > 0;
     case FieldText::TAG : return fieldText.offset > 0;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset > 0;
     case FieldEncodedText::TAG : return fieldEncodedText.offset > 0;
     case FieldSettlDate2::TAG : return fieldSettlDate2.offset > 0;
     case FieldOrderQty2::TAG : return fieldOrderQty2.offset > 0;
     case FieldPrice2::TAG : return fieldPrice2.offset > 0;
     case FieldPositionEffect::TAG : return fieldPositionEffect.offset > 0;
     case FieldCoveredOrUncovered::TAG : return fieldCoveredOrUncovered.offset > 0;
     case FieldMaxShow::TAG : return fieldMaxShow.offset > 0;
     case FieldPegOffsetValue::TAG : return fieldPegOffsetValue.offset > 0;
     case FieldPegMoveType::TAG : return fieldPegMoveType.offset > 0;
     case FieldPegOffsetType::TAG : return fieldPegOffsetType.offset > 0;
     case FieldPegLimitType::TAG : return fieldPegLimitType.offset > 0;
     case FieldPegRoundDirection::TAG : return fieldPegRoundDirection.offset > 0;
     case FieldPegScope::TAG : return fieldPegScope.offset > 0;
     case FieldDiscretionInst::TAG : return fieldDiscretionInst.offset > 0;
     case FieldDiscretionOffsetValue::TAG : return fieldDiscretionOffsetValue.offset > 0;
     case FieldDiscretionMoveType::TAG : return fieldDiscretionMoveType.offset > 0;
     case FieldDiscretionOffsetType::TAG : return fieldDiscretionOffsetType.offset > 0;
     case FieldDiscretionLimitType::TAG : return fieldDiscretionLimitType.offset > 0;
     case FieldDiscretionRoundDirection::TAG : return fieldDiscretionRoundDirection.offset > 0;
     case FieldDiscretionScope::TAG : return fieldDiscretionScope.offset > 0;
     case FieldTargetStrategy::TAG : return fieldTargetStrategy.offset > 0;
     case FieldTargetStrategyParameters::TAG : return fieldTargetStrategyParameters.offset > 0;
     case FieldParticipationRate::TAG : return fieldParticipationRate.offset > 0;
     case FieldDesignation::TAG : return fieldDesignation.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupSettlPartySubIDs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldSettlPartySubID::TAG : return fieldSettlPartySubID.offset > 0 ;
     case FieldSettlPartySubIDType::TAG : return fieldSettlPartySubIDType.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupSettlPartyIDs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldSettlPartyID::TAG : return fieldSettlPartyID.offset > 0 ;
     case FieldSettlPartyIDSource::TAG : return fieldSettlPartyIDSource.offset > 0;
     case FieldSettlPartyRole::TAG : return fieldSettlPartyRole.offset > 0;
     case FieldNoSettlPartySubIDs::TAG : return fieldNoSettlPartySubIDs.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupDlvyInst::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldSettlInstSource::TAG : return fieldSettlInstSource.offset > 0 ;
     case FieldDlvyInstType::TAG : return fieldDlvyInstType.offset > 0;
     case FieldNoSettlPartyIDs::TAG : return fieldNoSettlPartyIDs.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupClearingInstructions::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldClearingInstruction::TAG : return fieldClearingInstruction.offset > 0 ;

     default : return false; 
   }
   return false;
}

bool GroupNestedPartySubIDs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldNestedPartySubID::TAG : return fieldNestedPartySubID.offset > 0 ;
     case FieldNestedPartySubIDType::TAG : return fieldNestedPartySubIDType.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupNestedPartyIDs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldNestedPartyID::TAG : return fieldNestedPartyID.offset > 0 ;
     case FieldNestedPartyIDSource::TAG : return fieldNestedPartyIDSource.offset > 0;
     case FieldNestedPartyRole::TAG : return fieldNestedPartyRole.offset > 0;
     case FieldNoNestedPartySubIDs::TAG : return fieldNoNestedPartySubIDs.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupLegs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldLegSymbol::TAG : return fieldLegSymbol.offset > 0 ;
     case FieldLegSymbolSfx::TAG : return fieldLegSymbolSfx.offset > 0;
     case FieldLegSecurityID::TAG : return fieldLegSecurityID.offset > 0;
     case FieldLegSecurityIDSource::TAG : return fieldLegSecurityIDSource.offset > 0;
     case FieldNoLegSecurityAltID::TAG : return fieldNoLegSecurityAltID.offset > 0;
     case FieldLegProduct::TAG : return fieldLegProduct.offset > 0;
     case FieldLegCFICode::TAG : return fieldLegCFICode.offset > 0;
     case FieldLegSecurityType::TAG : return fieldLegSecurityType.offset > 0;
     case FieldLegSecuritySubType::TAG : return fieldLegSecuritySubType.offset > 0;
     case FieldLegMaturityMonthYear::TAG : return fieldLegMaturityMonthYear.offset > 0;
     case FieldLegMaturityDate::TAG : return fieldLegMaturityDate.offset > 0;
     case FieldLegCouponPaymentDate::TAG : return fieldLegCouponPaymentDate.offset > 0;
     case FieldLegIssueDate::TAG : return fieldLegIssueDate.offset > 0;
     case FieldLegRepoCollateralSecurityType::TAG : return fieldLegRepoCollateralSecurityType.offset > 0;
     case FieldLegRepurchaseTerm::TAG : return fieldLegRepurchaseTerm.offset > 0;
     case FieldLegRepurchaseRate::TAG : return fieldLegRepurchaseRate.offset > 0;
     case FieldLegFactor::TAG : return fieldLegFactor.offset > 0;
     case FieldLegCreditRating::TAG : return fieldLegCreditRating.offset > 0;
     case FieldLegInstrRegistry::TAG : return fieldLegInstrRegistry.offset > 0;
     case FieldLegCountryOfIssue::TAG : return fieldLegCountryOfIssue.offset > 0;
     case FieldLegStateOrProvinceOfIssue::TAG : return fieldLegStateOrProvinceOfIssue.offset > 0;
     case FieldLegLocaleOfIssue::TAG : return fieldLegLocaleOfIssue.offset > 0;
     case FieldLegRedemptionDate::TAG : return fieldLegRedemptionDate.offset > 0;
     case FieldLegStrikePrice::TAG : return fieldLegStrikePrice.offset > 0;
     case FieldLegStrikeCurrency::TAG : return fieldLegStrikeCurrency.offset > 0;
     case FieldLegOptAttribute::TAG : return fieldLegOptAttribute.offset > 0;
     case FieldLegContractMultiplier::TAG : return fieldLegContractMultiplier.offset > 0;
     case FieldLegCouponRate::TAG : return fieldLegCouponRate.offset > 0;
     case FieldLegSecurityExchange::TAG : return fieldLegSecurityExchange.offset > 0;
     case FieldLegIssuer::TAG : return fieldLegIssuer.offset > 0;
     case FieldEncodedLegIssuerLen::TAG : return fieldEncodedLegIssuerLen.offset > 0;
     case FieldEncodedLegIssuer::TAG : return fieldEncodedLegIssuer.offset > 0;
     case FieldLegSecurityDesc::TAG : return fieldLegSecurityDesc.offset > 0;
     case FieldEncodedLegSecurityDescLen::TAG : return fieldEncodedLegSecurityDescLen.offset > 0;
     case FieldEncodedLegSecurityDesc::TAG : return fieldEncodedLegSecurityDesc.offset > 0;
     case FieldLegRatioQty::TAG : return fieldLegRatioQty.offset > 0;
     case FieldLegSide::TAG : return fieldLegSide.offset > 0;
     case FieldLegCurrency::TAG : return fieldLegCurrency.offset > 0;
     case FieldLegPool::TAG : return fieldLegPool.offset > 0;
     case FieldLegDatedDate::TAG : return fieldLegDatedDate.offset > 0;
     case FieldLegContractSettlMonth::TAG : return fieldLegContractSettlMonth.offset > 0;
     case FieldLegInterestAccrualDate::TAG : return fieldLegInterestAccrualDate.offset > 0;
     case FieldLegQty::TAG : return fieldLegQty.offset > 0;
     case FieldLegSwapType::TAG : return fieldLegSwapType.offset > 0;
     case FieldNoLegStipulations::TAG : return fieldNoLegStipulations.offset > 0;
     case FieldLegPositionEffect::TAG : return fieldLegPositionEffect.offset > 0;
     case FieldLegCoveredOrUncovered::TAG : return fieldLegCoveredOrUncovered.offset > 0;
     case FieldNoNestedPartyIDs::TAG : return fieldNoNestedPartyIDs.offset > 0;
     case FieldLegRefID::TAG : return fieldLegRefID.offset > 0;
     case FieldLegPrice::TAG : return fieldLegPrice.offset > 0;
     case FieldLegSettlType::TAG : return fieldLegSettlType.offset > 0;
     case FieldLegSettlDate::TAG : return fieldLegSettlDate.offset > 0;
     case FieldLegLastPx::TAG : return fieldLegLastPx.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupQuoteEntries::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldSymbol::TAG : return fieldSymbol.offset > 0 ;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset > 0;
     case FieldSecurityID::TAG : return fieldSecurityID.offset > 0;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset > 0;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset > 0;
     case FieldProduct::TAG : return fieldProduct.offset > 0;
     case FieldCFICode::TAG : return fieldCFICode.offset > 0;
     case FieldSecurityType::TAG : return fieldSecurityType.offset > 0;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset > 0;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset > 0;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset > 0;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset > 0;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset > 0;
     case FieldIssueDate::TAG : return fieldIssueDate.offset > 0;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset > 0;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset > 0;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset > 0;
     case FieldFactor::TAG : return fieldFactor.offset > 0;
     case FieldCreditRating::TAG : return fieldCreditRating.offset > 0;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset > 0;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset > 0;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset > 0;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset > 0;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset > 0;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset > 0;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset > 0;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset > 0;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset > 0;
     case FieldCouponRate::TAG : return fieldCouponRate.offset > 0;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset > 0;
     case FieldIssuer::TAG : return fieldIssuer.offset > 0;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset > 0;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset > 0;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset > 0;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset > 0;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset > 0;
     case FieldPool::TAG : return fieldPool.offset > 0;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset > 0;
     case FieldCPProgram::TAG : return fieldCPProgram.offset > 0;
     case FieldCPRegType::TAG : return fieldCPRegType.offset > 0;
     case FieldNoEvents::TAG : return fieldNoEvents.offset > 0;
     case FieldDatedDate::TAG : return fieldDatedDate.offset > 0;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset > 0;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset > 0;
     case FieldAgreementID::TAG : return fieldAgreementID.offset > 0;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset > 0;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset > 0;
     case FieldTerminationType::TAG : return fieldTerminationType.offset > 0;
     case FieldStartDate::TAG : return fieldStartDate.offset > 0;
     case FieldEndDate::TAG : return fieldEndDate.offset > 0;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset > 0;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset > 0;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset > 0;
     case FieldNoLegs::TAG : return fieldNoLegs.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupQuoteSets::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldQuoteSetID::TAG : return fieldQuoteSetID.offset > 0 ;
     case FieldUnderlyingSymbol::TAG : return fieldUnderlyingSymbol.offset > 0;
     case FieldUnderlyingSymbolSfx::TAG : return fieldUnderlyingSymbolSfx.offset > 0;
     case FieldUnderlyingSecurityID::TAG : return fieldUnderlyingSecurityID.offset > 0;
     case FieldUnderlyingSecurityIDSource::TAG : return fieldUnderlyingSecurityIDSource.offset > 0;
     case FieldNoUnderlyingSecurityAltID::TAG : return fieldNoUnderlyingSecurityAltID.offset > 0;
     case FieldUnderlyingProduct::TAG : return fieldUnderlyingProduct.offset > 0;
     case FieldUnderlyingCFICode::TAG : return fieldUnderlyingCFICode.offset > 0;
     case FieldUnderlyingSecurityType::TAG : return fieldUnderlyingSecurityType.offset > 0;
     case FieldUnderlyingSecuritySubType::TAG : return fieldUnderlyingSecuritySubType.offset > 0;
     case FieldUnderlyingMaturityMonthYear::TAG : return fieldUnderlyingMaturityMonthYear.offset > 0;
     case FieldUnderlyingMaturityDate::TAG : return fieldUnderlyingMaturityDate.offset > 0;
     case FieldUnderlyingPutOrCall::TAG : return fieldUnderlyingPutOrCall.offset > 0;
     case FieldUnderlyingCouponPaymentDate::TAG : return fieldUnderlyingCouponPaymentDate.offset > 0;
     case FieldUnderlyingIssueDate::TAG : return fieldUnderlyingIssueDate.offset > 0;
     case FieldUnderlyingRepoCollateralSecurityType::TAG : return fieldUnderlyingRepoCollateralSecurityType.offset > 0;
     case FieldUnderlyingRepurchaseTerm::TAG : return fieldUnderlyingRepurchaseTerm.offset > 0;
     case FieldUnderlyingRepurchaseRate::TAG : return fieldUnderlyingRepurchaseRate.offset > 0;
     case FieldUnderlyingFactor::TAG : return fieldUnderlyingFactor.offset > 0;
     case FieldUnderlyingCreditRating::TAG : return fieldUnderlyingCreditRating.offset > 0;
     case FieldUnderlyingInstrRegistry::TAG : return fieldUnderlyingInstrRegistry.offset > 0;
     case FieldUnderlyingCountryOfIssue::TAG : return fieldUnderlyingCountryOfIssue.offset > 0;
     case FieldUnderlyingStateOrProvinceOfIssue::TAG : return fieldUnderlyingStateOrProvinceOfIssue.offset > 0;
     case FieldUnderlyingLocaleOfIssue::TAG : return fieldUnderlyingLocaleOfIssue.offset > 0;
     case FieldUnderlyingRedemptionDate::TAG : return fieldUnderlyingRedemptionDate.offset > 0;
     case FieldUnderlyingStrikePrice::TAG : return fieldUnderlyingStrikePrice.offset > 0;
     case FieldUnderlyingStrikeCurrency::TAG : return fieldUnderlyingStrikeCurrency.offset > 0;
     case FieldUnderlyingOptAttribute::TAG : return fieldUnderlyingOptAttribute.offset > 0;
     case FieldUnderlyingContractMultiplier::TAG : return fieldUnderlyingContractMultiplier.offset > 0;
     case FieldUnderlyingCouponRate::TAG : return fieldUnderlyingCouponRate.offset > 0;
     case FieldUnderlyingSecurityExchange::TAG : return fieldUnderlyingSecurityExchange.offset > 0;
     case FieldUnderlyingIssuer::TAG : return fieldUnderlyingIssuer.offset > 0;
     case FieldEncodedUnderlyingIssuerLen::TAG : return fieldEncodedUnderlyingIssuerLen.offset > 0;
     case FieldEncodedUnderlyingIssuer::TAG : return fieldEncodedUnderlyingIssuer.offset > 0;
     case FieldUnderlyingSecurityDesc::TAG : return fieldUnderlyingSecurityDesc.offset > 0;
     case FieldEncodedUnderlyingSecurityDescLen::TAG : return fieldEncodedUnderlyingSecurityDescLen.offset > 0;
     case FieldEncodedUnderlyingSecurityDesc::TAG : return fieldEncodedUnderlyingSecurityDesc.offset > 0;
     case FieldUnderlyingCPProgram::TAG : return fieldUnderlyingCPProgram.offset > 0;
     case FieldUnderlyingCPRegType::TAG : return fieldUnderlyingCPRegType.offset > 0;
     case FieldUnderlyingCurrency::TAG : return fieldUnderlyingCurrency.offset > 0;
     case FieldUnderlyingQty::TAG : return fieldUnderlyingQty.offset > 0;
     case FieldUnderlyingPx::TAG : return fieldUnderlyingPx.offset > 0;
     case FieldUnderlyingDirtyPrice::TAG : return fieldUnderlyingDirtyPrice.offset > 0;
     case FieldUnderlyingEndPrice::TAG : return fieldUnderlyingEndPrice.offset > 0;
     case FieldUnderlyingStartValue::TAG : return fieldUnderlyingStartValue.offset > 0;
     case FieldUnderlyingCurrentValue::TAG : return fieldUnderlyingCurrentValue.offset > 0;
     case FieldUnderlyingEndValue::TAG : return fieldUnderlyingEndValue.offset > 0;
     case FieldNoUnderlyingStips::TAG : return fieldNoUnderlyingStips.offset > 0;
     case FieldTotNoQuoteEntries::TAG : return fieldTotNoQuoteEntries.offset > 0;
     case FieldLastFragment::TAG : return fieldLastFragment.offset > 0;
     case FieldNoQuoteEntries::TAG : return fieldNoQuoteEntries.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupSecurityTypes::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldSecurityType::TAG : return fieldSecurityType.offset > 0 ;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset > 0;
     case FieldProduct::TAG : return fieldProduct.offset > 0;
     case FieldCFICode::TAG : return fieldCFICode.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupNested3PartyIDs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldNested3PartyID::TAG : return fieldNested3PartyID.offset > 0 ;
     case FieldNested3PartyIDSource::TAG : return fieldNested3PartyIDSource.offset > 0;
     case FieldNested3PartyRole::TAG : return fieldNested3PartyRole.offset > 0;
     case FieldNoNested3PartySubIDs::TAG : return fieldNoNested3PartySubIDs.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupPositions::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldPosType::TAG : return fieldPosType.offset > 0 ;
     case FieldLongQty::TAG : return fieldLongQty.offset > 0;
     case FieldShortQty::TAG : return fieldShortQty.offset > 0;
     case FieldPosQtyStatus::TAG : return fieldPosQtyStatus.offset > 0;
     case FieldNoNestedPartyIDs::TAG : return fieldNoNestedPartyIDs.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupAffectedOrders::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldOrigClOrdID::TAG : return fieldOrigClOrdID.offset > 0 ;
     case FieldAffectedOrderID::TAG : return fieldAffectedOrderID.offset > 0;
     case FieldAffectedSecondaryOrderID::TAG : return fieldAffectedSecondaryOrderID.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupExecs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldLastQty::TAG : return fieldLastQty.offset > 0 ;
     case FieldExecID::TAG : return fieldExecID.offset > 0;
     case FieldSecondaryExecID::TAG : return fieldSecondaryExecID.offset > 0;
     case FieldLastPx::TAG : return fieldLastPx.offset > 0;
     case FieldLastParPx::TAG : return fieldLastParPx.offset > 0;
     case FieldLastCapacity::TAG : return fieldLastCapacity.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupMsgTypes::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldRefMsgType::TAG : return fieldRefMsgType.offset > 0 ;
     case FieldMsgDirection::TAG : return fieldMsgDirection.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupBidComponents::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldListID::TAG : return fieldListID.offset > 0 ;
     case FieldSide::TAG : return fieldSide.offset > 0;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset > 0;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset > 0;
     case FieldNetGrossInd::TAG : return fieldNetGrossInd.offset > 0;
     case FieldSettlType::TAG : return fieldSettlType.offset > 0;
     case FieldSettlDate::TAG : return fieldSettlDate.offset > 0;
     case FieldAccount::TAG : return fieldAccount.offset > 0;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupSettlInst::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldSettlInstID::TAG : return fieldSettlInstID.offset > 0 ;
     case FieldSettlInstTransType::TAG : return fieldSettlInstTransType.offset > 0;
     case FieldSettlInstRefID::TAG : return fieldSettlInstRefID.offset > 0;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset > 0;
     case FieldSide::TAG : return fieldSide.offset > 0;
     case FieldProduct::TAG : return fieldProduct.offset > 0;
     case FieldSecurityType::TAG : return fieldSecurityType.offset > 0;
     case FieldCFICode::TAG : return fieldCFICode.offset > 0;
     case FieldEffectiveTime::TAG : return fieldEffectiveTime.offset > 0;
     case FieldExpireTime::TAG : return fieldExpireTime.offset > 0;
     case FieldLastUpdateTime::TAG : return fieldLastUpdateTime.offset > 0;
     case FieldSettlDeliveryType::TAG : return fieldSettlDeliveryType.offset > 0;
     case FieldStandInstDbType::TAG : return fieldStandInstDbType.offset > 0;
     case FieldStandInstDbName::TAG : return fieldStandInstDbName.offset > 0;
     case FieldStandInstDbID::TAG : return fieldStandInstDbID.offset > 0;
     case FieldNoDlvyInst::TAG : return fieldNoDlvyInst.offset > 0;
     case FieldPaymentMethod::TAG : return fieldPaymentMethod.offset > 0;
     case FieldPaymentRef::TAG : return fieldPaymentRef.offset > 0;
     case FieldCardHolderName::TAG : return fieldCardHolderName.offset > 0;
     case FieldCardNumber::TAG : return fieldCardNumber.offset > 0;
     case FieldCardStartDate::TAG : return fieldCardStartDate.offset > 0;
     case FieldCardExpDate::TAG : return fieldCardExpDate.offset > 0;
     case FieldCardIssNum::TAG : return fieldCardIssNum.offset > 0;
     case FieldPaymentDate::TAG : return fieldPaymentDate.offset > 0;
     case FieldPaymentRemitterID::TAG : return fieldPaymentRemitterID.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupInstrAttrib::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldInstrAttribType::TAG : return fieldInstrAttribType.offset > 0 ;
     case FieldInstrAttribValue::TAG : return fieldInstrAttribValue.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupMiscFees::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldMiscFeeAmt::TAG : return fieldMiscFeeAmt.offset > 0 ;
     case FieldMiscFeeCurr::TAG : return fieldMiscFeeCurr.offset > 0;
     case FieldMiscFeeType::TAG : return fieldMiscFeeType.offset > 0;
     case FieldMiscFeeBasis::TAG : return fieldMiscFeeBasis.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupQuoteQualifiers::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldQuoteQualifier::TAG : return fieldQuoteQualifier.offset > 0 ;

     default : return false; 
   }
   return false;
}

bool GroupDistribInsts::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldDistribPaymentMethod::TAG : return fieldDistribPaymentMethod.offset > 0 ;
     case FieldDistribPercentage::TAG : return fieldDistribPercentage.offset > 0;
     case FieldCashDistribCurr::TAG : return fieldCashDistribCurr.offset > 0;
     case FieldCashDistribAgentName::TAG : return fieldCashDistribAgentName.offset > 0;
     case FieldCashDistribAgentCode::TAG : return fieldCashDistribAgentCode.offset > 0;
     case FieldCashDistribAgentAcctNumber::TAG : return fieldCashDistribAgentAcctNumber.offset > 0;
     case FieldCashDistribPayRef::TAG : return fieldCashDistribPayRef.offset > 0;
     case FieldCashDistribAgentAcctName::TAG : return fieldCashDistribAgentAcctName.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupTrdRegTimestamps::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldTrdRegTimestamp::TAG : return fieldTrdRegTimestamp.offset > 0 ;
     case FieldTrdRegTimestampType::TAG : return fieldTrdRegTimestampType.offset > 0;
     case FieldTrdRegTimestampOrigin::TAG : return fieldTrdRegTimestampOrigin.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupAltMDSource::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldAltMDSourceID::TAG : return fieldAltMDSourceID.offset > 0 ;

     default : return false; 
   }
   return false;
}

bool GroupSides::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldSide::TAG : return fieldSide.offset > 0 ;
     case FieldOrigClOrdID::TAG : return fieldOrigClOrdID.offset > 0;
     case FieldClOrdID::TAG : return fieldClOrdID.offset > 0;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset > 0;
     case FieldClOrdLinkID::TAG : return fieldClOrdLinkID.offset > 0;
     case FieldOrigOrdModTime::TAG : return fieldOrigOrdModTime.offset > 0;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset > 0;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset > 0;
     case FieldTradeDate::TAG : return fieldTradeDate.offset > 0;
     case FieldOrderQty::TAG : return fieldOrderQty.offset > 0;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset > 0;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset > 0;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset > 0;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset > 0;
     case FieldComplianceID::TAG : return fieldComplianceID.offset > 0;
     case FieldText::TAG : return fieldText.offset > 0;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset > 0;
     case FieldEncodedText::TAG : return fieldEncodedText.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupRoutingIDs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldRoutingType::TAG : return fieldRoutingType.offset > 0 ;
     case FieldRoutingID::TAG : return fieldRoutingID.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupPosAmt::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldPosAmtType::TAG : return fieldPosAmtType.offset > 0 ;
     case FieldPosAmt::TAG : return fieldPosAmt.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupLinesOfText::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldText::TAG : return fieldText.offset > 0 ;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset > 0;
     case FieldEncodedText::TAG : return fieldEncodedText.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupIOIQualifiers::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldIOIQualifier::TAG : return fieldIOIQualifier.offset > 0 ;

     default : return false; 
   }
   return false;
}

bool GroupDates::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldTradeDate::TAG : return fieldTradeDate.offset > 0 ;
     case FieldTransactTime::TAG : return fieldTransactTime.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupMDEntryTypes::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldMDEntryType::TAG : return fieldMDEntryType.offset > 0 ;

     default : return false; 
   }
   return false;
}

bool GroupRelatedSym::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldSymbol::TAG : return fieldSymbol.offset > 0 ;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset > 0;
     case FieldSecurityID::TAG : return fieldSecurityID.offset > 0;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset > 0;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset > 0;
     case FieldProduct::TAG : return fieldProduct.offset > 0;
     case FieldCFICode::TAG : return fieldCFICode.offset > 0;
     case FieldSecurityType::TAG : return fieldSecurityType.offset > 0;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset > 0;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset > 0;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset > 0;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset > 0;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset > 0;
     case FieldIssueDate::TAG : return fieldIssueDate.offset > 0;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset > 0;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset > 0;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset > 0;
     case FieldFactor::TAG : return fieldFactor.offset > 0;
     case FieldCreditRating::TAG : return fieldCreditRating.offset > 0;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset > 0;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset > 0;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset > 0;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset > 0;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset > 0;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset > 0;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset > 0;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset > 0;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset > 0;
     case FieldCouponRate::TAG : return fieldCouponRate.offset > 0;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset > 0;
     case FieldIssuer::TAG : return fieldIssuer.offset > 0;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset > 0;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset > 0;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset > 0;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset > 0;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset > 0;
     case FieldPool::TAG : return fieldPool.offset > 0;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset > 0;
     case FieldCPProgram::TAG : return fieldCPProgram.offset > 0;
     case FieldCPRegType::TAG : return fieldCPRegType.offset > 0;
     case FieldNoEvents::TAG : return fieldNoEvents.offset > 0;
     case FieldDatedDate::TAG : return fieldDatedDate.offset > 0;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupContraBrokers::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldContraBroker::TAG : return fieldContraBroker.offset > 0 ;
     case FieldContraTrader::TAG : return fieldContraTrader.offset > 0;
     case FieldContraTradeQty::TAG : return fieldContraTradeQty.offset > 0;
     case FieldContraTradeTime::TAG : return fieldContraTradeTime.offset > 0;
     case FieldContraLegRefID::TAG : return fieldContraLegRefID.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupTrades::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldTradeReportID::TAG : return fieldTradeReportID.offset > 0 ;
     case FieldSecondaryTradeReportID::TAG : return fieldSecondaryTradeReportID.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupStrikes::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldSymbol::TAG : return fieldSymbol.offset > 0 ;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset > 0;
     case FieldSecurityID::TAG : return fieldSecurityID.offset > 0;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset > 0;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset > 0;
     case FieldProduct::TAG : return fieldProduct.offset > 0;
     case FieldCFICode::TAG : return fieldCFICode.offset > 0;
     case FieldSecurityType::TAG : return fieldSecurityType.offset > 0;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset > 0;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset > 0;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset > 0;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset > 0;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset > 0;
     case FieldIssueDate::TAG : return fieldIssueDate.offset > 0;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset > 0;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset > 0;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset > 0;
     case FieldFactor::TAG : return fieldFactor.offset > 0;
     case FieldCreditRating::TAG : return fieldCreditRating.offset > 0;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset > 0;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset > 0;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset > 0;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset > 0;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset > 0;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset > 0;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset > 0;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset > 0;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset > 0;
     case FieldCouponRate::TAG : return fieldCouponRate.offset > 0;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset > 0;
     case FieldIssuer::TAG : return fieldIssuer.offset > 0;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset > 0;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset > 0;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset > 0;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset > 0;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset > 0;
     case FieldPool::TAG : return fieldPool.offset > 0;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset > 0;
     case FieldCPProgram::TAG : return fieldCPProgram.offset > 0;
     case FieldCPRegType::TAG : return fieldCPRegType.offset > 0;
     case FieldNoEvents::TAG : return fieldNoEvents.offset > 0;
     case FieldDatedDate::TAG : return fieldDatedDate.offset > 0;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupBidDescriptors::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldBidDescriptorType::TAG : return fieldBidDescriptorType.offset > 0 ;
     case FieldBidDescriptor::TAG : return fieldBidDescriptor.offset > 0;
     case FieldSideValueInd::TAG : return fieldSideValueInd.offset > 0;
     case FieldLiquidityValue::TAG : return fieldLiquidityValue.offset > 0;
     case FieldLiquidityNumSecurities::TAG : return fieldLiquidityNumSecurities.offset > 0;
     case FieldLiquidityPctLow::TAG : return fieldLiquidityPctLow.offset > 0;
     case FieldLiquidityPctHigh::TAG : return fieldLiquidityPctHigh.offset > 0;
     case FieldEFPTrackingError::TAG : return fieldEFPTrackingError.offset > 0;
     case FieldFairValue::TAG : return fieldFairValue.offset > 0;
     case FieldOutsideIndexPct::TAG : return fieldOutsideIndexPct.offset > 0;
     case FieldValueOfFutures::TAG : return fieldValueOfFutures.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupCompIDs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldRefCompID::TAG : return fieldRefCompID.offset > 0 ;
     case FieldRefSubID::TAG : return fieldRefSubID.offset > 0;
     case FieldLocationID::TAG : return fieldLocationID.offset > 0;
     case FieldDeskID::TAG : return fieldDeskID.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupLegAllocs::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldLegAllocAccount::TAG : return fieldLegAllocAccount.offset > 0 ;
     case FieldLegIndividualAllocID::TAG : return fieldLegIndividualAllocID.offset > 0;
     case FieldNoNested2PartyIDs::TAG : return fieldNoNested2PartyIDs.offset > 0;
     case FieldLegAllocQty::TAG : return fieldLegAllocQty.offset > 0;
     case FieldLegAllocAcctIDSource::TAG : return fieldLegAllocAcctIDSource.offset > 0;
     case FieldLegSettlCurrency::TAG : return fieldLegSettlCurrency.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupRegistDtls::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldRegistDtls::TAG : return fieldRegistDtls.offset > 0 ;
     case FieldRegistEmail::TAG : return fieldRegistEmail.offset > 0;
     case FieldMailingDtls::TAG : return fieldMailingDtls.offset > 0;
     case FieldMailingInst::TAG : return fieldMailingInst.offset > 0;
     case FieldNoNestedPartyIDs::TAG : return fieldNoNestedPartyIDs.offset > 0;
     case FieldOwnerType::TAG : return fieldOwnerType.offset > 0;
     case FieldDateOfBirth::TAG : return fieldDateOfBirth.offset > 0;
     case FieldInvestorCountryOfResidence::TAG : return fieldInvestorCountryOfResidence.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupContAmts::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldContAmtType::TAG : return fieldContAmtType.offset > 0 ;
     case FieldContAmtValue::TAG : return fieldContAmtValue.offset > 0;
     case FieldContAmtCurr::TAG : return fieldContAmtCurr.offset > 0;

     default : return false; 
   }
   return false;
}

bool GroupMDEntries::isFieldSet( unsigned tag ) const {
   if( _fixPtr == nullptr ) return false;
   switch( tag ){
     case FieldMDEntryType::TAG : return fieldMDEntryType.offset > 0 ;
     case FieldMDEntryPx::TAG : return fieldMDEntryPx.offset > 0;
     case FieldCurrency::TAG : return fieldCurrency.offset > 0;
     case FieldMDEntrySize::TAG : return fieldMDEntrySize.offset > 0;
     case FieldMDEntryDate::TAG : return fieldMDEntryDate.offset > 0;
     case FieldMDEntryTime::TAG : return fieldMDEntryTime.offset > 0;
     case FieldTickDirection::TAG : return fieldTickDirection.offset > 0;
     case FieldMDMkt::TAG : return fieldMDMkt.offset > 0;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset > 0;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset > 0;
     case FieldQuoteCondition::TAG : return fieldQuoteCondition.offset > 0;
     case FieldTradeCondition::TAG : return fieldTradeCondition.offset > 0;
     case FieldMDEntryOriginator::TAG : return fieldMDEntryOriginator.offset > 0;
     case FieldLocationID::TAG : return fieldLocationID.offset > 0;
     case FieldDeskID::TAG : return fieldDeskID.offset > 0;
     case FieldOpenCloseSettlFlag::TAG : return fieldOpenCloseSettlFlag.offset > 0;
     case FieldTimeInForce::TAG : return fieldTimeInForce.offset > 0;
     case FieldExpireDate::TAG : return fieldExpireDate.offset > 0;
     case FieldExpireTime::TAG : return fieldExpireTime.offset > 0;
     case FieldMinQty::TAG : return fieldMinQty.offset > 0;
     case FieldExecInst::TAG : return fieldExecInst.offset > 0;
     case FieldSellerDays::TAG : return fieldSellerDays.offset > 0;
     case FieldOrderID::TAG : return fieldOrderID.offset > 0;
     case FieldQuoteEntryID::TAG : return fieldQuoteEntryID.offset > 0;
     case FieldMDEntryBuyer::TAG : return fieldMDEntryBuyer.offset > 0;
     case FieldMDEntrySeller::TAG : return fieldMDEntrySeller.offset > 0;
     case FieldNumberOfOrders::TAG : return fieldNumberOfOrders.offset > 0;
     case FieldMDEntryPositionNo::TAG : return fieldMDEntryPositionNo.offset > 0;
     case FieldScope::TAG : return fieldScope.offset > 0;
     case FieldPriceDelta::TAG : return fieldPriceDelta.offset > 0;
     case FieldText::TAG : return fieldText.offset > 0;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset > 0;
     case FieldEncodedText::TAG : return fieldEncodedText.offset > 0;

     default : return false; 
   }
   return false;
}

// ---------------------------------- getKnownFields ---------------------------------
namespace {

const std::vector<unsigned> LegStipulations_knownFields = { FieldLegStipulationType::TAG
, FieldLegStipulationValue::TAG
};

const std::vector<unsigned> Events_knownFields = { FieldEventType::TAG
, FieldEventDate::TAG
, FieldEventPx::TAG
, FieldEventText::TAG
};

const std::vector<unsigned> LegSecurityAltID_knownFields = { FieldLegSecurityAltID::TAG
, FieldLegSecurityAltIDSource::TAG
};

const std::vector<unsigned> Capacities_knownFields = { FieldOrderCapacity::TAG
, FieldOrderRestrictions::TAG
, FieldOrderCapacityQty::TAG
};

const std::vector<unsigned> Nested3PartySubIDs_knownFields = { FieldNested3PartySubID::TAG
, FieldNested3PartySubIDType::TAG
};

const std::vector<unsigned> PartySubIDs_knownFields = { FieldPartySubID::TAG
, FieldPartySubIDType::TAG
};

const std::vector<unsigned> Nested2PartySubIDs_knownFields = { FieldNested2PartySubID::TAG
, FieldNested2PartySubIDType::TAG
};

const std::vector<unsigned> Nested2PartyIDs_knownFields = { FieldNested2PartyID::TAG
, FieldNested2PartyIDSource::TAG
, FieldNested2PartyRole::TAG
, FieldNoNested2PartySubIDs::TAG
};

const std::vector<unsigned> Hops_knownFields = { FieldHopCompID::TAG
, FieldHopSendingTime::TAG
, FieldHopRefID::TAG
};

const std::vector<unsigned> CollInquiryQualifier_knownFields = { FieldCollInquiryQualifier::TAG
};

const std::vector<unsigned> PartyIDs_knownFields = { FieldPartyID::TAG
, FieldPartyIDSource::TAG
, FieldPartyRole::TAG
, FieldNoPartySubIDs::TAG
};

const std::vector<unsigned> Allocs_knownFields = { FieldAllocAccount::TAG
, FieldAllocAcctIDSource::TAG
, FieldAllocPrice::TAG
, FieldIndividualAllocID::TAG
, FieldIndividualAllocRejCode::TAG
, FieldAllocText::TAG
, FieldEncodedAllocTextLen::TAG
, FieldEncodedAllocText::TAG
};

const std::vector<unsigned> TradingSessions_knownFields = { FieldTradingSessionID::TAG
, FieldTradingSessionSubID::TAG
};

const std::vector<unsigned> SecurityAltID_knownFields = { FieldSecurityAltID::TAG
, FieldSecurityAltIDSource::TAG
};

const std::vector<unsigned> UnderlyingSecurityAltID_knownFields = { FieldUnderlyingSecurityAltID::TAG
, FieldUnderlyingSecurityAltIDSource::TAG
};

const std::vector<unsigned> UnderlyingStips_knownFields = { FieldUnderlyingStipType::TAG
, FieldUnderlyingStipValue::TAG
};

const std::vector<unsigned> Underlyings_knownFields = { FieldUnderlyingSymbol::TAG
, FieldUnderlyingSymbolSfx::TAG
, FieldUnderlyingSecurityID::TAG
, FieldUnderlyingSecurityIDSource::TAG
, FieldNoUnderlyingSecurityAltID::TAG
, FieldUnderlyingProduct::TAG
, FieldUnderlyingCFICode::TAG
, FieldUnderlyingSecurityType::TAG
, FieldUnderlyingSecuritySubType::TAG
, FieldUnderlyingMaturityMonthYear::TAG
, FieldUnderlyingMaturityDate::TAG
, FieldUnderlyingPutOrCall::TAG
, FieldUnderlyingCouponPaymentDate::TAG
, FieldUnderlyingIssueDate::TAG
, FieldUnderlyingRepoCollateralSecurityType::TAG
, FieldUnderlyingRepurchaseTerm::TAG
, FieldUnderlyingRepurchaseRate::TAG
, FieldUnderlyingFactor::TAG
, FieldUnderlyingCreditRating::TAG
, FieldUnderlyingInstrRegistry::TAG
, FieldUnderlyingCountryOfIssue::TAG
, FieldUnderlyingStateOrProvinceOfIssue::TAG
, FieldUnderlyingLocaleOfIssue::TAG
, FieldUnderlyingRedemptionDate::TAG
, FieldUnderlyingStrikePrice::TAG
, FieldUnderlyingStrikeCurrency::TAG
, FieldUnderlyingOptAttribute::TAG
, FieldUnderlyingContractMultiplier::TAG
, FieldUnderlyingCouponRate::TAG
, FieldUnderlyingSecurityExchange::TAG
, FieldUnderlyingIssuer::TAG
, FieldEncodedUnderlyingIssuerLen::TAG
, FieldEncodedUnderlyingIssuer::TAG
, FieldUnderlyingSecurityDesc::TAG
, FieldEncodedUnderlyingSecurityDescLen::TAG
, FieldEncodedUnderlyingSecurityDesc::TAG
, FieldUnderlyingCPProgram::TAG
, FieldUnderlyingCPRegType::TAG
, FieldUnderlyingCurrency::TAG
, FieldUnderlyingQty::TAG
, FieldUnderlyingPx::TAG
, FieldUnderlyingDirtyPrice::TAG
, FieldUnderlyingEndPrice::TAG
, FieldUnderlyingStartValue::TAG
, FieldUnderlyingCurrentValue::TAG
, FieldUnderlyingEndValue::TAG
, FieldNoUnderlyingStips::TAG
, FieldUnderlyingSettlPrice::TAG
, FieldUnderlyingSettlPriceType::TAG
};

const std::vector<unsigned> Stipulations_knownFields = { FieldStipulationType::TAG
, FieldStipulationValue::TAG
};

const std::vector<unsigned> Orders_knownFields = { FieldClOrdID::TAG
, FieldSecondaryClOrdID::TAG
, FieldListSeqNo::TAG
, FieldClOrdLinkID::TAG
, FieldSettlInstMode::TAG
, FieldNoPartyIDs::TAG
, FieldTradeOriginationDate::TAG
, FieldTradeDate::TAG
, FieldAccount::TAG
, FieldAcctIDSource::TAG
, FieldAccountType::TAG
, FieldDayBookingInst::TAG
, FieldBookingUnit::TAG
, FieldAllocID::TAG
, FieldPreallocMethod::TAG
, FieldNoAllocs::TAG
, FieldSettlType::TAG
, FieldSettlDate::TAG
, FieldCashMargin::TAG
, FieldClearingFeeIndicator::TAG
, FieldHandlInst::TAG
, FieldExecInst::TAG
, FieldMinQty::TAG
, FieldMaxFloor::TAG
, FieldExDestination::TAG
, FieldNoTradingSessions::TAG
, FieldProcessCode::TAG
, FieldSymbol::TAG
, FieldSymbolSfx::TAG
, FieldSecurityID::TAG
, FieldSecurityIDSource::TAG
, FieldNoSecurityAltID::TAG
, FieldProduct::TAG
, FieldCFICode::TAG
, FieldSecurityType::TAG
, FieldSecuritySubType::TAG
, FieldMaturityMonthYear::TAG
, FieldMaturityDate::TAG
, FieldPutOrCall::TAG
, FieldCouponPaymentDate::TAG
, FieldIssueDate::TAG
, FieldRepoCollateralSecurityType::TAG
, FieldRepurchaseTerm::TAG
, FieldRepurchaseRate::TAG
, FieldFactor::TAG
, FieldCreditRating::TAG
, FieldInstrRegistry::TAG
, FieldCountryOfIssue::TAG
, FieldStateOrProvinceOfIssue::TAG
, FieldLocaleOfIssue::TAG
, FieldRedemptionDate::TAG
, FieldStrikePrice::TAG
, FieldStrikeCurrency::TAG
, FieldOptAttribute::TAG
, FieldContractMultiplier::TAG
, FieldCouponRate::TAG
, FieldSecurityExchange::TAG
, FieldIssuer::TAG
, FieldEncodedIssuerLen::TAG
, FieldEncodedIssuer::TAG
, FieldSecurityDesc::TAG
, FieldEncodedSecurityDescLen::TAG
, FieldEncodedSecurityDesc::TAG
, FieldPool::TAG
, FieldContractSettlMonth::TAG
, FieldCPProgram::TAG
, FieldCPRegType::TAG
, FieldNoEvents::TAG
, FieldDatedDate::TAG
, FieldInterestAccrualDate::TAG
, FieldNoUnderlyings::TAG
, FieldPrevClosePx::TAG
, FieldSide::TAG
, FieldSideValueInd::TAG
, FieldLocateReqd::TAG
, FieldTransactTime::TAG
, FieldNoStipulations::TAG
, FieldQtyType::TAG
, FieldOrderQty::TAG
, FieldCashOrderQty::TAG
, FieldOrderPercent::TAG
, FieldRoundingDirection::TAG
, FieldRoundingModulus::TAG
, FieldOrdType::TAG
, FieldPriceType::TAG
, FieldPrice::TAG
, FieldStopPx::TAG
, FieldSpread::TAG
, FieldBenchmarkCurveCurrency::TAG
, FieldBenchmarkCurveName::TAG
, FieldBenchmarkCurvePoint::TAG
, FieldBenchmarkPrice::TAG
, FieldBenchmarkPriceType::TAG
, FieldBenchmarkSecurityID::TAG
, FieldBenchmarkSecurityIDSource::TAG
, FieldYieldType::TAG
, FieldYield::TAG
, FieldYieldCalcDate::TAG
, FieldYieldRedemptionDate::TAG
, FieldYieldRedemptionPrice::TAG
, FieldYieldRedemptionPriceType::TAG
, FieldCurrency::TAG
, FieldComplianceID::TAG
, FieldSolicitedFlag::TAG
, FieldIOIID::TAG
, FieldQuoteID::TAG
, FieldTimeInForce::TAG
, FieldEffectiveTime::TAG
, FieldExpireDate::TAG
, FieldExpireTime::TAG
, FieldGTBookingInst::TAG
, FieldCommission::TAG
, FieldCommType::TAG
, FieldCommCurrency::TAG
, FieldFundRenewWaiv::TAG
, FieldOrderCapacity::TAG
, FieldOrderRestrictions::TAG
, FieldCustOrderCapacity::TAG
, FieldForexReq::TAG
, FieldSettlCurrency::TAG
, FieldBookingType::TAG
, FieldText::TAG
, FieldEncodedTextLen::TAG
, FieldEncodedText::TAG
, FieldSettlDate2::TAG
, FieldOrderQty2::TAG
, FieldPrice2::TAG
, FieldPositionEffect::TAG
, FieldCoveredOrUncovered::TAG
, FieldMaxShow::TAG
, FieldPegOffsetValue::TAG
, FieldPegMoveType::TAG
, FieldPegOffsetType::TAG
, FieldPegLimitType::TAG
, FieldPegRoundDirection::TAG
, FieldPegScope::TAG
, FieldDiscretionInst::TAG
, FieldDiscretionOffsetValue::TAG
, FieldDiscretionMoveType::TAG
, FieldDiscretionOffsetType::TAG
, FieldDiscretionLimitType::TAG
, FieldDiscretionRoundDirection::TAG
, FieldDiscretionScope::TAG
, FieldTargetStrategy::TAG
, FieldTargetStrategyParameters::TAG
, FieldParticipationRate::TAG
, FieldDesignation::TAG
};

const std::vector<unsigned> SettlPartySubIDs_knownFields = { FieldSettlPartySubID::TAG
, FieldSettlPartySubIDType::TAG
};

const std::vector<unsigned> SettlPartyIDs_knownFields = { FieldSettlPartyID::TAG
, FieldSettlPartyIDSource::TAG
, FieldSettlPartyRole::TAG
, FieldNoSettlPartySubIDs::TAG
};

const std::vector<unsigned> DlvyInst_knownFields = { FieldSettlInstSource::TAG
, FieldDlvyInstType::TAG
, FieldNoSettlPartyIDs::TAG
};

const std::vector<unsigned> ClearingInstructions_knownFields = { FieldClearingInstruction::TAG
};

const std::vector<unsigned> NestedPartySubIDs_knownFields = { FieldNestedPartySubID::TAG
, FieldNestedPartySubIDType::TAG
};

const std::vector<unsigned> NestedPartyIDs_knownFields = { FieldNestedPartyID::TAG
, FieldNestedPartyIDSource::TAG
, FieldNestedPartyRole::TAG
, FieldNoNestedPartySubIDs::TAG
};

const std::vector<unsigned> Legs_knownFields = { FieldLegSymbol::TAG
, FieldLegSymbolSfx::TAG
, FieldLegSecurityID::TAG
, FieldLegSecurityIDSource::TAG
, FieldNoLegSecurityAltID::TAG
, FieldLegProduct::TAG
, FieldLegCFICode::TAG
, FieldLegSecurityType::TAG
, FieldLegSecuritySubType::TAG
, FieldLegMaturityMonthYear::TAG
, FieldLegMaturityDate::TAG
, FieldLegCouponPaymentDate::TAG
, FieldLegIssueDate::TAG
, FieldLegRepoCollateralSecurityType::TAG
, FieldLegRepurchaseTerm::TAG
, FieldLegRepurchaseRate::TAG
, FieldLegFactor::TAG
, FieldLegCreditRating::TAG
, FieldLegInstrRegistry::TAG
, FieldLegCountryOfIssue::TAG
, FieldLegStateOrProvinceOfIssue::TAG
, FieldLegLocaleOfIssue::TAG
, FieldLegRedemptionDate::TAG
, FieldLegStrikePrice::TAG
, FieldLegStrikeCurrency::TAG
, FieldLegOptAttribute::TAG
, FieldLegContractMultiplier::TAG
, FieldLegCouponRate::TAG
, FieldLegSecurityExchange::TAG
, FieldLegIssuer::TAG
, FieldEncodedLegIssuerLen::TAG
, FieldEncodedLegIssuer::TAG
, FieldLegSecurityDesc::TAG
, FieldEncodedLegSecurityDescLen::TAG
, FieldEncodedLegSecurityDesc::TAG
, FieldLegRatioQty::TAG
, FieldLegSide::TAG
, FieldLegCurrency::TAG
, FieldLegPool::TAG
, FieldLegDatedDate::TAG
, FieldLegContractSettlMonth::TAG
, FieldLegInterestAccrualDate::TAG
, FieldLegQty::TAG
, FieldLegSwapType::TAG
, FieldNoLegStipulations::TAG
, FieldLegPositionEffect::TAG
, FieldLegCoveredOrUncovered::TAG
, FieldNoNestedPartyIDs::TAG
, FieldLegRefID::TAG
, FieldLegPrice::TAG
, FieldLegSettlType::TAG
, FieldLegSettlDate::TAG
, FieldLegLastPx::TAG
};

const std::vector<unsigned> QuoteEntries_knownFields = { FieldSymbol::TAG
, FieldSymbolSfx::TAG
, FieldSecurityID::TAG
, FieldSecurityIDSource::TAG
, FieldNoSecurityAltID::TAG
, FieldProduct::TAG
, FieldCFICode::TAG
, FieldSecurityType::TAG
, FieldSecuritySubType::TAG
, FieldMaturityMonthYear::TAG
, FieldMaturityDate::TAG
, FieldPutOrCall::TAG
, FieldCouponPaymentDate::TAG
, FieldIssueDate::TAG
, FieldRepoCollateralSecurityType::TAG
, FieldRepurchaseTerm::TAG
, FieldRepurchaseRate::TAG
, FieldFactor::TAG
, FieldCreditRating::TAG
, FieldInstrRegistry::TAG
, FieldCountryOfIssue::TAG
, FieldStateOrProvinceOfIssue::TAG
, FieldLocaleOfIssue::TAG
, FieldRedemptionDate::TAG
, FieldStrikePrice::TAG
, FieldStrikeCurrency::TAG
, FieldOptAttribute::TAG
, FieldContractMultiplier::TAG
, FieldCouponRate::TAG
, FieldSecurityExchange::TAG
, FieldIssuer::TAG
, FieldEncodedIssuerLen::TAG
, FieldEncodedIssuer::TAG
, FieldSecurityDesc::TAG
, FieldEncodedSecurityDescLen::TAG
, FieldEncodedSecurityDesc::TAG
, FieldPool::TAG
, FieldContractSettlMonth::TAG
, FieldCPProgram::TAG
, FieldCPRegType::TAG
, FieldNoEvents::TAG
, FieldDatedDate::TAG
, FieldInterestAccrualDate::TAG
, FieldAgreementDesc::TAG
, FieldAgreementID::TAG
, FieldAgreementDate::TAG
, FieldAgreementCurrency::TAG
, FieldTerminationType::TAG
, FieldStartDate::TAG
, FieldEndDate::TAG
, FieldDeliveryType::TAG
, FieldMarginRatio::TAG
, FieldNoUnderlyings::TAG
, FieldNoLegs::TAG
};

const std::vector<unsigned> QuoteSets_knownFields = { FieldQuoteSetID::TAG
, FieldUnderlyingSymbol::TAG
, FieldUnderlyingSymbolSfx::TAG
, FieldUnderlyingSecurityID::TAG
, FieldUnderlyingSecurityIDSource::TAG
, FieldNoUnderlyingSecurityAltID::TAG
, FieldUnderlyingProduct::TAG
, FieldUnderlyingCFICode::TAG
, FieldUnderlyingSecurityType::TAG
, FieldUnderlyingSecuritySubType::TAG
, FieldUnderlyingMaturityMonthYear::TAG
, FieldUnderlyingMaturityDate::TAG
, FieldUnderlyingPutOrCall::TAG
, FieldUnderlyingCouponPaymentDate::TAG
, FieldUnderlyingIssueDate::TAG
, FieldUnderlyingRepoCollateralSecurityType::TAG
, FieldUnderlyingRepurchaseTerm::TAG
, FieldUnderlyingRepurchaseRate::TAG
, FieldUnderlyingFactor::TAG
, FieldUnderlyingCreditRating::TAG
, FieldUnderlyingInstrRegistry::TAG
, FieldUnderlyingCountryOfIssue::TAG
, FieldUnderlyingStateOrProvinceOfIssue::TAG
, FieldUnderlyingLocaleOfIssue::TAG
, FieldUnderlyingRedemptionDate::TAG
, FieldUnderlyingStrikePrice::TAG
, FieldUnderlyingStrikeCurrency::TAG
, FieldUnderlyingOptAttribute::TAG
, FieldUnderlyingContractMultiplier::TAG
, FieldUnderlyingCouponRate::TAG
, FieldUnderlyingSecurityExchange::TAG
, FieldUnderlyingIssuer::TAG
, FieldEncodedUnderlyingIssuerLen::TAG
, FieldEncodedUnderlyingIssuer::TAG
, FieldUnderlyingSecurityDesc::TAG
, FieldEncodedUnderlyingSecurityDescLen::TAG
, FieldEncodedUnderlyingSecurityDesc::TAG
, FieldUnderlyingCPProgram::TAG
, FieldUnderlyingCPRegType::TAG
, FieldUnderlyingCurrency::TAG
, FieldUnderlyingQty::TAG
, FieldUnderlyingPx::TAG
, FieldUnderlyingDirtyPrice::TAG
, FieldUnderlyingEndPrice::TAG
, FieldUnderlyingStartValue::TAG
, FieldUnderlyingCurrentValue::TAG
, FieldUnderlyingEndValue::TAG
, FieldNoUnderlyingStips::TAG
, FieldTotNoQuoteEntries::TAG
, FieldLastFragment::TAG
, FieldNoQuoteEntries::TAG
};

const std::vector<unsigned> SecurityTypes_knownFields = { FieldSecurityType::TAG
, FieldSecuritySubType::TAG
, FieldProduct::TAG
, FieldCFICode::TAG
};

const std::vector<unsigned> Nested3PartyIDs_knownFields = { FieldNested3PartyID::TAG
, FieldNested3PartyIDSource::TAG
, FieldNested3PartyRole::TAG
, FieldNoNested3PartySubIDs::TAG
};

const std::vector<unsigned> Positions_knownFields = { FieldPosType::TAG
, FieldLongQty::TAG
, FieldShortQty::TAG
, FieldPosQtyStatus::TAG
, FieldNoNestedPartyIDs::TAG
};

const std::vector<unsigned> AffectedOrders_knownFields = { FieldOrigClOrdID::TAG
, FieldAffectedOrderID::TAG
, FieldAffectedSecondaryOrderID::TAG
};

const std::vector<unsigned> Execs_knownFields = { FieldLastQty::TAG
, FieldExecID::TAG
, FieldSecondaryExecID::TAG
, FieldLastPx::TAG
, FieldLastParPx::TAG
, FieldLastCapacity::TAG
};

const std::vector<unsigned> MsgTypes_knownFields = { FieldRefMsgType::TAG
, FieldMsgDirection::TAG
};

const std::vector<unsigned> BidComponents_knownFields = { FieldListID::TAG
, FieldSide::TAG
, FieldTradingSessionID::TAG
, FieldTradingSessionSubID::TAG
, FieldNetGrossInd::TAG
, FieldSettlType::TAG
, FieldSettlDate::TAG
, FieldAccount::TAG
, FieldAcctIDSource::TAG
};

const std::vector<unsigned> SettlInst_knownFields = { FieldSettlInstID::TAG
, FieldSettlInstTransType::TAG
, FieldSettlInstRefID::TAG
, FieldNoPartyIDs::TAG
, FieldSide::TAG
, FieldProduct::TAG
, FieldSecurityType::TAG
, FieldCFICode::TAG
, FieldEffectiveTime::TAG
, FieldExpireTime::TAG
, FieldLastUpdateTime::TAG
, FieldSettlDeliveryType::TAG
, FieldStandInstDbType::TAG
, FieldStandInstDbName::TAG
, FieldStandInstDbID::TAG
, FieldNoDlvyInst::TAG
, FieldPaymentMethod::TAG
, FieldPaymentRef::TAG
, FieldCardHolderName::TAG
, FieldCardNumber::TAG
, FieldCardStartDate::TAG
, FieldCardExpDate::TAG
, FieldCardIssNum::TAG
, FieldPaymentDate::TAG
, FieldPaymentRemitterID::TAG
};

const std::vector<unsigned> InstrAttrib_knownFields = { FieldInstrAttribType::TAG
, FieldInstrAttribValue::TAG
};

const std::vector<unsigned> MiscFees_knownFields = { FieldMiscFeeAmt::TAG
, FieldMiscFeeCurr::TAG
, FieldMiscFeeType::TAG
, FieldMiscFeeBasis::TAG
};

const std::vector<unsigned> QuoteQualifiers_knownFields = { FieldQuoteQualifier::TAG
};

const std::vector<unsigned> DistribInsts_knownFields = { FieldDistribPaymentMethod::TAG
, FieldDistribPercentage::TAG
, FieldCashDistribCurr::TAG
, FieldCashDistribAgentName::TAG
, FieldCashDistribAgentCode::TAG
, FieldCashDistribAgentAcctNumber::TAG
, FieldCashDistribPayRef::TAG
, FieldCashDistribAgentAcctName::TAG
};

const std::vector<unsigned> TrdRegTimestamps_knownFields = { FieldTrdRegTimestamp::TAG
, FieldTrdRegTimestampType::TAG
, FieldTrdRegTimestampOrigin::TAG
};

const std::vector<unsigned> AltMDSource_knownFields = { FieldAltMDSourceID::TAG
};

const std::vector<unsigned> Sides_knownFields = { FieldSide::TAG
, FieldOrigClOrdID::TAG
, FieldClOrdID::TAG
, FieldSecondaryClOrdID::TAG
, FieldClOrdLinkID::TAG
, FieldOrigOrdModTime::TAG
, FieldNoPartyIDs::TAG
, FieldTradeOriginationDate::TAG
, FieldTradeDate::TAG
, FieldOrderQty::TAG
, FieldCashOrderQty::TAG
, FieldOrderPercent::TAG
, FieldRoundingDirection::TAG
, FieldRoundingModulus::TAG
, FieldComplianceID::TAG
, FieldText::TAG
, FieldEncodedTextLen::TAG
, FieldEncodedText::TAG
};

const std::vector<unsigned> RoutingIDs_knownFields = { FieldRoutingType::TAG
, FieldRoutingID::TAG
};

const std::vector<unsigned> PosAmt_knownFields = { FieldPosAmtType::TAG
, FieldPosAmt::TAG
};

const std::vector<unsigned> LinesOfText_knownFields = { FieldText::TAG
, FieldEncodedTextLen::TAG
, FieldEncodedText::TAG
};

const std::vector<unsigned> IOIQualifiers_knownFields = { FieldIOIQualifier::TAG
};

const std::vector<unsigned> Dates_knownFields = { FieldTradeDate::TAG
, FieldTransactTime::TAG
};

const std::vector<unsigned> MDEntryTypes_knownFields = { FieldMDEntryType::TAG
};

const std::vector<unsigned> RelatedSym_knownFields = { FieldSymbol::TAG
, FieldSymbolSfx::TAG
, FieldSecurityID::TAG
, FieldSecurityIDSource::TAG
, FieldNoSecurityAltID::TAG
, FieldProduct::TAG
, FieldCFICode::TAG
, FieldSecurityType::TAG
, FieldSecuritySubType::TAG
, FieldMaturityMonthYear::TAG
, FieldMaturityDate::TAG
, FieldPutOrCall::TAG
, FieldCouponPaymentDate::TAG
, FieldIssueDate::TAG
, FieldRepoCollateralSecurityType::TAG
, FieldRepurchaseTerm::TAG
, FieldRepurchaseRate::TAG
, FieldFactor::TAG
, FieldCreditRating::TAG
, FieldInstrRegistry::TAG
, FieldCountryOfIssue::TAG
, FieldStateOrProvinceOfIssue::TAG
, FieldLocaleOfIssue::TAG
, FieldRedemptionDate::TAG
, FieldStrikePrice::TAG
, FieldStrikeCurrency::TAG
, FieldOptAttribute::TAG
, FieldContractMultiplier::TAG
, FieldCouponRate::TAG
, FieldSecurityExchange::TAG
, FieldIssuer::TAG
, FieldEncodedIssuerLen::TAG
, FieldEncodedIssuer::TAG
, FieldSecurityDesc::TAG
, FieldEncodedSecurityDescLen::TAG
, FieldEncodedSecurityDesc::TAG
, FieldPool::TAG
, FieldContractSettlMonth::TAG
, FieldCPProgram::TAG
, FieldCPRegType::TAG
, FieldNoEvents::TAG
, FieldDatedDate::TAG
, FieldInterestAccrualDate::TAG
};

const std::vector<unsigned> ContraBrokers_knownFields = { FieldContraBroker::TAG
, FieldContraTrader::TAG
, FieldContraTradeQty::TAG
, FieldContraTradeTime::TAG
, FieldContraLegRefID::TAG
};

const std::vector<unsigned> Trades_knownFields = { FieldTradeReportID::TAG
, FieldSecondaryTradeReportID::TAG
};

const std::vector<unsigned> Strikes_knownFields = { FieldSymbol::TAG
, FieldSymbolSfx::TAG
, FieldSecurityID::TAG
, FieldSecurityIDSource::TAG
, FieldNoSecurityAltID::TAG
, FieldProduct::TAG
, FieldCFICode::TAG
, FieldSecurityType::TAG
, FieldSecuritySubType::TAG
, FieldMaturityMonthYear::TAG
, FieldMaturityDate::TAG
, FieldPutOrCall::TAG
, FieldCouponPaymentDate::TAG
, FieldIssueDate::TAG
, FieldRepoCollateralSecurityType::TAG
, FieldRepurchaseTerm::TAG
, FieldRepurchaseRate::TAG
, FieldFactor::TAG
, FieldCreditRating::TAG
, FieldInstrRegistry::TAG
, FieldCountryOfIssue::TAG
, FieldStateOrProvinceOfIssue::TAG
, FieldLocaleOfIssue::TAG
, FieldRedemptionDate::TAG
, FieldStrikePrice::TAG
, FieldStrikeCurrency::TAG
, FieldOptAttribute::TAG
, FieldContractMultiplier::TAG
, FieldCouponRate::TAG
, FieldSecurityExchange::TAG
, FieldIssuer::TAG
, FieldEncodedIssuerLen::TAG
, FieldEncodedIssuer::TAG
, FieldSecurityDesc::TAG
, FieldEncodedSecurityDescLen::TAG
, FieldEncodedSecurityDesc::TAG
, FieldPool::TAG
, FieldContractSettlMonth::TAG
, FieldCPProgram::TAG
, FieldCPRegType::TAG
, FieldNoEvents::TAG
, FieldDatedDate::TAG
, FieldInterestAccrualDate::TAG
};

const std::vector<unsigned> BidDescriptors_knownFields = { FieldBidDescriptorType::TAG
, FieldBidDescriptor::TAG
, FieldSideValueInd::TAG
, FieldLiquidityValue::TAG
, FieldLiquidityNumSecurities::TAG
, FieldLiquidityPctLow::TAG
, FieldLiquidityPctHigh::TAG
, FieldEFPTrackingError::TAG
, FieldFairValue::TAG
, FieldOutsideIndexPct::TAG
, FieldValueOfFutures::TAG
};

const std::vector<unsigned> CompIDs_knownFields = { FieldRefCompID::TAG
, FieldRefSubID::TAG
, FieldLocationID::TAG
, FieldDeskID::TAG
};

const std::vector<unsigned> LegAllocs_knownFields = { FieldLegAllocAccount::TAG
, FieldLegIndividualAllocID::TAG
, FieldNoNested2PartyIDs::TAG
, FieldLegAllocQty::TAG
, FieldLegAllocAcctIDSource::TAG
, FieldLegSettlCurrency::TAG
};

const std::vector<unsigned> RegistDtls_knownFields = { FieldRegistDtls::TAG
, FieldRegistEmail::TAG
, FieldMailingDtls::TAG
, FieldMailingInst::TAG
, FieldNoNestedPartyIDs::TAG
, FieldOwnerType::TAG
, FieldDateOfBirth::TAG
, FieldInvestorCountryOfResidence::TAG
};

const std::vector<unsigned> ContAmts_knownFields = { FieldContAmtType::TAG
, FieldContAmtValue::TAG
, FieldContAmtCurr::TAG
};

const std::vector<unsigned> MDEntries_knownFields = { FieldMDEntryType::TAG
, FieldMDEntryPx::TAG
, FieldCurrency::TAG
, FieldMDEntrySize::TAG
, FieldMDEntryDate::TAG
, FieldMDEntryTime::TAG
, FieldTickDirection::TAG
, FieldMDMkt::TAG
, FieldTradingSessionID::TAG
, FieldTradingSessionSubID::TAG
, FieldQuoteCondition::TAG
, FieldTradeCondition::TAG
, FieldMDEntryOriginator::TAG
, FieldLocationID::TAG
, FieldDeskID::TAG
, FieldOpenCloseSettlFlag::TAG
, FieldTimeInForce::TAG
, FieldExpireDate::TAG
, FieldExpireTime::TAG
, FieldMinQty::TAG
, FieldExecInst::TAG
, FieldSellerDays::TAG
, FieldOrderID::TAG
, FieldQuoteEntryID::TAG
, FieldMDEntryBuyer::TAG
, FieldMDEntrySeller::TAG
, FieldNumberOfOrders::TAG
, FieldMDEntryPositionNo::TAG
, FieldScope::TAG
, FieldPriceDelta::TAG
, FieldText::TAG
, FieldEncodedTextLen::TAG
, FieldEncodedText::TAG
};

}

const std::vector<unsigned> & GroupLegStipulations::getKnownFields(){ return LegStipulations_knownFields; }

const std::vector<unsigned> & GroupEvents::getKnownFields(){ return Events_knownFields; }

const std::vector<unsigned> & GroupLegSecurityAltID::getKnownFields(){ return LegSecurityAltID_knownFields; }

const std::vector<unsigned> & GroupCapacities::getKnownFields(){ return Capacities_knownFields; }

const std::vector<unsigned> & GroupNested3PartySubIDs::getKnownFields(){ return Nested3PartySubIDs_knownFields; }

const std::vector<unsigned> & GroupPartySubIDs::getKnownFields(){ return PartySubIDs_knownFields; }

const std::vector<unsigned> & GroupNested2PartySubIDs::getKnownFields(){ return Nested2PartySubIDs_knownFields; }

const std::vector<unsigned> & GroupNested2PartyIDs::getKnownFields(){ return Nested2PartyIDs_knownFields; }

const std::vector<unsigned> & GroupHops::getKnownFields(){ return Hops_knownFields; }

const std::vector<unsigned> & GroupCollInquiryQualifier::getKnownFields(){ return CollInquiryQualifier_knownFields; }

const std::vector<unsigned> & GroupPartyIDs::getKnownFields(){ return PartyIDs_knownFields; }

const std::vector<unsigned> & GroupAllocs::getKnownFields(){ return Allocs_knownFields; }

const std::vector<unsigned> & GroupTradingSessions::getKnownFields(){ return TradingSessions_knownFields; }

const std::vector<unsigned> & GroupSecurityAltID::getKnownFields(){ return SecurityAltID_knownFields; }

const std::vector<unsigned> & GroupUnderlyingSecurityAltID::getKnownFields(){ return UnderlyingSecurityAltID_knownFields; }

const std::vector<unsigned> & GroupUnderlyingStips::getKnownFields(){ return UnderlyingStips_knownFields; }

const std::vector<unsigned> & GroupUnderlyings::getKnownFields(){ return Underlyings_knownFields; }

const std::vector<unsigned> & GroupStipulations::getKnownFields(){ return Stipulations_knownFields; }

const std::vector<unsigned> & GroupOrders::getKnownFields(){ return Orders_knownFields; }

const std::vector<unsigned> & GroupSettlPartySubIDs::getKnownFields(){ return SettlPartySubIDs_knownFields; }

const std::vector<unsigned> & GroupSettlPartyIDs::getKnownFields(){ return SettlPartyIDs_knownFields; }

const std::vector<unsigned> & GroupDlvyInst::getKnownFields(){ return DlvyInst_knownFields; }

const std::vector<unsigned> & GroupClearingInstructions::getKnownFields(){ return ClearingInstructions_knownFields; }

const std::vector<unsigned> & GroupNestedPartySubIDs::getKnownFields(){ return NestedPartySubIDs_knownFields; }

const std::vector<unsigned> & GroupNestedPartyIDs::getKnownFields(){ return NestedPartyIDs_knownFields; }

const std::vector<unsigned> & GroupLegs::getKnownFields(){ return Legs_knownFields; }

const std::vector<unsigned> & GroupQuoteEntries::getKnownFields(){ return QuoteEntries_knownFields; }

const std::vector<unsigned> & GroupQuoteSets::getKnownFields(){ return QuoteSets_knownFields; }

const std::vector<unsigned> & GroupSecurityTypes::getKnownFields(){ return SecurityTypes_knownFields; }

const std::vector<unsigned> & GroupNested3PartyIDs::getKnownFields(){ return Nested3PartyIDs_knownFields; }

const std::vector<unsigned> & GroupPositions::getKnownFields(){ return Positions_knownFields; }

const std::vector<unsigned> & GroupAffectedOrders::getKnownFields(){ return AffectedOrders_knownFields; }

const std::vector<unsigned> & GroupExecs::getKnownFields(){ return Execs_knownFields; }

const std::vector<unsigned> & GroupMsgTypes::getKnownFields(){ return MsgTypes_knownFields; }

const std::vector<unsigned> & GroupBidComponents::getKnownFields(){ return BidComponents_knownFields; }

const std::vector<unsigned> & GroupSettlInst::getKnownFields(){ return SettlInst_knownFields; }

const std::vector<unsigned> & GroupInstrAttrib::getKnownFields(){ return InstrAttrib_knownFields; }

const std::vector<unsigned> & GroupMiscFees::getKnownFields(){ return MiscFees_knownFields; }

const std::vector<unsigned> & GroupQuoteQualifiers::getKnownFields(){ return QuoteQualifiers_knownFields; }

const std::vector<unsigned> & GroupDistribInsts::getKnownFields(){ return DistribInsts_knownFields; }

const std::vector<unsigned> & GroupTrdRegTimestamps::getKnownFields(){ return TrdRegTimestamps_knownFields; }

const std::vector<unsigned> & GroupAltMDSource::getKnownFields(){ return AltMDSource_knownFields; }

const std::vector<unsigned> & GroupSides::getKnownFields(){ return Sides_knownFields; }

const std::vector<unsigned> & GroupRoutingIDs::getKnownFields(){ return RoutingIDs_knownFields; }

const std::vector<unsigned> & GroupPosAmt::getKnownFields(){ return PosAmt_knownFields; }

const std::vector<unsigned> & GroupLinesOfText::getKnownFields(){ return LinesOfText_knownFields; }

const std::vector<unsigned> & GroupIOIQualifiers::getKnownFields(){ return IOIQualifiers_knownFields; }

const std::vector<unsigned> & GroupDates::getKnownFields(){ return Dates_knownFields; }

const std::vector<unsigned> & GroupMDEntryTypes::getKnownFields(){ return MDEntryTypes_knownFields; }

const std::vector<unsigned> & GroupRelatedSym::getKnownFields(){ return RelatedSym_knownFields; }

const std::vector<unsigned> & GroupContraBrokers::getKnownFields(){ return ContraBrokers_knownFields; }

const std::vector<unsigned> & GroupTrades::getKnownFields(){ return Trades_knownFields; }

const std::vector<unsigned> & GroupStrikes::getKnownFields(){ return Strikes_knownFields; }

const std::vector<unsigned> & GroupBidDescriptors::getKnownFields(){ return BidDescriptors_knownFields; }

const std::vector<unsigned> & GroupCompIDs::getKnownFields(){ return CompIDs_knownFields; }

const std::vector<unsigned> & GroupLegAllocs::getKnownFields(){ return LegAllocs_knownFields; }

const std::vector<unsigned> & GroupRegistDtls::getKnownFields(){ return RegistDtls_knownFields; }

const std::vector<unsigned> & GroupContAmts::getKnownFields(){ return ContAmts_knownFields; }

const std::vector<unsigned> & GroupMDEntries::getKnownFields(){ return MDEntries_knownFields; }
// end of Groups.cxx

} // namespace fix44
