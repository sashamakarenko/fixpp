// Generated by https://github.com/sashamakarenko/fixpp
// Copyright (c) 2021 sashamakarenko
// https://github.com/sashamakarenko/fixpp/blob/main/LICENSE

#include <fix44/Messages.h>

namespace fix44
{

// start of MessageScanners.cxx

// Generated

// -------------------------------------- scan ----------------------------------------

offset_t MessageHeader::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginString::RAW_TAG :
     FIXPP_PRINT_FIELD(BeginString) 
     fieldBeginString.offset = pos;
     break;

   case FieldBodyLength::RAW_TAG :
     FIXPP_PRINT_FIELD(BodyLength) 
     fieldBodyLength.offset = pos;
     break;

   case FieldMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(MsgType) 
     fieldMsgType.offset = pos;
     break;

   case FieldSenderCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderCompID) 
     fieldSenderCompID.offset = pos;
     break;

   case FieldTargetCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetCompID) 
     fieldTargetCompID.offset = pos;
     break;

   case FieldOnBehalfOfCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(OnBehalfOfCompID) 
     fieldOnBehalfOfCompID.offset = pos;
     break;

   case FieldDeliverToCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliverToCompID) 
     fieldDeliverToCompID.offset = pos;
     break;

   case FieldSecureDataLen::RAW_TAG :
     FIXPP_PRINT_FIELD(SecureDataLen) 
     fieldSecureDataLen.offset = pos;
     break;

   case FieldSecureData::RAW_TAG :
     FIXPP_PRINT_FIELD(SecureData) 
     fieldSecureData.offset = pos;
     break;

   case FieldMsgSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(MsgSeqNum) 
     fieldMsgSeqNum.offset = pos;
     break;

   case FieldSenderSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderSubID) 
     fieldSenderSubID.offset = pos;
     break;

   case FieldSenderLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderLocationID) 
     fieldSenderLocationID.offset = pos;
     break;

   case FieldTargetSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetSubID) 
     fieldTargetSubID.offset = pos;
     break;

   case FieldTargetLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetLocationID) 
     fieldTargetLocationID.offset = pos;
     break;

   case FieldOnBehalfOfSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(OnBehalfOfSubID) 
     fieldOnBehalfOfSubID.offset = pos;
     break;

   case FieldOnBehalfOfLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(OnBehalfOfLocationID) 
     fieldOnBehalfOfLocationID.offset = pos;
     break;

   case FieldDeliverToSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliverToSubID) 
     fieldDeliverToSubID.offset = pos;
     break;

   case FieldDeliverToLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliverToLocationID) 
     fieldDeliverToLocationID.offset = pos;
     break;

   case FieldPossDupFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(PossDupFlag) 
     fieldPossDupFlag.offset = pos;
     break;

   case FieldPossResend::RAW_TAG :
     FIXPP_PRINT_FIELD(PossResend) 
     fieldPossResend.offset = pos;
     break;

   case FieldSendingTime::RAW_TAG :
     FIXPP_PRINT_FIELD(SendingTime) 
     fieldSendingTime.offset = pos;
     break;

   case FieldOrigSendingTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigSendingTime) 
     fieldOrigSendingTime.offset = pos;
     break;

   case FieldXmlDataLen::RAW_TAG :
     FIXPP_PRINT_FIELD(XmlDataLen) 
     fieldXmlDataLen.offset = pos;
     break;

   case FieldXmlData::RAW_TAG :
     FIXPP_PRINT_FIELD(XmlData) 
     fieldXmlData.offset = pos;
     break;

   case FieldMessageEncoding::RAW_TAG :
     FIXPP_PRINT_FIELD(MessageEncoding) 
     fieldMessageEncoding.offset = pos;
     break;

   case FieldLastMsgSeqNumProcessed::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMsgSeqNumProcessed) 
     fieldLastMsgSeqNumProcessed.offset = pos;
     break;

   case FieldNoHops::RAW_TAG :
     FIXPP_PRINT_FIELD(NoHops) 
     fieldNoHops.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupHops::scan( groupsHops, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageHeartbeat::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TestReqID) 
     fieldTestReqID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTestRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TestReqID) 
     fieldTestReqID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageResendRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginSeqNo::RAW_TAG :
     FIXPP_PRINT_FIELD(BeginSeqNo) 
     fieldBeginSeqNo.offset = pos;
     break;

   case FieldEndSeqNo::RAW_TAG :
     FIXPP_PRINT_FIELD(EndSeqNo) 
     fieldEndSeqNo.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageReject::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(RefSeqNum) 
     fieldRefSeqNum.offset = pos;
     break;

   case FieldRefTagID::RAW_TAG :
     FIXPP_PRINT_FIELD(RefTagID) 
     fieldRefTagID.offset = pos;
     break;

   case FieldRefMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(RefMsgType) 
     fieldRefMsgType.offset = pos;
     break;

   case FieldSessionRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(SessionRejectReason) 
     fieldSessionRejectReason.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSequenceReset::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldGapFillFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(GapFillFlag) 
     fieldGapFillFlag.offset = pos;
     break;

   case FieldNewSeqNo::RAW_TAG :
     FIXPP_PRINT_FIELD(NewSeqNo) 
     fieldNewSeqNo.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageLogout::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageIOI::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldIOITransType::RAW_TAG :
     FIXPP_PRINT_FIELD(IOITransType) 
     fieldIOITransType.offset = pos;
     break;

   case FieldIOIRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIRefID) 
     fieldIOIRefID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldIOIQty::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIQty) 
     fieldIOIQty.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldIOIQltyInd::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIQltyInd) 
     fieldIOIQltyInd.offset = pos;
     break;

   case FieldIOINaturalFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(IOINaturalFlag) 
     fieldIOINaturalFlag.offset = pos;
     break;

   case FieldNoIOIQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoIOIQualifiers) 
     fieldNoIOIQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupIOIQualifiers::scan( groupsIOIQualifiers, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldURLLink::RAW_TAG :
     FIXPP_PRINT_FIELD(URLLink) 
     fieldURLLink.offset = pos;
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     fieldNoRoutingIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::scan( groupsRoutingIDs, fix+pos, len - pos );
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAdvertisement::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAdvId::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvId) 
     fieldAdvId.offset = pos;
     break;

   case FieldAdvTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvTransType) 
     fieldAdvTransType.offset = pos;
     break;

   case FieldAdvRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvRefID) 
     fieldAdvRefID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldAdvSide::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvSide) 
     fieldAdvSide.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldURLLink::RAW_TAG :
     FIXPP_PRINT_FIELD(URLLink) 
     fieldURLLink.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageExecutionReport::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldSecondaryExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     fieldSecondaryExecID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatusReqID) 
     fieldOrdStatusReqID.offset = pos;
     break;

   case FieldMassStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MassStatusReqID) 
     fieldMassStatusReqID.offset = pos;
     break;

   case FieldTotNumReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumReports) 
     fieldTotNumReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldNoContraBrokers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoContraBrokers) 
     fieldNoContraBrokers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContraBrokers::scan( groupsContraBrokers, fix+pos, len - pos );
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldOrigCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     fieldOrigCrossID.offset = pos;
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldExecRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecRefID) 
     fieldExecRefID.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldWorkingIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(WorkingIndicator) 
     fieldWorkingIndicator.offset = pos;
     break;

   case FieldOrdRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdRejReason) 
     fieldOrdRejReason.offset = pos;
     break;

   case FieldExecRestatementReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecRestatementReason) 
     fieldExecRestatementReason.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldPeggedPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(PeggedPrice) 
     fieldPeggedPrice.offset = pos;
     break;

   case FieldDiscretionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionPrice) 
     fieldDiscretionPrice.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldTargetStrategyPerformance::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyPerformance) 
     fieldTargetStrategyPerformance.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldUnderlyingLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLastQty) 
     fieldUnderlyingLastQty.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldUnderlyingLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLastPx) 
     fieldUnderlyingLastPx.offset = pos;
     break;

   case FieldLastParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastParPx) 
     fieldLastParPx.offset = pos;
     break;

   case FieldLastSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(LastSpotRate) 
     fieldLastSpotRate.offset = pos;
     break;

   case FieldLastForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(LastForwardPoints) 
     fieldLastForwardPoints.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTimeBracket::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeBracket) 
     fieldTimeBracket.offset = pos;
     break;

   case FieldLastCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(LastCapacity) 
     fieldLastCapacity.offset = pos;
     break;

   case FieldLeavesQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LeavesQty) 
     fieldLeavesQty.offset = pos;
     break;

   case FieldCumQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CumQty) 
     fieldCumQty.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldDayOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(DayOrderQty) 
     fieldDayOrderQty.offset = pos;
     break;

   case FieldDayCumQty::RAW_TAG :
     FIXPP_PRINT_FIELD(DayCumQty) 
     fieldDayCumQty.offset = pos;
     break;

   case FieldDayAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(DayAvgPx) 
     fieldDayAvgPx.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldReportToExch::RAW_TAG :
     FIXPP_PRINT_FIELD(ReportToExch) 
     fieldReportToExch.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldExDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDate) 
     fieldExDate.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldTradedFlatSwitch::RAW_TAG :
     FIXPP_PRINT_FIELD(TradedFlatSwitch) 
     fieldTradedFlatSwitch.offset = pos;
     break;

   case FieldBasisFeatureDate::RAW_TAG :
     FIXPP_PRINT_FIELD(BasisFeatureDate) 
     fieldBasisFeatureDate.offset = pos;
     break;

   case FieldBasisFeaturePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BasisFeaturePrice) 
     fieldBasisFeaturePrice.offset = pos;
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrAmt) 
     fieldSettlCurrAmt.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRate) 
     fieldSettlCurrFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldLastForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(LastForwardPoints2) 
     fieldLastForwardPoints2.offset = pos;
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldTransBkdTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransBkdTime) 
     fieldTransBkdTime.offset = pos;
     break;

   case FieldExecValuationPoint::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecValuationPoint) 
     fieldExecValuationPoint.offset = pos;
     break;

   case FieldExecPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecPriceType) 
     fieldExecPriceType.offset = pos;
     break;

   case FieldExecPriceAdjustment::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecPriceAdjustment) 
     fieldExecPriceAdjustment.offset = pos;
     break;

   case FieldPriorityIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(PriorityIndicator) 
     fieldPriorityIndicator.offset = pos;
     break;

   case FieldPriceImprovement::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceImprovement) 
     fieldPriceImprovement.offset = pos;
     break;

   case FieldLastLiquidityInd::RAW_TAG :
     FIXPP_PRINT_FIELD(LastLiquidityInd) 
     fieldLastLiquidityInd.offset = pos;
     break;

   case FieldNoContAmts::RAW_TAG :
     FIXPP_PRINT_FIELD(NoContAmts) 
     fieldNoContAmts.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContAmts::scan( groupsContAmts, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     fieldCopyMsgIndicator.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderCancelReject::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldWorkingIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(WorkingIndicator) 
     fieldWorkingIndicator.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldCxlRejResponseTo::RAW_TAG :
     FIXPP_PRINT_FIELD(CxlRejResponseTo) 
     fieldCxlRejResponseTo.offset = pos;
     break;

   case FieldCxlRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CxlRejReason) 
     fieldCxlRejReason.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageLogon::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEncryptMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(EncryptMethod) 
     fieldEncryptMethod.offset = pos;
     break;

   case FieldHeartBtInt::RAW_TAG :
     FIXPP_PRINT_FIELD(HeartBtInt) 
     fieldHeartBtInt.offset = pos;
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldResetSeqNumFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(ResetSeqNumFlag) 
     fieldResetSeqNumFlag.offset = pos;
     break;

   case FieldNextExpectedMsgSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(NextExpectedMsgSeqNum) 
     fieldNextExpectedMsgSeqNum.offset = pos;
     break;

   case FieldMaxMessageSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxMessageSize) 
     fieldMaxMessageSize.offset = pos;
     break;

   case FieldNoMsgTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMsgTypes) 
     fieldNoMsgTypes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMsgTypes::scan( groupsMsgTypes, fix+pos, len - pos );
     break;

   case FieldTestMessageIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(TestMessageIndicator) 
     fieldTestMessageIndicator.offset = pos;
     break;

   case FieldUsername::RAW_TAG :
     FIXPP_PRINT_FIELD(Username) 
     fieldUsername.offset = pos;
     break;

   case FieldPassword::RAW_TAG :
     FIXPP_PRINT_FIELD(Password) 
     fieldPassword.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNews::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigTime) 
     fieldOrigTime.offset = pos;
     break;

   case FieldUrgency::RAW_TAG :
     FIXPP_PRINT_FIELD(Urgency) 
     fieldUrgency.offset = pos;
     break;

   case FieldHeadline::RAW_TAG :
     FIXPP_PRINT_FIELD(Headline) 
     fieldHeadline.offset = pos;
     break;

   case FieldEncodedHeadlineLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedHeadlineLen) 
     fieldEncodedHeadlineLen.offset = pos;
     break;

   case FieldEncodedHeadline::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedHeadline) 
     fieldEncodedHeadline.offset = pos;
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     fieldNoRoutingIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::scan( groupsRoutingIDs, fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLinesOfText::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLinesOfText) 
     fieldNoLinesOfText.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::scan( groupsLinesOfText, fix+pos, len - pos );
     break;

   case FieldURLLink::RAW_TAG :
     FIXPP_PRINT_FIELD(URLLink) 
     fieldURLLink.offset = pos;
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageEmail::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEmailThreadID::RAW_TAG :
     FIXPP_PRINT_FIELD(EmailThreadID) 
     fieldEmailThreadID.offset = pos;
     break;

   case FieldEmailType::RAW_TAG :
     FIXPP_PRINT_FIELD(EmailType) 
     fieldEmailType.offset = pos;
     break;

   case FieldOrigTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigTime) 
     fieldOrigTime.offset = pos;
     break;

   case FieldSubject::RAW_TAG :
     FIXPP_PRINT_FIELD(Subject) 
     fieldSubject.offset = pos;
     break;

   case FieldEncodedSubjectLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSubjectLen) 
     fieldEncodedSubjectLen.offset = pos;
     break;

   case FieldEncodedSubject::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSubject) 
     fieldEncodedSubject.offset = pos;
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     fieldNoRoutingIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::scan( groupsRoutingIDs, fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldNoLinesOfText::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLinesOfText) 
     fieldNoLinesOfText.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::scan( groupsLinesOfText, fix+pos, len - pos );
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderSingle::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldPrice2::RAW_TAG :
     FIXPP_PRINT_FIELD(Price2) 
     fieldPrice2.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderList::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldProgRptReqs::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgRptReqs) 
     fieldProgRptReqs.offset = pos;
     break;

   case FieldBidType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidType) 
     fieldBidType.offset = pos;
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgPeriodInterval) 
     fieldProgPeriodInterval.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldListExecInstType::RAW_TAG :
     FIXPP_PRINT_FIELD(ListExecInstType) 
     fieldListExecInstType.offset = pos;
     break;

   case FieldListExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ListExecInst) 
     fieldListExecInst.offset = pos;
     break;

   case FieldEncodedListExecInstLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListExecInstLen) 
     fieldEncodedListExecInstLen.offset = pos;
     break;

   case FieldEncodedListExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListExecInst) 
     fieldEncodedListExecInst.offset = pos;
     break;

   case FieldAllowableOneSidednessPct::RAW_TAG :
     FIXPP_PRINT_FIELD(AllowableOneSidednessPct) 
     fieldAllowableOneSidednessPct.offset = pos;
     break;

   case FieldAllowableOneSidednessValue::RAW_TAG :
     FIXPP_PRINT_FIELD(AllowableOneSidednessValue) 
     fieldAllowableOneSidednessValue.offset = pos;
     break;

   case FieldAllowableOneSidednessCurr::RAW_TAG :
     FIXPP_PRINT_FIELD(AllowableOneSidednessCurr) 
     fieldAllowableOneSidednessCurr.offset = pos;
     break;

   case FieldTotNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoOrders) 
     fieldTotNoOrders.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderCancelRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderCancelReplaceRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldPrice2::RAW_TAG :
     FIXPP_PRINT_FIELD(Price2) 
     fieldPrice2.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatusReqID) 
     fieldOrdStatusReqID.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationInstruction::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldAllocTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocTransType) 
     fieldAllocTransType.offset = pos;
     break;

   case FieldAllocType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocType) 
     fieldAllocType.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldRefAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(RefAllocID) 
     fieldRefAllocID.offset = pos;
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocCancReplaceReason) 
     fieldAllocCancReplaceReason.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldAllocLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkID) 
     fieldAllocLinkID.offset = pos;
     break;

   case FieldAllocLinkType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkType) 
     fieldAllocLinkType.offset = pos;
     break;

   case FieldBookingRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingRefID) 
     fieldBookingRefID.offset = pos;
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocNoOrdersType) 
     fieldAllocNoOrdersType.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW_TAG :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     fieldPreviouslyReported.offset = pos;
     break;

   case FieldReversalIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ReversalIndicator) 
     fieldReversalIndicator.offset = pos;
     break;

   case FieldMatchType::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchType) 
     fieldMatchType.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldAvgParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgParPx) 
     fieldAvgParPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     fieldAvgPxPrecision.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(AutoAcceptIndicator) 
     fieldAutoAcceptIndicator.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalAccruedInterestAmt) 
     fieldTotalAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldLegalConfirm::RAW_TAG :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     fieldLegalConfirm.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldTotNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoAllocs) 
     fieldTotNoAllocs.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListCancelRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListExecute::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListStatus::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldListStatusType::RAW_TAG :
     FIXPP_PRINT_FIELD(ListStatusType) 
     fieldListStatusType.offset = pos;
     break;

   case FieldNoRpts::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRpts) 
     fieldNoRpts.offset = pos;
     break;

   case FieldListOrderStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(ListOrderStatus) 
     fieldListOrderStatus.offset = pos;
     break;

   case FieldRptSeq::RAW_TAG :
     FIXPP_PRINT_FIELD(RptSeq) 
     fieldRptSeq.offset = pos;
     break;

   case FieldListStatusText::RAW_TAG :
     FIXPP_PRINT_FIELD(ListStatusText) 
     fieldListStatusText.offset = pos;
     break;

   case FieldEncodedListStatusTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListStatusTextLen) 
     fieldEncodedListStatusTextLen.offset = pos;
     break;

   case FieldEncodedListStatusText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListStatusText) 
     fieldEncodedListStatusText.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldTotNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoOrders) 
     fieldTotNoOrders.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationInstructionAck::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAllocStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocStatus) 
     fieldAllocStatus.offset = pos;
     break;

   case FieldAllocRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     fieldAllocRejCode.offset = pos;
     break;

   case FieldAllocType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocType) 
     fieldAllocType.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageDontKnowTrade::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldDKReason::RAW_TAG :
     FIXPP_PRINT_FIELD(DKReason) 
     fieldDKReason.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldRFQReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(RFQReqID) 
     fieldRFQReqID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuote::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     fieldNoQuoteQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::scan( groupsQuoteQualifiers, fix+pos, len - pos );
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(BidPx) 
     fieldBidPx.offset = pos;
     break;

   case FieldOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferPx) 
     fieldOfferPx.offset = pos;
     break;

   case FieldMktBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktBidPx) 
     fieldMktBidPx.offset = pos;
     break;

   case FieldMktOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     fieldMktOfferPx.offset = pos;
     break;

   case FieldMinBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinBidSize) 
     fieldMinBidSize.offset = pos;
     break;

   case FieldBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSize) 
     fieldBidSize.offset = pos;
     break;

   case FieldMinOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     fieldMinOfferSize.offset = pos;
     break;

   case FieldOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSize) 
     fieldOfferSize.offset = pos;
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldBidSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     fieldBidSpotRate.offset = pos;
     break;

   case FieldOfferSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     fieldOfferSpotRate.offset = pos;
     break;

   case FieldBidForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     fieldBidForwardPoints.offset = pos;
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     fieldOfferForwardPoints.offset = pos;
     break;

   case FieldMidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MidPx) 
     fieldMidPx.offset = pos;
     break;

   case FieldBidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(BidYield) 
     fieldBidYield.offset = pos;
     break;

   case FieldMidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(MidYield) 
     fieldMidYield.offset = pos;
     break;

   case FieldOfferYield::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferYield) 
     fieldOfferYield.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     fieldBidForwardPoints2.offset = pos;
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     fieldOfferForwardPoints2.offset = pos;
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     fieldSettlCurrBidFxRate.offset = pos;
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     fieldSettlCurrOfferFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSettlementInstructions::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstMsgID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstMsgID) 
     fieldSettlInstMsgID.offset = pos;
     break;

   case FieldSettlInstReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstReqID) 
     fieldSettlInstReqID.offset = pos;
     break;

   case FieldSettlInstMode::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstMode) 
     fieldSettlInstMode.offset = pos;
     break;

   case FieldSettlInstReqRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstReqRejCode) 
     fieldSettlInstReqRejCode.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoSettlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSettlInst) 
     fieldNoSettlInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSettlInst::scan( groupsSettlInst, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldMarketDepth::RAW_TAG :
     FIXPP_PRINT_FIELD(MarketDepth) 
     fieldMarketDepth.offset = pos;
     break;

   case FieldMDUpdateType::RAW_TAG :
     FIXPP_PRINT_FIELD(MDUpdateType) 
     fieldMDUpdateType.offset = pos;
     break;

   case FieldAggregatedBook::RAW_TAG :
     FIXPP_PRINT_FIELD(AggregatedBook) 
     fieldAggregatedBook.offset = pos;
     break;

   case FieldOpenCloseSettlFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(OpenCloseSettlFlag) 
     fieldOpenCloseSettlFlag.offset = pos;
     break;

   case FieldScope::RAW_TAG :
     FIXPP_PRINT_FIELD(Scope) 
     fieldScope.offset = pos;
     break;

   case FieldMDImplicitDelete::RAW_TAG :
     FIXPP_PRINT_FIELD(MDImplicitDelete) 
     fieldMDImplicitDelete.offset = pos;
     break;

   case FieldNoMDEntryTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMDEntryTypes) 
     fieldNoMDEntryTypes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntryTypes::scan( groupsMDEntryTypes, fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldApplQueueAction::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueAction) 
     fieldApplQueueAction.offset = pos;
     break;

   case FieldApplQueueMax::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueMax) 
     fieldApplQueueMax.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataSnapshotFullRefresh::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldFinancialStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(FinancialStatus) 
     fieldFinancialStatus.offset = pos;
     break;

   case FieldCorporateAction::RAW_TAG :
     FIXPP_PRINT_FIELD(CorporateAction) 
     fieldCorporateAction.offset = pos;
     break;

   case FieldNetChgPrevDay::RAW_TAG :
     FIXPP_PRINT_FIELD(NetChgPrevDay) 
     fieldNetChgPrevDay.offset = pos;
     break;

   case FieldNoMDEntries::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMDEntries) 
     fieldNoMDEntries.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::scan( groupsMDEntries, fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueDepth) 
     fieldApplQueueDepth.offset = pos;
     break;

   case FieldApplQueueResolution::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueResolution) 
     fieldApplQueueResolution.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataIncrementalRefresh::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldNoMDEntries::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMDEntries) 
     fieldNoMDEntries.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::scan( groupsMDEntries, fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueDepth) 
     fieldApplQueueDepth.offset = pos;
     break;

   case FieldApplQueueResolution::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueResolution) 
     fieldApplQueueResolution.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataRequestReject::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldMDReqRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqRejReason) 
     fieldMDReqRejReason.offset = pos;
     break;

   case FieldNoAltMDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAltMDSource) 
     fieldNoAltMDSource.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAltMDSource::scan( groupsAltMDSource, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteCancel::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteCancelType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteCancelType) 
     fieldQuoteCancelType.offset = pos;
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldNoQuoteEntries::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteEntries) 
     fieldNoQuoteEntries.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteEntries::scan( groupsQuoteEntries, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatusReqID) 
     fieldQuoteStatusReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMassQuoteAcknowledgement::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatus) 
     fieldQuoteStatus.offset = pos;
     break;

   case FieldQuoteRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRejectReason) 
     fieldQuoteRejectReason.offset = pos;
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoQuoteSets::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteSets) 
     fieldNoQuoteSets.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::scan( groupsQuoteSets, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityDefinitionRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityRequestType) 
     fieldSecurityRequestType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpirationCycle) 
     fieldExpirationCycle.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityDefinition::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityResponseType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseType) 
     fieldSecurityResponseType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpirationCycle) 
     fieldExpirationCycle.offset = pos;
     break;

   case FieldRoundLot::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundLot) 
     fieldRoundLot.offset = pos;
     break;

   case FieldMinTradeVol::RAW_TAG :
     FIXPP_PRINT_FIELD(MinTradeVol) 
     fieldMinTradeVol.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityStatusReqID) 
     fieldSecurityStatusReqID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityStatus::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityStatusReqID) 
     fieldSecurityStatusReqID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldSecurityTradingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityTradingStatus) 
     fieldSecurityTradingStatus.offset = pos;
     break;

   case FieldFinancialStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(FinancialStatus) 
     fieldFinancialStatus.offset = pos;
     break;

   case FieldCorporateAction::RAW_TAG :
     FIXPP_PRINT_FIELD(CorporateAction) 
     fieldCorporateAction.offset = pos;
     break;

   case FieldHaltReasonChar::RAW_TAG :
     FIXPP_PRINT_FIELD(HaltReasonChar) 
     fieldHaltReasonChar.offset = pos;
     break;

   case FieldInViewOfCommon::RAW_TAG :
     FIXPP_PRINT_FIELD(InViewOfCommon) 
     fieldInViewOfCommon.offset = pos;
     break;

   case FieldDueToRelated::RAW_TAG :
     FIXPP_PRINT_FIELD(DueToRelated) 
     fieldDueToRelated.offset = pos;
     break;

   case FieldBuyVolume::RAW_TAG :
     FIXPP_PRINT_FIELD(BuyVolume) 
     fieldBuyVolume.offset = pos;
     break;

   case FieldSellVolume::RAW_TAG :
     FIXPP_PRINT_FIELD(SellVolume) 
     fieldSellVolume.offset = pos;
     break;

   case FieldHighPx::RAW_TAG :
     FIXPP_PRINT_FIELD(HighPx) 
     fieldHighPx.offset = pos;
     break;

   case FieldLowPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LowPx) 
     fieldLowPx.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAdjustment::RAW_TAG :
     FIXPP_PRINT_FIELD(Adjustment) 
     fieldAdjustment.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradingSessionStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesReqID) 
     fieldTradSesReqID.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTradSesMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMethod) 
     fieldTradSesMethod.offset = pos;
     break;

   case FieldTradSesMode::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMode) 
     fieldTradSesMode.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradingSessionStatus::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesReqID) 
     fieldTradSesReqID.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTradSesMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMethod) 
     fieldTradSesMethod.offset = pos;
     break;

   case FieldTradSesMode::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMode) 
     fieldTradSesMode.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldTradSesStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesStatus) 
     fieldTradSesStatus.offset = pos;
     break;

   case FieldTradSesStatusRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesStatusRejReason) 
     fieldTradSesStatusRejReason.offset = pos;
     break;

   case FieldTradSesStartTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesStartTime) 
     fieldTradSesStartTime.offset = pos;
     break;

   case FieldTradSesOpenTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesOpenTime) 
     fieldTradSesOpenTime.offset = pos;
     break;

   case FieldTradSesPreCloseTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesPreCloseTime) 
     fieldTradSesPreCloseTime.offset = pos;
     break;

   case FieldTradSesCloseTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesCloseTime) 
     fieldTradSesCloseTime.offset = pos;
     break;

   case FieldTradSesEndTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesEndTime) 
     fieldTradSesEndTime.offset = pos;
     break;

   case FieldTotalVolumeTraded::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalVolumeTraded) 
     fieldTotalVolumeTraded.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMassQuote::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDefBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(DefBidSize) 
     fieldDefBidSize.offset = pos;
     break;

   case FieldDefOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(DefOfferSize) 
     fieldDefOfferSize.offset = pos;
     break;

   case FieldNoQuoteSets::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteSets) 
     fieldNoQuoteSets.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::scan( groupsQuoteSets, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageBusinessMessageReject::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(RefSeqNum) 
     fieldRefSeqNum.offset = pos;
     break;

   case FieldRefMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(RefMsgType) 
     fieldRefMsgType.offset = pos;
     break;

   case FieldBusinessRejectRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(BusinessRejectRefID) 
     fieldBusinessRejectRefID.offset = pos;
     break;

   case FieldBusinessRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(BusinessRejectReason) 
     fieldBusinessRejectReason.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageBidRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldBidRequestTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidRequestTransType) 
     fieldBidRequestTransType.offset = pos;
     break;

   case FieldListName::RAW_TAG :
     FIXPP_PRINT_FIELD(ListName) 
     fieldListName.offset = pos;
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     fieldTotNoRelatedSym.offset = pos;
     break;

   case FieldBidType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidType) 
     fieldBidType.offset = pos;
     break;

   case FieldNumTickets::RAW_TAG :
     FIXPP_PRINT_FIELD(NumTickets) 
     fieldNumTickets.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldSideValue1::RAW_TAG :
     FIXPP_PRINT_FIELD(SideValue1) 
     fieldSideValue1.offset = pos;
     break;

   case FieldSideValue2::RAW_TAG :
     FIXPP_PRINT_FIELD(SideValue2) 
     fieldSideValue2.offset = pos;
     break;

   case FieldNoBidDescriptors::RAW_TAG :
     FIXPP_PRINT_FIELD(NoBidDescriptors) 
     fieldNoBidDescriptors.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidDescriptors::scan( groupsBidDescriptors, fix+pos, len - pos );
     break;

   case FieldNoBidComponents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoBidComponents) 
     fieldNoBidComponents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::scan( groupsBidComponents, fix+pos, len - pos );
     break;

   case FieldLiquidityIndType::RAW_TAG :
     FIXPP_PRINT_FIELD(LiquidityIndType) 
     fieldLiquidityIndType.offset = pos;
     break;

   case FieldWtAverageLiquidity::RAW_TAG :
     FIXPP_PRINT_FIELD(WtAverageLiquidity) 
     fieldWtAverageLiquidity.offset = pos;
     break;

   case FieldExchangeForPhysical::RAW_TAG :
     FIXPP_PRINT_FIELD(ExchangeForPhysical) 
     fieldExchangeForPhysical.offset = pos;
     break;

   case FieldOutMainCntryUIndex::RAW_TAG :
     FIXPP_PRINT_FIELD(OutMainCntryUIndex) 
     fieldOutMainCntryUIndex.offset = pos;
     break;

   case FieldCrossPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPercent) 
     fieldCrossPercent.offset = pos;
     break;

   case FieldProgRptReqs::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgRptReqs) 
     fieldProgRptReqs.offset = pos;
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgPeriodInterval) 
     fieldProgPeriodInterval.offset = pos;
     break;

   case FieldIncTaxInd::RAW_TAG :
     FIXPP_PRINT_FIELD(IncTaxInd) 
     fieldIncTaxInd.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldNumBidders::RAW_TAG :
     FIXPP_PRINT_FIELD(NumBidders) 
     fieldNumBidders.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldBidTradeType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidTradeType) 
     fieldBidTradeType.offset = pos;
     break;

   case FieldBasisPxType::RAW_TAG :
     FIXPP_PRINT_FIELD(BasisPxType) 
     fieldBasisPxType.offset = pos;
     break;

   case FieldStrikeTime::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeTime) 
     fieldStrikeTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageBidResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldNoBidComponents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoBidComponents) 
     fieldNoBidComponents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::scan( groupsBidComponents, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListStrikePrice::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldTotNoStrikes::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoStrikes) 
     fieldTotNoStrikes.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoStrikes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStrikes) 
     fieldNoStrikes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStrikes::scan( groupsStrikes, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageXMLnonFIX::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRegistrationInstructions::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldRegistTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistTransType) 
     fieldRegistTransType.offset = pos;
     break;

   case FieldRegistRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRefID) 
     fieldRegistRefID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldRegistAcctType::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistAcctType) 
     fieldRegistAcctType.offset = pos;
     break;

   case FieldTaxAdvantageType::RAW_TAG :
     FIXPP_PRINT_FIELD(TaxAdvantageType) 
     fieldTaxAdvantageType.offset = pos;
     break;

   case FieldOwnershipType::RAW_TAG :
     FIXPP_PRINT_FIELD(OwnershipType) 
     fieldOwnershipType.offset = pos;
     break;

   case FieldNoRegistDtls::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRegistDtls) 
     fieldNoRegistDtls.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRegistDtls::scan( groupsRegistDtls, fix+pos, len - pos );
     break;

   case FieldNoDistribInsts::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDistribInsts) 
     fieldNoDistribInsts.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDistribInsts::scan( groupsDistribInsts, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRegistrationInstructionsResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldRegistTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistTransType) 
     fieldRegistTransType.offset = pos;
     break;

   case FieldRegistRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRefID) 
     fieldRegistRefID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldRegistStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistStatus) 
     fieldRegistStatus.offset = pos;
     break;

   case FieldRegistRejReasonCode::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRejReasonCode) 
     fieldRegistRejReasonCode.offset = pos;
     break;

   case FieldRegistRejReasonText::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRejReasonText) 
     fieldRegistRejReasonText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderMassCancelRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelRequestType) 
     fieldMassCancelRequestType.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderMassCancelReport::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelRequestType) 
     fieldMassCancelRequestType.offset = pos;
     break;

   case FieldMassCancelResponse::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelResponse) 
     fieldMassCancelResponse.offset = pos;
     break;

   case FieldMassCancelRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelRejectReason) 
     fieldMassCancelRejectReason.offset = pos;
     break;

   case FieldTotalAffectedOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalAffectedOrders) 
     fieldTotalAffectedOrders.offset = pos;
     break;

   case FieldNoAffectedOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAffectedOrders) 
     fieldNoAffectedOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAffectedOrders::scan( groupsAffectedOrders, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderCross::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldCrossPrioritization::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     fieldCrossPrioritization.offset = pos;
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCrossOrderCancelReplaceRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldOrigCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     fieldOrigCrossID.offset = pos;
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldCrossPrioritization::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     fieldCrossPrioritization.offset = pos;
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCrossOrderCancelRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldOrigCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     fieldOrigCrossID.offset = pos;
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldCrossPrioritization::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     fieldCrossPrioritization.offset = pos;
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityTypeRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityTypes::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityResponseType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseType) 
     fieldSecurityResponseType.offset = pos;
     break;

   case FieldTotNoSecurityTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoSecurityTypes) 
     fieldTotNoSecurityTypes.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoSecurityTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityTypes) 
     fieldNoSecurityTypes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityTypes::scan( groupsSecurityTypes, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityListRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityListRequestType) 
     fieldSecurityListRequestType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityList::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityRequestResult) 
     fieldSecurityRequestResult.offset = pos;
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     fieldTotNoRelatedSym.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageDerivativeSecurityListRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityListRequestType) 
     fieldSecurityListRequestType.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageDerivativeSecurityList::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityRequestResult) 
     fieldSecurityRequestResult.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     fieldTotNoRelatedSym.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderMultileg::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegRptTypeReq) 
     fieldMultiLegRptTypeReq.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMultilegOrderCancelReplace::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegRptTypeReq) 
     fieldMultiLegRptTypeReq.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReportRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     fieldTradeRequestID.offset = pos;
     break;

   case FieldTradeRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestType) 
     fieldTradeRequestType.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportID) 
     fieldTradeReportID.offset = pos;
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     fieldSecondaryTradeReportID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdType) 
     fieldTrdType.offset = pos;
     break;

   case FieldTrdSubType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdSubType) 
     fieldTrdSubType.offset = pos;
     break;

   case FieldTransferReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TransferReason) 
     fieldTransferReason.offset = pos;
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     fieldSecondaryTrdType.offset = pos;
     break;

   case FieldTradeLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     fieldTradeLinkID.offset = pos;
     break;

   case FieldTrdMatchID::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     fieldTrdMatchID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoDates::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDates) 
     fieldNoDates.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDates::scan( groupsDates, fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTimeBracket::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeBracket) 
     fieldTimeBracket.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldTradeInputSource::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeInputSource) 
     fieldTradeInputSource.offset = pos;
     break;

   case FieldTradeInputDevice::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeInputDevice) 
     fieldTradeInputDevice.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReport::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportID) 
     fieldTradeReportID.offset = pos;
     break;

   case FieldTradeReportTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportTransType) 
     fieldTradeReportTransType.offset = pos;
     break;

   case FieldTradeReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportType) 
     fieldTradeReportType.offset = pos;
     break;

   case FieldTradeRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     fieldTradeRequestID.offset = pos;
     break;

   case FieldTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdType) 
     fieldTrdType.offset = pos;
     break;

   case FieldTrdSubType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdSubType) 
     fieldTrdSubType.offset = pos;
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     fieldSecondaryTrdType.offset = pos;
     break;

   case FieldTransferReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TransferReason) 
     fieldTransferReason.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumTradeReports) 
     fieldTotNumTradeReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportRefID) 
     fieldTradeReportRefID.offset = pos;
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportRefID) 
     fieldSecondaryTradeReportRefID.offset = pos;
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     fieldSecondaryTradeReportID.offset = pos;
     break;

   case FieldTradeLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     fieldTradeLinkID.offset = pos;
     break;

   case FieldTrdMatchID::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     fieldTrdMatchID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldSecondaryExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     fieldSecondaryExecID.offset = pos;
     break;

   case FieldExecRestatementReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecRestatementReason) 
     fieldExecRestatementReason.offset = pos;
     break;

   case FieldPreviouslyReported::RAW_TAG :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     fieldPreviouslyReported.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldUnderlyingTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingTradingSessionID) 
     fieldUnderlyingTradingSessionID.offset = pos;
     break;

   case FieldUnderlyingTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingTradingSessionSubID) 
     fieldUnderlyingTradingSessionSubID.offset = pos;
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldLastParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastParPx) 
     fieldLastParPx.offset = pos;
     break;

   case FieldLastSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(LastSpotRate) 
     fieldLastSpotRate.offset = pos;
     break;

   case FieldLastForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(LastForwardPoints) 
     fieldLastForwardPoints.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldAvgPxIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxIndicator) 
     fieldAvgPxIndicator.offset = pos;
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldTradeLegRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLegRefID) 
     fieldTradeLegRefID.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldMatchType::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchType) 
     fieldMatchType.offset = pos;
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     fieldCopyMsgIndicator.offset = pos;
     break;

   case FieldPublishTrdIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(PublishTrdIndicator) 
     fieldPublishTrdIndicator.offset = pos;
     break;

   case FieldShortSaleReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ShortSaleReason) 
     fieldShortSaleReason.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderMassStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMassStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MassStatusReqID) 
     fieldMassStatusReqID.offset = pos;
     break;

   case FieldMassStatusReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(MassStatusReqType) 
     fieldMassStatusReqType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteRequestReject::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldRFQReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(RFQReqID) 
     fieldRFQReqID.offset = pos;
     break;

   case FieldQuoteRequestRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRequestRejectReason) 
     fieldQuoteRequestRejectReason.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRFQRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRFQReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(RFQReqID) 
     fieldRFQReqID.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteStatusReport::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatusReqID) 
     fieldQuoteStatusReqID.offset = pos;
     break;

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     fieldNoQuoteQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::scan( groupsQuoteQualifiers, fix+pos, len - pos );
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(BidPx) 
     fieldBidPx.offset = pos;
     break;

   case FieldOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferPx) 
     fieldOfferPx.offset = pos;
     break;

   case FieldMktBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktBidPx) 
     fieldMktBidPx.offset = pos;
     break;

   case FieldMktOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     fieldMktOfferPx.offset = pos;
     break;

   case FieldMinBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinBidSize) 
     fieldMinBidSize.offset = pos;
     break;

   case FieldBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSize) 
     fieldBidSize.offset = pos;
     break;

   case FieldMinOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     fieldMinOfferSize.offset = pos;
     break;

   case FieldOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSize) 
     fieldOfferSize.offset = pos;
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldBidSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     fieldBidSpotRate.offset = pos;
     break;

   case FieldOfferSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     fieldOfferSpotRate.offset = pos;
     break;

   case FieldBidForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     fieldBidForwardPoints.offset = pos;
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     fieldOfferForwardPoints.offset = pos;
     break;

   case FieldMidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MidPx) 
     fieldMidPx.offset = pos;
     break;

   case FieldBidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(BidYield) 
     fieldBidYield.offset = pos;
     break;

   case FieldMidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(MidYield) 
     fieldMidYield.offset = pos;
     break;

   case FieldOfferYield::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferYield) 
     fieldOfferYield.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     fieldBidForwardPoints2.offset = pos;
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     fieldOfferForwardPoints2.offset = pos;
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     fieldSettlCurrBidFxRate.offset = pos;
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     fieldSettlCurrOfferFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldQuoteStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatus) 
     fieldQuoteStatus.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteRespType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespType) 
     fieldQuoteRespType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     fieldNoQuoteQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::scan( groupsQuoteQualifiers, fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(BidPx) 
     fieldBidPx.offset = pos;
     break;

   case FieldOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferPx) 
     fieldOfferPx.offset = pos;
     break;

   case FieldMktBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktBidPx) 
     fieldMktBidPx.offset = pos;
     break;

   case FieldMktOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     fieldMktOfferPx.offset = pos;
     break;

   case FieldMinBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinBidSize) 
     fieldMinBidSize.offset = pos;
     break;

   case FieldBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSize) 
     fieldBidSize.offset = pos;
     break;

   case FieldMinOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     fieldMinOfferSize.offset = pos;
     break;

   case FieldOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSize) 
     fieldOfferSize.offset = pos;
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldBidSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     fieldBidSpotRate.offset = pos;
     break;

   case FieldOfferSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     fieldOfferSpotRate.offset = pos;
     break;

   case FieldBidForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     fieldBidForwardPoints.offset = pos;
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     fieldOfferForwardPoints.offset = pos;
     break;

   case FieldMidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MidPx) 
     fieldMidPx.offset = pos;
     break;

   case FieldBidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(BidYield) 
     fieldBidYield.offset = pos;
     break;

   case FieldMidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(MidYield) 
     fieldMidYield.offset = pos;
     break;

   case FieldOfferYield::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferYield) 
     fieldOfferYield.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     fieldBidForwardPoints2.offset = pos;
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     fieldOfferForwardPoints2.offset = pos;
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     fieldSettlCurrBidFxRate.offset = pos;
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     fieldSettlCurrOfferFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageConfirmation::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmID) 
     fieldConfirmID.offset = pos;
     break;

   case FieldConfirmRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmRefID) 
     fieldConfirmRefID.offset = pos;
     break;

   case FieldConfirmReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmReqID) 
     fieldConfirmReqID.offset = pos;
     break;

   case FieldConfirmTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmTransType) 
     fieldConfirmTransType.offset = pos;
     break;

   case FieldConfirmType::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmType) 
     fieldConfirmType.offset = pos;
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     fieldCopyMsgIndicator.offset = pos;
     break;

   case FieldLegalConfirm::RAW_TAG :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     fieldLegalConfirm.offset = pos;
     break;

   case FieldConfirmStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmStatus) 
     fieldConfirmStatus.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldIndividualAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(IndividualAllocID) 
     fieldIndividualAllocID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldAllocQty::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocQty) 
     fieldAllocQty.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldNoCapacities::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCapacities) 
     fieldNoCapacities.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCapacities::scan( groupsCapacities, fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccount) 
     fieldAllocAccount.offset = pos;
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     fieldAllocAcctIDSource.offset = pos;
     break;

   case FieldAllocAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccountType) 
     fieldAllocAccountType.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     fieldAvgPxPrecision.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAvgParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgParPx) 
     fieldAvgParPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldReportedPx::RAW_TAG :
     FIXPP_PRINT_FIELD(ReportedPx) 
     fieldReportedPx.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldExDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDate) 
     fieldExDate.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldMaturityNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityNetMoney) 
     fieldMaturityNetMoney.offset = pos;
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrAmt) 
     fieldSettlCurrAmt.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRate) 
     fieldSettlCurrFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldSharedCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(SharedCommission) 
     fieldSharedCommission.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessagePositionMaintenanceRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosTransType) 
     fieldPosTransType.offset = pos;
     break;

   case FieldPosMaintAction::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintAction) 
     fieldPosMaintAction.offset = pos;
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigPosReqRefID) 
     fieldOrigPosReqRefID.offset = pos;
     break;

   case FieldPosMaintRptRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptRefID) 
     fieldPosMaintRptRefID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW_TAG :
     FIXPP_PRINT_FIELD(AdjustmentType) 
     fieldAdjustmentType.offset = pos;
     break;

   case FieldContraryInstructionIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ContraryInstructionIndicator) 
     fieldContraryInstructionIndicator.offset = pos;
     break;

   case FieldPriorSpreadIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(PriorSpreadIndicator) 
     fieldPriorSpreadIndicator.offset = pos;
     break;

   case FieldThresholdAmount::RAW_TAG :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     fieldThresholdAmount.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessagePositionMaintenanceReport::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     fieldPosMaintRptID.offset = pos;
     break;

   case FieldPosTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosTransType) 
     fieldPosTransType.offset = pos;
     break;

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosMaintAction::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintAction) 
     fieldPosMaintAction.offset = pos;
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigPosReqRefID) 
     fieldOrigPosReqRefID.offset = pos;
     break;

   case FieldPosMaintStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintStatus) 
     fieldPosMaintStatus.offset = pos;
     break;

   case FieldPosMaintResult::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintResult) 
     fieldPosMaintResult.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW_TAG :
     FIXPP_PRINT_FIELD(AdjustmentType) 
     fieldAdjustmentType.offset = pos;
     break;

   case FieldThresholdAmount::RAW_TAG :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     fieldThresholdAmount.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRequestForPositions::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqType) 
     fieldPosReqType.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRequestForPositionsAck::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     fieldPosMaintRptID.offset = pos;
     break;

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNumPosReports) 
     fieldTotalNumPosReports.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldPosReqResult::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqResult) 
     fieldPosReqResult.offset = pos;
     break;

   case FieldPosReqStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqStatus) 
     fieldPosReqStatus.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessagePositionReport::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     fieldPosMaintRptID.offset = pos;
     break;

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqType) 
     fieldPosReqType.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNumPosReports) 
     fieldTotalNumPosReports.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldPosReqResult::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqResult) 
     fieldPosReqResult.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPrice) 
     fieldSettlPrice.offset = pos;
     break;

   case FieldSettlPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPriceType) 
     fieldSettlPriceType.offset = pos;
     break;

   case FieldPriorSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(PriorSettlPrice) 
     fieldPriorSettlPrice.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldRegistStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistStatus) 
     fieldRegistStatus.offset = pos;
     break;

   case FieldDeliveryDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryDate) 
     fieldDeliveryDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReportRequestAck::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     fieldTradeRequestID.offset = pos;
     break;

   case FieldTradeRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestType) 
     fieldTradeRequestType.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumTradeReports) 
     fieldTotNumTradeReports.offset = pos;
     break;

   case FieldTradeRequestResult::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestResult) 
     fieldTradeRequestResult.offset = pos;
     break;

   case FieldTradeRequestStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestStatus) 
     fieldTradeRequestStatus.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReportAck::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportID) 
     fieldTradeReportID.offset = pos;
     break;

   case FieldTradeReportTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportTransType) 
     fieldTradeReportTransType.offset = pos;
     break;

   case FieldTradeReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportType) 
     fieldTradeReportType.offset = pos;
     break;

   case FieldTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdType) 
     fieldTrdType.offset = pos;
     break;

   case FieldTrdSubType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdSubType) 
     fieldTrdSubType.offset = pos;
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     fieldSecondaryTrdType.offset = pos;
     break;

   case FieldTransferReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TransferReason) 
     fieldTransferReason.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportRefID) 
     fieldTradeReportRefID.offset = pos;
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportRefID) 
     fieldSecondaryTradeReportRefID.offset = pos;
     break;

   case FieldTrdRptStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdRptStatus) 
     fieldTrdRptStatus.offset = pos;
     break;

   case FieldTradeReportRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportRejectReason) 
     fieldTradeReportRejectReason.offset = pos;
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     fieldSecondaryTradeReportID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradeLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     fieldTradeLinkID.offset = pos;
     break;

   case FieldTrdMatchID::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     fieldTrdMatchID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldSecondaryExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     fieldSecondaryExecID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationReport::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportID) 
     fieldAllocReportID.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldAllocTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocTransType) 
     fieldAllocTransType.offset = pos;
     break;

   case FieldAllocReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportRefID) 
     fieldAllocReportRefID.offset = pos;
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocCancReplaceReason) 
     fieldAllocCancReplaceReason.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldAllocReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportType) 
     fieldAllocReportType.offset = pos;
     break;

   case FieldAllocStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocStatus) 
     fieldAllocStatus.offset = pos;
     break;

   case FieldAllocRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     fieldAllocRejCode.offset = pos;
     break;

   case FieldRefAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(RefAllocID) 
     fieldRefAllocID.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldAllocLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkID) 
     fieldAllocLinkID.offset = pos;
     break;

   case FieldAllocLinkType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkType) 
     fieldAllocLinkType.offset = pos;
     break;

   case FieldBookingRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingRefID) 
     fieldBookingRefID.offset = pos;
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocNoOrdersType) 
     fieldAllocNoOrdersType.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW_TAG :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     fieldPreviouslyReported.offset = pos;
     break;

   case FieldReversalIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ReversalIndicator) 
     fieldReversalIndicator.offset = pos;
     break;

   case FieldMatchType::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchType) 
     fieldMatchType.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldAvgParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgParPx) 
     fieldAvgParPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     fieldAvgPxPrecision.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(AutoAcceptIndicator) 
     fieldAutoAcceptIndicator.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalAccruedInterestAmt) 
     fieldTotalAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldLegalConfirm::RAW_TAG :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     fieldLegalConfirm.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldTotNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoAllocs) 
     fieldTotNoAllocs.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationReportAck::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportID) 
     fieldAllocReportID.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAllocStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocStatus) 
     fieldAllocStatus.offset = pos;
     break;

   case FieldAllocRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     fieldAllocRejCode.offset = pos;
     break;

   case FieldAllocReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportType) 
     fieldAllocReportType.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageConfirmationAck::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmID) 
     fieldConfirmID.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAffirmStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AffirmStatus) 
     fieldAffirmStatus.offset = pos;
     break;

   case FieldConfirmRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmRejReason) 
     fieldConfirmRejReason.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSettlementInstructionRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstReqID) 
     fieldSettlInstReqID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccount) 
     fieldAllocAccount.offset = pos;
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     fieldAllocAcctIDSource.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldLastUpdateTime::RAW_TAG :
     FIXPP_PRINT_FIELD(LastUpdateTime) 
     fieldLastUpdateTime.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAssignmentReport::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAsgnRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(AsgnRptID) 
     fieldAsgnRptID.offset = pos;
     break;

   case FieldTotNumAssignmentReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumAssignmentReports) 
     fieldTotNumAssignmentReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldThresholdAmount::RAW_TAG :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     fieldThresholdAmount.offset = pos;
     break;

   case FieldSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPrice) 
     fieldSettlPrice.offset = pos;
     break;

   case FieldSettlPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPriceType) 
     fieldSettlPriceType.offset = pos;
     break;

   case FieldUnderlyingSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSettlPrice) 
     fieldUnderlyingSettlPrice.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldAssignmentMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(AssignmentMethod) 
     fieldAssignmentMethod.offset = pos;
     break;

   case FieldAssignmentUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(AssignmentUnit) 
     fieldAssignmentUnit.offset = pos;
     break;

   case FieldOpenInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(OpenInterest) 
     fieldOpenInterest.offset = pos;
     break;

   case FieldExerciseMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(ExerciseMethod) 
     fieldExerciseMethod.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollReqID) 
     fieldCollReqID.offset = pos;
     break;

   case FieldCollAsgnReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     fieldCollAsgnReason.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralAssignment::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollAsgnID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnID) 
     fieldCollAsgnID.offset = pos;
     break;

   case FieldCollReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollReqID) 
     fieldCollReqID.offset = pos;
     break;

   case FieldCollAsgnReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     fieldCollAsgnReason.offset = pos;
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnTransType) 
     fieldCollAsgnTransType.offset = pos;
     break;

   case FieldCollAsgnRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnRefID) 
     fieldCollAsgnRefID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollRespID) 
     fieldCollRespID.offset = pos;
     break;

   case FieldCollAsgnID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnID) 
     fieldCollAsgnID.offset = pos;
     break;

   case FieldCollReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollReqID) 
     fieldCollReqID.offset = pos;
     break;

   case FieldCollAsgnReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     fieldCollAsgnReason.offset = pos;
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnTransType) 
     fieldCollAsgnTransType.offset = pos;
     break;

   case FieldCollAsgnRespType::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnRespType) 
     fieldCollAsgnRespType.offset = pos;
     break;

   case FieldCollAsgnRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnRejectReason) 
     fieldCollAsgnRejectReason.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralReport::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollRptID) 
     fieldCollRptID.offset = pos;
     break;

   case FieldCollInquiryID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     fieldCollInquiryID.offset = pos;
     break;

   case FieldCollStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(CollStatus) 
     fieldCollStatus.offset = pos;
     break;

   case FieldTotNumReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumReports) 
     fieldTotNumReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralInquiry::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     fieldCollInquiryID.offset = pos;
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCollInquiryQualifier) 
     fieldNoCollInquiryQualifier.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::scan( groupsCollInquiryQualifier, fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkRequestType) 
     fieldNetworkRequestType.offset = pos;
     break;

   case FieldNetworkRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkRequestID) 
     fieldNetworkRequestID.offset = pos;
     break;

   case FieldNoCompIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCompIDs) 
     fieldNoCompIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::scan( groupsCompIDs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkStatusResponseType::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkStatusResponseType) 
     fieldNetworkStatusResponseType.offset = pos;
     break;

   case FieldNetworkRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkRequestID) 
     fieldNetworkRequestID.offset = pos;
     break;

   case FieldNetworkResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkResponseID) 
     fieldNetworkResponseID.offset = pos;
     break;

   case FieldLastNetworkResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(LastNetworkResponseID) 
     fieldLastNetworkResponseID.offset = pos;
     break;

   case FieldNoCompIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCompIDs) 
     fieldNoCompIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::scan( groupsCompIDs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageUserRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(UserRequestID) 
     fieldUserRequestID.offset = pos;
     break;

   case FieldUserRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(UserRequestType) 
     fieldUserRequestType.offset = pos;
     break;

   case FieldUsername::RAW_TAG :
     FIXPP_PRINT_FIELD(Username) 
     fieldUsername.offset = pos;
     break;

   case FieldPassword::RAW_TAG :
     FIXPP_PRINT_FIELD(Password) 
     fieldPassword.offset = pos;
     break;

   case FieldNewPassword::RAW_TAG :
     FIXPP_PRINT_FIELD(NewPassword) 
     fieldNewPassword.offset = pos;
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageUserResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(UserRequestID) 
     fieldUserRequestID.offset = pos;
     break;

   case FieldUsername::RAW_TAG :
     FIXPP_PRINT_FIELD(Username) 
     fieldUsername.offset = pos;
     break;

   case FieldUserStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(UserStatus) 
     fieldUserStatus.offset = pos;
     break;

   case FieldUserStatusText::RAW_TAG :
     FIXPP_PRINT_FIELD(UserStatusText) 
     fieldUserStatusText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralInquiryAck::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     fieldCollInquiryID.offset = pos;
     break;

   case FieldCollInquiryStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryStatus) 
     fieldCollInquiryStatus.offset = pos;
     break;

   case FieldCollInquiryResult::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryResult) 
     fieldCollInquiryResult.offset = pos;
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCollInquiryQualifier) 
     fieldNoCollInquiryQualifier.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::scan( groupsCollInquiryQualifier, fix+pos, len - pos );
     break;

   case FieldTotNumReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumReports) 
     fieldTotNumReports.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageConfirmationRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmReqID) 
     fieldConfirmReqID.offset = pos;
     break;

   case FieldConfirmType::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmType) 
     fieldConfirmType.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldIndividualAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(IndividualAllocID) 
     fieldIndividualAllocID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAllocAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccount) 
     fieldAllocAccount.offset = pos;
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     fieldAllocAcctIDSource.offset = pos;
     break;

   case FieldAllocAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccountType) 
     fieldAllocAccountType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

// -------------------------------------- scanSafely ----------------------------------------

offset_t MessageHeader::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldBeginString::RAW_TAG :
     FIXPP_PRINT_FIELD(BeginString) 
     if( fieldBeginString.offset < 0 ) fieldBeginString.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBodyLength::RAW_TAG :
     FIXPP_PRINT_FIELD(BodyLength) 
     if( fieldBodyLength.offset < 0 ) fieldBodyLength.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(MsgType) 
     if( fieldMsgType.offset < 0 ) {
       fieldMsgType.offset = pos;
       if( MsgTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSenderCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderCompID) 
     if( fieldSenderCompID.offset < 0 ) fieldSenderCompID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetCompID) 
     if( fieldTargetCompID.offset < 0 ) fieldTargetCompID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOnBehalfOfCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(OnBehalfOfCompID) 
     if( fieldOnBehalfOfCompID.offset < 0 ) fieldOnBehalfOfCompID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliverToCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliverToCompID) 
     if( fieldDeliverToCompID.offset < 0 ) fieldDeliverToCompID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecureDataLen::RAW_TAG :
     FIXPP_PRINT_FIELD(SecureDataLen) 
     if( fieldSecureDataLen.offset < 0 ) fieldSecureDataLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecureData::RAW_TAG :
     FIXPP_PRINT_FIELD(SecureData) 
     if( fieldSecureData.offset < 0 ) fieldSecureData.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMsgSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(MsgSeqNum) 
     if( fieldMsgSeqNum.offset < 0 ) fieldMsgSeqNum.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSenderSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderSubID) 
     if( fieldSenderSubID.offset < 0 ) fieldSenderSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSenderLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderLocationID) 
     if( fieldSenderLocationID.offset < 0 ) fieldSenderLocationID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetSubID) 
     if( fieldTargetSubID.offset < 0 ) fieldTargetSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetLocationID) 
     if( fieldTargetLocationID.offset < 0 ) fieldTargetLocationID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOnBehalfOfSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(OnBehalfOfSubID) 
     if( fieldOnBehalfOfSubID.offset < 0 ) fieldOnBehalfOfSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOnBehalfOfLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(OnBehalfOfLocationID) 
     if( fieldOnBehalfOfLocationID.offset < 0 ) fieldOnBehalfOfLocationID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliverToSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliverToSubID) 
     if( fieldDeliverToSubID.offset < 0 ) fieldDeliverToSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliverToLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliverToLocationID) 
     if( fieldDeliverToLocationID.offset < 0 ) fieldDeliverToLocationID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPossDupFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(PossDupFlag) 
     if( fieldPossDupFlag.offset < 0 ) {
       fieldPossDupFlag.offset = pos;
       if( PossDupFlagEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPossResend::RAW_TAG :
     FIXPP_PRINT_FIELD(PossResend) 
     if( fieldPossResend.offset < 0 ) {
       fieldPossResend.offset = pos;
       if( PossResendEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSendingTime::RAW_TAG :
     FIXPP_PRINT_FIELD(SendingTime) 
     if( fieldSendingTime.offset < 0 ) fieldSendingTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigSendingTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigSendingTime) 
     if( fieldOrigSendingTime.offset < 0 ) fieldOrigSendingTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldXmlDataLen::RAW_TAG :
     FIXPP_PRINT_FIELD(XmlDataLen) 
     if( fieldXmlDataLen.offset < 0 ) fieldXmlDataLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldXmlData::RAW_TAG :
     FIXPP_PRINT_FIELD(XmlData) 
     if( fieldXmlData.offset < 0 ) fieldXmlData.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMessageEncoding::RAW_TAG :
     FIXPP_PRINT_FIELD(MessageEncoding) 
     if( fieldMessageEncoding.offset < 0 ) {
       fieldMessageEncoding.offset = pos;
       if( MessageEncodingEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastMsgSeqNumProcessed::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMsgSeqNumProcessed) 
     if( fieldLastMsgSeqNumProcessed.offset < 0 ) fieldLastMsgSeqNumProcessed.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoHops::RAW_TAG :
     FIXPP_PRINT_FIELD(NoHops) 
     if( fieldNoHops.offset < 0 ){
       fieldNoHops.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupHops::scanSafely( groupsHops, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageHeartbeat::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TestReqID) 
     if( fieldTestReqID.offset < 0 ) fieldTestReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTestRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TestReqID) 
     if( fieldTestReqID.offset < 0 ) fieldTestReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageResendRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldBeginSeqNo::RAW_TAG :
     FIXPP_PRINT_FIELD(BeginSeqNo) 
     if( fieldBeginSeqNo.offset < 0 ) fieldBeginSeqNo.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndSeqNo::RAW_TAG :
     FIXPP_PRINT_FIELD(EndSeqNo) 
     if( fieldEndSeqNo.offset < 0 ) fieldEndSeqNo.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageReject::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(RefSeqNum) 
     if( fieldRefSeqNum.offset < 0 ) fieldRefSeqNum.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRefTagID::RAW_TAG :
     FIXPP_PRINT_FIELD(RefTagID) 
     if( fieldRefTagID.offset < 0 ) fieldRefTagID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRefMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(RefMsgType) 
     if( fieldRefMsgType.offset < 0 ) fieldRefMsgType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSessionRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(SessionRejectReason) 
     if( fieldSessionRejectReason.offset < 0 ) {
       fieldSessionRejectReason.offset = pos;
       if( SessionRejectReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSequenceReset::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldGapFillFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(GapFillFlag) 
     if( fieldGapFillFlag.offset < 0 ) {
       fieldGapFillFlag.offset = pos;
       if( GapFillFlagEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNewSeqNo::RAW_TAG :
     FIXPP_PRINT_FIELD(NewSeqNo) 
     if( fieldNewSeqNo.offset < 0 ) fieldNewSeqNo.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageLogout::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageIOI::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     if( fieldIOIID.offset < 0 ) fieldIOIID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIOITransType::RAW_TAG :
     FIXPP_PRINT_FIELD(IOITransType) 
     if( fieldIOITransType.offset < 0 ) {
       fieldIOITransType.offset = pos;
       if( IOITransTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldIOIRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIRefID) 
     if( fieldIOIRefID.offset < 0 ) fieldIOIRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     if( fieldCashOrderQty.offset < 0 ) fieldCashOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     if( fieldOrderPercent.offset < 0 ) fieldOrderPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     if( fieldRoundingDirection.offset < 0 ) {
       fieldRoundingDirection.offset = pos;
       if( RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     if( fieldRoundingModulus.offset < 0 ) fieldRoundingModulus.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIOIQty::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIQty) 
     if( fieldIOIQty.offset < 0 ) {
       fieldIOIQty.offset = pos;
       if( IOIQtyEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     if( fieldValidUntilTime.offset < 0 ) fieldValidUntilTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIOIQltyInd::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIQltyInd) 
     if( fieldIOIQltyInd.offset < 0 ) {
       fieldIOIQltyInd.offset = pos;
       if( IOIQltyIndEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldIOINaturalFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(IOINaturalFlag) 
     if( fieldIOINaturalFlag.offset < 0 ) {
       fieldIOINaturalFlag.offset = pos;
       if( IOINaturalFlagEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoIOIQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoIOIQualifiers) 
     if( fieldNoIOIQualifiers.offset < 0 ){
       fieldNoIOIQualifiers.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupIOIQualifiers::scanSafely( groupsIOIQualifiers, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldURLLink::RAW_TAG :
     FIXPP_PRINT_FIELD(URLLink) 
     if( fieldURLLink.offset < 0 ) fieldURLLink.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     if( fieldNoRoutingIDs.offset < 0 ){
       fieldNoRoutingIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupRoutingIDs::scanSafely( groupsRoutingIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAdvertisement::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldAdvId::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvId) 
     if( fieldAdvId.offset < 0 ) fieldAdvId.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAdvTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvTransType) 
     if( fieldAdvTransType.offset < 0 ) {
       fieldAdvTransType.offset = pos;
       if( AdvTransTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAdvRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvRefID) 
     if( fieldAdvRefID.offset < 0 ) fieldAdvRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAdvSide::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvSide) 
     if( fieldAdvSide.offset < 0 ) {
       fieldAdvSide.offset = pos;
       if( AdvSideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     if( fieldQuantity.offset < 0 ) fieldQuantity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldURLLink::RAW_TAG :
     FIXPP_PRINT_FIELD(URLLink) 
     if( fieldURLLink.offset < 0 ) fieldURLLink.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     if( fieldLastMkt.offset < 0 ) fieldLastMkt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageExecutionReport::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     if( fieldSecondaryOrderID.offset < 0 ) fieldSecondaryOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     if( fieldSecondaryExecID.offset < 0 ) fieldSecondaryExecID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     if( fieldOrigClOrdID.offset < 0 ) fieldOrigClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     if( fieldClOrdLinkID.offset < 0 ) fieldClOrdLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     if( fieldQuoteRespID.offset < 0 ) fieldQuoteRespID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatusReqID) 
     if( fieldOrdStatusReqID.offset < 0 ) fieldOrdStatusReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMassStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MassStatusReqID) 
     if( fieldMassStatusReqID.offset < 0 ) fieldMassStatusReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNumReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumReports) 
     if( fieldTotNumReports.offset < 0 ) fieldTotNumReports.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     if( fieldLastRptRequested.offset < 0 ) fieldLastRptRequested.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     if( fieldTradeOriginationDate.offset < 0 ) fieldTradeOriginationDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoContraBrokers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoContraBrokers) 
     if( fieldNoContraBrokers.offset < 0 ){
       fieldNoContraBrokers.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupContraBrokers::scanSafely( groupsContraBrokers, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     if( fieldListID.offset < 0 ) fieldListID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     if( fieldCrossID.offset < 0 ) fieldCrossID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     if( fieldOrigCrossID.offset < 0 ) fieldOrigCrossID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     if( fieldCrossType.offset < 0 ) {
       fieldCrossType.offset = pos;
       if( CrossTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     if( fieldExecID.offset < 0 ) fieldExecID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecRefID) 
     if( fieldExecRefID.offset < 0 ) fieldExecRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     if( fieldExecType.offset < 0 ) {
       fieldExecType.offset = pos;
       if( ExecTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     if( fieldOrdStatus.offset < 0 ) {
       fieldOrdStatus.offset = pos;
       if( OrdStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldWorkingIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(WorkingIndicator) 
     if( fieldWorkingIndicator.offset < 0 ) {
       fieldWorkingIndicator.offset = pos;
       if( WorkingIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdRejReason) 
     if( fieldOrdRejReason.offset < 0 ) {
       fieldOrdRejReason.offset = pos;
       if( OrdRejReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecRestatementReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecRestatementReason) 
     if( fieldExecRestatementReason.offset < 0 ) {
       fieldExecRestatementReason.offset = pos;
       if( ExecRestatementReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     if( fieldDayBookingInst.offset < 0 ) {
       fieldDayBookingInst.offset = pos;
       if( DayBookingInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     if( fieldBookingUnit.offset < 0 ) {
       fieldBookingUnit.offset = pos;
       if( BookingUnitEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     if( fieldPreallocMethod.offset < 0 ) {
       fieldPreallocMethod.offset = pos;
       if( PreallocMethodEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     if( fieldCashMargin.offset < 0 ) {
       fieldCashMargin.offset = pos;
       if( CashMarginEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     if( fieldClearingFeeIndicator.offset < 0 ) {
       fieldClearingFeeIndicator.offset = pos;
       if( ClearingFeeIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     if( fieldCashOrderQty.offset < 0 ) fieldCashOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     if( fieldOrderPercent.offset < 0 ) fieldOrderPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     if( fieldRoundingDirection.offset < 0 ) {
       fieldRoundingDirection.offset = pos;
       if( RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     if( fieldRoundingModulus.offset < 0 ) fieldRoundingModulus.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     if( fieldOrdType.offset < 0 ) {
       fieldOrdType.offset = pos;
       if( OrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     if( fieldStopPx.offset < 0 ) fieldStopPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     if( fieldPegOffsetValue.offset < 0 ) fieldPegOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     if( fieldPegMoveType.offset < 0 ) {
       fieldPegMoveType.offset = pos;
       if( PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     if( fieldPegOffsetType.offset < 0 ) {
       fieldPegOffsetType.offset = pos;
       if( PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     if( fieldPegLimitType.offset < 0 ) {
       fieldPegLimitType.offset = pos;
       if( PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     if( fieldPegRoundDirection.offset < 0 ) {
       fieldPegRoundDirection.offset = pos;
       if( PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     if( fieldPegScope.offset < 0 ) {
       fieldPegScope.offset = pos;
       if( PegScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     if( fieldDiscretionInst.offset < 0 ) {
       fieldDiscretionInst.offset = pos;
       if( DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     if( fieldDiscretionOffsetValue.offset < 0 ) fieldDiscretionOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     if( fieldDiscretionMoveType.offset < 0 ) {
       fieldDiscretionMoveType.offset = pos;
       if( DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     if( fieldDiscretionOffsetType.offset < 0 ) {
       fieldDiscretionOffsetType.offset = pos;
       if( DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     if( fieldDiscretionLimitType.offset < 0 ) {
       fieldDiscretionLimitType.offset = pos;
       if( DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     if( fieldDiscretionRoundDirection.offset < 0 ) {
       fieldDiscretionRoundDirection.offset = pos;
       if( DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     if( fieldDiscretionScope.offset < 0 ) {
       fieldDiscretionScope.offset = pos;
       if( DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPeggedPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(PeggedPrice) 
     if( fieldPeggedPrice.offset < 0 ) fieldPeggedPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionPrice) 
     if( fieldDiscretionPrice.offset < 0 ) fieldDiscretionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     if( fieldTargetStrategy.offset < 0 ) {
       fieldTargetStrategy.offset = pos;
       if( TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     if( fieldTargetStrategyParameters.offset < 0 ) fieldTargetStrategyParameters.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     if( fieldParticipationRate.offset < 0 ) fieldParticipationRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategyPerformance::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyPerformance) 
     if( fieldTargetStrategyPerformance.offset < 0 ) fieldTargetStrategyPerformance.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     if( fieldComplianceID.offset < 0 ) fieldComplianceID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     if( fieldSolicitedFlag.offset < 0 ) {
       fieldSolicitedFlag.offset = pos;
       if( SolicitedFlagEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     if( fieldTimeInForce.offset < 0 ) {
       fieldTimeInForce.offset = pos;
       if( TimeInForceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     if( fieldEffectiveTime.offset < 0 ) fieldEffectiveTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     if( fieldExpireDate.offset < 0 ) fieldExpireDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     if( fieldExpireTime.offset < 0 ) fieldExpireTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     if( fieldExecInst.offset < 0 ) {
       fieldExecInst.offset = pos;
       if( ExecInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     if( fieldOrderCapacity.offset < 0 ) {
       fieldOrderCapacity.offset = pos;
       if( OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     if( fieldOrderRestrictions.offset < 0 ) {
       fieldOrderRestrictions.offset = pos;
       if( OrderRestrictionsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     if( fieldCustOrderCapacity.offset < 0 ) {
       fieldCustOrderCapacity.offset = pos;
       if( CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     if( fieldLastQty.offset < 0 ) fieldLastQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLastQty) 
     if( fieldUnderlyingLastQty.offset < 0 ) fieldUnderlyingLastQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     if( fieldLastPx.offset < 0 ) fieldLastPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLastPx) 
     if( fieldUnderlyingLastPx.offset < 0 ) fieldUnderlyingLastPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastParPx) 
     if( fieldLastParPx.offset < 0 ) fieldLastParPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(LastSpotRate) 
     if( fieldLastSpotRate.offset < 0 ) fieldLastSpotRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(LastForwardPoints) 
     if( fieldLastForwardPoints.offset < 0 ) fieldLastForwardPoints.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     if( fieldLastMkt.offset < 0 ) fieldLastMkt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTimeBracket::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeBracket) 
     if( fieldTimeBracket.offset < 0 ) fieldTimeBracket.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(LastCapacity) 
     if( fieldLastCapacity.offset < 0 ) {
       fieldLastCapacity.offset = pos;
       if( LastCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldLeavesQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LeavesQty) 
     if( fieldLeavesQty.offset < 0 ) fieldLeavesQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCumQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CumQty) 
     if( fieldCumQty.offset < 0 ) fieldCumQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     if( fieldAvgPx.offset < 0 ) fieldAvgPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDayOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(DayOrderQty) 
     if( fieldDayOrderQty.offset < 0 ) fieldDayOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDayCumQty::RAW_TAG :
     FIXPP_PRINT_FIELD(DayCumQty) 
     if( fieldDayCumQty.offset < 0 ) fieldDayCumQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDayAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(DayAvgPx) 
     if( fieldDayAvgPx.offset < 0 ) fieldDayAvgPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     if( fieldGTBookingInst.offset < 0 ) {
       fieldGTBookingInst.offset = pos;
       if( GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldReportToExch::RAW_TAG :
     FIXPP_PRINT_FIELD(ReportToExch) 
     if( fieldReportToExch.offset < 0 ) {
       fieldReportToExch.offset = pos;
       if( ReportToExchEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     if( fieldCommission.offset < 0 ) fieldCommission.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     if( fieldCommType.offset < 0 ) {
       fieldCommType.offset = pos;
       if( CommTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     if( fieldCommCurrency.offset < 0 ) fieldCommCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     if( fieldFundRenewWaiv.offset < 0 ) {
       fieldFundRenewWaiv.offset = pos;
       if( FundRenewWaivEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     if( fieldGrossTradeAmt.offset < 0 ) fieldGrossTradeAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     if( fieldNumDaysInterest.offset < 0 ) fieldNumDaysInterest.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDate) 
     if( fieldExDate.offset < 0 ) fieldExDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     if( fieldAccruedInterestRate.offset < 0 ) fieldAccruedInterestRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     if( fieldAccruedInterestAmt.offset < 0 ) fieldAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     if( fieldInterestAtMaturity.offset < 0 ) fieldInterestAtMaturity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     if( fieldEndAccruedInterestAmt.offset < 0 ) fieldEndAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     if( fieldStartCash.offset < 0 ) fieldStartCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     if( fieldEndCash.offset < 0 ) fieldEndCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradedFlatSwitch::RAW_TAG :
     FIXPP_PRINT_FIELD(TradedFlatSwitch) 
     if( fieldTradedFlatSwitch.offset < 0 ) {
       fieldTradedFlatSwitch.offset = pos;
       if( TradedFlatSwitchEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBasisFeatureDate::RAW_TAG :
     FIXPP_PRINT_FIELD(BasisFeatureDate) 
     if( fieldBasisFeatureDate.offset < 0 ) fieldBasisFeatureDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBasisFeaturePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BasisFeaturePrice) 
     if( fieldBasisFeaturePrice.offset < 0 ) fieldBasisFeaturePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     if( fieldConcession.offset < 0 ) fieldConcession.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     if( fieldTotalTakedown.offset < 0 ) fieldTotalTakedown.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     if( fieldNetMoney.offset < 0 ) fieldNetMoney.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrAmt) 
     if( fieldSettlCurrAmt.offset < 0 ) fieldSettlCurrAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     if( fieldSettlCurrency.offset < 0 ) fieldSettlCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRate) 
     if( fieldSettlCurrFxRate.offset < 0 ) fieldSettlCurrFxRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     if( fieldSettlCurrFxRateCalc.offset < 0 ) {
       fieldSettlCurrFxRateCalc.offset = pos;
       if( SettlCurrFxRateCalcEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     if( fieldHandlInst.offset < 0 ) {
       fieldHandlInst.offset = pos;
       if( HandlInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     if( fieldMinQty.offset < 0 ) fieldMinQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     if( fieldMaxFloor.offset < 0 ) fieldMaxFloor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     if( fieldPositionEffect.offset < 0 ) {
       fieldPositionEffect.offset = pos;
       if( PositionEffectEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     if( fieldMaxShow.offset < 0 ) fieldMaxShow.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     if( fieldBookingType.offset < 0 ) {
       fieldBookingType.offset = pos;
       if( BookingTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     if( fieldSettlDate2.offset < 0 ) fieldSettlDate2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     if( fieldOrderQty2.offset < 0 ) fieldOrderQty2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(LastForwardPoints2) 
     if( fieldLastForwardPoints2.offset < 0 ) fieldLastForwardPoints2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     if( fieldMultiLegReportingType.offset < 0 ) {
       fieldMultiLegReportingType.offset = pos;
       if( MultiLegReportingTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     if( fieldCancellationRights.offset < 0 ) {
       fieldCancellationRights.offset = pos;
       if( CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     if( fieldMoneyLaunderingStatus.offset < 0 ) {
       fieldMoneyLaunderingStatus.offset = pos;
       if( MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     if( fieldRegistID.offset < 0 ) fieldRegistID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     if( fieldDesignation.offset < 0 ) fieldDesignation.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransBkdTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransBkdTime) 
     if( fieldTransBkdTime.offset < 0 ) fieldTransBkdTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecValuationPoint::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecValuationPoint) 
     if( fieldExecValuationPoint.offset < 0 ) fieldExecValuationPoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecPriceType) 
     if( fieldExecPriceType.offset < 0 ) {
       fieldExecPriceType.offset = pos;
       if( ExecPriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecPriceAdjustment::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecPriceAdjustment) 
     if( fieldExecPriceAdjustment.offset < 0 ) fieldExecPriceAdjustment.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriorityIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(PriorityIndicator) 
     if( fieldPriorityIndicator.offset < 0 ) {
       fieldPriorityIndicator.offset = pos;
       if( PriorityIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceImprovement::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceImprovement) 
     if( fieldPriceImprovement.offset < 0 ) fieldPriceImprovement.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastLiquidityInd::RAW_TAG :
     FIXPP_PRINT_FIELD(LastLiquidityInd) 
     if( fieldLastLiquidityInd.offset < 0 ) {
       fieldLastLiquidityInd.offset = pos;
       if( LastLiquidityIndEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoContAmts::RAW_TAG :
     FIXPP_PRINT_FIELD(NoContAmts) 
     if( fieldNoContAmts.offset < 0 ){
       fieldNoContAmts.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupContAmts::scanSafely( groupsContAmts, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     if( fieldCopyMsgIndicator.offset < 0 ) fieldCopyMsgIndicator.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     if( fieldNoMiscFees.offset < 0 ){
       fieldNoMiscFees.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupMiscFees::scanSafely( groupsMiscFees, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderCancelReject::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     if( fieldSecondaryOrderID.offset < 0 ) fieldSecondaryOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     if( fieldClOrdLinkID.offset < 0 ) fieldClOrdLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     if( fieldOrigClOrdID.offset < 0 ) fieldOrigClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     if( fieldOrdStatus.offset < 0 ) {
       fieldOrdStatus.offset = pos;
       if( OrdStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldWorkingIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(WorkingIndicator) 
     if( fieldWorkingIndicator.offset < 0 ) {
       fieldWorkingIndicator.offset = pos;
       if( WorkingIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     if( fieldOrigOrdModTime.offset < 0 ) fieldOrigOrdModTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     if( fieldListID.offset < 0 ) fieldListID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     if( fieldTradeOriginationDate.offset < 0 ) fieldTradeOriginationDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCxlRejResponseTo::RAW_TAG :
     FIXPP_PRINT_FIELD(CxlRejResponseTo) 
     if( fieldCxlRejResponseTo.offset < 0 ) {
       fieldCxlRejResponseTo.offset = pos;
       if( CxlRejResponseToEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCxlRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CxlRejReason) 
     if( fieldCxlRejReason.offset < 0 ) {
       fieldCxlRejReason.offset = pos;
       if( CxlRejReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageLogon::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldEncryptMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(EncryptMethod) 
     if( fieldEncryptMethod.offset < 0 ) {
       fieldEncryptMethod.offset = pos;
       if( EncryptMethodEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldHeartBtInt::RAW_TAG :
     FIXPP_PRINT_FIELD(HeartBtInt) 
     if( fieldHeartBtInt.offset < 0 ) fieldHeartBtInt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     if( fieldRawDataLength.offset < 0 ) fieldRawDataLength.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     if( fieldRawData.offset < 0 ) fieldRawData.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldResetSeqNumFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(ResetSeqNumFlag) 
     if( fieldResetSeqNumFlag.offset < 0 ) {
       fieldResetSeqNumFlag.offset = pos;
       if( ResetSeqNumFlagEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNextExpectedMsgSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(NextExpectedMsgSeqNum) 
     if( fieldNextExpectedMsgSeqNum.offset < 0 ) fieldNextExpectedMsgSeqNum.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxMessageSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxMessageSize) 
     if( fieldMaxMessageSize.offset < 0 ) fieldMaxMessageSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoMsgTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMsgTypes) 
     if( fieldNoMsgTypes.offset < 0 ){
       fieldNoMsgTypes.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupMsgTypes::scanSafely( groupsMsgTypes, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTestMessageIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(TestMessageIndicator) 
     if( fieldTestMessageIndicator.offset < 0 ) {
       fieldTestMessageIndicator.offset = pos;
       if( TestMessageIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldUsername::RAW_TAG :
     FIXPP_PRINT_FIELD(Username) 
     if( fieldUsername.offset < 0 ) fieldUsername.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPassword::RAW_TAG :
     FIXPP_PRINT_FIELD(Password) 
     if( fieldPassword.offset < 0 ) fieldPassword.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNews::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldOrigTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigTime) 
     if( fieldOrigTime.offset < 0 ) fieldOrigTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUrgency::RAW_TAG :
     FIXPP_PRINT_FIELD(Urgency) 
     if( fieldUrgency.offset < 0 ) {
       fieldUrgency.offset = pos;
       if( UrgencyEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldHeadline::RAW_TAG :
     FIXPP_PRINT_FIELD(Headline) 
     if( fieldHeadline.offset < 0 ) fieldHeadline.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedHeadlineLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedHeadlineLen) 
     if( fieldEncodedHeadlineLen.offset < 0 ) fieldEncodedHeadlineLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedHeadline::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedHeadline) 
     if( fieldEncodedHeadline.offset < 0 ) fieldEncodedHeadline.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     if( fieldNoRoutingIDs.offset < 0 ){
       fieldNoRoutingIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupRoutingIDs::scanSafely( groupsRoutingIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     if( fieldNoRelatedSym.offset < 0 ){
       fieldNoRelatedSym.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupRelatedSym::scanSafely( groupsRelatedSym, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLinesOfText::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLinesOfText) 
     if( fieldNoLinesOfText.offset < 0 ){
       fieldNoLinesOfText.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLinesOfText::scanSafely( groupsLinesOfText, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldURLLink::RAW_TAG :
     FIXPP_PRINT_FIELD(URLLink) 
     if( fieldURLLink.offset < 0 ) fieldURLLink.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     if( fieldRawDataLength.offset < 0 ) fieldRawDataLength.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     if( fieldRawData.offset < 0 ) fieldRawData.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageEmail::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldEmailThreadID::RAW_TAG :
     FIXPP_PRINT_FIELD(EmailThreadID) 
     if( fieldEmailThreadID.offset < 0 ) fieldEmailThreadID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEmailType::RAW_TAG :
     FIXPP_PRINT_FIELD(EmailType) 
     if( fieldEmailType.offset < 0 ) {
       fieldEmailType.offset = pos;
       if( EmailTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigTime) 
     if( fieldOrigTime.offset < 0 ) fieldOrigTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubject::RAW_TAG :
     FIXPP_PRINT_FIELD(Subject) 
     if( fieldSubject.offset < 0 ) fieldSubject.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSubjectLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSubjectLen) 
     if( fieldEncodedSubjectLen.offset < 0 ) fieldEncodedSubjectLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSubject::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSubject) 
     if( fieldEncodedSubject.offset < 0 ) fieldEncodedSubject.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     if( fieldNoRoutingIDs.offset < 0 ){
       fieldNoRoutingIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupRoutingIDs::scanSafely( groupsRoutingIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     if( fieldNoRelatedSym.offset < 0 ){
       fieldNoRelatedSym.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupRelatedSym::scanSafely( groupsRelatedSym, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLinesOfText::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLinesOfText) 
     if( fieldNoLinesOfText.offset < 0 ){
       fieldNoLinesOfText.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLinesOfText::scanSafely( groupsLinesOfText, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     if( fieldRawDataLength.offset < 0 ) fieldRawDataLength.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     if( fieldRawData.offset < 0 ) fieldRawData.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderSingle::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     if( fieldClOrdLinkID.offset < 0 ) fieldClOrdLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     if( fieldTradeOriginationDate.offset < 0 ) fieldTradeOriginationDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     if( fieldDayBookingInst.offset < 0 ) {
       fieldDayBookingInst.offset = pos;
       if( DayBookingInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     if( fieldBookingUnit.offset < 0 ) {
       fieldBookingUnit.offset = pos;
       if( BookingUnitEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     if( fieldPreallocMethod.offset < 0 ) {
       fieldPreallocMethod.offset = pos;
       if( PreallocMethodEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     if( fieldAllocID.offset < 0 ) fieldAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     if( fieldNoAllocs.offset < 0 ){
       fieldNoAllocs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupAllocs::scanSafely( groupsAllocs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     if( fieldCashMargin.offset < 0 ) {
       fieldCashMargin.offset = pos;
       if( CashMarginEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     if( fieldClearingFeeIndicator.offset < 0 ) {
       fieldClearingFeeIndicator.offset = pos;
       if( ClearingFeeIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     if( fieldHandlInst.offset < 0 ) {
       fieldHandlInst.offset = pos;
       if( HandlInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     if( fieldExecInst.offset < 0 ) {
       fieldExecInst.offset = pos;
       if( ExecInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     if( fieldMinQty.offset < 0 ) fieldMinQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     if( fieldMaxFloor.offset < 0 ) fieldMaxFloor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     if( fieldExDestination.offset < 0 ) fieldExDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     if( fieldNoTradingSessions.offset < 0 ){
       fieldNoTradingSessions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTradingSessions::scanSafely( groupsTradingSessions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     if( fieldProcessCode.offset < 0 ) {
       fieldProcessCode.offset = pos;
       if( ProcessCodeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     if( fieldPrevClosePx.offset < 0 ) fieldPrevClosePx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     if( fieldLocateReqd.offset < 0 ) {
       fieldLocateReqd.offset = pos;
       if( LocateReqdEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     if( fieldCashOrderQty.offset < 0 ) fieldCashOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     if( fieldOrderPercent.offset < 0 ) fieldOrderPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     if( fieldRoundingDirection.offset < 0 ) {
       fieldRoundingDirection.offset = pos;
       if( RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     if( fieldRoundingModulus.offset < 0 ) fieldRoundingModulus.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     if( fieldOrdType.offset < 0 ) {
       fieldOrdType.offset = pos;
       if( OrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     if( fieldStopPx.offset < 0 ) fieldStopPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     if( fieldComplianceID.offset < 0 ) fieldComplianceID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     if( fieldSolicitedFlag.offset < 0 ) {
       fieldSolicitedFlag.offset = pos;
       if( SolicitedFlagEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     if( fieldIOIID.offset < 0 ) fieldIOIID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     if( fieldQuoteID.offset < 0 ) fieldQuoteID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     if( fieldTimeInForce.offset < 0 ) {
       fieldTimeInForce.offset = pos;
       if( TimeInForceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     if( fieldEffectiveTime.offset < 0 ) fieldEffectiveTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     if( fieldExpireDate.offset < 0 ) fieldExpireDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     if( fieldExpireTime.offset < 0 ) fieldExpireTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     if( fieldGTBookingInst.offset < 0 ) {
       fieldGTBookingInst.offset = pos;
       if( GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     if( fieldCommission.offset < 0 ) fieldCommission.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     if( fieldCommType.offset < 0 ) {
       fieldCommType.offset = pos;
       if( CommTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     if( fieldCommCurrency.offset < 0 ) fieldCommCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     if( fieldFundRenewWaiv.offset < 0 ) {
       fieldFundRenewWaiv.offset = pos;
       if( FundRenewWaivEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     if( fieldOrderCapacity.offset < 0 ) {
       fieldOrderCapacity.offset = pos;
       if( OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     if( fieldOrderRestrictions.offset < 0 ) {
       fieldOrderRestrictions.offset = pos;
       if( OrderRestrictionsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     if( fieldCustOrderCapacity.offset < 0 ) {
       fieldCustOrderCapacity.offset = pos;
       if( CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     if( fieldForexReq.offset < 0 ) {
       fieldForexReq.offset = pos;
       if( ForexReqEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     if( fieldSettlCurrency.offset < 0 ) fieldSettlCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     if( fieldBookingType.offset < 0 ) {
       fieldBookingType.offset = pos;
       if( BookingTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     if( fieldSettlDate2.offset < 0 ) fieldSettlDate2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     if( fieldOrderQty2.offset < 0 ) fieldOrderQty2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice2::RAW_TAG :
     FIXPP_PRINT_FIELD(Price2) 
     if( fieldPrice2.offset < 0 ) fieldPrice2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     if( fieldPositionEffect.offset < 0 ) {
       fieldPositionEffect.offset = pos;
       if( PositionEffectEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     if( fieldCoveredOrUncovered.offset < 0 ) {
       fieldCoveredOrUncovered.offset = pos;
       if( CoveredOrUncoveredEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     if( fieldMaxShow.offset < 0 ) fieldMaxShow.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     if( fieldPegOffsetValue.offset < 0 ) fieldPegOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     if( fieldPegMoveType.offset < 0 ) {
       fieldPegMoveType.offset = pos;
       if( PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     if( fieldPegOffsetType.offset < 0 ) {
       fieldPegOffsetType.offset = pos;
       if( PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     if( fieldPegLimitType.offset < 0 ) {
       fieldPegLimitType.offset = pos;
       if( PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     if( fieldPegRoundDirection.offset < 0 ) {
       fieldPegRoundDirection.offset = pos;
       if( PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     if( fieldPegScope.offset < 0 ) {
       fieldPegScope.offset = pos;
       if( PegScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     if( fieldDiscretionInst.offset < 0 ) {
       fieldDiscretionInst.offset = pos;
       if( DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     if( fieldDiscretionOffsetValue.offset < 0 ) fieldDiscretionOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     if( fieldDiscretionMoveType.offset < 0 ) {
       fieldDiscretionMoveType.offset = pos;
       if( DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     if( fieldDiscretionOffsetType.offset < 0 ) {
       fieldDiscretionOffsetType.offset = pos;
       if( DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     if( fieldDiscretionLimitType.offset < 0 ) {
       fieldDiscretionLimitType.offset = pos;
       if( DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     if( fieldDiscretionRoundDirection.offset < 0 ) {
       fieldDiscretionRoundDirection.offset = pos;
       if( DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     if( fieldDiscretionScope.offset < 0 ) {
       fieldDiscretionScope.offset = pos;
       if( DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     if( fieldTargetStrategy.offset < 0 ) {
       fieldTargetStrategy.offset = pos;
       if( TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     if( fieldTargetStrategyParameters.offset < 0 ) fieldTargetStrategyParameters.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     if( fieldParticipationRate.offset < 0 ) fieldParticipationRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     if( fieldCancellationRights.offset < 0 ) {
       fieldCancellationRights.offset = pos;
       if( CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     if( fieldMoneyLaunderingStatus.offset < 0 ) {
       fieldMoneyLaunderingStatus.offset = pos;
       if( MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     if( fieldRegistID.offset < 0 ) fieldRegistID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     if( fieldDesignation.offset < 0 ) fieldDesignation.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderList::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     if( fieldListID.offset < 0 ) fieldListID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     if( fieldBidID.offset < 0 ) fieldBidID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     if( fieldClientBidID.offset < 0 ) fieldClientBidID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldProgRptReqs::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgRptReqs) 
     if( fieldProgRptReqs.offset < 0 ) {
       fieldProgRptReqs.offset = pos;
       if( ProgRptReqsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidType) 
     if( fieldBidType.offset < 0 ) {
       fieldBidType.offset = pos;
       if( BidTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgPeriodInterval) 
     if( fieldProgPeriodInterval.offset < 0 ) fieldProgPeriodInterval.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     if( fieldCancellationRights.offset < 0 ) {
       fieldCancellationRights.offset = pos;
       if( CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     if( fieldMoneyLaunderingStatus.offset < 0 ) {
       fieldMoneyLaunderingStatus.offset = pos;
       if( MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     if( fieldRegistID.offset < 0 ) fieldRegistID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldListExecInstType::RAW_TAG :
     FIXPP_PRINT_FIELD(ListExecInstType) 
     if( fieldListExecInstType.offset < 0 ) {
       fieldListExecInstType.offset = pos;
       if( ListExecInstTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldListExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ListExecInst) 
     if( fieldListExecInst.offset < 0 ) fieldListExecInst.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedListExecInstLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListExecInstLen) 
     if( fieldEncodedListExecInstLen.offset < 0 ) fieldEncodedListExecInstLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedListExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListExecInst) 
     if( fieldEncodedListExecInst.offset < 0 ) fieldEncodedListExecInst.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllowableOneSidednessPct::RAW_TAG :
     FIXPP_PRINT_FIELD(AllowableOneSidednessPct) 
     if( fieldAllowableOneSidednessPct.offset < 0 ) fieldAllowableOneSidednessPct.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllowableOneSidednessValue::RAW_TAG :
     FIXPP_PRINT_FIELD(AllowableOneSidednessValue) 
     if( fieldAllowableOneSidednessValue.offset < 0 ) fieldAllowableOneSidednessValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllowableOneSidednessCurr::RAW_TAG :
     FIXPP_PRINT_FIELD(AllowableOneSidednessCurr) 
     if( fieldAllowableOneSidednessCurr.offset < 0 ) fieldAllowableOneSidednessCurr.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoOrders) 
     if( fieldTotNoOrders.offset < 0 ) fieldTotNoOrders.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     if( fieldLastFragment.offset < 0 ) {
       fieldLastFragment.offset = pos;
       if( LastFragmentEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     if( fieldNoOrders.offset < 0 ){
       fieldNoOrders.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupOrders::scanSafely( groupsOrders, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderCancelRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     if( fieldOrigClOrdID.offset < 0 ) fieldOrigClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     if( fieldClOrdLinkID.offset < 0 ) fieldClOrdLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     if( fieldListID.offset < 0 ) fieldListID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     if( fieldOrigOrdModTime.offset < 0 ) fieldOrigOrdModTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     if( fieldCashOrderQty.offset < 0 ) fieldCashOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     if( fieldOrderPercent.offset < 0 ) fieldOrderPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     if( fieldRoundingDirection.offset < 0 ) {
       fieldRoundingDirection.offset = pos;
       if( RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     if( fieldRoundingModulus.offset < 0 ) fieldRoundingModulus.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     if( fieldComplianceID.offset < 0 ) fieldComplianceID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderCancelReplaceRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     if( fieldTradeOriginationDate.offset < 0 ) fieldTradeOriginationDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     if( fieldOrigClOrdID.offset < 0 ) fieldOrigClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     if( fieldClOrdLinkID.offset < 0 ) fieldClOrdLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     if( fieldListID.offset < 0 ) fieldListID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     if( fieldOrigOrdModTime.offset < 0 ) fieldOrigOrdModTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     if( fieldDayBookingInst.offset < 0 ) {
       fieldDayBookingInst.offset = pos;
       if( DayBookingInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     if( fieldBookingUnit.offset < 0 ) {
       fieldBookingUnit.offset = pos;
       if( BookingUnitEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     if( fieldPreallocMethod.offset < 0 ) {
       fieldPreallocMethod.offset = pos;
       if( PreallocMethodEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     if( fieldAllocID.offset < 0 ) fieldAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     if( fieldNoAllocs.offset < 0 ){
       fieldNoAllocs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupAllocs::scanSafely( groupsAllocs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     if( fieldCashMargin.offset < 0 ) {
       fieldCashMargin.offset = pos;
       if( CashMarginEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     if( fieldClearingFeeIndicator.offset < 0 ) {
       fieldClearingFeeIndicator.offset = pos;
       if( ClearingFeeIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     if( fieldHandlInst.offset < 0 ) {
       fieldHandlInst.offset = pos;
       if( HandlInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     if( fieldExecInst.offset < 0 ) {
       fieldExecInst.offset = pos;
       if( ExecInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     if( fieldMinQty.offset < 0 ) fieldMinQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     if( fieldMaxFloor.offset < 0 ) fieldMaxFloor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     if( fieldExDestination.offset < 0 ) fieldExDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     if( fieldNoTradingSessions.offset < 0 ){
       fieldNoTradingSessions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTradingSessions::scanSafely( groupsTradingSessions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     if( fieldCashOrderQty.offset < 0 ) fieldCashOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     if( fieldOrderPercent.offset < 0 ) fieldOrderPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     if( fieldRoundingDirection.offset < 0 ) {
       fieldRoundingDirection.offset = pos;
       if( RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     if( fieldRoundingModulus.offset < 0 ) fieldRoundingModulus.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     if( fieldOrdType.offset < 0 ) {
       fieldOrdType.offset = pos;
       if( OrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     if( fieldStopPx.offset < 0 ) fieldStopPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     if( fieldPegOffsetValue.offset < 0 ) fieldPegOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     if( fieldPegMoveType.offset < 0 ) {
       fieldPegMoveType.offset = pos;
       if( PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     if( fieldPegOffsetType.offset < 0 ) {
       fieldPegOffsetType.offset = pos;
       if( PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     if( fieldPegLimitType.offset < 0 ) {
       fieldPegLimitType.offset = pos;
       if( PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     if( fieldPegRoundDirection.offset < 0 ) {
       fieldPegRoundDirection.offset = pos;
       if( PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     if( fieldPegScope.offset < 0 ) {
       fieldPegScope.offset = pos;
       if( PegScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     if( fieldDiscretionInst.offset < 0 ) {
       fieldDiscretionInst.offset = pos;
       if( DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     if( fieldDiscretionOffsetValue.offset < 0 ) fieldDiscretionOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     if( fieldDiscretionMoveType.offset < 0 ) {
       fieldDiscretionMoveType.offset = pos;
       if( DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     if( fieldDiscretionOffsetType.offset < 0 ) {
       fieldDiscretionOffsetType.offset = pos;
       if( DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     if( fieldDiscretionLimitType.offset < 0 ) {
       fieldDiscretionLimitType.offset = pos;
       if( DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     if( fieldDiscretionRoundDirection.offset < 0 ) {
       fieldDiscretionRoundDirection.offset = pos;
       if( DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     if( fieldDiscretionScope.offset < 0 ) {
       fieldDiscretionScope.offset = pos;
       if( DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     if( fieldTargetStrategy.offset < 0 ) {
       fieldTargetStrategy.offset = pos;
       if( TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     if( fieldTargetStrategyParameters.offset < 0 ) fieldTargetStrategyParameters.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     if( fieldParticipationRate.offset < 0 ) fieldParticipationRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     if( fieldComplianceID.offset < 0 ) fieldComplianceID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     if( fieldSolicitedFlag.offset < 0 ) {
       fieldSolicitedFlag.offset = pos;
       if( SolicitedFlagEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     if( fieldTimeInForce.offset < 0 ) {
       fieldTimeInForce.offset = pos;
       if( TimeInForceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     if( fieldEffectiveTime.offset < 0 ) fieldEffectiveTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     if( fieldExpireDate.offset < 0 ) fieldExpireDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     if( fieldExpireTime.offset < 0 ) fieldExpireTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     if( fieldGTBookingInst.offset < 0 ) {
       fieldGTBookingInst.offset = pos;
       if( GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     if( fieldCommission.offset < 0 ) fieldCommission.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     if( fieldCommType.offset < 0 ) {
       fieldCommType.offset = pos;
       if( CommTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     if( fieldCommCurrency.offset < 0 ) fieldCommCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     if( fieldFundRenewWaiv.offset < 0 ) {
       fieldFundRenewWaiv.offset = pos;
       if( FundRenewWaivEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     if( fieldOrderCapacity.offset < 0 ) {
       fieldOrderCapacity.offset = pos;
       if( OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     if( fieldOrderRestrictions.offset < 0 ) {
       fieldOrderRestrictions.offset = pos;
       if( OrderRestrictionsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     if( fieldCustOrderCapacity.offset < 0 ) {
       fieldCustOrderCapacity.offset = pos;
       if( CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     if( fieldForexReq.offset < 0 ) {
       fieldForexReq.offset = pos;
       if( ForexReqEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     if( fieldSettlCurrency.offset < 0 ) fieldSettlCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     if( fieldBookingType.offset < 0 ) {
       fieldBookingType.offset = pos;
       if( BookingTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     if( fieldSettlDate2.offset < 0 ) fieldSettlDate2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     if( fieldOrderQty2.offset < 0 ) fieldOrderQty2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice2::RAW_TAG :
     FIXPP_PRINT_FIELD(Price2) 
     if( fieldPrice2.offset < 0 ) fieldPrice2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     if( fieldPositionEffect.offset < 0 ) {
       fieldPositionEffect.offset = pos;
       if( PositionEffectEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     if( fieldCoveredOrUncovered.offset < 0 ) {
       fieldCoveredOrUncovered.offset = pos;
       if( CoveredOrUncoveredEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     if( fieldMaxShow.offset < 0 ) fieldMaxShow.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     if( fieldLocateReqd.offset < 0 ) {
       fieldLocateReqd.offset = pos;
       if( LocateReqdEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     if( fieldCancellationRights.offset < 0 ) {
       fieldCancellationRights.offset = pos;
       if( CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     if( fieldMoneyLaunderingStatus.offset < 0 ) {
       fieldMoneyLaunderingStatus.offset = pos;
       if( MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     if( fieldRegistID.offset < 0 ) fieldRegistID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     if( fieldDesignation.offset < 0 ) fieldDesignation.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderStatusRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     if( fieldClOrdLinkID.offset < 0 ) fieldClOrdLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatusReqID) 
     if( fieldOrdStatusReqID.offset < 0 ) fieldOrdStatusReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationInstruction::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     if( fieldAllocID.offset < 0 ) fieldAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocTransType) 
     if( fieldAllocTransType.offset < 0 ) {
       fieldAllocTransType.offset = pos;
       if( AllocTransTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocType) 
     if( fieldAllocType.offset < 0 ) {
       fieldAllocType.offset = pos;
       if( AllocTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     if( fieldSecondaryAllocID.offset < 0 ) fieldSecondaryAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRefAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(RefAllocID) 
     if( fieldRefAllocID.offset < 0 ) fieldRefAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocCancReplaceReason) 
     if( fieldAllocCancReplaceReason.offset < 0 ) {
       fieldAllocCancReplaceReason.offset = pos;
       if( AllocCancReplaceReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     if( fieldAllocIntermedReqType.offset < 0 ) {
       fieldAllocIntermedReqType.offset = pos;
       if( AllocIntermedReqTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkID) 
     if( fieldAllocLinkID.offset < 0 ) fieldAllocLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocLinkType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkType) 
     if( fieldAllocLinkType.offset < 0 ) {
       fieldAllocLinkType.offset = pos;
       if( AllocLinkTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingRefID) 
     if( fieldBookingRefID.offset < 0 ) fieldBookingRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocNoOrdersType) 
     if( fieldAllocNoOrdersType.offset < 0 ) {
       fieldAllocNoOrdersType.offset = pos;
       if( AllocNoOrdersTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     if( fieldNoOrders.offset < 0 ){
       fieldNoOrders.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupOrders::scanSafely( groupsOrders, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     if( fieldNoExecs.offset < 0 ){
       fieldNoExecs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupExecs::scanSafely( groupsExecs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldPreviouslyReported::RAW_TAG :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     if( fieldPreviouslyReported.offset < 0 ) {
       fieldPreviouslyReported.offset = pos;
       if( PreviouslyReportedEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldReversalIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ReversalIndicator) 
     if( fieldReversalIndicator.offset < 0 ) fieldReversalIndicator.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMatchType::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchType) 
     if( fieldMatchType.offset < 0 ) {
       fieldMatchType.offset = pos;
       if( MatchTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     if( fieldDeliveryForm.offset < 0 ) {
       fieldDeliveryForm.offset = pos;
       if( DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     if( fieldPctAtRisk.offset < 0 ) fieldPctAtRisk.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     if( fieldNoInstrAttrib.offset < 0 ){
       fieldNoInstrAttrib.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupInstrAttrib::scanSafely( groupsInstrAttrib, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     if( fieldQuantity.offset < 0 ) fieldQuantity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     if( fieldLastMkt.offset < 0 ) fieldLastMkt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     if( fieldTradeOriginationDate.offset < 0 ) fieldTradeOriginationDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     if( fieldAvgPx.offset < 0 ) fieldAvgPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgParPx) 
     if( fieldAvgParPx.offset < 0 ) fieldAvgParPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     if( fieldAvgPxPrecision.offset < 0 ) fieldAvgPxPrecision.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     if( fieldBookingType.offset < 0 ) {
       fieldBookingType.offset = pos;
       if( BookingTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     if( fieldGrossTradeAmt.offset < 0 ) fieldGrossTradeAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     if( fieldConcession.offset < 0 ) fieldConcession.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     if( fieldTotalTakedown.offset < 0 ) fieldTotalTakedown.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     if( fieldNetMoney.offset < 0 ) fieldNetMoney.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     if( fieldPositionEffect.offset < 0 ) {
       fieldPositionEffect.offset = pos;
       if( PositionEffectEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(AutoAcceptIndicator) 
     if( fieldAutoAcceptIndicator.offset < 0 ) fieldAutoAcceptIndicator.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     if( fieldNumDaysInterest.offset < 0 ) fieldNumDaysInterest.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     if( fieldAccruedInterestRate.offset < 0 ) fieldAccruedInterestRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     if( fieldAccruedInterestAmt.offset < 0 ) fieldAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalAccruedInterestAmt) 
     if( fieldTotalAccruedInterestAmt.offset < 0 ) fieldTotalAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     if( fieldInterestAtMaturity.offset < 0 ) fieldInterestAtMaturity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     if( fieldEndAccruedInterestAmt.offset < 0 ) fieldEndAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     if( fieldStartCash.offset < 0 ) fieldStartCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     if( fieldEndCash.offset < 0 ) fieldEndCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLegalConfirm::RAW_TAG :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     if( fieldLegalConfirm.offset < 0 ) {
       fieldLegalConfirm.offset = pos;
       if( LegalConfirmEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoAllocs) 
     if( fieldTotNoAllocs.offset < 0 ) fieldTotNoAllocs.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     if( fieldLastFragment.offset < 0 ) {
       fieldLastFragment.offset = pos;
       if( LastFragmentEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     if( fieldNoAllocs.offset < 0 ){
       fieldNoAllocs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupAllocs::scanSafely( groupsAllocs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListCancelRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     if( fieldListID.offset < 0 ) fieldListID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     if( fieldTradeOriginationDate.offset < 0 ) fieldTradeOriginationDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListExecute::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     if( fieldListID.offset < 0 ) fieldListID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     if( fieldClientBidID.offset < 0 ) fieldClientBidID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     if( fieldBidID.offset < 0 ) fieldBidID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListStatusRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     if( fieldListID.offset < 0 ) fieldListID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListStatus::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     if( fieldListID.offset < 0 ) fieldListID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldListStatusType::RAW_TAG :
     FIXPP_PRINT_FIELD(ListStatusType) 
     if( fieldListStatusType.offset < 0 ) {
       fieldListStatusType.offset = pos;
       if( ListStatusTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoRpts::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRpts) 
     if( fieldNoRpts.offset < 0 ) fieldNoRpts.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldListOrderStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(ListOrderStatus) 
     if( fieldListOrderStatus.offset < 0 ) {
       fieldListOrderStatus.offset = pos;
       if( ListOrderStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRptSeq::RAW_TAG :
     FIXPP_PRINT_FIELD(RptSeq) 
     if( fieldRptSeq.offset < 0 ) fieldRptSeq.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldListStatusText::RAW_TAG :
     FIXPP_PRINT_FIELD(ListStatusText) 
     if( fieldListStatusText.offset < 0 ) fieldListStatusText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedListStatusTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListStatusTextLen) 
     if( fieldEncodedListStatusTextLen.offset < 0 ) fieldEncodedListStatusTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedListStatusText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListStatusText) 
     if( fieldEncodedListStatusText.offset < 0 ) fieldEncodedListStatusText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoOrders) 
     if( fieldTotNoOrders.offset < 0 ) fieldTotNoOrders.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     if( fieldLastFragment.offset < 0 ) {
       fieldLastFragment.offset = pos;
       if( LastFragmentEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     if( fieldNoOrders.offset < 0 ){
       fieldNoOrders.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupOrders::scanSafely( groupsOrders, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationInstructionAck::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     if( fieldAllocID.offset < 0 ) fieldAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     if( fieldSecondaryAllocID.offset < 0 ) fieldSecondaryAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocStatus) 
     if( fieldAllocStatus.offset < 0 ) {
       fieldAllocStatus.offset = pos;
       if( AllocStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     if( fieldAllocRejCode.offset < 0 ) {
       fieldAllocRejCode.offset = pos;
       if( AllocRejCodeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocType) 
     if( fieldAllocType.offset < 0 ) {
       fieldAllocType.offset = pos;
       if( AllocTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     if( fieldAllocIntermedReqType.offset < 0 ) {
       fieldAllocIntermedReqType.offset = pos;
       if( AllocIntermedReqTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     if( fieldMatchStatus.offset < 0 ) {
       fieldMatchStatus.offset = pos;
       if( MatchStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     if( fieldNoAllocs.offset < 0 ){
       fieldNoAllocs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupAllocs::scanSafely( groupsAllocs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageDontKnowTrade::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     if( fieldSecondaryOrderID.offset < 0 ) fieldSecondaryOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     if( fieldExecID.offset < 0 ) fieldExecID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDKReason::RAW_TAG :
     FIXPP_PRINT_FIELD(DKReason) 
     if( fieldDKReason.offset < 0 ) {
       fieldDKReason.offset = pos;
       if( DKReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     if( fieldCashOrderQty.offset < 0 ) fieldCashOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     if( fieldOrderPercent.offset < 0 ) fieldOrderPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     if( fieldRoundingDirection.offset < 0 ) {
       fieldRoundingDirection.offset = pos;
       if( RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     if( fieldRoundingModulus.offset < 0 ) fieldRoundingModulus.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     if( fieldLastQty.offset < 0 ) fieldLastQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     if( fieldLastPx.offset < 0 ) fieldLastPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     if( fieldQuoteReqID.offset < 0 ) fieldQuoteReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRFQReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(RFQReqID) 
     if( fieldRFQReqID.offset < 0 ) fieldRFQReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     if( fieldOrderCapacity.offset < 0 ) {
       fieldOrderCapacity.offset = pos;
       if( OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     if( fieldNoRelatedSym.offset < 0 ){
       fieldNoRelatedSym.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupRelatedSym::scanSafely( groupsRelatedSym, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuote::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     if( fieldQuoteReqID.offset < 0 ) fieldQuoteReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     if( fieldQuoteID.offset < 0 ) fieldQuoteID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     if( fieldQuoteRespID.offset < 0 ) fieldQuoteRespID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     if( fieldQuoteType.offset < 0 ) {
       fieldQuoteType.offset = pos;
       if( QuoteTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     if( fieldNoQuoteQualifiers.offset < 0 ){
       fieldNoQuoteQualifiers.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupQuoteQualifiers::scanSafely( groupsQuoteQualifiers, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     if( fieldQuoteResponseLevel.offset < 0 ) {
       fieldQuoteResponseLevel.offset = pos;
       if( QuoteResponseLevelEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     if( fieldCashOrderQty.offset < 0 ) fieldCashOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     if( fieldOrderPercent.offset < 0 ) fieldOrderPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     if( fieldRoundingDirection.offset < 0 ) {
       fieldRoundingDirection.offset = pos;
       if( RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     if( fieldRoundingModulus.offset < 0 ) fieldRoundingModulus.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     if( fieldSettlDate2.offset < 0 ) fieldSettlDate2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     if( fieldOrderQty2.offset < 0 ) fieldOrderQty2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(BidPx) 
     if( fieldBidPx.offset < 0 ) fieldBidPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferPx) 
     if( fieldOfferPx.offset < 0 ) fieldOfferPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMktBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktBidPx) 
     if( fieldMktBidPx.offset < 0 ) fieldMktBidPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMktOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     if( fieldMktOfferPx.offset < 0 ) fieldMktOfferPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinBidSize) 
     if( fieldMinBidSize.offset < 0 ) fieldMinBidSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSize) 
     if( fieldBidSize.offset < 0 ) fieldBidSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     if( fieldMinOfferSize.offset < 0 ) fieldMinOfferSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSize) 
     if( fieldOfferSize.offset < 0 ) fieldOfferSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     if( fieldValidUntilTime.offset < 0 ) fieldValidUntilTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     if( fieldBidSpotRate.offset < 0 ) fieldBidSpotRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     if( fieldOfferSpotRate.offset < 0 ) fieldOfferSpotRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     if( fieldBidForwardPoints.offset < 0 ) fieldBidForwardPoints.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     if( fieldOfferForwardPoints.offset < 0 ) fieldOfferForwardPoints.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MidPx) 
     if( fieldMidPx.offset < 0 ) fieldMidPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(BidYield) 
     if( fieldBidYield.offset < 0 ) fieldBidYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(MidYield) 
     if( fieldMidYield.offset < 0 ) fieldMidYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferYield::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferYield) 
     if( fieldOfferYield.offset < 0 ) fieldOfferYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     if( fieldOrdType.offset < 0 ) {
       fieldOrdType.offset = pos;
       if( OrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     if( fieldBidForwardPoints2.offset < 0 ) fieldBidForwardPoints2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     if( fieldOfferForwardPoints2.offset < 0 ) fieldOfferForwardPoints2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     if( fieldSettlCurrBidFxRate.offset < 0 ) fieldSettlCurrBidFxRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     if( fieldSettlCurrOfferFxRate.offset < 0 ) fieldSettlCurrOfferFxRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     if( fieldSettlCurrFxRateCalc.offset < 0 ) {
       fieldSettlCurrFxRateCalc.offset = pos;
       if( SettlCurrFxRateCalcEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     if( fieldCommType.offset < 0 ) {
       fieldCommType.offset = pos;
       if( CommTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     if( fieldCommission.offset < 0 ) fieldCommission.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     if( fieldCustOrderCapacity.offset < 0 ) {
       fieldCustOrderCapacity.offset = pos;
       if( CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     if( fieldExDestination.offset < 0 ) fieldExDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     if( fieldOrderCapacity.offset < 0 ) {
       fieldOrderCapacity.offset = pos;
       if( OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSettlementInstructions::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldSettlInstMsgID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstMsgID) 
     if( fieldSettlInstMsgID.offset < 0 ) fieldSettlInstMsgID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlInstReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstReqID) 
     if( fieldSettlInstReqID.offset < 0 ) fieldSettlInstReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlInstMode::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstMode) 
     if( fieldSettlInstMode.offset < 0 ) {
       fieldSettlInstMode.offset = pos;
       if( SettlInstModeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlInstReqRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstReqRejCode) 
     if( fieldSettlInstReqRejCode.offset < 0 ) {
       fieldSettlInstReqRejCode.offset = pos;
       if( SettlInstReqRejCodeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSettlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSettlInst) 
     if( fieldNoSettlInst.offset < 0 ){
       fieldNoSettlInst.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSettlInst::scanSafely( groupsSettlInst, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     if( fieldMDReqID.offset < 0 ) fieldMDReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarketDepth::RAW_TAG :
     FIXPP_PRINT_FIELD(MarketDepth) 
     if( fieldMarketDepth.offset < 0 ) fieldMarketDepth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMDUpdateType::RAW_TAG :
     FIXPP_PRINT_FIELD(MDUpdateType) 
     if( fieldMDUpdateType.offset < 0 ) {
       fieldMDUpdateType.offset = pos;
       if( MDUpdateTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAggregatedBook::RAW_TAG :
     FIXPP_PRINT_FIELD(AggregatedBook) 
     if( fieldAggregatedBook.offset < 0 ) {
       fieldAggregatedBook.offset = pos;
       if( AggregatedBookEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOpenCloseSettlFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(OpenCloseSettlFlag) 
     if( fieldOpenCloseSettlFlag.offset < 0 ) {
       fieldOpenCloseSettlFlag.offset = pos;
       if( OpenCloseSettlFlagEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldScope::RAW_TAG :
     FIXPP_PRINT_FIELD(Scope) 
     if( fieldScope.offset < 0 ) {
       fieldScope.offset = pos;
       if( ScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMDImplicitDelete::RAW_TAG :
     FIXPP_PRINT_FIELD(MDImplicitDelete) 
     if( fieldMDImplicitDelete.offset < 0 ) {
       fieldMDImplicitDelete.offset = pos;
       if( MDImplicitDeleteEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoMDEntryTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMDEntryTypes) 
     if( fieldNoMDEntryTypes.offset < 0 ){
       fieldNoMDEntryTypes.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupMDEntryTypes::scanSafely( groupsMDEntryTypes, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     if( fieldNoRelatedSym.offset < 0 ){
       fieldNoRelatedSym.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupRelatedSym::scanSafely( groupsRelatedSym, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     if( fieldNoTradingSessions.offset < 0 ){
       fieldNoTradingSessions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTradingSessions::scanSafely( groupsTradingSessions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldApplQueueAction::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueAction) 
     if( fieldApplQueueAction.offset < 0 ) {
       fieldApplQueueAction.offset = pos;
       if( ApplQueueActionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldApplQueueMax::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueMax) 
     if( fieldApplQueueMax.offset < 0 ) fieldApplQueueMax.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataSnapshotFullRefresh::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     if( fieldMDReqID.offset < 0 ) fieldMDReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldFinancialStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(FinancialStatus) 
     if( fieldFinancialStatus.offset < 0 ) {
       fieldFinancialStatus.offset = pos;
       if( FinancialStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCorporateAction::RAW_TAG :
     FIXPP_PRINT_FIELD(CorporateAction) 
     if( fieldCorporateAction.offset < 0 ) {
       fieldCorporateAction.offset = pos;
       if( CorporateActionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNetChgPrevDay::RAW_TAG :
     FIXPP_PRINT_FIELD(NetChgPrevDay) 
     if( fieldNetChgPrevDay.offset < 0 ) fieldNetChgPrevDay.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoMDEntries::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMDEntries) 
     if( fieldNoMDEntries.offset < 0 ){
       fieldNoMDEntries.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupMDEntries::scanSafely( groupsMDEntries, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldApplQueueDepth::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueDepth) 
     if( fieldApplQueueDepth.offset < 0 ) fieldApplQueueDepth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldApplQueueResolution::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueResolution) 
     if( fieldApplQueueResolution.offset < 0 ) {
       fieldApplQueueResolution.offset = pos;
       if( ApplQueueResolutionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataIncrementalRefresh::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     if( fieldMDReqID.offset < 0 ) fieldMDReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoMDEntries::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMDEntries) 
     if( fieldNoMDEntries.offset < 0 ){
       fieldNoMDEntries.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupMDEntries::scanSafely( groupsMDEntries, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldApplQueueDepth::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueDepth) 
     if( fieldApplQueueDepth.offset < 0 ) fieldApplQueueDepth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldApplQueueResolution::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueResolution) 
     if( fieldApplQueueResolution.offset < 0 ) {
       fieldApplQueueResolution.offset = pos;
       if( ApplQueueResolutionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataRequestReject::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     if( fieldMDReqID.offset < 0 ) fieldMDReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMDReqRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqRejReason) 
     if( fieldMDReqRejReason.offset < 0 ) {
       fieldMDReqRejReason.offset = pos;
       if( MDReqRejReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoAltMDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAltMDSource) 
     if( fieldNoAltMDSource.offset < 0 ){
       fieldNoAltMDSource.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupAltMDSource::scanSafely( groupsAltMDSource, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteCancel::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     if( fieldQuoteReqID.offset < 0 ) fieldQuoteReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     if( fieldQuoteID.offset < 0 ) fieldQuoteID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteCancelType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteCancelType) 
     if( fieldQuoteCancelType.offset < 0 ) {
       fieldQuoteCancelType.offset = pos;
       if( QuoteCancelTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     if( fieldQuoteResponseLevel.offset < 0 ) {
       fieldQuoteResponseLevel.offset = pos;
       if( QuoteResponseLevelEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoQuoteEntries::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteEntries) 
     if( fieldNoQuoteEntries.offset < 0 ){
       fieldNoQuoteEntries.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupQuoteEntries::scanSafely( groupsQuoteEntries, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteStatusRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatusReqID) 
     if( fieldQuoteStatusReqID.offset < 0 ) fieldQuoteStatusReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     if( fieldQuoteID.offset < 0 ) fieldQuoteID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMassQuoteAcknowledgement::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     if( fieldQuoteReqID.offset < 0 ) fieldQuoteReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     if( fieldQuoteID.offset < 0 ) fieldQuoteID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatus) 
     if( fieldQuoteStatus.offset < 0 ) {
       fieldQuoteStatus.offset = pos;
       if( QuoteStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRejectReason) 
     if( fieldQuoteRejectReason.offset < 0 ) {
       fieldQuoteRejectReason.offset = pos;
       if( QuoteRejectReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     if( fieldQuoteResponseLevel.offset < 0 ) {
       fieldQuoteResponseLevel.offset = pos;
       if( QuoteResponseLevelEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     if( fieldQuoteType.offset < 0 ) {
       fieldQuoteType.offset = pos;
       if( QuoteTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoQuoteSets::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteSets) 
     if( fieldNoQuoteSets.offset < 0 ){
       fieldNoQuoteSets.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupQuoteSets::scanSafely( groupsQuoteSets, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityDefinitionRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     if( fieldSecurityReqID.offset < 0 ) fieldSecurityReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityRequestType) 
     if( fieldSecurityRequestType.offset < 0 ) {
       fieldSecurityRequestType.offset = pos;
       if( SecurityRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     if( fieldDeliveryForm.offset < 0 ) {
       fieldDeliveryForm.offset = pos;
       if( DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     if( fieldPctAtRisk.offset < 0 ) fieldPctAtRisk.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     if( fieldNoInstrAttrib.offset < 0 ){
       fieldNoInstrAttrib.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupInstrAttrib::scanSafely( groupsInstrAttrib, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldExpirationCycle::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpirationCycle) 
     if( fieldExpirationCycle.offset < 0 ) {
       fieldExpirationCycle.offset = pos;
       if( ExpirationCycleEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityDefinition::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     if( fieldSecurityReqID.offset < 0 ) fieldSecurityReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     if( fieldSecurityResponseID.offset < 0 ) fieldSecurityResponseID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityResponseType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseType) 
     if( fieldSecurityResponseType.offset < 0 ) {
       fieldSecurityResponseType.offset = pos;
       if( SecurityResponseTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     if( fieldDeliveryForm.offset < 0 ) {
       fieldDeliveryForm.offset = pos;
       if( DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     if( fieldPctAtRisk.offset < 0 ) fieldPctAtRisk.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     if( fieldNoInstrAttrib.offset < 0 ){
       fieldNoInstrAttrib.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupInstrAttrib::scanSafely( groupsInstrAttrib, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldExpirationCycle::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpirationCycle) 
     if( fieldExpirationCycle.offset < 0 ) {
       fieldExpirationCycle.offset = pos;
       if( ExpirationCycleEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundLot::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundLot) 
     if( fieldRoundLot.offset < 0 ) fieldRoundLot.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinTradeVol::RAW_TAG :
     FIXPP_PRINT_FIELD(MinTradeVol) 
     if( fieldMinTradeVol.offset < 0 ) fieldMinTradeVol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityStatusRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityStatusReqID) 
     if( fieldSecurityStatusReqID.offset < 0 ) fieldSecurityStatusReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     if( fieldDeliveryForm.offset < 0 ) {
       fieldDeliveryForm.offset = pos;
       if( DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     if( fieldPctAtRisk.offset < 0 ) fieldPctAtRisk.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     if( fieldNoInstrAttrib.offset < 0 ){
       fieldNoInstrAttrib.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupInstrAttrib::scanSafely( groupsInstrAttrib, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityStatus::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityStatusReqID) 
     if( fieldSecurityStatusReqID.offset < 0 ) fieldSecurityStatusReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     if( fieldDeliveryForm.offset < 0 ) {
       fieldDeliveryForm.offset = pos;
       if( DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     if( fieldPctAtRisk.offset < 0 ) fieldPctAtRisk.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     if( fieldNoInstrAttrib.offset < 0 ){
       fieldNoInstrAttrib.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupInstrAttrib::scanSafely( groupsInstrAttrib, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     if( fieldUnsolicitedIndicator.offset < 0 ) {
       fieldUnsolicitedIndicator.offset = pos;
       if( UnsolicitedIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityTradingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityTradingStatus) 
     if( fieldSecurityTradingStatus.offset < 0 ) {
       fieldSecurityTradingStatus.offset = pos;
       if( SecurityTradingStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldFinancialStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(FinancialStatus) 
     if( fieldFinancialStatus.offset < 0 ) {
       fieldFinancialStatus.offset = pos;
       if( FinancialStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCorporateAction::RAW_TAG :
     FIXPP_PRINT_FIELD(CorporateAction) 
     if( fieldCorporateAction.offset < 0 ) {
       fieldCorporateAction.offset = pos;
       if( CorporateActionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldHaltReasonChar::RAW_TAG :
     FIXPP_PRINT_FIELD(HaltReasonChar) 
     if( fieldHaltReasonChar.offset < 0 ) {
       fieldHaltReasonChar.offset = pos;
       if( HaltReasonCharEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldInViewOfCommon::RAW_TAG :
     FIXPP_PRINT_FIELD(InViewOfCommon) 
     if( fieldInViewOfCommon.offset < 0 ) {
       fieldInViewOfCommon.offset = pos;
       if( InViewOfCommonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDueToRelated::RAW_TAG :
     FIXPP_PRINT_FIELD(DueToRelated) 
     if( fieldDueToRelated.offset < 0 ) {
       fieldDueToRelated.offset = pos;
       if( DueToRelatedEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBuyVolume::RAW_TAG :
     FIXPP_PRINT_FIELD(BuyVolume) 
     if( fieldBuyVolume.offset < 0 ) fieldBuyVolume.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSellVolume::RAW_TAG :
     FIXPP_PRINT_FIELD(SellVolume) 
     if( fieldSellVolume.offset < 0 ) fieldSellVolume.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldHighPx::RAW_TAG :
     FIXPP_PRINT_FIELD(HighPx) 
     if( fieldHighPx.offset < 0 ) fieldHighPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLowPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LowPx) 
     if( fieldLowPx.offset < 0 ) fieldLowPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     if( fieldLastPx.offset < 0 ) fieldLastPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAdjustment::RAW_TAG :
     FIXPP_PRINT_FIELD(Adjustment) 
     if( fieldAdjustment.offset < 0 ) {
       fieldAdjustment.offset = pos;
       if( AdjustmentEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradingSessionStatusRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesReqID) 
     if( fieldTradSesReqID.offset < 0 ) fieldTradSesReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradSesMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMethod) 
     if( fieldTradSesMethod.offset < 0 ) {
       fieldTradSesMethod.offset = pos;
       if( TradSesMethodEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradSesMode::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMode) 
     if( fieldTradSesMode.offset < 0 ) {
       fieldTradSesMode.offset = pos;
       if( TradSesModeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradingSessionStatus::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesReqID) 
     if( fieldTradSesReqID.offset < 0 ) fieldTradSesReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradSesMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMethod) 
     if( fieldTradSesMethod.offset < 0 ) {
       fieldTradSesMethod.offset = pos;
       if( TradSesMethodEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradSesMode::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMode) 
     if( fieldTradSesMode.offset < 0 ) {
       fieldTradSesMode.offset = pos;
       if( TradSesModeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     if( fieldUnsolicitedIndicator.offset < 0 ) {
       fieldUnsolicitedIndicator.offset = pos;
       if( UnsolicitedIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradSesStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesStatus) 
     if( fieldTradSesStatus.offset < 0 ) {
       fieldTradSesStatus.offset = pos;
       if( TradSesStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradSesStatusRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesStatusRejReason) 
     if( fieldTradSesStatusRejReason.offset < 0 ) {
       fieldTradSesStatusRejReason.offset = pos;
       if( TradSesStatusRejReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradSesStartTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesStartTime) 
     if( fieldTradSesStartTime.offset < 0 ) fieldTradSesStartTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradSesOpenTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesOpenTime) 
     if( fieldTradSesOpenTime.offset < 0 ) fieldTradSesOpenTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradSesPreCloseTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesPreCloseTime) 
     if( fieldTradSesPreCloseTime.offset < 0 ) fieldTradSesPreCloseTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradSesCloseTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesCloseTime) 
     if( fieldTradSesCloseTime.offset < 0 ) fieldTradSesCloseTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradSesEndTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesEndTime) 
     if( fieldTradSesEndTime.offset < 0 ) fieldTradSesEndTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalVolumeTraded::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalVolumeTraded) 
     if( fieldTotalVolumeTraded.offset < 0 ) fieldTotalVolumeTraded.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMassQuote::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     if( fieldQuoteReqID.offset < 0 ) fieldQuoteReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     if( fieldQuoteID.offset < 0 ) fieldQuoteID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     if( fieldQuoteType.offset < 0 ) {
       fieldQuoteType.offset = pos;
       if( QuoteTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     if( fieldQuoteResponseLevel.offset < 0 ) {
       fieldQuoteResponseLevel.offset = pos;
       if( QuoteResponseLevelEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDefBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(DefBidSize) 
     if( fieldDefBidSize.offset < 0 ) fieldDefBidSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDefOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(DefOfferSize) 
     if( fieldDefOfferSize.offset < 0 ) fieldDefOfferSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoQuoteSets::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteSets) 
     if( fieldNoQuoteSets.offset < 0 ){
       fieldNoQuoteSets.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupQuoteSets::scanSafely( groupsQuoteSets, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageBusinessMessageReject::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(RefSeqNum) 
     if( fieldRefSeqNum.offset < 0 ) fieldRefSeqNum.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRefMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(RefMsgType) 
     if( fieldRefMsgType.offset < 0 ) fieldRefMsgType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBusinessRejectRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(BusinessRejectRefID) 
     if( fieldBusinessRejectRefID.offset < 0 ) fieldBusinessRejectRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBusinessRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(BusinessRejectReason) 
     if( fieldBusinessRejectReason.offset < 0 ) {
       fieldBusinessRejectReason.offset = pos;
       if( BusinessRejectReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageBidRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     if( fieldBidID.offset < 0 ) fieldBidID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     if( fieldClientBidID.offset < 0 ) fieldClientBidID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidRequestTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidRequestTransType) 
     if( fieldBidRequestTransType.offset < 0 ) {
       fieldBidRequestTransType.offset = pos;
       if( BidRequestTransTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldListName::RAW_TAG :
     FIXPP_PRINT_FIELD(ListName) 
     if( fieldListName.offset < 0 ) fieldListName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     if( fieldTotNoRelatedSym.offset < 0 ) fieldTotNoRelatedSym.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidType) 
     if( fieldBidType.offset < 0 ) {
       fieldBidType.offset = pos;
       if( BidTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNumTickets::RAW_TAG :
     FIXPP_PRINT_FIELD(NumTickets) 
     if( fieldNumTickets.offset < 0 ) fieldNumTickets.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSideValue1::RAW_TAG :
     FIXPP_PRINT_FIELD(SideValue1) 
     if( fieldSideValue1.offset < 0 ) fieldSideValue1.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSideValue2::RAW_TAG :
     FIXPP_PRINT_FIELD(SideValue2) 
     if( fieldSideValue2.offset < 0 ) fieldSideValue2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoBidDescriptors::RAW_TAG :
     FIXPP_PRINT_FIELD(NoBidDescriptors) 
     if( fieldNoBidDescriptors.offset < 0 ){
       fieldNoBidDescriptors.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupBidDescriptors::scanSafely( groupsBidDescriptors, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoBidComponents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoBidComponents) 
     if( fieldNoBidComponents.offset < 0 ){
       fieldNoBidComponents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupBidComponents::scanSafely( groupsBidComponents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldLiquidityIndType::RAW_TAG :
     FIXPP_PRINT_FIELD(LiquidityIndType) 
     if( fieldLiquidityIndType.offset < 0 ) {
       fieldLiquidityIndType.offset = pos;
       if( LiquidityIndTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldWtAverageLiquidity::RAW_TAG :
     FIXPP_PRINT_FIELD(WtAverageLiquidity) 
     if( fieldWtAverageLiquidity.offset < 0 ) fieldWtAverageLiquidity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExchangeForPhysical::RAW_TAG :
     FIXPP_PRINT_FIELD(ExchangeForPhysical) 
     if( fieldExchangeForPhysical.offset < 0 ) {
       fieldExchangeForPhysical.offset = pos;
       if( ExchangeForPhysicalEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOutMainCntryUIndex::RAW_TAG :
     FIXPP_PRINT_FIELD(OutMainCntryUIndex) 
     if( fieldOutMainCntryUIndex.offset < 0 ) fieldOutMainCntryUIndex.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCrossPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPercent) 
     if( fieldCrossPercent.offset < 0 ) fieldCrossPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldProgRptReqs::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgRptReqs) 
     if( fieldProgRptReqs.offset < 0 ) {
       fieldProgRptReqs.offset = pos;
       if( ProgRptReqsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgPeriodInterval) 
     if( fieldProgPeriodInterval.offset < 0 ) fieldProgPeriodInterval.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIncTaxInd::RAW_TAG :
     FIXPP_PRINT_FIELD(IncTaxInd) 
     if( fieldIncTaxInd.offset < 0 ) {
       fieldIncTaxInd.offset = pos;
       if( IncTaxIndEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     if( fieldForexReq.offset < 0 ) {
       fieldForexReq.offset = pos;
       if( ForexReqEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNumBidders::RAW_TAG :
     FIXPP_PRINT_FIELD(NumBidders) 
     if( fieldNumBidders.offset < 0 ) fieldNumBidders.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidTradeType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidTradeType) 
     if( fieldBidTradeType.offset < 0 ) {
       fieldBidTradeType.offset = pos;
       if( BidTradeTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBasisPxType::RAW_TAG :
     FIXPP_PRINT_FIELD(BasisPxType) 
     if( fieldBasisPxType.offset < 0 ) {
       fieldBasisPxType.offset = pos;
       if( BasisPxTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeTime::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeTime) 
     if( fieldStrikeTime.offset < 0 ) fieldStrikeTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageBidResponse::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     if( fieldBidID.offset < 0 ) fieldBidID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     if( fieldClientBidID.offset < 0 ) fieldClientBidID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoBidComponents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoBidComponents) 
     if( fieldNoBidComponents.offset < 0 ){
       fieldNoBidComponents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupBidComponents::scanSafely( groupsBidComponents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListStrikePrice::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     if( fieldListID.offset < 0 ) fieldListID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNoStrikes::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoStrikes) 
     if( fieldTotNoStrikes.offset < 0 ) fieldTotNoStrikes.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     if( fieldLastFragment.offset < 0 ) {
       fieldLastFragment.offset = pos;
       if( LastFragmentEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStrikes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStrikes) 
     if( fieldNoStrikes.offset < 0 ){
       fieldNoStrikes.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStrikes::scanSafely( groupsStrikes, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageXMLnonFIX::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRegistrationInstructions::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     if( fieldRegistID.offset < 0 ) fieldRegistID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistTransType) 
     if( fieldRegistTransType.offset < 0 ) {
       fieldRegistTransType.offset = pos;
       if( RegistTransTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRefID) 
     if( fieldRegistRefID.offset < 0 ) fieldRegistRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistAcctType::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistAcctType) 
     if( fieldRegistAcctType.offset < 0 ) fieldRegistAcctType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTaxAdvantageType::RAW_TAG :
     FIXPP_PRINT_FIELD(TaxAdvantageType) 
     if( fieldTaxAdvantageType.offset < 0 ) {
       fieldTaxAdvantageType.offset = pos;
       if( TaxAdvantageTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOwnershipType::RAW_TAG :
     FIXPP_PRINT_FIELD(OwnershipType) 
     if( fieldOwnershipType.offset < 0 ) {
       fieldOwnershipType.offset = pos;
       if( OwnershipTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoRegistDtls::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRegistDtls) 
     if( fieldNoRegistDtls.offset < 0 ){
       fieldNoRegistDtls.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupRegistDtls::scanSafely( groupsRegistDtls, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoDistribInsts::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDistribInsts) 
     if( fieldNoDistribInsts.offset < 0 ){
       fieldNoDistribInsts.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupDistribInsts::scanSafely( groupsDistribInsts, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRegistrationInstructionsResponse::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     if( fieldRegistID.offset < 0 ) fieldRegistID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistTransType) 
     if( fieldRegistTransType.offset < 0 ) {
       fieldRegistTransType.offset = pos;
       if( RegistTransTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRefID) 
     if( fieldRegistRefID.offset < 0 ) fieldRegistRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistStatus) 
     if( fieldRegistStatus.offset < 0 ) {
       fieldRegistStatus.offset = pos;
       if( RegistStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistRejReasonCode::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRejReasonCode) 
     if( fieldRegistRejReasonCode.offset < 0 ) {
       fieldRegistRejReasonCode.offset = pos;
       if( RegistRejReasonCodeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistRejReasonText::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRejReasonText) 
     if( fieldRegistRejReasonText.offset < 0 ) fieldRegistRejReasonText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderMassCancelRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelRequestType) 
     if( fieldMassCancelRequestType.offset < 0 ) {
       fieldMassCancelRequestType.offset = pos;
       if( MassCancelRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     if( fieldUnderlyingSymbol.offset < 0 ) fieldUnderlyingSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     if( fieldUnderlyingSymbolSfx.offset < 0 ) fieldUnderlyingSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     if( fieldUnderlyingSecurityID.offset < 0 ) fieldUnderlyingSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     if( fieldUnderlyingSecurityIDSource.offset < 0 ) fieldUnderlyingSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     if( fieldNoUnderlyingSecurityAltID.offset < 0 ){
       fieldNoUnderlyingSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyingSecurityAltID::scanSafely( groupsUnderlyingSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     if( fieldUnderlyingProduct.offset < 0 ) fieldUnderlyingProduct.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     if( fieldUnderlyingCFICode.offset < 0 ) fieldUnderlyingCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     if( fieldUnderlyingSecurityType.offset < 0 ) fieldUnderlyingSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     if( fieldUnderlyingSecuritySubType.offset < 0 ) fieldUnderlyingSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     if( fieldUnderlyingMaturityMonthYear.offset < 0 ) fieldUnderlyingMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     if( fieldUnderlyingMaturityDate.offset < 0 ) fieldUnderlyingMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     if( fieldUnderlyingPutOrCall.offset < 0 ) fieldUnderlyingPutOrCall.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     if( fieldUnderlyingCouponPaymentDate.offset < 0 ) fieldUnderlyingCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     if( fieldUnderlyingIssueDate.offset < 0 ) fieldUnderlyingIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     if( fieldUnderlyingRepoCollateralSecurityType.offset < 0 ) fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     if( fieldUnderlyingRepurchaseTerm.offset < 0 ) fieldUnderlyingRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     if( fieldUnderlyingRepurchaseRate.offset < 0 ) fieldUnderlyingRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     if( fieldUnderlyingFactor.offset < 0 ) fieldUnderlyingFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     if( fieldUnderlyingCreditRating.offset < 0 ) fieldUnderlyingCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     if( fieldUnderlyingInstrRegistry.offset < 0 ) fieldUnderlyingInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     if( fieldUnderlyingCountryOfIssue.offset < 0 ) fieldUnderlyingCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     if( fieldUnderlyingStateOrProvinceOfIssue.offset < 0 ) fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     if( fieldUnderlyingLocaleOfIssue.offset < 0 ) fieldUnderlyingLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     if( fieldUnderlyingRedemptionDate.offset < 0 ) fieldUnderlyingRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     if( fieldUnderlyingStrikePrice.offset < 0 ) fieldUnderlyingStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     if( fieldUnderlyingStrikeCurrency.offset < 0 ) fieldUnderlyingStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     if( fieldUnderlyingOptAttribute.offset < 0 ) fieldUnderlyingOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     if( fieldUnderlyingContractMultiplier.offset < 0 ) fieldUnderlyingContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     if( fieldUnderlyingCouponRate.offset < 0 ) fieldUnderlyingCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     if( fieldUnderlyingSecurityExchange.offset < 0 ) fieldUnderlyingSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     if( fieldUnderlyingIssuer.offset < 0 ) fieldUnderlyingIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     if( fieldEncodedUnderlyingIssuerLen.offset < 0 ) fieldEncodedUnderlyingIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     if( fieldEncodedUnderlyingIssuer.offset < 0 ) fieldEncodedUnderlyingIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     if( fieldUnderlyingSecurityDesc.offset < 0 ) fieldUnderlyingSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     if( fieldEncodedUnderlyingSecurityDescLen.offset < 0 ) fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     if( fieldEncodedUnderlyingSecurityDesc.offset < 0 ) fieldEncodedUnderlyingSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     if( fieldUnderlyingCPProgram.offset < 0 ) fieldUnderlyingCPProgram.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     if( fieldUnderlyingCPRegType.offset < 0 ) fieldUnderlyingCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     if( fieldUnderlyingCurrency.offset < 0 ) fieldUnderlyingCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     if( fieldUnderlyingQty.offset < 0 ) fieldUnderlyingQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     if( fieldUnderlyingPx.offset < 0 ) fieldUnderlyingPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     if( fieldUnderlyingDirtyPrice.offset < 0 ) fieldUnderlyingDirtyPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     if( fieldUnderlyingEndPrice.offset < 0 ) fieldUnderlyingEndPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     if( fieldUnderlyingStartValue.offset < 0 ) fieldUnderlyingStartValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     if( fieldUnderlyingCurrentValue.offset < 0 ) fieldUnderlyingCurrentValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     if( fieldUnderlyingEndValue.offset < 0 ) fieldUnderlyingEndValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     if( fieldNoUnderlyingStips.offset < 0 ){
       fieldNoUnderlyingStips.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyingStips::scanSafely( groupsUnderlyingStips, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderMassCancelReport::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     if( fieldSecondaryOrderID.offset < 0 ) fieldSecondaryOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelRequestType) 
     if( fieldMassCancelRequestType.offset < 0 ) {
       fieldMassCancelRequestType.offset = pos;
       if( MassCancelRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMassCancelResponse::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelResponse) 
     if( fieldMassCancelResponse.offset < 0 ) {
       fieldMassCancelResponse.offset = pos;
       if( MassCancelResponseEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMassCancelRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelRejectReason) 
     if( fieldMassCancelRejectReason.offset < 0 ) {
       fieldMassCancelRejectReason.offset = pos;
       if( MassCancelRejectReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalAffectedOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalAffectedOrders) 
     if( fieldTotalAffectedOrders.offset < 0 ) fieldTotalAffectedOrders.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoAffectedOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAffectedOrders) 
     if( fieldNoAffectedOrders.offset < 0 ){
       fieldNoAffectedOrders.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupAffectedOrders::scanSafely( groupsAffectedOrders, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     if( fieldUnderlyingSymbol.offset < 0 ) fieldUnderlyingSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     if( fieldUnderlyingSymbolSfx.offset < 0 ) fieldUnderlyingSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     if( fieldUnderlyingSecurityID.offset < 0 ) fieldUnderlyingSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     if( fieldUnderlyingSecurityIDSource.offset < 0 ) fieldUnderlyingSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     if( fieldNoUnderlyingSecurityAltID.offset < 0 ){
       fieldNoUnderlyingSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyingSecurityAltID::scanSafely( groupsUnderlyingSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     if( fieldUnderlyingProduct.offset < 0 ) fieldUnderlyingProduct.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     if( fieldUnderlyingCFICode.offset < 0 ) fieldUnderlyingCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     if( fieldUnderlyingSecurityType.offset < 0 ) fieldUnderlyingSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     if( fieldUnderlyingSecuritySubType.offset < 0 ) fieldUnderlyingSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     if( fieldUnderlyingMaturityMonthYear.offset < 0 ) fieldUnderlyingMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     if( fieldUnderlyingMaturityDate.offset < 0 ) fieldUnderlyingMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     if( fieldUnderlyingPutOrCall.offset < 0 ) fieldUnderlyingPutOrCall.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     if( fieldUnderlyingCouponPaymentDate.offset < 0 ) fieldUnderlyingCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     if( fieldUnderlyingIssueDate.offset < 0 ) fieldUnderlyingIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     if( fieldUnderlyingRepoCollateralSecurityType.offset < 0 ) fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     if( fieldUnderlyingRepurchaseTerm.offset < 0 ) fieldUnderlyingRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     if( fieldUnderlyingRepurchaseRate.offset < 0 ) fieldUnderlyingRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     if( fieldUnderlyingFactor.offset < 0 ) fieldUnderlyingFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     if( fieldUnderlyingCreditRating.offset < 0 ) fieldUnderlyingCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     if( fieldUnderlyingInstrRegistry.offset < 0 ) fieldUnderlyingInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     if( fieldUnderlyingCountryOfIssue.offset < 0 ) fieldUnderlyingCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     if( fieldUnderlyingStateOrProvinceOfIssue.offset < 0 ) fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     if( fieldUnderlyingLocaleOfIssue.offset < 0 ) fieldUnderlyingLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     if( fieldUnderlyingRedemptionDate.offset < 0 ) fieldUnderlyingRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     if( fieldUnderlyingStrikePrice.offset < 0 ) fieldUnderlyingStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     if( fieldUnderlyingStrikeCurrency.offset < 0 ) fieldUnderlyingStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     if( fieldUnderlyingOptAttribute.offset < 0 ) fieldUnderlyingOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     if( fieldUnderlyingContractMultiplier.offset < 0 ) fieldUnderlyingContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     if( fieldUnderlyingCouponRate.offset < 0 ) fieldUnderlyingCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     if( fieldUnderlyingSecurityExchange.offset < 0 ) fieldUnderlyingSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     if( fieldUnderlyingIssuer.offset < 0 ) fieldUnderlyingIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     if( fieldEncodedUnderlyingIssuerLen.offset < 0 ) fieldEncodedUnderlyingIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     if( fieldEncodedUnderlyingIssuer.offset < 0 ) fieldEncodedUnderlyingIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     if( fieldUnderlyingSecurityDesc.offset < 0 ) fieldUnderlyingSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     if( fieldEncodedUnderlyingSecurityDescLen.offset < 0 ) fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     if( fieldEncodedUnderlyingSecurityDesc.offset < 0 ) fieldEncodedUnderlyingSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     if( fieldUnderlyingCPProgram.offset < 0 ) fieldUnderlyingCPProgram.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     if( fieldUnderlyingCPRegType.offset < 0 ) fieldUnderlyingCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     if( fieldUnderlyingCurrency.offset < 0 ) fieldUnderlyingCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     if( fieldUnderlyingQty.offset < 0 ) fieldUnderlyingQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     if( fieldUnderlyingPx.offset < 0 ) fieldUnderlyingPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     if( fieldUnderlyingDirtyPrice.offset < 0 ) fieldUnderlyingDirtyPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     if( fieldUnderlyingEndPrice.offset < 0 ) fieldUnderlyingEndPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     if( fieldUnderlyingStartValue.offset < 0 ) fieldUnderlyingStartValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     if( fieldUnderlyingCurrentValue.offset < 0 ) fieldUnderlyingCurrentValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     if( fieldUnderlyingEndValue.offset < 0 ) fieldUnderlyingEndValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     if( fieldNoUnderlyingStips.offset < 0 ){
       fieldNoUnderlyingStips.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyingStips::scanSafely( groupsUnderlyingStips, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderCross::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     if( fieldCrossID.offset < 0 ) fieldCrossID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     if( fieldCrossType.offset < 0 ) {
       fieldCrossType.offset = pos;
       if( CrossTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCrossPrioritization::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     if( fieldCrossPrioritization.offset < 0 ) {
       fieldCrossPrioritization.offset = pos;
       if( CrossPrioritizationEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     if( fieldNoSides.offset < 0 ){
       fieldNoSides.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSides::scanSafely( groupsSides, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     if( fieldHandlInst.offset < 0 ) {
       fieldHandlInst.offset = pos;
       if( HandlInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     if( fieldExecInst.offset < 0 ) {
       fieldExecInst.offset = pos;
       if( ExecInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     if( fieldMinQty.offset < 0 ) fieldMinQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     if( fieldMaxFloor.offset < 0 ) fieldMaxFloor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     if( fieldExDestination.offset < 0 ) fieldExDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     if( fieldNoTradingSessions.offset < 0 ){
       fieldNoTradingSessions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTradingSessions::scanSafely( groupsTradingSessions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     if( fieldProcessCode.offset < 0 ) {
       fieldProcessCode.offset = pos;
       if( ProcessCodeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     if( fieldPrevClosePx.offset < 0 ) fieldPrevClosePx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     if( fieldLocateReqd.offset < 0 ) {
       fieldLocateReqd.offset = pos;
       if( LocateReqdEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     if( fieldOrdType.offset < 0 ) {
       fieldOrdType.offset = pos;
       if( OrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     if( fieldStopPx.offset < 0 ) fieldStopPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     if( fieldComplianceID.offset < 0 ) fieldComplianceID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     if( fieldIOIID.offset < 0 ) fieldIOIID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     if( fieldQuoteID.offset < 0 ) fieldQuoteID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     if( fieldTimeInForce.offset < 0 ) {
       fieldTimeInForce.offset = pos;
       if( TimeInForceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     if( fieldEffectiveTime.offset < 0 ) fieldEffectiveTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     if( fieldExpireDate.offset < 0 ) fieldExpireDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     if( fieldExpireTime.offset < 0 ) fieldExpireTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     if( fieldGTBookingInst.offset < 0 ) {
       fieldGTBookingInst.offset = pos;
       if( GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     if( fieldMaxShow.offset < 0 ) fieldMaxShow.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     if( fieldPegOffsetValue.offset < 0 ) fieldPegOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     if( fieldPegMoveType.offset < 0 ) {
       fieldPegMoveType.offset = pos;
       if( PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     if( fieldPegOffsetType.offset < 0 ) {
       fieldPegOffsetType.offset = pos;
       if( PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     if( fieldPegLimitType.offset < 0 ) {
       fieldPegLimitType.offset = pos;
       if( PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     if( fieldPegRoundDirection.offset < 0 ) {
       fieldPegRoundDirection.offset = pos;
       if( PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     if( fieldPegScope.offset < 0 ) {
       fieldPegScope.offset = pos;
       if( PegScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     if( fieldDiscretionInst.offset < 0 ) {
       fieldDiscretionInst.offset = pos;
       if( DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     if( fieldDiscretionOffsetValue.offset < 0 ) fieldDiscretionOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     if( fieldDiscretionMoveType.offset < 0 ) {
       fieldDiscretionMoveType.offset = pos;
       if( DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     if( fieldDiscretionOffsetType.offset < 0 ) {
       fieldDiscretionOffsetType.offset = pos;
       if( DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     if( fieldDiscretionLimitType.offset < 0 ) {
       fieldDiscretionLimitType.offset = pos;
       if( DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     if( fieldDiscretionRoundDirection.offset < 0 ) {
       fieldDiscretionRoundDirection.offset = pos;
       if( DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     if( fieldDiscretionScope.offset < 0 ) {
       fieldDiscretionScope.offset = pos;
       if( DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     if( fieldTargetStrategy.offset < 0 ) {
       fieldTargetStrategy.offset = pos;
       if( TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     if( fieldTargetStrategyParameters.offset < 0 ) fieldTargetStrategyParameters.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     if( fieldParticipationRate.offset < 0 ) fieldParticipationRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     if( fieldCancellationRights.offset < 0 ) {
       fieldCancellationRights.offset = pos;
       if( CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     if( fieldMoneyLaunderingStatus.offset < 0 ) {
       fieldMoneyLaunderingStatus.offset = pos;
       if( MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     if( fieldRegistID.offset < 0 ) fieldRegistID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     if( fieldDesignation.offset < 0 ) fieldDesignation.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCrossOrderCancelReplaceRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     if( fieldCrossID.offset < 0 ) fieldCrossID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     if( fieldOrigCrossID.offset < 0 ) fieldOrigCrossID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     if( fieldCrossType.offset < 0 ) {
       fieldCrossType.offset = pos;
       if( CrossTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCrossPrioritization::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     if( fieldCrossPrioritization.offset < 0 ) {
       fieldCrossPrioritization.offset = pos;
       if( CrossPrioritizationEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     if( fieldNoSides.offset < 0 ){
       fieldNoSides.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSides::scanSafely( groupsSides, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     if( fieldHandlInst.offset < 0 ) {
       fieldHandlInst.offset = pos;
       if( HandlInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     if( fieldExecInst.offset < 0 ) {
       fieldExecInst.offset = pos;
       if( ExecInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     if( fieldMinQty.offset < 0 ) fieldMinQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     if( fieldMaxFloor.offset < 0 ) fieldMaxFloor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     if( fieldExDestination.offset < 0 ) fieldExDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     if( fieldNoTradingSessions.offset < 0 ){
       fieldNoTradingSessions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTradingSessions::scanSafely( groupsTradingSessions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     if( fieldProcessCode.offset < 0 ) {
       fieldProcessCode.offset = pos;
       if( ProcessCodeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     if( fieldPrevClosePx.offset < 0 ) fieldPrevClosePx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     if( fieldLocateReqd.offset < 0 ) {
       fieldLocateReqd.offset = pos;
       if( LocateReqdEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     if( fieldOrdType.offset < 0 ) {
       fieldOrdType.offset = pos;
       if( OrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     if( fieldStopPx.offset < 0 ) fieldStopPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     if( fieldComplianceID.offset < 0 ) fieldComplianceID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     if( fieldIOIID.offset < 0 ) fieldIOIID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     if( fieldQuoteID.offset < 0 ) fieldQuoteID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     if( fieldTimeInForce.offset < 0 ) {
       fieldTimeInForce.offset = pos;
       if( TimeInForceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     if( fieldEffectiveTime.offset < 0 ) fieldEffectiveTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     if( fieldExpireDate.offset < 0 ) fieldExpireDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     if( fieldExpireTime.offset < 0 ) fieldExpireTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     if( fieldGTBookingInst.offset < 0 ) {
       fieldGTBookingInst.offset = pos;
       if( GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     if( fieldMaxShow.offset < 0 ) fieldMaxShow.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     if( fieldPegOffsetValue.offset < 0 ) fieldPegOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     if( fieldPegMoveType.offset < 0 ) {
       fieldPegMoveType.offset = pos;
       if( PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     if( fieldPegOffsetType.offset < 0 ) {
       fieldPegOffsetType.offset = pos;
       if( PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     if( fieldPegLimitType.offset < 0 ) {
       fieldPegLimitType.offset = pos;
       if( PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     if( fieldPegRoundDirection.offset < 0 ) {
       fieldPegRoundDirection.offset = pos;
       if( PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     if( fieldPegScope.offset < 0 ) {
       fieldPegScope.offset = pos;
       if( PegScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     if( fieldDiscretionInst.offset < 0 ) {
       fieldDiscretionInst.offset = pos;
       if( DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     if( fieldDiscretionOffsetValue.offset < 0 ) fieldDiscretionOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     if( fieldDiscretionMoveType.offset < 0 ) {
       fieldDiscretionMoveType.offset = pos;
       if( DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     if( fieldDiscretionOffsetType.offset < 0 ) {
       fieldDiscretionOffsetType.offset = pos;
       if( DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     if( fieldDiscretionLimitType.offset < 0 ) {
       fieldDiscretionLimitType.offset = pos;
       if( DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     if( fieldDiscretionRoundDirection.offset < 0 ) {
       fieldDiscretionRoundDirection.offset = pos;
       if( DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     if( fieldDiscretionScope.offset < 0 ) {
       fieldDiscretionScope.offset = pos;
       if( DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     if( fieldTargetStrategy.offset < 0 ) {
       fieldTargetStrategy.offset = pos;
       if( TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     if( fieldTargetStrategyParameters.offset < 0 ) fieldTargetStrategyParameters.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     if( fieldParticipationRate.offset < 0 ) fieldParticipationRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     if( fieldCancellationRights.offset < 0 ) {
       fieldCancellationRights.offset = pos;
       if( CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     if( fieldMoneyLaunderingStatus.offset < 0 ) {
       fieldMoneyLaunderingStatus.offset = pos;
       if( MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     if( fieldRegistID.offset < 0 ) fieldRegistID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     if( fieldDesignation.offset < 0 ) fieldDesignation.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCrossOrderCancelRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     if( fieldCrossID.offset < 0 ) fieldCrossID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     if( fieldOrigCrossID.offset < 0 ) fieldOrigCrossID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     if( fieldCrossType.offset < 0 ) {
       fieldCrossType.offset = pos;
       if( CrossTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCrossPrioritization::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     if( fieldCrossPrioritization.offset < 0 ) {
       fieldCrossPrioritization.offset = pos;
       if( CrossPrioritizationEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     if( fieldNoSides.offset < 0 ){
       fieldNoSides.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSides::scanSafely( groupsSides, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityTypeRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     if( fieldSecurityReqID.offset < 0 ) fieldSecurityReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityTypes::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     if( fieldSecurityReqID.offset < 0 ) fieldSecurityReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     if( fieldSecurityResponseID.offset < 0 ) fieldSecurityResponseID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityResponseType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseType) 
     if( fieldSecurityResponseType.offset < 0 ) {
       fieldSecurityResponseType.offset = pos;
       if( SecurityResponseTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNoSecurityTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoSecurityTypes) 
     if( fieldTotNoSecurityTypes.offset < 0 ) fieldTotNoSecurityTypes.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     if( fieldLastFragment.offset < 0 ) {
       fieldLastFragment.offset = pos;
       if( LastFragmentEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityTypes) 
     if( fieldNoSecurityTypes.offset < 0 ){
       fieldNoSecurityTypes.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityTypes::scanSafely( groupsSecurityTypes, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityListRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     if( fieldSecurityReqID.offset < 0 ) fieldSecurityReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityListRequestType) 
     if( fieldSecurityListRequestType.offset < 0 ) {
       fieldSecurityListRequestType.offset = pos;
       if( SecurityListRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     if( fieldDeliveryForm.offset < 0 ) {
       fieldDeliveryForm.offset = pos;
       if( DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     if( fieldPctAtRisk.offset < 0 ) fieldPctAtRisk.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     if( fieldNoInstrAttrib.offset < 0 ){
       fieldNoInstrAttrib.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupInstrAttrib::scanSafely( groupsInstrAttrib, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityList::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     if( fieldSecurityReqID.offset < 0 ) fieldSecurityReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     if( fieldSecurityResponseID.offset < 0 ) fieldSecurityResponseID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityRequestResult) 
     if( fieldSecurityRequestResult.offset < 0 ) {
       fieldSecurityRequestResult.offset = pos;
       if( SecurityRequestResultEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     if( fieldTotNoRelatedSym.offset < 0 ) fieldTotNoRelatedSym.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     if( fieldLastFragment.offset < 0 ) {
       fieldLastFragment.offset = pos;
       if( LastFragmentEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     if( fieldNoRelatedSym.offset < 0 ){
       fieldNoRelatedSym.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupRelatedSym::scanSafely( groupsRelatedSym, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageDerivativeSecurityListRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     if( fieldSecurityReqID.offset < 0 ) fieldSecurityReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityListRequestType) 
     if( fieldSecurityListRequestType.offset < 0 ) {
       fieldSecurityListRequestType.offset = pos;
       if( SecurityListRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     if( fieldUnderlyingSymbol.offset < 0 ) fieldUnderlyingSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     if( fieldUnderlyingSymbolSfx.offset < 0 ) fieldUnderlyingSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     if( fieldUnderlyingSecurityID.offset < 0 ) fieldUnderlyingSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     if( fieldUnderlyingSecurityIDSource.offset < 0 ) fieldUnderlyingSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     if( fieldNoUnderlyingSecurityAltID.offset < 0 ){
       fieldNoUnderlyingSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyingSecurityAltID::scanSafely( groupsUnderlyingSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     if( fieldUnderlyingProduct.offset < 0 ) fieldUnderlyingProduct.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     if( fieldUnderlyingCFICode.offset < 0 ) fieldUnderlyingCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     if( fieldUnderlyingSecurityType.offset < 0 ) fieldUnderlyingSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     if( fieldUnderlyingSecuritySubType.offset < 0 ) fieldUnderlyingSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     if( fieldUnderlyingMaturityMonthYear.offset < 0 ) fieldUnderlyingMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     if( fieldUnderlyingMaturityDate.offset < 0 ) fieldUnderlyingMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     if( fieldUnderlyingPutOrCall.offset < 0 ) fieldUnderlyingPutOrCall.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     if( fieldUnderlyingCouponPaymentDate.offset < 0 ) fieldUnderlyingCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     if( fieldUnderlyingIssueDate.offset < 0 ) fieldUnderlyingIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     if( fieldUnderlyingRepoCollateralSecurityType.offset < 0 ) fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     if( fieldUnderlyingRepurchaseTerm.offset < 0 ) fieldUnderlyingRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     if( fieldUnderlyingRepurchaseRate.offset < 0 ) fieldUnderlyingRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     if( fieldUnderlyingFactor.offset < 0 ) fieldUnderlyingFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     if( fieldUnderlyingCreditRating.offset < 0 ) fieldUnderlyingCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     if( fieldUnderlyingInstrRegistry.offset < 0 ) fieldUnderlyingInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     if( fieldUnderlyingCountryOfIssue.offset < 0 ) fieldUnderlyingCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     if( fieldUnderlyingStateOrProvinceOfIssue.offset < 0 ) fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     if( fieldUnderlyingLocaleOfIssue.offset < 0 ) fieldUnderlyingLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     if( fieldUnderlyingRedemptionDate.offset < 0 ) fieldUnderlyingRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     if( fieldUnderlyingStrikePrice.offset < 0 ) fieldUnderlyingStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     if( fieldUnderlyingStrikeCurrency.offset < 0 ) fieldUnderlyingStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     if( fieldUnderlyingOptAttribute.offset < 0 ) fieldUnderlyingOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     if( fieldUnderlyingContractMultiplier.offset < 0 ) fieldUnderlyingContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     if( fieldUnderlyingCouponRate.offset < 0 ) fieldUnderlyingCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     if( fieldUnderlyingSecurityExchange.offset < 0 ) fieldUnderlyingSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     if( fieldUnderlyingIssuer.offset < 0 ) fieldUnderlyingIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     if( fieldEncodedUnderlyingIssuerLen.offset < 0 ) fieldEncodedUnderlyingIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     if( fieldEncodedUnderlyingIssuer.offset < 0 ) fieldEncodedUnderlyingIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     if( fieldUnderlyingSecurityDesc.offset < 0 ) fieldUnderlyingSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     if( fieldEncodedUnderlyingSecurityDescLen.offset < 0 ) fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     if( fieldEncodedUnderlyingSecurityDesc.offset < 0 ) fieldEncodedUnderlyingSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     if( fieldUnderlyingCPProgram.offset < 0 ) fieldUnderlyingCPProgram.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     if( fieldUnderlyingCPRegType.offset < 0 ) fieldUnderlyingCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     if( fieldUnderlyingCurrency.offset < 0 ) fieldUnderlyingCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     if( fieldUnderlyingQty.offset < 0 ) fieldUnderlyingQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     if( fieldUnderlyingPx.offset < 0 ) fieldUnderlyingPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     if( fieldUnderlyingDirtyPrice.offset < 0 ) fieldUnderlyingDirtyPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     if( fieldUnderlyingEndPrice.offset < 0 ) fieldUnderlyingEndPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     if( fieldUnderlyingStartValue.offset < 0 ) fieldUnderlyingStartValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     if( fieldUnderlyingCurrentValue.offset < 0 ) fieldUnderlyingCurrentValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     if( fieldUnderlyingEndValue.offset < 0 ) fieldUnderlyingEndValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     if( fieldNoUnderlyingStips.offset < 0 ){
       fieldNoUnderlyingStips.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyingStips::scanSafely( groupsUnderlyingStips, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageDerivativeSecurityList::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     if( fieldSecurityReqID.offset < 0 ) fieldSecurityReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     if( fieldSecurityResponseID.offset < 0 ) fieldSecurityResponseID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityRequestResult) 
     if( fieldSecurityRequestResult.offset < 0 ) {
       fieldSecurityRequestResult.offset = pos;
       if( SecurityRequestResultEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     if( fieldUnderlyingSymbol.offset < 0 ) fieldUnderlyingSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     if( fieldUnderlyingSymbolSfx.offset < 0 ) fieldUnderlyingSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     if( fieldUnderlyingSecurityID.offset < 0 ) fieldUnderlyingSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     if( fieldUnderlyingSecurityIDSource.offset < 0 ) fieldUnderlyingSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     if( fieldNoUnderlyingSecurityAltID.offset < 0 ){
       fieldNoUnderlyingSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyingSecurityAltID::scanSafely( groupsUnderlyingSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     if( fieldUnderlyingProduct.offset < 0 ) fieldUnderlyingProduct.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     if( fieldUnderlyingCFICode.offset < 0 ) fieldUnderlyingCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     if( fieldUnderlyingSecurityType.offset < 0 ) fieldUnderlyingSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     if( fieldUnderlyingSecuritySubType.offset < 0 ) fieldUnderlyingSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     if( fieldUnderlyingMaturityMonthYear.offset < 0 ) fieldUnderlyingMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     if( fieldUnderlyingMaturityDate.offset < 0 ) fieldUnderlyingMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     if( fieldUnderlyingPutOrCall.offset < 0 ) fieldUnderlyingPutOrCall.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     if( fieldUnderlyingCouponPaymentDate.offset < 0 ) fieldUnderlyingCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     if( fieldUnderlyingIssueDate.offset < 0 ) fieldUnderlyingIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     if( fieldUnderlyingRepoCollateralSecurityType.offset < 0 ) fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     if( fieldUnderlyingRepurchaseTerm.offset < 0 ) fieldUnderlyingRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     if( fieldUnderlyingRepurchaseRate.offset < 0 ) fieldUnderlyingRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     if( fieldUnderlyingFactor.offset < 0 ) fieldUnderlyingFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     if( fieldUnderlyingCreditRating.offset < 0 ) fieldUnderlyingCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     if( fieldUnderlyingInstrRegistry.offset < 0 ) fieldUnderlyingInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     if( fieldUnderlyingCountryOfIssue.offset < 0 ) fieldUnderlyingCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     if( fieldUnderlyingStateOrProvinceOfIssue.offset < 0 ) fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     if( fieldUnderlyingLocaleOfIssue.offset < 0 ) fieldUnderlyingLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     if( fieldUnderlyingRedemptionDate.offset < 0 ) fieldUnderlyingRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     if( fieldUnderlyingStrikePrice.offset < 0 ) fieldUnderlyingStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     if( fieldUnderlyingStrikeCurrency.offset < 0 ) fieldUnderlyingStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     if( fieldUnderlyingOptAttribute.offset < 0 ) fieldUnderlyingOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     if( fieldUnderlyingContractMultiplier.offset < 0 ) fieldUnderlyingContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     if( fieldUnderlyingCouponRate.offset < 0 ) fieldUnderlyingCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     if( fieldUnderlyingSecurityExchange.offset < 0 ) fieldUnderlyingSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     if( fieldUnderlyingIssuer.offset < 0 ) fieldUnderlyingIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     if( fieldEncodedUnderlyingIssuerLen.offset < 0 ) fieldEncodedUnderlyingIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     if( fieldEncodedUnderlyingIssuer.offset < 0 ) fieldEncodedUnderlyingIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     if( fieldUnderlyingSecurityDesc.offset < 0 ) fieldUnderlyingSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     if( fieldEncodedUnderlyingSecurityDescLen.offset < 0 ) fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     if( fieldEncodedUnderlyingSecurityDesc.offset < 0 ) fieldEncodedUnderlyingSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     if( fieldUnderlyingCPProgram.offset < 0 ) fieldUnderlyingCPProgram.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     if( fieldUnderlyingCPRegType.offset < 0 ) fieldUnderlyingCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     if( fieldUnderlyingCurrency.offset < 0 ) fieldUnderlyingCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     if( fieldUnderlyingQty.offset < 0 ) fieldUnderlyingQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     if( fieldUnderlyingPx.offset < 0 ) fieldUnderlyingPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     if( fieldUnderlyingDirtyPrice.offset < 0 ) fieldUnderlyingDirtyPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     if( fieldUnderlyingEndPrice.offset < 0 ) fieldUnderlyingEndPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     if( fieldUnderlyingStartValue.offset < 0 ) fieldUnderlyingStartValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     if( fieldUnderlyingCurrentValue.offset < 0 ) fieldUnderlyingCurrentValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     if( fieldUnderlyingEndValue.offset < 0 ) fieldUnderlyingEndValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     if( fieldNoUnderlyingStips.offset < 0 ){
       fieldNoUnderlyingStips.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyingStips::scanSafely( groupsUnderlyingStips, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     if( fieldTotNoRelatedSym.offset < 0 ) fieldTotNoRelatedSym.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     if( fieldLastFragment.offset < 0 ) {
       fieldLastFragment.offset = pos;
       if( LastFragmentEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     if( fieldNoRelatedSym.offset < 0 ){
       fieldNoRelatedSym.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupRelatedSym::scanSafely( groupsRelatedSym, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderMultileg::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     if( fieldClOrdLinkID.offset < 0 ) fieldClOrdLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     if( fieldTradeOriginationDate.offset < 0 ) fieldTradeOriginationDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     if( fieldDayBookingInst.offset < 0 ) {
       fieldDayBookingInst.offset = pos;
       if( DayBookingInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     if( fieldBookingUnit.offset < 0 ) {
       fieldBookingUnit.offset = pos;
       if( BookingUnitEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     if( fieldPreallocMethod.offset < 0 ) {
       fieldPreallocMethod.offset = pos;
       if( PreallocMethodEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     if( fieldAllocID.offset < 0 ) fieldAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     if( fieldNoAllocs.offset < 0 ){
       fieldNoAllocs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupAllocs::scanSafely( groupsAllocs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     if( fieldCashMargin.offset < 0 ) {
       fieldCashMargin.offset = pos;
       if( CashMarginEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     if( fieldClearingFeeIndicator.offset < 0 ) {
       fieldClearingFeeIndicator.offset = pos;
       if( ClearingFeeIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     if( fieldHandlInst.offset < 0 ) {
       fieldHandlInst.offset = pos;
       if( HandlInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     if( fieldExecInst.offset < 0 ) {
       fieldExecInst.offset = pos;
       if( ExecInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     if( fieldMinQty.offset < 0 ) fieldMinQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     if( fieldMaxFloor.offset < 0 ) fieldMaxFloor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     if( fieldExDestination.offset < 0 ) fieldExDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     if( fieldNoTradingSessions.offset < 0 ){
       fieldNoTradingSessions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTradingSessions::scanSafely( groupsTradingSessions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     if( fieldProcessCode.offset < 0 ) {
       fieldProcessCode.offset = pos;
       if( ProcessCodeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     if( fieldPrevClosePx.offset < 0 ) fieldPrevClosePx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     if( fieldLocateReqd.offset < 0 ) {
       fieldLocateReqd.offset = pos;
       if( LocateReqdEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     if( fieldCashOrderQty.offset < 0 ) fieldCashOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     if( fieldOrderPercent.offset < 0 ) fieldOrderPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     if( fieldRoundingDirection.offset < 0 ) {
       fieldRoundingDirection.offset = pos;
       if( RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     if( fieldRoundingModulus.offset < 0 ) fieldRoundingModulus.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     if( fieldOrdType.offset < 0 ) {
       fieldOrdType.offset = pos;
       if( OrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     if( fieldStopPx.offset < 0 ) fieldStopPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     if( fieldComplianceID.offset < 0 ) fieldComplianceID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     if( fieldSolicitedFlag.offset < 0 ) {
       fieldSolicitedFlag.offset = pos;
       if( SolicitedFlagEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     if( fieldIOIID.offset < 0 ) fieldIOIID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     if( fieldQuoteID.offset < 0 ) fieldQuoteID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     if( fieldTimeInForce.offset < 0 ) {
       fieldTimeInForce.offset = pos;
       if( TimeInForceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     if( fieldEffectiveTime.offset < 0 ) fieldEffectiveTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     if( fieldExpireDate.offset < 0 ) fieldExpireDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     if( fieldExpireTime.offset < 0 ) fieldExpireTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     if( fieldGTBookingInst.offset < 0 ) {
       fieldGTBookingInst.offset = pos;
       if( GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     if( fieldCommission.offset < 0 ) fieldCommission.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     if( fieldCommType.offset < 0 ) {
       fieldCommType.offset = pos;
       if( CommTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     if( fieldCommCurrency.offset < 0 ) fieldCommCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     if( fieldFundRenewWaiv.offset < 0 ) {
       fieldFundRenewWaiv.offset = pos;
       if( FundRenewWaivEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     if( fieldOrderCapacity.offset < 0 ) {
       fieldOrderCapacity.offset = pos;
       if( OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     if( fieldOrderRestrictions.offset < 0 ) {
       fieldOrderRestrictions.offset = pos;
       if( OrderRestrictionsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     if( fieldCustOrderCapacity.offset < 0 ) {
       fieldCustOrderCapacity.offset = pos;
       if( CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     if( fieldForexReq.offset < 0 ) {
       fieldForexReq.offset = pos;
       if( ForexReqEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     if( fieldSettlCurrency.offset < 0 ) fieldSettlCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     if( fieldBookingType.offset < 0 ) {
       fieldBookingType.offset = pos;
       if( BookingTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     if( fieldPositionEffect.offset < 0 ) {
       fieldPositionEffect.offset = pos;
       if( PositionEffectEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     if( fieldCoveredOrUncovered.offset < 0 ) {
       fieldCoveredOrUncovered.offset = pos;
       if( CoveredOrUncoveredEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     if( fieldMaxShow.offset < 0 ) fieldMaxShow.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     if( fieldPegOffsetValue.offset < 0 ) fieldPegOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     if( fieldPegMoveType.offset < 0 ) {
       fieldPegMoveType.offset = pos;
       if( PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     if( fieldPegOffsetType.offset < 0 ) {
       fieldPegOffsetType.offset = pos;
       if( PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     if( fieldPegLimitType.offset < 0 ) {
       fieldPegLimitType.offset = pos;
       if( PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     if( fieldPegRoundDirection.offset < 0 ) {
       fieldPegRoundDirection.offset = pos;
       if( PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     if( fieldPegScope.offset < 0 ) {
       fieldPegScope.offset = pos;
       if( PegScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     if( fieldDiscretionInst.offset < 0 ) {
       fieldDiscretionInst.offset = pos;
       if( DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     if( fieldDiscretionOffsetValue.offset < 0 ) fieldDiscretionOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     if( fieldDiscretionMoveType.offset < 0 ) {
       fieldDiscretionMoveType.offset = pos;
       if( DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     if( fieldDiscretionOffsetType.offset < 0 ) {
       fieldDiscretionOffsetType.offset = pos;
       if( DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     if( fieldDiscretionLimitType.offset < 0 ) {
       fieldDiscretionLimitType.offset = pos;
       if( DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     if( fieldDiscretionRoundDirection.offset < 0 ) {
       fieldDiscretionRoundDirection.offset = pos;
       if( DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     if( fieldDiscretionScope.offset < 0 ) {
       fieldDiscretionScope.offset = pos;
       if( DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     if( fieldTargetStrategy.offset < 0 ) {
       fieldTargetStrategy.offset = pos;
       if( TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     if( fieldTargetStrategyParameters.offset < 0 ) fieldTargetStrategyParameters.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     if( fieldParticipationRate.offset < 0 ) fieldParticipationRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     if( fieldCancellationRights.offset < 0 ) {
       fieldCancellationRights.offset = pos;
       if( CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     if( fieldMoneyLaunderingStatus.offset < 0 ) {
       fieldMoneyLaunderingStatus.offset = pos;
       if( MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     if( fieldRegistID.offset < 0 ) fieldRegistID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     if( fieldDesignation.offset < 0 ) fieldDesignation.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegRptTypeReq) 
     if( fieldMultiLegRptTypeReq.offset < 0 ) {
       fieldMultiLegRptTypeReq.offset = pos;
       if( MultiLegRptTypeReqEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMultilegOrderCancelReplace::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     if( fieldOrigClOrdID.offset < 0 ) fieldOrigClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     if( fieldClOrdLinkID.offset < 0 ) fieldClOrdLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     if( fieldOrigOrdModTime.offset < 0 ) fieldOrigOrdModTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     if( fieldTradeOriginationDate.offset < 0 ) fieldTradeOriginationDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     if( fieldDayBookingInst.offset < 0 ) {
       fieldDayBookingInst.offset = pos;
       if( DayBookingInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     if( fieldBookingUnit.offset < 0 ) {
       fieldBookingUnit.offset = pos;
       if( BookingUnitEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     if( fieldPreallocMethod.offset < 0 ) {
       fieldPreallocMethod.offset = pos;
       if( PreallocMethodEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     if( fieldAllocID.offset < 0 ) fieldAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     if( fieldNoAllocs.offset < 0 ){
       fieldNoAllocs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupAllocs::scanSafely( groupsAllocs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     if( fieldCashMargin.offset < 0 ) {
       fieldCashMargin.offset = pos;
       if( CashMarginEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     if( fieldClearingFeeIndicator.offset < 0 ) {
       fieldClearingFeeIndicator.offset = pos;
       if( ClearingFeeIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     if( fieldHandlInst.offset < 0 ) {
       fieldHandlInst.offset = pos;
       if( HandlInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     if( fieldExecInst.offset < 0 ) {
       fieldExecInst.offset = pos;
       if( ExecInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     if( fieldMinQty.offset < 0 ) fieldMinQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     if( fieldMaxFloor.offset < 0 ) fieldMaxFloor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     if( fieldExDestination.offset < 0 ) fieldExDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     if( fieldNoTradingSessions.offset < 0 ){
       fieldNoTradingSessions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTradingSessions::scanSafely( groupsTradingSessions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     if( fieldProcessCode.offset < 0 ) {
       fieldProcessCode.offset = pos;
       if( ProcessCodeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     if( fieldPrevClosePx.offset < 0 ) fieldPrevClosePx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     if( fieldLocateReqd.offset < 0 ) {
       fieldLocateReqd.offset = pos;
       if( LocateReqdEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     if( fieldCashOrderQty.offset < 0 ) fieldCashOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     if( fieldOrderPercent.offset < 0 ) fieldOrderPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     if( fieldRoundingDirection.offset < 0 ) {
       fieldRoundingDirection.offset = pos;
       if( RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     if( fieldRoundingModulus.offset < 0 ) fieldRoundingModulus.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     if( fieldOrdType.offset < 0 ) {
       fieldOrdType.offset = pos;
       if( OrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     if( fieldStopPx.offset < 0 ) fieldStopPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     if( fieldComplianceID.offset < 0 ) fieldComplianceID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     if( fieldSolicitedFlag.offset < 0 ) {
       fieldSolicitedFlag.offset = pos;
       if( SolicitedFlagEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     if( fieldIOIID.offset < 0 ) fieldIOIID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     if( fieldQuoteID.offset < 0 ) fieldQuoteID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     if( fieldTimeInForce.offset < 0 ) {
       fieldTimeInForce.offset = pos;
       if( TimeInForceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     if( fieldEffectiveTime.offset < 0 ) fieldEffectiveTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     if( fieldExpireDate.offset < 0 ) fieldExpireDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     if( fieldExpireTime.offset < 0 ) fieldExpireTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     if( fieldGTBookingInst.offset < 0 ) {
       fieldGTBookingInst.offset = pos;
       if( GTBookingInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     if( fieldCommission.offset < 0 ) fieldCommission.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     if( fieldCommType.offset < 0 ) {
       fieldCommType.offset = pos;
       if( CommTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     if( fieldCommCurrency.offset < 0 ) fieldCommCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     if( fieldFundRenewWaiv.offset < 0 ) {
       fieldFundRenewWaiv.offset = pos;
       if( FundRenewWaivEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     if( fieldOrderCapacity.offset < 0 ) {
       fieldOrderCapacity.offset = pos;
       if( OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     if( fieldOrderRestrictions.offset < 0 ) {
       fieldOrderRestrictions.offset = pos;
       if( OrderRestrictionsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     if( fieldCustOrderCapacity.offset < 0 ) {
       fieldCustOrderCapacity.offset = pos;
       if( CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     if( fieldForexReq.offset < 0 ) {
       fieldForexReq.offset = pos;
       if( ForexReqEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     if( fieldSettlCurrency.offset < 0 ) fieldSettlCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     if( fieldBookingType.offset < 0 ) {
       fieldBookingType.offset = pos;
       if( BookingTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     if( fieldPositionEffect.offset < 0 ) {
       fieldPositionEffect.offset = pos;
       if( PositionEffectEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     if( fieldCoveredOrUncovered.offset < 0 ) {
       fieldCoveredOrUncovered.offset = pos;
       if( CoveredOrUncoveredEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     if( fieldMaxShow.offset < 0 ) fieldMaxShow.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     if( fieldPegOffsetValue.offset < 0 ) fieldPegOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     if( fieldPegMoveType.offset < 0 ) {
       fieldPegMoveType.offset = pos;
       if( PegMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     if( fieldPegOffsetType.offset < 0 ) {
       fieldPegOffsetType.offset = pos;
       if( PegOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     if( fieldPegLimitType.offset < 0 ) {
       fieldPegLimitType.offset = pos;
       if( PegLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     if( fieldPegRoundDirection.offset < 0 ) {
       fieldPegRoundDirection.offset = pos;
       if( PegRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     if( fieldPegScope.offset < 0 ) {
       fieldPegScope.offset = pos;
       if( PegScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     if( fieldDiscretionInst.offset < 0 ) {
       fieldDiscretionInst.offset = pos;
       if( DiscretionInstEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     if( fieldDiscretionOffsetValue.offset < 0 ) fieldDiscretionOffsetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     if( fieldDiscretionMoveType.offset < 0 ) {
       fieldDiscretionMoveType.offset = pos;
       if( DiscretionMoveTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     if( fieldDiscretionOffsetType.offset < 0 ) {
       fieldDiscretionOffsetType.offset = pos;
       if( DiscretionOffsetTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     if( fieldDiscretionLimitType.offset < 0 ) {
       fieldDiscretionLimitType.offset = pos;
       if( DiscretionLimitTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     if( fieldDiscretionRoundDirection.offset < 0 ) {
       fieldDiscretionRoundDirection.offset = pos;
       if( DiscretionRoundDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     if( fieldDiscretionScope.offset < 0 ) {
       fieldDiscretionScope.offset = pos;
       if( DiscretionScopeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     if( fieldTargetStrategy.offset < 0 ) {
       fieldTargetStrategy.offset = pos;
       if( TargetStrategyEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     if( fieldTargetStrategyParameters.offset < 0 ) fieldTargetStrategyParameters.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     if( fieldParticipationRate.offset < 0 ) fieldParticipationRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     if( fieldCancellationRights.offset < 0 ) {
       fieldCancellationRights.offset = pos;
       if( CancellationRightsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     if( fieldMoneyLaunderingStatus.offset < 0 ) {
       fieldMoneyLaunderingStatus.offset = pos;
       if( MoneyLaunderingStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     if( fieldRegistID.offset < 0 ) fieldRegistID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     if( fieldDesignation.offset < 0 ) fieldDesignation.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegRptTypeReq) 
     if( fieldMultiLegRptTypeReq.offset < 0 ) {
       fieldMultiLegRptTypeReq.offset = pos;
       if( MultiLegRptTypeReqEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReportRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     if( fieldTradeRequestID.offset < 0 ) fieldTradeRequestID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestType) 
     if( fieldTradeRequestType.offset < 0 ) {
       fieldTradeRequestType.offset = pos;
       if( TradeRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportID) 
     if( fieldTradeReportID.offset < 0 ) fieldTradeReportID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     if( fieldSecondaryTradeReportID.offset < 0 ) fieldSecondaryTradeReportID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     if( fieldExecID.offset < 0 ) fieldExecID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     if( fieldExecType.offset < 0 ) {
       fieldExecType.offset = pos;
       if( ExecTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     if( fieldMatchStatus.offset < 0 ) {
       fieldMatchStatus.offset = pos;
       if( MatchStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdType) 
     if( fieldTrdType.offset < 0 ) {
       fieldTrdType.offset = pos;
       if( TrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTrdSubType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdSubType) 
     if( fieldTrdSubType.offset < 0 ) fieldTrdSubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransferReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TransferReason) 
     if( fieldTransferReason.offset < 0 ) fieldTransferReason.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     if( fieldSecondaryTrdType.offset < 0 ) fieldSecondaryTrdType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     if( fieldTradeLinkID.offset < 0 ) fieldTradeLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTrdMatchID::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     if( fieldTrdMatchID.offset < 0 ) fieldTrdMatchID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     if( fieldDeliveryForm.offset < 0 ) {
       fieldDeliveryForm.offset = pos;
       if( DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     if( fieldPctAtRisk.offset < 0 ) fieldPctAtRisk.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     if( fieldNoInstrAttrib.offset < 0 ){
       fieldNoInstrAttrib.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupInstrAttrib::scanSafely( groupsInstrAttrib, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoDates::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDates) 
     if( fieldNoDates.offset < 0 ){
       fieldNoDates.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupDates::scanSafely( groupsDates, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     if( fieldClearingBusinessDate.offset < 0 ) fieldClearingBusinessDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTimeBracket::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeBracket) 
     if( fieldTimeBracket.offset < 0 ) fieldTimeBracket.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     if( fieldMultiLegReportingType.offset < 0 ) {
       fieldMultiLegReportingType.offset = pos;
       if( MultiLegReportingTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeInputSource::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeInputSource) 
     if( fieldTradeInputSource.offset < 0 ) fieldTradeInputSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeInputDevice::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeInputDevice) 
     if( fieldTradeInputDevice.offset < 0 ) fieldTradeInputDevice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     if( fieldResponseTransportType.offset < 0 ) {
       fieldResponseTransportType.offset = pos;
       if( ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     if( fieldResponseDestination.offset < 0 ) fieldResponseDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReport::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportID) 
     if( fieldTradeReportID.offset < 0 ) fieldTradeReportID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeReportTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportTransType) 
     if( fieldTradeReportTransType.offset < 0 ) fieldTradeReportTransType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportType) 
     if( fieldTradeReportType.offset < 0 ) {
       fieldTradeReportType.offset = pos;
       if( TradeReportTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     if( fieldTradeRequestID.offset < 0 ) fieldTradeRequestID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdType) 
     if( fieldTrdType.offset < 0 ) {
       fieldTrdType.offset = pos;
       if( TrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTrdSubType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdSubType) 
     if( fieldTrdSubType.offset < 0 ) fieldTrdSubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     if( fieldSecondaryTrdType.offset < 0 ) fieldSecondaryTrdType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransferReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TransferReason) 
     if( fieldTransferReason.offset < 0 ) fieldTransferReason.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     if( fieldExecType.offset < 0 ) {
       fieldExecType.offset = pos;
       if( ExecTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumTradeReports) 
     if( fieldTotNumTradeReports.offset < 0 ) fieldTotNumTradeReports.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     if( fieldLastRptRequested.offset < 0 ) fieldLastRptRequested.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     if( fieldUnsolicitedIndicator.offset < 0 ) {
       fieldUnsolicitedIndicator.offset = pos;
       if( UnsolicitedIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportRefID) 
     if( fieldTradeReportRefID.offset < 0 ) fieldTradeReportRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportRefID) 
     if( fieldSecondaryTradeReportRefID.offset < 0 ) fieldSecondaryTradeReportRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     if( fieldSecondaryTradeReportID.offset < 0 ) fieldSecondaryTradeReportID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     if( fieldTradeLinkID.offset < 0 ) fieldTradeLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTrdMatchID::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     if( fieldTrdMatchID.offset < 0 ) fieldTrdMatchID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     if( fieldExecID.offset < 0 ) fieldExecID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     if( fieldOrdStatus.offset < 0 ) {
       fieldOrdStatus.offset = pos;
       if( OrdStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     if( fieldSecondaryExecID.offset < 0 ) fieldSecondaryExecID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecRestatementReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecRestatementReason) 
     if( fieldExecRestatementReason.offset < 0 ) {
       fieldExecRestatementReason.offset = pos;
       if( ExecRestatementReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPreviouslyReported::RAW_TAG :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     if( fieldPreviouslyReported.offset < 0 ) {
       fieldPreviouslyReported.offset = pos;
       if( PreviouslyReportedEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     if( fieldCashOrderQty.offset < 0 ) fieldCashOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     if( fieldOrderPercent.offset < 0 ) fieldOrderPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     if( fieldRoundingDirection.offset < 0 ) {
       fieldRoundingDirection.offset = pos;
       if( RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     if( fieldRoundingModulus.offset < 0 ) fieldRoundingModulus.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingTradingSessionID) 
     if( fieldUnderlyingTradingSessionID.offset < 0 ) fieldUnderlyingTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingTradingSessionSubID) 
     if( fieldUnderlyingTradingSessionSubID.offset < 0 ) fieldUnderlyingTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     if( fieldLastQty.offset < 0 ) fieldLastQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     if( fieldLastPx.offset < 0 ) fieldLastPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastParPx) 
     if( fieldLastParPx.offset < 0 ) fieldLastParPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(LastSpotRate) 
     if( fieldLastSpotRate.offset < 0 ) fieldLastSpotRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(LastForwardPoints) 
     if( fieldLastForwardPoints.offset < 0 ) fieldLastForwardPoints.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     if( fieldLastMkt.offset < 0 ) fieldLastMkt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     if( fieldClearingBusinessDate.offset < 0 ) fieldClearingBusinessDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     if( fieldAvgPx.offset < 0 ) fieldAvgPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgPxIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxIndicator) 
     if( fieldAvgPxIndicator.offset < 0 ) {
       fieldAvgPxIndicator.offset = pos;
       if( AvgPxIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     if( fieldNoPosAmt.offset < 0 ){
       fieldNoPosAmt.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPosAmt::scanSafely( groupsPosAmt, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     if( fieldMultiLegReportingType.offset < 0 ) {
       fieldMultiLegReportingType.offset = pos;
       if( MultiLegReportingTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeLegRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLegRefID) 
     if( fieldTradeLegRefID.offset < 0 ) fieldTradeLegRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     if( fieldNoTrdRegTimestamps.offset < 0 ){
       fieldNoTrdRegTimestamps.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrdRegTimestamps::scanSafely( groupsTrdRegTimestamps, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     if( fieldMatchStatus.offset < 0 ) {
       fieldMatchStatus.offset = pos;
       if( MatchStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMatchType::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchType) 
     if( fieldMatchType.offset < 0 ) {
       fieldMatchType.offset = pos;
       if( MatchTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     if( fieldNoSides.offset < 0 ){
       fieldNoSides.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSides::scanSafely( groupsSides, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     if( fieldCopyMsgIndicator.offset < 0 ) fieldCopyMsgIndicator.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPublishTrdIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(PublishTrdIndicator) 
     if( fieldPublishTrdIndicator.offset < 0 ) {
       fieldPublishTrdIndicator.offset = pos;
       if( PublishTrdIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldShortSaleReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ShortSaleReason) 
     if( fieldShortSaleReason.offset < 0 ) {
       fieldShortSaleReason.offset = pos;
       if( ShortSaleReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderMassStatusRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldMassStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MassStatusReqID) 
     if( fieldMassStatusReqID.offset < 0 ) fieldMassStatusReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMassStatusReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(MassStatusReqType) 
     if( fieldMassStatusReqType.offset < 0 ) {
       fieldMassStatusReqType.offset = pos;
       if( MassStatusReqTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     if( fieldUnderlyingSymbol.offset < 0 ) fieldUnderlyingSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     if( fieldUnderlyingSymbolSfx.offset < 0 ) fieldUnderlyingSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     if( fieldUnderlyingSecurityID.offset < 0 ) fieldUnderlyingSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     if( fieldUnderlyingSecurityIDSource.offset < 0 ) fieldUnderlyingSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     if( fieldNoUnderlyingSecurityAltID.offset < 0 ){
       fieldNoUnderlyingSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyingSecurityAltID::scanSafely( groupsUnderlyingSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     if( fieldUnderlyingProduct.offset < 0 ) fieldUnderlyingProduct.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     if( fieldUnderlyingCFICode.offset < 0 ) fieldUnderlyingCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     if( fieldUnderlyingSecurityType.offset < 0 ) fieldUnderlyingSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     if( fieldUnderlyingSecuritySubType.offset < 0 ) fieldUnderlyingSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     if( fieldUnderlyingMaturityMonthYear.offset < 0 ) fieldUnderlyingMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     if( fieldUnderlyingMaturityDate.offset < 0 ) fieldUnderlyingMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     if( fieldUnderlyingPutOrCall.offset < 0 ) fieldUnderlyingPutOrCall.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     if( fieldUnderlyingCouponPaymentDate.offset < 0 ) fieldUnderlyingCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     if( fieldUnderlyingIssueDate.offset < 0 ) fieldUnderlyingIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     if( fieldUnderlyingRepoCollateralSecurityType.offset < 0 ) fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     if( fieldUnderlyingRepurchaseTerm.offset < 0 ) fieldUnderlyingRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     if( fieldUnderlyingRepurchaseRate.offset < 0 ) fieldUnderlyingRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     if( fieldUnderlyingFactor.offset < 0 ) fieldUnderlyingFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     if( fieldUnderlyingCreditRating.offset < 0 ) fieldUnderlyingCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     if( fieldUnderlyingInstrRegistry.offset < 0 ) fieldUnderlyingInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     if( fieldUnderlyingCountryOfIssue.offset < 0 ) fieldUnderlyingCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     if( fieldUnderlyingStateOrProvinceOfIssue.offset < 0 ) fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     if( fieldUnderlyingLocaleOfIssue.offset < 0 ) fieldUnderlyingLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     if( fieldUnderlyingRedemptionDate.offset < 0 ) fieldUnderlyingRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     if( fieldUnderlyingStrikePrice.offset < 0 ) fieldUnderlyingStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     if( fieldUnderlyingStrikeCurrency.offset < 0 ) fieldUnderlyingStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     if( fieldUnderlyingOptAttribute.offset < 0 ) fieldUnderlyingOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     if( fieldUnderlyingContractMultiplier.offset < 0 ) fieldUnderlyingContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     if( fieldUnderlyingCouponRate.offset < 0 ) fieldUnderlyingCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     if( fieldUnderlyingSecurityExchange.offset < 0 ) fieldUnderlyingSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     if( fieldUnderlyingIssuer.offset < 0 ) fieldUnderlyingIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     if( fieldEncodedUnderlyingIssuerLen.offset < 0 ) fieldEncodedUnderlyingIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     if( fieldEncodedUnderlyingIssuer.offset < 0 ) fieldEncodedUnderlyingIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     if( fieldUnderlyingSecurityDesc.offset < 0 ) fieldUnderlyingSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     if( fieldEncodedUnderlyingSecurityDescLen.offset < 0 ) fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     if( fieldEncodedUnderlyingSecurityDesc.offset < 0 ) fieldEncodedUnderlyingSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     if( fieldUnderlyingCPProgram.offset < 0 ) fieldUnderlyingCPProgram.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     if( fieldUnderlyingCPRegType.offset < 0 ) fieldUnderlyingCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     if( fieldUnderlyingCurrency.offset < 0 ) fieldUnderlyingCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     if( fieldUnderlyingQty.offset < 0 ) fieldUnderlyingQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     if( fieldUnderlyingPx.offset < 0 ) fieldUnderlyingPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     if( fieldUnderlyingDirtyPrice.offset < 0 ) fieldUnderlyingDirtyPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     if( fieldUnderlyingEndPrice.offset < 0 ) fieldUnderlyingEndPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     if( fieldUnderlyingStartValue.offset < 0 ) fieldUnderlyingStartValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     if( fieldUnderlyingCurrentValue.offset < 0 ) fieldUnderlyingCurrentValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     if( fieldUnderlyingEndValue.offset < 0 ) fieldUnderlyingEndValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     if( fieldNoUnderlyingStips.offset < 0 ){
       fieldNoUnderlyingStips.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyingStips::scanSafely( groupsUnderlyingStips, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteRequestReject::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     if( fieldQuoteReqID.offset < 0 ) fieldQuoteReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRFQReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(RFQReqID) 
     if( fieldRFQReqID.offset < 0 ) fieldRFQReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteRequestRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRequestRejectReason) 
     if( fieldQuoteRequestRejectReason.offset < 0 ) {
       fieldQuoteRequestRejectReason.offset = pos;
       if( QuoteRequestRejectReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     if( fieldNoRelatedSym.offset < 0 ){
       fieldNoRelatedSym.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupRelatedSym::scanSafely( groupsRelatedSym, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRFQRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldRFQReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(RFQReqID) 
     if( fieldRFQReqID.offset < 0 ) fieldRFQReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     if( fieldNoRelatedSym.offset < 0 ){
       fieldNoRelatedSym.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupRelatedSym::scanSafely( groupsRelatedSym, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteStatusReport::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatusReqID) 
     if( fieldQuoteStatusReqID.offset < 0 ) fieldQuoteStatusReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     if( fieldQuoteReqID.offset < 0 ) fieldQuoteReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     if( fieldQuoteID.offset < 0 ) fieldQuoteID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     if( fieldQuoteRespID.offset < 0 ) fieldQuoteRespID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     if( fieldQuoteType.offset < 0 ) {
       fieldQuoteType.offset = pos;
       if( QuoteTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     if( fieldCashOrderQty.offset < 0 ) fieldCashOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     if( fieldOrderPercent.offset < 0 ) fieldOrderPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     if( fieldRoundingDirection.offset < 0 ) {
       fieldRoundingDirection.offset = pos;
       if( RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     if( fieldRoundingModulus.offset < 0 ) fieldRoundingModulus.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     if( fieldSettlDate2.offset < 0 ) fieldSettlDate2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     if( fieldOrderQty2.offset < 0 ) fieldOrderQty2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     if( fieldNoQuoteQualifiers.offset < 0 ){
       fieldNoQuoteQualifiers.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupQuoteQualifiers::scanSafely( groupsQuoteQualifiers, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     if( fieldExpireTime.offset < 0 ) fieldExpireTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(BidPx) 
     if( fieldBidPx.offset < 0 ) fieldBidPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferPx) 
     if( fieldOfferPx.offset < 0 ) fieldOfferPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMktBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktBidPx) 
     if( fieldMktBidPx.offset < 0 ) fieldMktBidPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMktOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     if( fieldMktOfferPx.offset < 0 ) fieldMktOfferPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinBidSize) 
     if( fieldMinBidSize.offset < 0 ) fieldMinBidSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSize) 
     if( fieldBidSize.offset < 0 ) fieldBidSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     if( fieldMinOfferSize.offset < 0 ) fieldMinOfferSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSize) 
     if( fieldOfferSize.offset < 0 ) fieldOfferSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     if( fieldValidUntilTime.offset < 0 ) fieldValidUntilTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     if( fieldBidSpotRate.offset < 0 ) fieldBidSpotRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     if( fieldOfferSpotRate.offset < 0 ) fieldOfferSpotRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     if( fieldBidForwardPoints.offset < 0 ) fieldBidForwardPoints.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     if( fieldOfferForwardPoints.offset < 0 ) fieldOfferForwardPoints.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MidPx) 
     if( fieldMidPx.offset < 0 ) fieldMidPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(BidYield) 
     if( fieldBidYield.offset < 0 ) fieldBidYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(MidYield) 
     if( fieldMidYield.offset < 0 ) fieldMidYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferYield::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferYield) 
     if( fieldOfferYield.offset < 0 ) fieldOfferYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     if( fieldOrdType.offset < 0 ) {
       fieldOrdType.offset = pos;
       if( OrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     if( fieldBidForwardPoints2.offset < 0 ) fieldBidForwardPoints2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     if( fieldOfferForwardPoints2.offset < 0 ) fieldOfferForwardPoints2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     if( fieldSettlCurrBidFxRate.offset < 0 ) fieldSettlCurrBidFxRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     if( fieldSettlCurrOfferFxRate.offset < 0 ) fieldSettlCurrOfferFxRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     if( fieldSettlCurrFxRateCalc.offset < 0 ) {
       fieldSettlCurrFxRateCalc.offset = pos;
       if( SettlCurrFxRateCalcEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     if( fieldCommType.offset < 0 ) {
       fieldCommType.offset = pos;
       if( CommTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     if( fieldCommission.offset < 0 ) fieldCommission.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     if( fieldCustOrderCapacity.offset < 0 ) {
       fieldCustOrderCapacity.offset = pos;
       if( CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     if( fieldExDestination.offset < 0 ) fieldExDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatus) 
     if( fieldQuoteStatus.offset < 0 ) {
       fieldQuoteStatus.offset = pos;
       if( QuoteStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteResponse::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     if( fieldQuoteRespID.offset < 0 ) fieldQuoteRespID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     if( fieldQuoteID.offset < 0 ) fieldQuoteID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteRespType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespType) 
     if( fieldQuoteRespType.offset < 0 ) {
       fieldQuoteRespType.offset = pos;
       if( QuoteRespTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     if( fieldOrderCapacity.offset < 0 ) {
       fieldOrderCapacity.offset = pos;
       if( OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     if( fieldIOIID.offset < 0 ) fieldIOIID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     if( fieldQuoteType.offset < 0 ) {
       fieldQuoteType.offset = pos;
       if( QuoteTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     if( fieldNoQuoteQualifiers.offset < 0 ){
       fieldNoQuoteQualifiers.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupQuoteQualifiers::scanSafely( groupsQuoteQualifiers, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     if( fieldCashOrderQty.offset < 0 ) fieldCashOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     if( fieldOrderPercent.offset < 0 ) fieldOrderPercent.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     if( fieldRoundingDirection.offset < 0 ) {
       fieldRoundingDirection.offset = pos;
       if( RoundingDirectionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     if( fieldRoundingModulus.offset < 0 ) fieldRoundingModulus.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     if( fieldSettlDate2.offset < 0 ) fieldSettlDate2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     if( fieldOrderQty2.offset < 0 ) fieldOrderQty2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(BidPx) 
     if( fieldBidPx.offset < 0 ) fieldBidPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferPx) 
     if( fieldOfferPx.offset < 0 ) fieldOfferPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMktBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktBidPx) 
     if( fieldMktBidPx.offset < 0 ) fieldMktBidPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMktOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     if( fieldMktOfferPx.offset < 0 ) fieldMktOfferPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinBidSize) 
     if( fieldMinBidSize.offset < 0 ) fieldMinBidSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSize) 
     if( fieldBidSize.offset < 0 ) fieldBidSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMinOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     if( fieldMinOfferSize.offset < 0 ) fieldMinOfferSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSize) 
     if( fieldOfferSize.offset < 0 ) fieldOfferSize.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     if( fieldValidUntilTime.offset < 0 ) fieldValidUntilTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     if( fieldBidSpotRate.offset < 0 ) fieldBidSpotRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     if( fieldOfferSpotRate.offset < 0 ) fieldOfferSpotRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     if( fieldBidForwardPoints.offset < 0 ) fieldBidForwardPoints.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     if( fieldOfferForwardPoints.offset < 0 ) fieldOfferForwardPoints.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MidPx) 
     if( fieldMidPx.offset < 0 ) fieldMidPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(BidYield) 
     if( fieldBidYield.offset < 0 ) fieldBidYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(MidYield) 
     if( fieldMidYield.offset < 0 ) fieldMidYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferYield::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferYield) 
     if( fieldOfferYield.offset < 0 ) fieldOfferYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     if( fieldOrdType.offset < 0 ) {
       fieldOrdType.offset = pos;
       if( OrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     if( fieldBidForwardPoints2.offset < 0 ) fieldBidForwardPoints2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     if( fieldOfferForwardPoints2.offset < 0 ) fieldOfferForwardPoints2.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     if( fieldSettlCurrBidFxRate.offset < 0 ) fieldSettlCurrBidFxRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     if( fieldSettlCurrOfferFxRate.offset < 0 ) fieldSettlCurrOfferFxRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     if( fieldSettlCurrFxRateCalc.offset < 0 ) {
       fieldSettlCurrFxRateCalc.offset = pos;
       if( SettlCurrFxRateCalcEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     if( fieldCommission.offset < 0 ) fieldCommission.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     if( fieldCommType.offset < 0 ) {
       fieldCommType.offset = pos;
       if( CommTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     if( fieldCustOrderCapacity.offset < 0 ) {
       fieldCustOrderCapacity.offset = pos;
       if( CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     if( fieldExDestination.offset < 0 ) fieldExDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageConfirmation::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmID) 
     if( fieldConfirmID.offset < 0 ) fieldConfirmID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldConfirmRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmRefID) 
     if( fieldConfirmRefID.offset < 0 ) fieldConfirmRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldConfirmReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmReqID) 
     if( fieldConfirmReqID.offset < 0 ) fieldConfirmReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldConfirmTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmTransType) 
     if( fieldConfirmTransType.offset < 0 ) {
       fieldConfirmTransType.offset = pos;
       if( ConfirmTransTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldConfirmType::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmType) 
     if( fieldConfirmType.offset < 0 ) {
       fieldConfirmType.offset = pos;
       if( ConfirmTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     if( fieldCopyMsgIndicator.offset < 0 ) fieldCopyMsgIndicator.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLegalConfirm::RAW_TAG :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     if( fieldLegalConfirm.offset < 0 ) {
       fieldLegalConfirm.offset = pos;
       if( LegalConfirmEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldConfirmStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmStatus) 
     if( fieldConfirmStatus.offset < 0 ) {
       fieldConfirmStatus.offset = pos;
       if( ConfirmStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     if( fieldNoOrders.offset < 0 ){
       fieldNoOrders.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupOrders::scanSafely( groupsOrders, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     if( fieldAllocID.offset < 0 ) fieldAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     if( fieldSecondaryAllocID.offset < 0 ) fieldSecondaryAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIndividualAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(IndividualAllocID) 
     if( fieldIndividualAllocID.offset < 0 ) fieldIndividualAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     if( fieldNoTrdRegTimestamps.offset < 0 ){
       fieldNoTrdRegTimestamps.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrdRegTimestamps::scanSafely( groupsTrdRegTimestamps, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     if( fieldDeliveryForm.offset < 0 ) {
       fieldDeliveryForm.offset = pos;
       if( DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     if( fieldPctAtRisk.offset < 0 ) fieldPctAtRisk.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     if( fieldNoInstrAttrib.offset < 0 ){
       fieldNoInstrAttrib.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupInstrAttrib::scanSafely( groupsInstrAttrib, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocQty::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocQty) 
     if( fieldAllocQty.offset < 0 ) fieldAllocQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     if( fieldLastMkt.offset < 0 ) fieldLastMkt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoCapacities::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCapacities) 
     if( fieldNoCapacities.offset < 0 ){
       fieldNoCapacities.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupCapacities::scanSafely( groupsCapacities, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAllocAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccount) 
     if( fieldAllocAccount.offset < 0 ) fieldAllocAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     if( fieldAllocAcctIDSource.offset < 0 ) fieldAllocAcctIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccountType) 
     if( fieldAllocAccountType.offset < 0 ) {
       fieldAllocAccountType.offset = pos;
       if( AllocAccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     if( fieldAvgPx.offset < 0 ) fieldAvgPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     if( fieldAvgPxPrecision.offset < 0 ) fieldAvgPxPrecision.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgParPx) 
     if( fieldAvgParPx.offset < 0 ) fieldAvgParPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldReportedPx::RAW_TAG :
     FIXPP_PRINT_FIELD(ReportedPx) 
     if( fieldReportedPx.offset < 0 ) fieldReportedPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     if( fieldProcessCode.offset < 0 ) {
       fieldProcessCode.offset = pos;
       if( ProcessCodeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     if( fieldGrossTradeAmt.offset < 0 ) fieldGrossTradeAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     if( fieldNumDaysInterest.offset < 0 ) fieldNumDaysInterest.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDate) 
     if( fieldExDate.offset < 0 ) fieldExDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     if( fieldAccruedInterestRate.offset < 0 ) fieldAccruedInterestRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     if( fieldAccruedInterestAmt.offset < 0 ) fieldAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     if( fieldInterestAtMaturity.offset < 0 ) fieldInterestAtMaturity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     if( fieldEndAccruedInterestAmt.offset < 0 ) fieldEndAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     if( fieldStartCash.offset < 0 ) fieldStartCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     if( fieldEndCash.offset < 0 ) fieldEndCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     if( fieldConcession.offset < 0 ) fieldConcession.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     if( fieldTotalTakedown.offset < 0 ) fieldTotalTakedown.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     if( fieldNetMoney.offset < 0 ) fieldNetMoney.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityNetMoney) 
     if( fieldMaturityNetMoney.offset < 0 ) fieldMaturityNetMoney.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrAmt) 
     if( fieldSettlCurrAmt.offset < 0 ) fieldSettlCurrAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     if( fieldSettlCurrency.offset < 0 ) fieldSettlCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRate) 
     if( fieldSettlCurrFxRate.offset < 0 ) fieldSettlCurrFxRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     if( fieldSettlCurrFxRateCalc.offset < 0 ) {
       fieldSettlCurrFxRateCalc.offset = pos;
       if( SettlCurrFxRateCalcEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     if( fieldSettlDeliveryType.offset < 0 ) {
       fieldSettlDeliveryType.offset = pos;
       if( SettlDeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     if( fieldStandInstDbType.offset < 0 ) {
       fieldStandInstDbType.offset = pos;
       if( StandInstDbTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     if( fieldStandInstDbName.offset < 0 ) fieldStandInstDbName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     if( fieldStandInstDbID.offset < 0 ) fieldStandInstDbID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     if( fieldNoDlvyInst.offset < 0 ){
       fieldNoDlvyInst.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupDlvyInst::scanSafely( groupsDlvyInst, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     if( fieldCommission.offset < 0 ) fieldCommission.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     if( fieldCommType.offset < 0 ) {
       fieldCommType.offset = pos;
       if( CommTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     if( fieldCommCurrency.offset < 0 ) fieldCommCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     if( fieldFundRenewWaiv.offset < 0 ) {
       fieldFundRenewWaiv.offset = pos;
       if( FundRenewWaivEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSharedCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(SharedCommission) 
     if( fieldSharedCommission.offset < 0 ) fieldSharedCommission.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     if( fieldNoMiscFees.offset < 0 ){
       fieldNoMiscFees.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupMiscFees::scanSafely( groupsMiscFees, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessagePositionMaintenanceRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     if( fieldPosReqID.offset < 0 ) fieldPosReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosTransType) 
     if( fieldPosTransType.offset < 0 ) {
       fieldPosTransType.offset = pos;
       if( PosTransTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosMaintAction::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintAction) 
     if( fieldPosMaintAction.offset < 0 ) {
       fieldPosMaintAction.offset = pos;
       if( PosMaintActionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigPosReqRefID) 
     if( fieldOrigPosReqRefID.offset < 0 ) fieldOrigPosReqRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosMaintRptRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptRefID) 
     if( fieldPosMaintRptRefID.offset < 0 ) fieldPosMaintRptRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     if( fieldClearingBusinessDate.offset < 0 ) fieldClearingBusinessDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     if( fieldSettlSessID.offset < 0 ) {
       fieldSettlSessID.offset = pos;
       if( SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     if( fieldSettlSessSubID.offset < 0 ) fieldSettlSessSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     if( fieldNoTradingSessions.offset < 0 ){
       fieldNoTradingSessions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTradingSessions::scanSafely( groupsTradingSessions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     if( fieldNoPositions.offset < 0 ){
       fieldNoPositions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPositions::scanSafely( groupsPositions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAdjustmentType::RAW_TAG :
     FIXPP_PRINT_FIELD(AdjustmentType) 
     if( fieldAdjustmentType.offset < 0 ) {
       fieldAdjustmentType.offset = pos;
       if( AdjustmentTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldContraryInstructionIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ContraryInstructionIndicator) 
     if( fieldContraryInstructionIndicator.offset < 0 ) fieldContraryInstructionIndicator.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriorSpreadIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(PriorSpreadIndicator) 
     if( fieldPriorSpreadIndicator.offset < 0 ) fieldPriorSpreadIndicator.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldThresholdAmount::RAW_TAG :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     if( fieldThresholdAmount.offset < 0 ) fieldThresholdAmount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessagePositionMaintenanceReport::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     if( fieldPosMaintRptID.offset < 0 ) fieldPosMaintRptID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosTransType) 
     if( fieldPosTransType.offset < 0 ) {
       fieldPosTransType.offset = pos;
       if( PosTransTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     if( fieldPosReqID.offset < 0 ) fieldPosReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosMaintAction::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintAction) 
     if( fieldPosMaintAction.offset < 0 ) {
       fieldPosMaintAction.offset = pos;
       if( PosMaintActionEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigPosReqRefID) 
     if( fieldOrigPosReqRefID.offset < 0 ) fieldOrigPosReqRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosMaintStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintStatus) 
     if( fieldPosMaintStatus.offset < 0 ) {
       fieldPosMaintStatus.offset = pos;
       if( PosMaintStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosMaintResult::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintResult) 
     if( fieldPosMaintResult.offset < 0 ) {
       fieldPosMaintResult.offset = pos;
       if( PosMaintResultEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     if( fieldClearingBusinessDate.offset < 0 ) fieldClearingBusinessDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     if( fieldSettlSessID.offset < 0 ) {
       fieldSettlSessID.offset = pos;
       if( SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     if( fieldSettlSessSubID.offset < 0 ) fieldSettlSessSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     if( fieldNoTradingSessions.offset < 0 ){
       fieldNoTradingSessions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTradingSessions::scanSafely( groupsTradingSessions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     if( fieldNoPositions.offset < 0 ){
       fieldNoPositions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPositions::scanSafely( groupsPositions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     if( fieldNoPosAmt.offset < 0 ){
       fieldNoPosAmt.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPosAmt::scanSafely( groupsPosAmt, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAdjustmentType::RAW_TAG :
     FIXPP_PRINT_FIELD(AdjustmentType) 
     if( fieldAdjustmentType.offset < 0 ) {
       fieldAdjustmentType.offset = pos;
       if( AdjustmentTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldThresholdAmount::RAW_TAG :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     if( fieldThresholdAmount.offset < 0 ) fieldThresholdAmount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRequestForPositions::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     if( fieldPosReqID.offset < 0 ) fieldPosReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqType) 
     if( fieldPosReqType.offset < 0 ) {
       fieldPosReqType.offset = pos;
       if( PosReqTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     if( fieldMatchStatus.offset < 0 ) {
       fieldMatchStatus.offset = pos;
       if( MatchStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     if( fieldClearingBusinessDate.offset < 0 ) fieldClearingBusinessDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     if( fieldSettlSessID.offset < 0 ) {
       fieldSettlSessID.offset = pos;
       if( SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     if( fieldSettlSessSubID.offset < 0 ) fieldSettlSessSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     if( fieldNoTradingSessions.offset < 0 ){
       fieldNoTradingSessions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTradingSessions::scanSafely( groupsTradingSessions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     if( fieldResponseTransportType.offset < 0 ) {
       fieldResponseTransportType.offset = pos;
       if( ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     if( fieldResponseDestination.offset < 0 ) fieldResponseDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRequestForPositionsAck::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     if( fieldPosMaintRptID.offset < 0 ) fieldPosMaintRptID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     if( fieldPosReqID.offset < 0 ) fieldPosReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNumPosReports) 
     if( fieldTotalNumPosReports.offset < 0 ) fieldTotalNumPosReports.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     if( fieldUnsolicitedIndicator.offset < 0 ) {
       fieldUnsolicitedIndicator.offset = pos;
       if( UnsolicitedIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosReqResult::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqResult) 
     if( fieldPosReqResult.offset < 0 ) {
       fieldPosReqResult.offset = pos;
       if( PosReqResultEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosReqStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqStatus) 
     if( fieldPosReqStatus.offset < 0 ) {
       fieldPosReqStatus.offset = pos;
       if( PosReqStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     if( fieldResponseTransportType.offset < 0 ) {
       fieldResponseTransportType.offset = pos;
       if( ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     if( fieldResponseDestination.offset < 0 ) fieldResponseDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessagePositionReport::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     if( fieldPosMaintRptID.offset < 0 ) fieldPosMaintRptID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     if( fieldPosReqID.offset < 0 ) fieldPosReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqType) 
     if( fieldPosReqType.offset < 0 ) {
       fieldPosReqType.offset = pos;
       if( PosReqTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNumPosReports) 
     if( fieldTotalNumPosReports.offset < 0 ) fieldTotalNumPosReports.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     if( fieldUnsolicitedIndicator.offset < 0 ) {
       fieldUnsolicitedIndicator.offset = pos;
       if( UnsolicitedIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPosReqResult::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqResult) 
     if( fieldPosReqResult.offset < 0 ) {
       fieldPosReqResult.offset = pos;
       if( PosReqResultEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     if( fieldClearingBusinessDate.offset < 0 ) fieldClearingBusinessDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     if( fieldSettlSessID.offset < 0 ) {
       fieldSettlSessID.offset = pos;
       if( SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     if( fieldSettlSessSubID.offset < 0 ) fieldSettlSessSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPrice) 
     if( fieldSettlPrice.offset < 0 ) fieldSettlPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPriceType) 
     if( fieldSettlPriceType.offset < 0 ) {
       fieldSettlPriceType.offset = pos;
       if( SettlPriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriorSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(PriorSettlPrice) 
     if( fieldPriorSettlPrice.offset < 0 ) fieldPriorSettlPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     if( fieldNoPositions.offset < 0 ){
       fieldNoPositions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPositions::scanSafely( groupsPositions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     if( fieldNoPosAmt.offset < 0 ){
       fieldNoPosAmt.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPosAmt::scanSafely( groupsPosAmt, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldRegistStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistStatus) 
     if( fieldRegistStatus.offset < 0 ) {
       fieldRegistStatus.offset = pos;
       if( RegistStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryDate) 
     if( fieldDeliveryDate.offset < 0 ) fieldDeliveryDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReportRequestAck::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     if( fieldTradeRequestID.offset < 0 ) fieldTradeRequestID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestType) 
     if( fieldTradeRequestType.offset < 0 ) {
       fieldTradeRequestType.offset = pos;
       if( TradeRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumTradeReports) 
     if( fieldTotNumTradeReports.offset < 0 ) fieldTotNumTradeReports.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeRequestResult::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestResult) 
     if( fieldTradeRequestResult.offset < 0 ) {
       fieldTradeRequestResult.offset = pos;
       if( TradeRequestResultEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeRequestStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestStatus) 
     if( fieldTradeRequestStatus.offset < 0 ) {
       fieldTradeRequestStatus.offset = pos;
       if( TradeRequestStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     if( fieldMultiLegReportingType.offset < 0 ) {
       fieldMultiLegReportingType.offset = pos;
       if( MultiLegReportingTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     if( fieldResponseTransportType.offset < 0 ) {
       fieldResponseTransportType.offset = pos;
       if( ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     if( fieldResponseDestination.offset < 0 ) fieldResponseDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReportAck::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportID) 
     if( fieldTradeReportID.offset < 0 ) fieldTradeReportID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeReportTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportTransType) 
     if( fieldTradeReportTransType.offset < 0 ) fieldTradeReportTransType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportType) 
     if( fieldTradeReportType.offset < 0 ) {
       fieldTradeReportType.offset = pos;
       if( TradeReportTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdType) 
     if( fieldTrdType.offset < 0 ) {
       fieldTrdType.offset = pos;
       if( TrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTrdSubType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdSubType) 
     if( fieldTrdSubType.offset < 0 ) fieldTrdSubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     if( fieldSecondaryTrdType.offset < 0 ) fieldSecondaryTrdType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransferReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TransferReason) 
     if( fieldTransferReason.offset < 0 ) fieldTransferReason.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     if( fieldExecType.offset < 0 ) {
       fieldExecType.offset = pos;
       if( ExecTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportRefID) 
     if( fieldTradeReportRefID.offset < 0 ) fieldTradeReportRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportRefID) 
     if( fieldSecondaryTradeReportRefID.offset < 0 ) fieldSecondaryTradeReportRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTrdRptStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdRptStatus) 
     if( fieldTrdRptStatus.offset < 0 ) {
       fieldTrdRptStatus.offset = pos;
       if( TrdRptStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeReportRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportRejectReason) 
     if( fieldTradeReportRejectReason.offset < 0 ) {
       fieldTradeReportRejectReason.offset = pos;
       if( TradeReportRejectReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     if( fieldSecondaryTradeReportID.offset < 0 ) fieldSecondaryTradeReportID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     if( fieldTradeLinkID.offset < 0 ) fieldTradeLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTrdMatchID::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     if( fieldTrdMatchID.offset < 0 ) fieldTrdMatchID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     if( fieldExecID.offset < 0 ) fieldExecID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     if( fieldSecondaryExecID.offset < 0 ) fieldSecondaryExecID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     if( fieldNoTrdRegTimestamps.offset < 0 ){
       fieldNoTrdRegTimestamps.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrdRegTimestamps::scanSafely( groupsTrdRegTimestamps, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     if( fieldResponseTransportType.offset < 0 ) {
       fieldResponseTransportType.offset = pos;
       if( ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     if( fieldResponseDestination.offset < 0 ) fieldResponseDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     if( fieldClearingFeeIndicator.offset < 0 ) {
       fieldClearingFeeIndicator.offset = pos;
       if( ClearingFeeIndicatorEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     if( fieldOrderCapacity.offset < 0 ) {
       fieldOrderCapacity.offset = pos;
       if( OrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     if( fieldOrderRestrictions.offset < 0 ) {
       fieldOrderRestrictions.offset = pos;
       if( OrderRestrictionsEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     if( fieldCustOrderCapacity.offset < 0 ) {
       fieldCustOrderCapacity.offset = pos;
       if( CustOrderCapacityEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     if( fieldAcctIDSource.offset < 0 ) {
       fieldAcctIDSource.offset = pos;
       if( AcctIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     if( fieldPositionEffect.offset < 0 ) {
       fieldPositionEffect.offset = pos;
       if( PositionEffectEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     if( fieldPreallocMethod.offset < 0 ) {
       fieldPreallocMethod.offset = pos;
       if( PreallocMethodEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     if( fieldNoAllocs.offset < 0 ){
       fieldNoAllocs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupAllocs::scanSafely( groupsAllocs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationReport::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportID) 
     if( fieldAllocReportID.offset < 0 ) fieldAllocReportID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     if( fieldAllocID.offset < 0 ) fieldAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocTransType) 
     if( fieldAllocTransType.offset < 0 ) {
       fieldAllocTransType.offset = pos;
       if( AllocTransTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportRefID) 
     if( fieldAllocReportRefID.offset < 0 ) fieldAllocReportRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocCancReplaceReason) 
     if( fieldAllocCancReplaceReason.offset < 0 ) {
       fieldAllocCancReplaceReason.offset = pos;
       if( AllocCancReplaceReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     if( fieldSecondaryAllocID.offset < 0 ) fieldSecondaryAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportType) 
     if( fieldAllocReportType.offset < 0 ) {
       fieldAllocReportType.offset = pos;
       if( AllocReportTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocStatus) 
     if( fieldAllocStatus.offset < 0 ) {
       fieldAllocStatus.offset = pos;
       if( AllocStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     if( fieldAllocRejCode.offset < 0 ) {
       fieldAllocRejCode.offset = pos;
       if( AllocRejCodeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldRefAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(RefAllocID) 
     if( fieldRefAllocID.offset < 0 ) fieldRefAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     if( fieldAllocIntermedReqType.offset < 0 ) {
       fieldAllocIntermedReqType.offset = pos;
       if( AllocIntermedReqTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkID) 
     if( fieldAllocLinkID.offset < 0 ) fieldAllocLinkID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocLinkType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkType) 
     if( fieldAllocLinkType.offset < 0 ) {
       fieldAllocLinkType.offset = pos;
       if( AllocLinkTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingRefID) 
     if( fieldBookingRefID.offset < 0 ) fieldBookingRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocNoOrdersType) 
     if( fieldAllocNoOrdersType.offset < 0 ) {
       fieldAllocNoOrdersType.offset = pos;
       if( AllocNoOrdersTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     if( fieldNoOrders.offset < 0 ){
       fieldNoOrders.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupOrders::scanSafely( groupsOrders, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     if( fieldNoExecs.offset < 0 ){
       fieldNoExecs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupExecs::scanSafely( groupsExecs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldPreviouslyReported::RAW_TAG :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     if( fieldPreviouslyReported.offset < 0 ) {
       fieldPreviouslyReported.offset = pos;
       if( PreviouslyReportedEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldReversalIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ReversalIndicator) 
     if( fieldReversalIndicator.offset < 0 ) fieldReversalIndicator.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMatchType::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchType) 
     if( fieldMatchType.offset < 0 ) {
       fieldMatchType.offset = pos;
       if( MatchTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     if( fieldDeliveryForm.offset < 0 ) {
       fieldDeliveryForm.offset = pos;
       if( DeliveryFormEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     if( fieldPctAtRisk.offset < 0 ) fieldPctAtRisk.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     if( fieldNoInstrAttrib.offset < 0 ){
       fieldNoInstrAttrib.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupInstrAttrib::scanSafely( groupsInstrAttrib, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     if( fieldQuantity.offset < 0 ) fieldQuantity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     if( fieldLastMkt.offset < 0 ) fieldLastMkt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     if( fieldTradeOriginationDate.offset < 0 ) fieldTradeOriginationDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     if( fieldAvgPx.offset < 0 ) fieldAvgPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgParPx) 
     if( fieldAvgParPx.offset < 0 ) fieldAvgParPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     if( fieldAvgPxPrecision.offset < 0 ) fieldAvgPxPrecision.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     if( fieldSettlType.offset < 0 ) {
       fieldSettlType.offset = pos;
       if( SettlTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     if( fieldBookingType.offset < 0 ) {
       fieldBookingType.offset = pos;
       if( BookingTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     if( fieldGrossTradeAmt.offset < 0 ) fieldGrossTradeAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     if( fieldConcession.offset < 0 ) fieldConcession.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     if( fieldTotalTakedown.offset < 0 ) fieldTotalTakedown.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     if( fieldNetMoney.offset < 0 ) fieldNetMoney.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     if( fieldPositionEffect.offset < 0 ) {
       fieldPositionEffect.offset = pos;
       if( PositionEffectEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(AutoAcceptIndicator) 
     if( fieldAutoAcceptIndicator.offset < 0 ) fieldAutoAcceptIndicator.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     if( fieldNumDaysInterest.offset < 0 ) fieldNumDaysInterest.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     if( fieldAccruedInterestRate.offset < 0 ) fieldAccruedInterestRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     if( fieldAccruedInterestAmt.offset < 0 ) fieldAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalAccruedInterestAmt) 
     if( fieldTotalAccruedInterestAmt.offset < 0 ) fieldTotalAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     if( fieldInterestAtMaturity.offset < 0 ) fieldInterestAtMaturity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     if( fieldEndAccruedInterestAmt.offset < 0 ) fieldEndAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     if( fieldStartCash.offset < 0 ) fieldStartCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     if( fieldEndCash.offset < 0 ) fieldEndCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLegalConfirm::RAW_TAG :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     if( fieldLegalConfirm.offset < 0 ) {
       fieldLegalConfirm.offset = pos;
       if( LegalConfirmEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     if( fieldYieldType.offset < 0 ) {
       fieldYieldType.offset = pos;
       if( YieldTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     if( fieldYield.offset < 0 ) fieldYield.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     if( fieldYieldCalcDate.offset < 0 ) fieldYieldCalcDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     if( fieldYieldRedemptionDate.offset < 0 ) fieldYieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     if( fieldYieldRedemptionPrice.offset < 0 ) fieldYieldRedemptionPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     if( fieldYieldRedemptionPriceType.offset < 0 ) fieldYieldRedemptionPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoAllocs) 
     if( fieldTotNoAllocs.offset < 0 ) fieldTotNoAllocs.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     if( fieldLastFragment.offset < 0 ) {
       fieldLastFragment.offset = pos;
       if( LastFragmentEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     if( fieldNoAllocs.offset < 0 ){
       fieldNoAllocs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupAllocs::scanSafely( groupsAllocs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationReportAck::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportID) 
     if( fieldAllocReportID.offset < 0 ) fieldAllocReportID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     if( fieldAllocID.offset < 0 ) fieldAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     if( fieldSecondaryAllocID.offset < 0 ) fieldSecondaryAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocStatus) 
     if( fieldAllocStatus.offset < 0 ) {
       fieldAllocStatus.offset = pos;
       if( AllocStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     if( fieldAllocRejCode.offset < 0 ) {
       fieldAllocRejCode.offset = pos;
       if( AllocRejCodeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportType) 
     if( fieldAllocReportType.offset < 0 ) {
       fieldAllocReportType.offset = pos;
       if( AllocReportTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     if( fieldAllocIntermedReqType.offset < 0 ) {
       fieldAllocIntermedReqType.offset = pos;
       if( AllocIntermedReqTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     if( fieldMatchStatus.offset < 0 ) {
       fieldMatchStatus.offset = pos;
       if( MatchStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     if( fieldNoAllocs.offset < 0 ){
       fieldNoAllocs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupAllocs::scanSafely( groupsAllocs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageConfirmationAck::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmID) 
     if( fieldConfirmID.offset < 0 ) fieldConfirmID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     if( fieldTradeDate.offset < 0 ) fieldTradeDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAffirmStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AffirmStatus) 
     if( fieldAffirmStatus.offset < 0 ) {
       fieldAffirmStatus.offset = pos;
       if( AffirmStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldConfirmRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmRejReason) 
     if( fieldConfirmRejReason.offset < 0 ) {
       fieldConfirmRejReason.offset = pos;
       if( ConfirmRejReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     if( fieldMatchStatus.offset < 0 ) {
       fieldMatchStatus.offset = pos;
       if( MatchStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSettlementInstructionRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldSettlInstReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstReqID) 
     if( fieldSettlInstReqID.offset < 0 ) fieldSettlInstReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAllocAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccount) 
     if( fieldAllocAccount.offset < 0 ) fieldAllocAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     if( fieldAllocAcctIDSource.offset < 0 ) fieldAllocAcctIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     if( fieldEffectiveTime.offset < 0 ) fieldEffectiveTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     if( fieldExpireTime.offset < 0 ) fieldExpireTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastUpdateTime::RAW_TAG :
     FIXPP_PRINT_FIELD(LastUpdateTime) 
     if( fieldLastUpdateTime.offset < 0 ) fieldLastUpdateTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     if( fieldStandInstDbType.offset < 0 ) {
       fieldStandInstDbType.offset = pos;
       if( StandInstDbTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     if( fieldStandInstDbName.offset < 0 ) fieldStandInstDbName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     if( fieldStandInstDbID.offset < 0 ) fieldStandInstDbID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAssignmentReport::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldAsgnRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(AsgnRptID) 
     if( fieldAsgnRptID.offset < 0 ) fieldAsgnRptID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNumAssignmentReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumAssignmentReports) 
     if( fieldTotNumAssignmentReports.offset < 0 ) fieldTotNumAssignmentReports.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     if( fieldLastRptRequested.offset < 0 ) fieldLastRptRequested.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     if( fieldNoPositions.offset < 0 ){
       fieldNoPositions.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPositions::scanSafely( groupsPositions, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     if( fieldNoPosAmt.offset < 0 ){
       fieldNoPosAmt.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPosAmt::scanSafely( groupsPosAmt, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldThresholdAmount::RAW_TAG :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     if( fieldThresholdAmount.offset < 0 ) fieldThresholdAmount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPrice) 
     if( fieldSettlPrice.offset < 0 ) fieldSettlPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPriceType) 
     if( fieldSettlPriceType.offset < 0 ) {
       fieldSettlPriceType.offset = pos;
       if( SettlPriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldUnderlyingSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSettlPrice) 
     if( fieldUnderlyingSettlPrice.offset < 0 ) fieldUnderlyingSettlPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     if( fieldExpireDate.offset < 0 ) fieldExpireDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAssignmentMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(AssignmentMethod) 
     if( fieldAssignmentMethod.offset < 0 ) {
       fieldAssignmentMethod.offset = pos;
       if( AssignmentMethodEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAssignmentUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(AssignmentUnit) 
     if( fieldAssignmentUnit.offset < 0 ) fieldAssignmentUnit.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOpenInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(OpenInterest) 
     if( fieldOpenInterest.offset < 0 ) fieldOpenInterest.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExerciseMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(ExerciseMethod) 
     if( fieldExerciseMethod.offset < 0 ) {
       fieldExerciseMethod.offset = pos;
       if( ExerciseMethodEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     if( fieldSettlSessID.offset < 0 ) {
       fieldSettlSessID.offset = pos;
       if( SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     if( fieldSettlSessSubID.offset < 0 ) fieldSettlSessSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     if( fieldClearingBusinessDate.offset < 0 ) fieldClearingBusinessDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldCollReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollReqID) 
     if( fieldCollReqID.offset < 0 ) fieldCollReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollAsgnReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     if( fieldCollAsgnReason.offset < 0 ) {
       fieldCollAsgnReason.offset = pos;
       if( CollAsgnReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     if( fieldExpireTime.offset < 0 ) fieldExpireTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     if( fieldSecondaryOrderID.offset < 0 ) fieldSecondaryOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     if( fieldNoExecs.offset < 0 ){
       fieldNoExecs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupExecs::scanSafely( groupsExecs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     if( fieldNoTrades.offset < 0 ){
       fieldNoTrades.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrades::scanSafely( groupsTrades, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     if( fieldQuantity.offset < 0 ) fieldQuantity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     if( fieldMarginExcess.offset < 0 ) fieldMarginExcess.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     if( fieldTotalNetValue.offset < 0 ) fieldTotalNetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     if( fieldCashOutstanding.offset < 0 ) fieldCashOutstanding.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     if( fieldNoTrdRegTimestamps.offset < 0 ){
       fieldNoTrdRegTimestamps.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrdRegTimestamps::scanSafely( groupsTrdRegTimestamps, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     if( fieldNoMiscFees.offset < 0 ){
       fieldNoMiscFees.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupMiscFees::scanSafely( groupsMiscFees, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     if( fieldAccruedInterestAmt.offset < 0 ) fieldAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     if( fieldEndAccruedInterestAmt.offset < 0 ) fieldEndAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     if( fieldStartCash.offset < 0 ) fieldStartCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     if( fieldEndCash.offset < 0 ) fieldEndCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     if( fieldSettlSessID.offset < 0 ) {
       fieldSettlSessID.offset = pos;
       if( SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     if( fieldSettlSessSubID.offset < 0 ) fieldSettlSessSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     if( fieldClearingBusinessDate.offset < 0 ) fieldClearingBusinessDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralAssignment::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldCollAsgnID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnID) 
     if( fieldCollAsgnID.offset < 0 ) fieldCollAsgnID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollReqID) 
     if( fieldCollReqID.offset < 0 ) fieldCollReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollAsgnReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     if( fieldCollAsgnReason.offset < 0 ) {
       fieldCollAsgnReason.offset = pos;
       if( CollAsgnReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnTransType) 
     if( fieldCollAsgnTransType.offset < 0 ) {
       fieldCollAsgnTransType.offset = pos;
       if( CollAsgnTransTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollAsgnRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnRefID) 
     if( fieldCollAsgnRefID.offset < 0 ) fieldCollAsgnRefID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     if( fieldExpireTime.offset < 0 ) fieldExpireTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     if( fieldSecondaryOrderID.offset < 0 ) fieldSecondaryOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     if( fieldNoExecs.offset < 0 ){
       fieldNoExecs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupExecs::scanSafely( groupsExecs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     if( fieldNoTrades.offset < 0 ){
       fieldNoTrades.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrades::scanSafely( groupsTrades, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     if( fieldQuantity.offset < 0 ) fieldQuantity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     if( fieldMarginExcess.offset < 0 ) fieldMarginExcess.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     if( fieldTotalNetValue.offset < 0 ) fieldTotalNetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     if( fieldCashOutstanding.offset < 0 ) fieldCashOutstanding.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     if( fieldNoTrdRegTimestamps.offset < 0 ){
       fieldNoTrdRegTimestamps.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrdRegTimestamps::scanSafely( groupsTrdRegTimestamps, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     if( fieldNoMiscFees.offset < 0 ){
       fieldNoMiscFees.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupMiscFees::scanSafely( groupsMiscFees, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     if( fieldAccruedInterestAmt.offset < 0 ) fieldAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     if( fieldEndAccruedInterestAmt.offset < 0 ) fieldEndAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     if( fieldStartCash.offset < 0 ) fieldStartCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     if( fieldEndCash.offset < 0 ) fieldEndCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     if( fieldSettlDeliveryType.offset < 0 ) {
       fieldSettlDeliveryType.offset = pos;
       if( SettlDeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     if( fieldStandInstDbType.offset < 0 ) {
       fieldStandInstDbType.offset = pos;
       if( StandInstDbTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     if( fieldStandInstDbName.offset < 0 ) fieldStandInstDbName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     if( fieldStandInstDbID.offset < 0 ) fieldStandInstDbID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     if( fieldNoDlvyInst.offset < 0 ){
       fieldNoDlvyInst.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupDlvyInst::scanSafely( groupsDlvyInst, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     if( fieldSettlSessID.offset < 0 ) {
       fieldSettlSessID.offset = pos;
       if( SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     if( fieldSettlSessSubID.offset < 0 ) fieldSettlSessSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     if( fieldClearingBusinessDate.offset < 0 ) fieldClearingBusinessDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralResponse::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldCollRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollRespID) 
     if( fieldCollRespID.offset < 0 ) fieldCollRespID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollAsgnID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnID) 
     if( fieldCollAsgnID.offset < 0 ) fieldCollAsgnID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollReqID) 
     if( fieldCollReqID.offset < 0 ) fieldCollReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollAsgnReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     if( fieldCollAsgnReason.offset < 0 ) {
       fieldCollAsgnReason.offset = pos;
       if( CollAsgnReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnTransType) 
     if( fieldCollAsgnTransType.offset < 0 ) {
       fieldCollAsgnTransType.offset = pos;
       if( CollAsgnTransTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollAsgnRespType::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnRespType) 
     if( fieldCollAsgnRespType.offset < 0 ) {
       fieldCollAsgnRespType.offset = pos;
       if( CollAsgnRespTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollAsgnRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnRejectReason) 
     if( fieldCollAsgnRejectReason.offset < 0 ) {
       fieldCollAsgnRejectReason.offset = pos;
       if( CollAsgnRejectReasonEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     if( fieldSecondaryOrderID.offset < 0 ) fieldSecondaryOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     if( fieldNoExecs.offset < 0 ){
       fieldNoExecs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupExecs::scanSafely( groupsExecs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     if( fieldNoTrades.offset < 0 ){
       fieldNoTrades.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrades::scanSafely( groupsTrades, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     if( fieldQuantity.offset < 0 ) fieldQuantity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     if( fieldMarginExcess.offset < 0 ) fieldMarginExcess.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     if( fieldTotalNetValue.offset < 0 ) fieldTotalNetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     if( fieldCashOutstanding.offset < 0 ) fieldCashOutstanding.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     if( fieldNoTrdRegTimestamps.offset < 0 ){
       fieldNoTrdRegTimestamps.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrdRegTimestamps::scanSafely( groupsTrdRegTimestamps, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     if( fieldNoMiscFees.offset < 0 ){
       fieldNoMiscFees.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupMiscFees::scanSafely( groupsMiscFees, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     if( fieldAccruedInterestAmt.offset < 0 ) fieldAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     if( fieldEndAccruedInterestAmt.offset < 0 ) fieldEndAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     if( fieldStartCash.offset < 0 ) fieldStartCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     if( fieldEndCash.offset < 0 ) fieldEndCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralReport::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldCollRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollRptID) 
     if( fieldCollRptID.offset < 0 ) fieldCollRptID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollInquiryID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     if( fieldCollInquiryID.offset < 0 ) fieldCollInquiryID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(CollStatus) 
     if( fieldCollStatus.offset < 0 ) {
       fieldCollStatus.offset = pos;
       if( CollStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotNumReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumReports) 
     if( fieldTotNumReports.offset < 0 ) fieldTotNumReports.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     if( fieldLastRptRequested.offset < 0 ) fieldLastRptRequested.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     if( fieldSecondaryOrderID.offset < 0 ) fieldSecondaryOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     if( fieldNoExecs.offset < 0 ){
       fieldNoExecs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupExecs::scanSafely( groupsExecs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     if( fieldNoTrades.offset < 0 ){
       fieldNoTrades.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrades::scanSafely( groupsTrades, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     if( fieldQuantity.offset < 0 ) fieldQuantity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     if( fieldMarginExcess.offset < 0 ) fieldMarginExcess.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     if( fieldTotalNetValue.offset < 0 ) fieldTotalNetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     if( fieldCashOutstanding.offset < 0 ) fieldCashOutstanding.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     if( fieldNoTrdRegTimestamps.offset < 0 ){
       fieldNoTrdRegTimestamps.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrdRegTimestamps::scanSafely( groupsTrdRegTimestamps, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     if( fieldNoMiscFees.offset < 0 ){
       fieldNoMiscFees.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupMiscFees::scanSafely( groupsMiscFees, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     if( fieldAccruedInterestAmt.offset < 0 ) fieldAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     if( fieldEndAccruedInterestAmt.offset < 0 ) fieldEndAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     if( fieldStartCash.offset < 0 ) fieldStartCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     if( fieldEndCash.offset < 0 ) fieldEndCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     if( fieldSettlDeliveryType.offset < 0 ) {
       fieldSettlDeliveryType.offset = pos;
       if( SettlDeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     if( fieldStandInstDbType.offset < 0 ) {
       fieldStandInstDbType.offset = pos;
       if( StandInstDbTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     if( fieldStandInstDbName.offset < 0 ) fieldStandInstDbName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     if( fieldStandInstDbID.offset < 0 ) fieldStandInstDbID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     if( fieldNoDlvyInst.offset < 0 ){
       fieldNoDlvyInst.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupDlvyInst::scanSafely( groupsDlvyInst, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     if( fieldSettlSessID.offset < 0 ) {
       fieldSettlSessID.offset = pos;
       if( SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     if( fieldSettlSessSubID.offset < 0 ) fieldSettlSessSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     if( fieldClearingBusinessDate.offset < 0 ) fieldClearingBusinessDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralInquiry::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     if( fieldCollInquiryID.offset < 0 ) fieldCollInquiryID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCollInquiryQualifier) 
     if( fieldNoCollInquiryQualifier.offset < 0 ){
       fieldNoCollInquiryQualifier.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupCollInquiryQualifier::scanSafely( groupsCollInquiryQualifier, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     if( fieldSubscriptionRequestType.offset < 0 ) {
       fieldSubscriptionRequestType.offset = pos;
       if( SubscriptionRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     if( fieldResponseTransportType.offset < 0 ) {
       fieldResponseTransportType.offset = pos;
       if( ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     if( fieldResponseDestination.offset < 0 ) fieldResponseDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     if( fieldSecondaryOrderID.offset < 0 ) fieldSecondaryOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     if( fieldNoExecs.offset < 0 ){
       fieldNoExecs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupExecs::scanSafely( groupsExecs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     if( fieldNoTrades.offset < 0 ){
       fieldNoTrades.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrades::scanSafely( groupsTrades, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     if( fieldQuantity.offset < 0 ) fieldQuantity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     if( fieldMarginExcess.offset < 0 ) fieldMarginExcess.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     if( fieldTotalNetValue.offset < 0 ) fieldTotalNetValue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     if( fieldCashOutstanding.offset < 0 ) fieldCashOutstanding.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     if( fieldNoTrdRegTimestamps.offset < 0 ){
       fieldNoTrdRegTimestamps.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrdRegTimestamps::scanSafely( groupsTrdRegTimestamps, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     if( fieldAccruedInterestAmt.offset < 0 ) fieldAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     if( fieldEndAccruedInterestAmt.offset < 0 ) fieldEndAccruedInterestAmt.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     if( fieldStartCash.offset < 0 ) fieldStartCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     if( fieldEndCash.offset < 0 ) fieldEndCash.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     if( fieldSpread.offset < 0 ) fieldSpread.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     if( fieldBenchmarkCurveCurrency.offset < 0 ) fieldBenchmarkCurveCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     if( fieldBenchmarkCurveName.offset < 0 ) fieldBenchmarkCurveName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     if( fieldBenchmarkCurvePoint.offset < 0 ) fieldBenchmarkCurvePoint.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     if( fieldBenchmarkPrice.offset < 0 ) fieldBenchmarkPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     if( fieldBenchmarkPriceType.offset < 0 ) fieldBenchmarkPriceType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     if( fieldBenchmarkSecurityID.offset < 0 ) fieldBenchmarkSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     if( fieldBenchmarkSecurityIDSource.offset < 0 ) fieldBenchmarkSecurityIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     if( fieldNoStipulations.offset < 0 ){
       fieldNoStipulations.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupStipulations::scanSafely( groupsStipulations, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     if( fieldSettlDeliveryType.offset < 0 ) {
       fieldSettlDeliveryType.offset = pos;
       if( SettlDeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     if( fieldStandInstDbType.offset < 0 ) {
       fieldStandInstDbType.offset = pos;
       if( StandInstDbTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     if( fieldStandInstDbName.offset < 0 ) fieldStandInstDbName.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     if( fieldStandInstDbID.offset < 0 ) fieldStandInstDbID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     if( fieldNoDlvyInst.offset < 0 ){
       fieldNoDlvyInst.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupDlvyInst::scanSafely( groupsDlvyInst, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     if( fieldSettlSessID.offset < 0 ) {
       fieldSettlSessID.offset = pos;
       if( SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     if( fieldSettlSessSubID.offset < 0 ) fieldSettlSessSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     if( fieldClearingBusinessDate.offset < 0 ) fieldClearingBusinessDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldNetworkRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkRequestType) 
     if( fieldNetworkRequestType.offset < 0 ) {
       fieldNetworkRequestType.offset = pos;
       if( NetworkRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNetworkRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkRequestID) 
     if( fieldNetworkRequestID.offset < 0 ) fieldNetworkRequestID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoCompIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCompIDs) 
     if( fieldNoCompIDs.offset < 0 ){
       fieldNoCompIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupCompIDs::scanSafely( groupsCompIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusResponse::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldNetworkStatusResponseType::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkStatusResponseType) 
     if( fieldNetworkStatusResponseType.offset < 0 ) {
       fieldNetworkStatusResponseType.offset = pos;
       if( NetworkStatusResponseTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNetworkRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkRequestID) 
     if( fieldNetworkRequestID.offset < 0 ) fieldNetworkRequestID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNetworkResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkResponseID) 
     if( fieldNetworkResponseID.offset < 0 ) fieldNetworkResponseID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastNetworkResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(LastNetworkResponseID) 
     if( fieldLastNetworkResponseID.offset < 0 ) fieldLastNetworkResponseID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoCompIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCompIDs) 
     if( fieldNoCompIDs.offset < 0 ){
       fieldNoCompIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupCompIDs::scanSafely( groupsCompIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageUserRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(UserRequestID) 
     if( fieldUserRequestID.offset < 0 ) fieldUserRequestID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUserRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(UserRequestType) 
     if( fieldUserRequestType.offset < 0 ) {
       fieldUserRequestType.offset = pos;
       if( UserRequestTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldUsername::RAW_TAG :
     FIXPP_PRINT_FIELD(Username) 
     if( fieldUsername.offset < 0 ) fieldUsername.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPassword::RAW_TAG :
     FIXPP_PRINT_FIELD(Password) 
     if( fieldPassword.offset < 0 ) fieldPassword.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNewPassword::RAW_TAG :
     FIXPP_PRINT_FIELD(NewPassword) 
     if( fieldNewPassword.offset < 0 ) fieldNewPassword.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     if( fieldRawDataLength.offset < 0 ) fieldRawDataLength.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     if( fieldRawData.offset < 0 ) fieldRawData.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageUserResponse::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(UserRequestID) 
     if( fieldUserRequestID.offset < 0 ) fieldUserRequestID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUsername::RAW_TAG :
     FIXPP_PRINT_FIELD(Username) 
     if( fieldUsername.offset < 0 ) fieldUsername.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldUserStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(UserStatus) 
     if( fieldUserStatus.offset < 0 ) {
       fieldUserStatus.offset = pos;
       if( UserStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldUserStatusText::RAW_TAG :
     FIXPP_PRINT_FIELD(UserStatusText) 
     if( fieldUserStatusText.offset < 0 ) fieldUserStatusText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralInquiryAck::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     if( fieldCollInquiryID.offset < 0 ) fieldCollInquiryID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollInquiryStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryStatus) 
     if( fieldCollInquiryStatus.offset < 0 ) {
       fieldCollInquiryStatus.offset = pos;
       if( CollInquiryStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCollInquiryResult::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryResult) 
     if( fieldCollInquiryResult.offset < 0 ) {
       fieldCollInquiryResult.offset = pos;
       if( CollInquiryResultEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCollInquiryQualifier) 
     if( fieldNoCollInquiryQualifier.offset < 0 ){
       fieldNoCollInquiryQualifier.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupCollInquiryQualifier::scanSafely( groupsCollInquiryQualifier, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTotNumReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumReports) 
     if( fieldTotNumReports.offset < 0 ) fieldTotNumReports.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     if( fieldNoPartyIDs.offset < 0 ){
       fieldNoPartyIDs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupPartyIDs::scanSafely( groupsPartyIDs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     if( fieldAccountType.offset < 0 ) {
       fieldAccountType.offset = pos;
       if( AccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     if( fieldSecondaryOrderID.offset < 0 ) fieldSecondaryOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     if( fieldSecondaryClOrdID.offset < 0 ) fieldSecondaryClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     if( fieldNoExecs.offset < 0 ){
       fieldNoExecs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupExecs::scanSafely( groupsExecs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     if( fieldNoTrades.offset < 0 ){
       fieldNoTrades.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupTrades::scanSafely( groupsTrades, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     if( fieldSymbolSfx.offset < 0 ) fieldSymbolSfx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     if( fieldSecurityIDSource.offset < 0 ) {
       fieldSecurityIDSource.offset = pos;
       if( SecurityIDSourceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     if( fieldNoSecurityAltID.offset < 0 ){
       fieldNoSecurityAltID.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupSecurityAltID::scanSafely( groupsSecurityAltID, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     if( fieldCFICode.offset < 0 ) fieldCFICode.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     if( fieldSecuritySubType.offset < 0 ) fieldSecuritySubType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     if( fieldMaturityMonthYear.offset < 0 ) fieldMaturityMonthYear.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     if( fieldMaturityDate.offset < 0 ) fieldMaturityDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     if( fieldPutOrCall.offset < 0 ) {
       fieldPutOrCall.offset = pos;
       if( PutOrCallEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     if( fieldCouponPaymentDate.offset < 0 ) fieldCouponPaymentDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     if( fieldIssueDate.offset < 0 ) fieldIssueDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     if( fieldRepoCollateralSecurityType.offset < 0 ) fieldRepoCollateralSecurityType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     if( fieldRepurchaseTerm.offset < 0 ) fieldRepurchaseTerm.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     if( fieldRepurchaseRate.offset < 0 ) fieldRepurchaseRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     if( fieldFactor.offset < 0 ) fieldFactor.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     if( fieldCreditRating.offset < 0 ) fieldCreditRating.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     if( fieldInstrRegistry.offset < 0 ) fieldInstrRegistry.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     if( fieldCountryOfIssue.offset < 0 ) fieldCountryOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     if( fieldStateOrProvinceOfIssue.offset < 0 ) fieldStateOrProvinceOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     if( fieldLocaleOfIssue.offset < 0 ) fieldLocaleOfIssue.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     if( fieldRedemptionDate.offset < 0 ) fieldRedemptionDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     if( fieldStrikePrice.offset < 0 ) fieldStrikePrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     if( fieldStrikeCurrency.offset < 0 ) fieldStrikeCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     if( fieldOptAttribute.offset < 0 ) fieldOptAttribute.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     if( fieldContractMultiplier.offset < 0 ) fieldContractMultiplier.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     if( fieldCouponRate.offset < 0 ) fieldCouponRate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     if( fieldSecurityExchange.offset < 0 ) fieldSecurityExchange.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     if( fieldIssuer.offset < 0 ) fieldIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     if( fieldEncodedIssuerLen.offset < 0 ) fieldEncodedIssuerLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     if( fieldEncodedIssuer.offset < 0 ) fieldEncodedIssuer.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     if( fieldSecurityDesc.offset < 0 ) fieldSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     if( fieldEncodedSecurityDescLen.offset < 0 ) fieldEncodedSecurityDescLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     if( fieldEncodedSecurityDesc.offset < 0 ) fieldEncodedSecurityDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     if( fieldPool.offset < 0 ) fieldPool.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     if( fieldContractSettlMonth.offset < 0 ) fieldContractSettlMonth.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     if( fieldCPProgram.offset < 0 ) {
       fieldCPProgram.offset = pos;
       if( CPProgramEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     if( fieldCPRegType.offset < 0 ) fieldCPRegType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     if( fieldNoEvents.offset < 0 ){
       fieldNoEvents.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupEvents::scanSafely( groupsEvents, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     if( fieldDatedDate.offset < 0 ) fieldDatedDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     if( fieldInterestAccrualDate.offset < 0 ) fieldInterestAccrualDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     if( fieldAgreementDesc.offset < 0 ) fieldAgreementDesc.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     if( fieldAgreementID.offset < 0 ) fieldAgreementID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     if( fieldAgreementDate.offset < 0 ) fieldAgreementDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     if( fieldAgreementCurrency.offset < 0 ) fieldAgreementCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     if( fieldTerminationType.offset < 0 ) {
       fieldTerminationType.offset = pos;
       if( TerminationTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     if( fieldStartDate.offset < 0 ) fieldStartDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     if( fieldEndDate.offset < 0 ) fieldEndDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     if( fieldDeliveryType.offset < 0 ) {
       fieldDeliveryType.offset = pos;
       if( DeliveryTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     if( fieldMarginRatio.offset < 0 ) fieldMarginRatio.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     if( fieldSettlDate.offset < 0 ) fieldSettlDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     if( fieldQuantity.offset < 0 ) fieldQuantity.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     if( fieldNoUnderlyings.offset < 0 ){
       fieldNoUnderlyings.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupUnderlyings::scanSafely( groupsUnderlyings, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     if( fieldTradingSessionID.offset < 0 ) fieldTradingSessionID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     if( fieldTradingSessionSubID.offset < 0 ) fieldTradingSessionSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     if( fieldSettlSessID.offset < 0 ) {
       fieldSettlSessID.offset = pos;
       if( SettlSessIDEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     if( fieldSettlSessSubID.offset < 0 ) fieldSettlSessSubID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     if( fieldClearingBusinessDate.offset < 0 ) fieldClearingBusinessDate.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     if( fieldResponseTransportType.offset < 0 ) {
       fieldResponseTransportType.offset = pos;
       if( ResponseTransportTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     if( fieldResponseDestination.offset < 0 ) fieldResponseDestination.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageConfirmationRequest::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldConfirmReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmReqID) 
     if( fieldConfirmReqID.offset < 0 ) fieldConfirmReqID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldConfirmType::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmType) 
     if( fieldConfirmType.offset < 0 ) {
       fieldConfirmType.offset = pos;
       if( ConfirmTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     if( fieldNoOrders.offset < 0 ){
       fieldNoOrders.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupOrders::scanSafely( groupsOrders, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     if( fieldAllocID.offset < 0 ) fieldAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     if( fieldSecondaryAllocID.offset < 0 ) fieldSecondaryAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldIndividualAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(IndividualAllocID) 
     if( fieldIndividualAllocID.offset < 0 ) fieldIndividualAllocID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccount) 
     if( fieldAllocAccount.offset < 0 ) fieldAllocAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     if( fieldAllocAcctIDSource.offset < 0 ) fieldAllocAcctIDSource.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAllocAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccountType) 
     if( fieldAllocAccountType.offset < 0 ) {
       fieldAllocAccountType.offset = pos;
       if( AllocAccountTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     if( fieldEncodedTextLen.offset < 0 ) fieldEncodedTextLen.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     if( fieldEncodedText.offset < 0 ) fieldEncodedText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

// -------------------------------------- skip ----------------------------------------

offset_t MessageHeader::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginString::RAW_TAG :
     break;

   case FieldBodyLength::RAW_TAG :
     break;

   case FieldMsgType::RAW_TAG :
     break;

   case FieldSenderCompID::RAW_TAG :
     break;

   case FieldTargetCompID::RAW_TAG :
     break;

   case FieldOnBehalfOfCompID::RAW_TAG :
     break;

   case FieldDeliverToCompID::RAW_TAG :
     break;

   case FieldSecureDataLen::RAW_TAG :
     break;

   case FieldSecureData::RAW_TAG :
     break;

   case FieldMsgSeqNum::RAW_TAG :
     break;

   case FieldSenderSubID::RAW_TAG :
     break;

   case FieldSenderLocationID::RAW_TAG :
     break;

   case FieldTargetSubID::RAW_TAG :
     break;

   case FieldTargetLocationID::RAW_TAG :
     break;

   case FieldOnBehalfOfSubID::RAW_TAG :
     break;

   case FieldOnBehalfOfLocationID::RAW_TAG :
     break;

   case FieldDeliverToSubID::RAW_TAG :
     break;

   case FieldDeliverToLocationID::RAW_TAG :
     break;

   case FieldPossDupFlag::RAW_TAG :
     break;

   case FieldPossResend::RAW_TAG :
     break;

   case FieldSendingTime::RAW_TAG :
     break;

   case FieldOrigSendingTime::RAW_TAG :
     break;

   case FieldXmlDataLen::RAW_TAG :
     break;

   case FieldXmlData::RAW_TAG :
     break;

   case FieldMessageEncoding::RAW_TAG :
     break;

   case FieldLastMsgSeqNumProcessed::RAW_TAG :
     break;

   case FieldNoHops::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupHops::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageHeartbeat::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTestRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageResendRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginSeqNo::RAW_TAG :
     break;

   case FieldEndSeqNo::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     break;

   case FieldRefTagID::RAW_TAG :
     break;

   case FieldRefMsgType::RAW_TAG :
     break;

   case FieldSessionRejectReason::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSequenceReset::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldGapFillFlag::RAW_TAG :
     break;

   case FieldNewSeqNo::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageLogout::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageIOI::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldIOIID::RAW_TAG :
     break;

   case FieldIOITransType::RAW_TAG :
     break;

   case FieldIOIRefID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldIOIQty::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldValidUntilTime::RAW_TAG :
     break;

   case FieldIOIQltyInd::RAW_TAG :
     break;

   case FieldIOINaturalFlag::RAW_TAG :
     break;

   case FieldNoIOIQualifiers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupIOIQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldURLLink::RAW_TAG :
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::skip( fix+pos, len - pos );
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAdvertisement::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAdvId::RAW_TAG :
     break;

   case FieldAdvTransType::RAW_TAG :
     break;

   case FieldAdvRefID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldAdvSide::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldURLLink::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageExecutionReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldSecondaryExecID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldQuoteRespID::RAW_TAG :
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     break;

   case FieldMassStatusReqID::RAW_TAG :
     break;

   case FieldTotNumReports::RAW_TAG :
     break;

   case FieldLastRptRequested::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldNoContraBrokers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContraBrokers::skip( fix+pos, len - pos );
     break;

   case FieldListID::RAW_TAG :
     break;

   case FieldCrossID::RAW_TAG :
     break;

   case FieldOrigCrossID::RAW_TAG :
     break;

   case FieldCrossType::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldExecRefID::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldOrdStatus::RAW_TAG :
     break;

   case FieldWorkingIndicator::RAW_TAG :
     break;

   case FieldOrdRejReason::RAW_TAG :
     break;

   case FieldExecRestatementReason::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldPeggedPrice::RAW_TAG :
     break;

   case FieldDiscretionPrice::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldTargetStrategyPerformance::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldLastQty::RAW_TAG :
     break;

   case FieldUnderlyingLastQty::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldUnderlyingLastPx::RAW_TAG :
     break;

   case FieldLastParPx::RAW_TAG :
     break;

   case FieldLastSpotRate::RAW_TAG :
     break;

   case FieldLastForwardPoints::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldTimeBracket::RAW_TAG :
     break;

   case FieldLastCapacity::RAW_TAG :
     break;

   case FieldLeavesQty::RAW_TAG :
     break;

   case FieldCumQty::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldDayOrderQty::RAW_TAG :
     break;

   case FieldDayCumQty::RAW_TAG :
     break;

   case FieldDayAvgPx::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldReportToExch::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     break;

   case FieldNumDaysInterest::RAW_TAG :
     break;

   case FieldExDate::RAW_TAG :
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldTradedFlatSwitch::RAW_TAG :
     break;

   case FieldBasisFeatureDate::RAW_TAG :
     break;

   case FieldBasisFeaturePrice::RAW_TAG :
     break;

   case FieldConcession::RAW_TAG :
     break;

   case FieldTotalTakedown::RAW_TAG :
     break;

   case FieldNetMoney::RAW_TAG :
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldLastForwardPoints2::RAW_TAG :
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldTransBkdTime::RAW_TAG :
     break;

   case FieldExecValuationPoint::RAW_TAG :
     break;

   case FieldExecPriceType::RAW_TAG :
     break;

   case FieldExecPriceAdjustment::RAW_TAG :
     break;

   case FieldPriorityIndicator::RAW_TAG :
     break;

   case FieldPriceImprovement::RAW_TAG :
     break;

   case FieldLastLiquidityInd::RAW_TAG :
     break;

   case FieldNoContAmts::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContAmts::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldOrdStatus::RAW_TAG :
     break;

   case FieldWorkingIndicator::RAW_TAG :
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     break;

   case FieldListID::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldCxlRejResponseTo::RAW_TAG :
     break;

   case FieldCxlRejReason::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageLogon::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEncryptMethod::RAW_TAG :
     break;

   case FieldHeartBtInt::RAW_TAG :
     break;

   case FieldRawDataLength::RAW_TAG :
     break;

   case FieldRawData::RAW_TAG :
     break;

   case FieldResetSeqNumFlag::RAW_TAG :
     break;

   case FieldNextExpectedMsgSeqNum::RAW_TAG :
     break;

   case FieldMaxMessageSize::RAW_TAG :
     break;

   case FieldNoMsgTypes::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMsgTypes::skip( fix+pos, len - pos );
     break;

   case FieldTestMessageIndicator::RAW_TAG :
     break;

   case FieldUsername::RAW_TAG :
     break;

   case FieldPassword::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNews::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigTime::RAW_TAG :
     break;

   case FieldUrgency::RAW_TAG :
     break;

   case FieldHeadline::RAW_TAG :
     break;

   case FieldEncodedHeadlineLen::RAW_TAG :
     break;

   case FieldEncodedHeadline::RAW_TAG :
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::skip( fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLinesOfText::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::skip( fix+pos, len - pos );
     break;

   case FieldURLLink::RAW_TAG :
     break;

   case FieldRawDataLength::RAW_TAG :
     break;

   case FieldRawData::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageEmail::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEmailThreadID::RAW_TAG :
     break;

   case FieldEmailType::RAW_TAG :
     break;

   case FieldOrigTime::RAW_TAG :
     break;

   case FieldSubject::RAW_TAG :
     break;

   case FieldEncodedSubjectLen::RAW_TAG :
     break;

   case FieldEncodedSubject::RAW_TAG :
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::skip( fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldNoLinesOfText::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::skip( fix+pos, len - pos );
     break;

   case FieldRawDataLength::RAW_TAG :
     break;

   case FieldRawData::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderSingle::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldPrice2::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderList::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldBidID::RAW_TAG :
     break;

   case FieldClientBidID::RAW_TAG :
     break;

   case FieldProgRptReqs::RAW_TAG :
     break;

   case FieldBidType::RAW_TAG :
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldListExecInstType::RAW_TAG :
     break;

   case FieldListExecInst::RAW_TAG :
     break;

   case FieldEncodedListExecInstLen::RAW_TAG :
     break;

   case FieldEncodedListExecInst::RAW_TAG :
     break;

   case FieldAllowableOneSidednessPct::RAW_TAG :
     break;

   case FieldAllowableOneSidednessValue::RAW_TAG :
     break;

   case FieldAllowableOneSidednessCurr::RAW_TAG :
     break;

   case FieldTotNoOrders::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldListID::RAW_TAG :
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelReplaceRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldListID::RAW_TAG :
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldPrice2::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationInstruction::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     break;

   case FieldAllocTransType::RAW_TAG :
     break;

   case FieldAllocType::RAW_TAG :
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldRefAllocID::RAW_TAG :
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     break;

   case FieldAllocLinkID::RAW_TAG :
     break;

   case FieldAllocLinkType::RAW_TAG :
     break;

   case FieldBookingRefID::RAW_TAG :
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW_TAG :
     break;

   case FieldReversalIndicator::RAW_TAG :
     break;

   case FieldMatchType::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldAvgParPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     break;

   case FieldConcession::RAW_TAG :
     break;

   case FieldTotalTakedown::RAW_TAG :
     break;

   case FieldNetMoney::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNumDaysInterest::RAW_TAG :
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldLegalConfirm::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldTotNoAllocs::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListExecute::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldClientBidID::RAW_TAG :
     break;

   case FieldBidID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStatus::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldListStatusType::RAW_TAG :
     break;

   case FieldNoRpts::RAW_TAG :
     break;

   case FieldListOrderStatus::RAW_TAG :
     break;

   case FieldRptSeq::RAW_TAG :
     break;

   case FieldListStatusText::RAW_TAG :
     break;

   case FieldEncodedListStatusTextLen::RAW_TAG :
     break;

   case FieldEncodedListStatusText::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldTotNoOrders::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationInstructionAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAllocStatus::RAW_TAG :
     break;

   case FieldAllocRejCode::RAW_TAG :
     break;

   case FieldAllocType::RAW_TAG :
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDontKnowTrade::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldDKReason::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldLastQty::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldRFQReqID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuote::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteRespID::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldBidPx::RAW_TAG :
     break;

   case FieldOfferPx::RAW_TAG :
     break;

   case FieldMktBidPx::RAW_TAG :
     break;

   case FieldMktOfferPx::RAW_TAG :
     break;

   case FieldMinBidSize::RAW_TAG :
     break;

   case FieldBidSize::RAW_TAG :
     break;

   case FieldMinOfferSize::RAW_TAG :
     break;

   case FieldOfferSize::RAW_TAG :
     break;

   case FieldValidUntilTime::RAW_TAG :
     break;

   case FieldBidSpotRate::RAW_TAG :
     break;

   case FieldOfferSpotRate::RAW_TAG :
     break;

   case FieldBidForwardPoints::RAW_TAG :
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     break;

   case FieldMidPx::RAW_TAG :
     break;

   case FieldBidYield::RAW_TAG :
     break;

   case FieldMidYield::RAW_TAG :
     break;

   case FieldOfferYield::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSettlementInstructions::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstMsgID::RAW_TAG :
     break;

   case FieldSettlInstReqID::RAW_TAG :
     break;

   case FieldSettlInstMode::RAW_TAG :
     break;

   case FieldSettlInstReqRejCode::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoSettlInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSettlInst::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldMarketDepth::RAW_TAG :
     break;

   case FieldMDUpdateType::RAW_TAG :
     break;

   case FieldAggregatedBook::RAW_TAG :
     break;

   case FieldOpenCloseSettlFlag::RAW_TAG :
     break;

   case FieldScope::RAW_TAG :
     break;

   case FieldMDImplicitDelete::RAW_TAG :
     break;

   case FieldNoMDEntryTypes::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntryTypes::skip( fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldApplQueueAction::RAW_TAG :
     break;

   case FieldApplQueueMax::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataSnapshotFullRefresh::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldFinancialStatus::RAW_TAG :
     break;

   case FieldCorporateAction::RAW_TAG :
     break;

   case FieldNetChgPrevDay::RAW_TAG :
     break;

   case FieldNoMDEntries::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::skip( fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW_TAG :
     break;

   case FieldApplQueueResolution::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataIncrementalRefresh::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     break;

   case FieldNoMDEntries::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::skip( fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW_TAG :
     break;

   case FieldApplQueueResolution::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataRequestReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     break;

   case FieldMDReqRejReason::RAW_TAG :
     break;

   case FieldNoAltMDSource::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAltMDSource::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteCancel::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteCancelType::RAW_TAG :
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldNoQuoteEntries::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteEntries::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMassQuoteAcknowledgement::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteStatus::RAW_TAG :
     break;

   case FieldQuoteRejectReason::RAW_TAG :
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoQuoteSets::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityDefinitionRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityRequestType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityDefinition::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityResponseID::RAW_TAG :
     break;

   case FieldSecurityResponseType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW_TAG :
     break;

   case FieldRoundLot::RAW_TAG :
     break;

   case FieldMinTradeVol::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityStatus::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldSecurityTradingStatus::RAW_TAG :
     break;

   case FieldFinancialStatus::RAW_TAG :
     break;

   case FieldCorporateAction::RAW_TAG :
     break;

   case FieldHaltReasonChar::RAW_TAG :
     break;

   case FieldInViewOfCommon::RAW_TAG :
     break;

   case FieldDueToRelated::RAW_TAG :
     break;

   case FieldBuyVolume::RAW_TAG :
     break;

   case FieldSellVolume::RAW_TAG :
     break;

   case FieldHighPx::RAW_TAG :
     break;

   case FieldLowPx::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAdjustment::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradingSessionStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldTradSesMethod::RAW_TAG :
     break;

   case FieldTradSesMode::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradingSessionStatus::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldTradSesMethod::RAW_TAG :
     break;

   case FieldTradSesMode::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldTradSesStatus::RAW_TAG :
     break;

   case FieldTradSesStatusRejReason::RAW_TAG :
     break;

   case FieldTradSesStartTime::RAW_TAG :
     break;

   case FieldTradSesOpenTime::RAW_TAG :
     break;

   case FieldTradSesPreCloseTime::RAW_TAG :
     break;

   case FieldTradSesCloseTime::RAW_TAG :
     break;

   case FieldTradSesEndTime::RAW_TAG :
     break;

   case FieldTotalVolumeTraded::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMassQuote::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDefBidSize::RAW_TAG :
     break;

   case FieldDefOfferSize::RAW_TAG :
     break;

   case FieldNoQuoteSets::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBusinessMessageReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     break;

   case FieldRefMsgType::RAW_TAG :
     break;

   case FieldBusinessRejectRefID::RAW_TAG :
     break;

   case FieldBusinessRejectReason::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBidRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW_TAG :
     break;

   case FieldClientBidID::RAW_TAG :
     break;

   case FieldBidRequestTransType::RAW_TAG :
     break;

   case FieldListName::RAW_TAG :
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     break;

   case FieldBidType::RAW_TAG :
     break;

   case FieldNumTickets::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldSideValue1::RAW_TAG :
     break;

   case FieldSideValue2::RAW_TAG :
     break;

   case FieldNoBidDescriptors::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidDescriptors::skip( fix+pos, len - pos );
     break;

   case FieldNoBidComponents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::skip( fix+pos, len - pos );
     break;

   case FieldLiquidityIndType::RAW_TAG :
     break;

   case FieldWtAverageLiquidity::RAW_TAG :
     break;

   case FieldExchangeForPhysical::RAW_TAG :
     break;

   case FieldOutMainCntryUIndex::RAW_TAG :
     break;

   case FieldCrossPercent::RAW_TAG :
     break;

   case FieldProgRptReqs::RAW_TAG :
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     break;

   case FieldIncTaxInd::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldNumBidders::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldBidTradeType::RAW_TAG :
     break;

   case FieldBasisPxType::RAW_TAG :
     break;

   case FieldStrikeTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBidResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW_TAG :
     break;

   case FieldClientBidID::RAW_TAG :
     break;

   case FieldNoBidComponents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStrikePrice::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldTotNoStrikes::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoStrikes::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStrikes::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageXMLnonFIX::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRegistrationInstructions::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     break;

   case FieldRegistTransType::RAW_TAG :
     break;

   case FieldRegistRefID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldRegistAcctType::RAW_TAG :
     break;

   case FieldTaxAdvantageType::RAW_TAG :
     break;

   case FieldOwnershipType::RAW_TAG :
     break;

   case FieldNoRegistDtls::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRegistDtls::skip( fix+pos, len - pos );
     break;

   case FieldNoDistribInsts::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDistribInsts::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRegistrationInstructionsResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     break;

   case FieldRegistTransType::RAW_TAG :
     break;

   case FieldRegistRefID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldRegistStatus::RAW_TAG :
     break;

   case FieldRegistRejReasonCode::RAW_TAG :
     break;

   case FieldRegistRejReasonText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassCancelReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     break;

   case FieldMassCancelResponse::RAW_TAG :
     break;

   case FieldMassCancelRejectReason::RAW_TAG :
     break;

   case FieldTotalAffectedOrders::RAW_TAG :
     break;

   case FieldNoAffectedOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAffectedOrders::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderCross::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCrossID::RAW_TAG :
     break;

   case FieldCrossType::RAW_TAG :
     break;

   case FieldCrossPrioritization::RAW_TAG :
     break;

   case FieldNoSides::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCrossOrderCancelReplaceRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldCrossID::RAW_TAG :
     break;

   case FieldOrigCrossID::RAW_TAG :
     break;

   case FieldCrossType::RAW_TAG :
     break;

   case FieldCrossPrioritization::RAW_TAG :
     break;

   case FieldNoSides::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCrossOrderCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldCrossID::RAW_TAG :
     break;

   case FieldOrigCrossID::RAW_TAG :
     break;

   case FieldCrossType::RAW_TAG :
     break;

   case FieldCrossPrioritization::RAW_TAG :
     break;

   case FieldNoSides::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityTypeRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityTypes::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityResponseID::RAW_TAG :
     break;

   case FieldSecurityResponseType::RAW_TAG :
     break;

   case FieldTotNoSecurityTypes::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoSecurityTypes::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityTypes::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityListRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityList::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityResponseID::RAW_TAG :
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDerivativeSecurityListRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDerivativeSecurityList::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityResponseID::RAW_TAG :
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderMultileg::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMultilegOrderCancelReplace::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     break;

   case FieldTradeRequestType::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTradeReportID::RAW_TAG :
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldTrdType::RAW_TAG :
     break;

   case FieldTrdSubType::RAW_TAG :
     break;

   case FieldTransferReason::RAW_TAG :
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     break;

   case FieldTradeLinkID::RAW_TAG :
     break;

   case FieldTrdMatchID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoDates::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDates::skip( fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldTimeBracket::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     break;

   case FieldTradeInputSource::RAW_TAG :
     break;

   case FieldTradeInputDevice::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     break;

   case FieldTradeReportTransType::RAW_TAG :
     break;

   case FieldTradeReportType::RAW_TAG :
     break;

   case FieldTradeRequestID::RAW_TAG :
     break;

   case FieldTrdType::RAW_TAG :
     break;

   case FieldTrdSubType::RAW_TAG :
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     break;

   case FieldTransferReason::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     break;

   case FieldLastRptRequested::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTradeReportRefID::RAW_TAG :
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     break;

   case FieldTradeLinkID::RAW_TAG :
     break;

   case FieldTrdMatchID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldOrdStatus::RAW_TAG :
     break;

   case FieldSecondaryExecID::RAW_TAG :
     break;

   case FieldExecRestatementReason::RAW_TAG :
     break;

   case FieldPreviouslyReported::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingTradingSessionID::RAW_TAG :
     break;

   case FieldUnderlyingTradingSessionSubID::RAW_TAG :
     break;

   case FieldLastQty::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldLastParPx::RAW_TAG :
     break;

   case FieldLastSpotRate::RAW_TAG :
     break;

   case FieldLastForwardPoints::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldAvgPxIndicator::RAW_TAG :
     break;

   case FieldNoPosAmt::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     break;

   case FieldTradeLegRefID::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldMatchType::RAW_TAG :
     break;

   case FieldNoSides::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     break;

   case FieldPublishTrdIndicator::RAW_TAG :
     break;

   case FieldShortSaleReason::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMassStatusReqID::RAW_TAG :
     break;

   case FieldMassStatusReqType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteRequestReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldRFQReqID::RAW_TAG :
     break;

   case FieldQuoteRequestRejectReason::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRFQRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRFQReqID::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteStatusReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     break;

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteRespID::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldBidPx::RAW_TAG :
     break;

   case FieldOfferPx::RAW_TAG :
     break;

   case FieldMktBidPx::RAW_TAG :
     break;

   case FieldMktOfferPx::RAW_TAG :
     break;

   case FieldMinBidSize::RAW_TAG :
     break;

   case FieldBidSize::RAW_TAG :
     break;

   case FieldMinOfferSize::RAW_TAG :
     break;

   case FieldOfferSize::RAW_TAG :
     break;

   case FieldValidUntilTime::RAW_TAG :
     break;

   case FieldBidSpotRate::RAW_TAG :
     break;

   case FieldOfferSpotRate::RAW_TAG :
     break;

   case FieldBidForwardPoints::RAW_TAG :
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     break;

   case FieldMidPx::RAW_TAG :
     break;

   case FieldBidYield::RAW_TAG :
     break;

   case FieldMidYield::RAW_TAG :
     break;

   case FieldOfferYield::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldQuoteStatus::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteRespID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteRespType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldBidPx::RAW_TAG :
     break;

   case FieldOfferPx::RAW_TAG :
     break;

   case FieldMktBidPx::RAW_TAG :
     break;

   case FieldMktOfferPx::RAW_TAG :
     break;

   case FieldMinBidSize::RAW_TAG :
     break;

   case FieldBidSize::RAW_TAG :
     break;

   case FieldMinOfferSize::RAW_TAG :
     break;

   case FieldOfferSize::RAW_TAG :
     break;

   case FieldValidUntilTime::RAW_TAG :
     break;

   case FieldBidSpotRate::RAW_TAG :
     break;

   case FieldOfferSpotRate::RAW_TAG :
     break;

   case FieldBidForwardPoints::RAW_TAG :
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     break;

   case FieldMidPx::RAW_TAG :
     break;

   case FieldBidYield::RAW_TAG :
     break;

   case FieldMidYield::RAW_TAG :
     break;

   case FieldOfferYield::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmation::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     break;

   case FieldConfirmRefID::RAW_TAG :
     break;

   case FieldConfirmReqID::RAW_TAG :
     break;

   case FieldConfirmTransType::RAW_TAG :
     break;

   case FieldConfirmType::RAW_TAG :
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     break;

   case FieldLegalConfirm::RAW_TAG :
     break;

   case FieldConfirmStatus::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldIndividualAllocID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldAllocQty::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldNoCapacities::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCapacities::skip( fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW_TAG :
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     break;

   case FieldAllocAccountType::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAvgParPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldReportedPx::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     break;

   case FieldNumDaysInterest::RAW_TAG :
     break;

   case FieldExDate::RAW_TAG :
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldConcession::RAW_TAG :
     break;

   case FieldTotalTakedown::RAW_TAG :
     break;

   case FieldNetMoney::RAW_TAG :
     break;

   case FieldMaturityNetMoney::RAW_TAG :
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldNoDlvyInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldSharedCommission::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionMaintenanceRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldPosTransType::RAW_TAG :
     break;

   case FieldPosMaintAction::RAW_TAG :
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     break;

   case FieldPosMaintRptRefID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoPositions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW_TAG :
     break;

   case FieldContraryInstructionIndicator::RAW_TAG :
     break;

   case FieldPriorSpreadIndicator::RAW_TAG :
     break;

   case FieldThresholdAmount::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionMaintenanceReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     break;

   case FieldPosTransType::RAW_TAG :
     break;

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldPosMaintAction::RAW_TAG :
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     break;

   case FieldPosMaintStatus::RAW_TAG :
     break;

   case FieldPosMaintResult::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoPositions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW_TAG :
     break;

   case FieldThresholdAmount::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRequestForPositions::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldPosReqType::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRequestForPositionsAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     break;

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldPosReqResult::RAW_TAG :
     break;

   case FieldPosReqStatus::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     break;

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldPosReqType::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldPosReqResult::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldSettlPrice::RAW_TAG :
     break;

   case FieldSettlPriceType::RAW_TAG :
     break;

   case FieldPriorSettlPrice::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldRegistStatus::RAW_TAG :
     break;

   case FieldDeliveryDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportRequestAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     break;

   case FieldTradeRequestType::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     break;

   case FieldTradeRequestResult::RAW_TAG :
     break;

   case FieldTradeRequestStatus::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     break;

   case FieldTradeReportTransType::RAW_TAG :
     break;

   case FieldTradeReportType::RAW_TAG :
     break;

   case FieldTrdType::RAW_TAG :
     break;

   case FieldTrdSubType::RAW_TAG :
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     break;

   case FieldTransferReason::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldTradeReportRefID::RAW_TAG :
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     break;

   case FieldTrdRptStatus::RAW_TAG :
     break;

   case FieldTradeReportRejectReason::RAW_TAG :
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTradeLinkID::RAW_TAG :
     break;

   case FieldTrdMatchID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldSecondaryExecID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldAllocTransType::RAW_TAG :
     break;

   case FieldAllocReportRefID::RAW_TAG :
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldAllocReportType::RAW_TAG :
     break;

   case FieldAllocStatus::RAW_TAG :
     break;

   case FieldAllocRejCode::RAW_TAG :
     break;

   case FieldRefAllocID::RAW_TAG :
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     break;

   case FieldAllocLinkID::RAW_TAG :
     break;

   case FieldAllocLinkType::RAW_TAG :
     break;

   case FieldBookingRefID::RAW_TAG :
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW_TAG :
     break;

   case FieldReversalIndicator::RAW_TAG :
     break;

   case FieldMatchType::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldAvgParPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     break;

   case FieldConcession::RAW_TAG :
     break;

   case FieldTotalTakedown::RAW_TAG :
     break;

   case FieldNetMoney::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNumDaysInterest::RAW_TAG :
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldLegalConfirm::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldTotNoAllocs::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationReportAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAllocStatus::RAW_TAG :
     break;

   case FieldAllocRejCode::RAW_TAG :
     break;

   case FieldAllocReportType::RAW_TAG :
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmationAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAffirmStatus::RAW_TAG :
     break;

   case FieldConfirmRejReason::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSettlementInstructionRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstReqID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW_TAG :
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldLastUpdateTime::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAssignmentReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAsgnRptID::RAW_TAG :
     break;

   case FieldTotNumAssignmentReports::RAW_TAG :
     break;

   case FieldLastRptRequested::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldThresholdAmount::RAW_TAG :
     break;

   case FieldSettlPrice::RAW_TAG :
     break;

   case FieldSettlPriceType::RAW_TAG :
     break;

   case FieldUnderlyingSettlPrice::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldAssignmentMethod::RAW_TAG :
     break;

   case FieldAssignmentUnit::RAW_TAG :
     break;

   case FieldOpenInterest::RAW_TAG :
     break;

   case FieldExerciseMethod::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollReqID::RAW_TAG :
     break;

   case FieldCollAsgnReason::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralAssignment::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollAsgnID::RAW_TAG :
     break;

   case FieldCollReqID::RAW_TAG :
     break;

   case FieldCollAsgnReason::RAW_TAG :
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     break;

   case FieldCollAsgnRefID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldNoDlvyInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRespID::RAW_TAG :
     break;

   case FieldCollAsgnID::RAW_TAG :
     break;

   case FieldCollReqID::RAW_TAG :
     break;

   case FieldCollAsgnReason::RAW_TAG :
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     break;

   case FieldCollAsgnRespType::RAW_TAG :
     break;

   case FieldCollAsgnRejectReason::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRptID::RAW_TAG :
     break;

   case FieldCollInquiryID::RAW_TAG :
     break;

   case FieldCollStatus::RAW_TAG :
     break;

   case FieldTotNumReports::RAW_TAG :
     break;

   case FieldLastRptRequested::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldNoDlvyInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralInquiry::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::skip( fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldNoDlvyInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkRequestType::RAW_TAG :
     break;

   case FieldNetworkRequestID::RAW_TAG :
     break;

   case FieldNoCompIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkStatusResponseType::RAW_TAG :
     break;

   case FieldNetworkRequestID::RAW_TAG :
     break;

   case FieldNetworkResponseID::RAW_TAG :
     break;

   case FieldLastNetworkResponseID::RAW_TAG :
     break;

   case FieldNoCompIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageUserRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     break;

   case FieldUserRequestType::RAW_TAG :
     break;

   case FieldUsername::RAW_TAG :
     break;

   case FieldPassword::RAW_TAG :
     break;

   case FieldNewPassword::RAW_TAG :
     break;

   case FieldRawDataLength::RAW_TAG :
     break;

   case FieldRawData::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageUserResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     break;

   case FieldUsername::RAW_TAG :
     break;

   case FieldUserStatus::RAW_TAG :
     break;

   case FieldUserStatusText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralInquiryAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     break;

   case FieldCollInquiryStatus::RAW_TAG :
     break;

   case FieldCollInquiryResult::RAW_TAG :
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::skip( fix+pos, len - pos );
     break;

   case FieldTotNumReports::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmationRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmReqID::RAW_TAG :
     break;

   case FieldConfirmType::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldIndividualAllocID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAllocAccount::RAW_TAG :
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     break;

   case FieldAllocAccountType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

// -------------------------------------- reset ----------------------------------------

void MessageHeader::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBeginString.offset = -1;
     fieldBodyLength.offset = -1;
     fieldMsgType.offset = -1;
     fieldSenderCompID.offset = -1;
     fieldTargetCompID.offset = -1;
     fieldOnBehalfOfCompID.offset = -1;
     fieldDeliverToCompID.offset = -1;
     fieldSecureDataLen.offset = -1;
     fieldSecureData.offset = -1;
     fieldMsgSeqNum.offset = -1;
     fieldSenderSubID.offset = -1;
     fieldSenderLocationID.offset = -1;
     fieldTargetSubID.offset = -1;
     fieldTargetLocationID.offset = -1;
     fieldOnBehalfOfSubID.offset = -1;
     fieldOnBehalfOfLocationID.offset = -1;
     fieldDeliverToSubID.offset = -1;
     fieldDeliverToLocationID.offset = -1;
     fieldPossDupFlag.offset = -1;
     fieldPossResend.offset = -1;
     fieldSendingTime.offset = -1;
     fieldOrigSendingTime.offset = -1;
     fieldXmlDataLen.offset = -1;
     fieldXmlData.offset = -1;
     fieldMessageEncoding.offset = -1;
     fieldLastMsgSeqNumProcessed.offset = -1;
     fieldNoHops.offset = -1;
     for( auto g = groupsHops.begin(); g != groupsHops.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageHeartbeat::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTestReqID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTestRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTestReqID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageResendRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBeginSeqNo.offset = -1;
     fieldEndSeqNo.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRefSeqNum.offset = -1;
     fieldRefTagID.offset = -1;
     fieldRefMsgType.offset = -1;
     fieldSessionRejectReason.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSequenceReset::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldGapFillFlag.offset = -1;
     fieldNewSeqNo.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageLogout::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageIOI::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldIOIID.offset = -1;
     fieldIOITransType.offset = -1;
     fieldIOIRefID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldIOIQty.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldIOIQltyInd.offset = -1;
     fieldIOINaturalFlag.offset = -1;
     fieldNoIOIQualifiers.offset = -1;
     for( auto g = groupsIOIQualifiers.begin(); g != groupsIOIQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTransactTime.offset = -1;
     fieldURLLink.offset = -1;
     fieldNoRoutingIDs.offset = -1;
     for( auto g = groupsRoutingIDs.begin(); g != groupsRoutingIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageAdvertisement::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAdvId.offset = -1;
     fieldAdvTransType.offset = -1;
     fieldAdvRefID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAdvSide.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldPrice.offset = -1;
     fieldCurrency.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldURLLink.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageExecutionReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldSecondaryExecID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldQuoteRespID.offset = -1;
     fieldOrdStatusReqID.offset = -1;
     fieldMassStatusReqID.offset = -1;
     fieldTotNumReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldNoContraBrokers.offset = -1;
     for( auto g = groupsContraBrokers.begin(); g != groupsContraBrokers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldListID.offset = -1;
     fieldCrossID.offset = -1;
     fieldOrigCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldExecID.offset = -1;
     fieldExecRefID.offset = -1;
     fieldExecType.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldWorkingIndicator.offset = -1;
     fieldOrdRejReason.offset = -1;
     fieldExecRestatementReason.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldPeggedPrice.offset = -1;
     fieldDiscretionPrice.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldTargetStrategyPerformance.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldExecInst.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldLastQty.offset = -1;
     fieldUnderlyingLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldUnderlyingLastPx.offset = -1;
     fieldLastParPx.offset = -1;
     fieldLastSpotRate.offset = -1;
     fieldLastForwardPoints.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTimeBracket.offset = -1;
     fieldLastCapacity.offset = -1;
     fieldLeavesQty.offset = -1;
     fieldCumQty.offset = -1;
     fieldAvgPx.offset = -1;
     fieldDayOrderQty.offset = -1;
     fieldDayCumQty.offset = -1;
     fieldDayAvgPx.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldReportToExch.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldExDate.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldTradedFlatSwitch.offset = -1;
     fieldBasisFeatureDate.offset = -1;
     fieldBasisFeaturePrice.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldSettlCurrAmt.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldSettlCurrFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldHandlInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldMaxShow.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldLastForwardPoints2.offset = -1;
     fieldMultiLegReportingType.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldTransBkdTime.offset = -1;
     fieldExecValuationPoint.offset = -1;
     fieldExecPriceType.offset = -1;
     fieldExecPriceAdjustment.offset = -1;
     fieldPriorityIndicator.offset = -1;
     fieldPriceImprovement.offset = -1;
     fieldLastLiquidityInd.offset = -1;
     fieldNoContAmts.offset = -1;
     for( auto g = groupsContAmts.begin(); g != groupsContAmts.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCopyMsgIndicator.offset = -1;
     fieldNoMiscFees.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageOrderCancelReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldWorkingIndicator.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldListID.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldCxlRejResponseTo.offset = -1;
     fieldCxlRejReason.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageLogon::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldEncryptMethod.offset = -1;
     fieldHeartBtInt.offset = -1;
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldResetSeqNumFlag.offset = -1;
     fieldNextExpectedMsgSeqNum.offset = -1;
     fieldMaxMessageSize.offset = -1;
     fieldNoMsgTypes.offset = -1;
     for( auto g = groupsMsgTypes.begin(); g != groupsMsgTypes.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTestMessageIndicator.offset = -1;
     fieldUsername.offset = -1;
     fieldPassword.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNews::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrigTime.offset = -1;
     fieldUrgency.offset = -1;
     fieldHeadline.offset = -1;
     fieldEncodedHeadlineLen.offset = -1;
     fieldEncodedHeadline.offset = -1;
     fieldNoRoutingIDs.offset = -1;
     for( auto g = groupsRoutingIDs.begin(); g != groupsRoutingIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoRelatedSym.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLinesOfText.offset = -1;
     for( auto g = groupsLinesOfText.begin(); g != groupsLinesOfText.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldURLLink.offset = -1;
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageEmail::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldEmailThreadID.offset = -1;
     fieldEmailType.offset = -1;
     fieldOrigTime.offset = -1;
     fieldSubject.offset = -1;
     fieldEncodedSubjectLen.offset = -1;
     fieldEncodedSubject.offset = -1;
     fieldNoRoutingIDs.offset = -1;
     for( auto g = groupsRoutingIDs.begin(); g != groupsRoutingIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoRelatedSym.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldNoLinesOfText.offset = -1;
     for( auto g = groupsLinesOfText.begin(); g != groupsLinesOfText.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderSingle::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     fieldNoAllocs.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     fieldNoTradingSessions.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrevClosePx.offset = -1;
     fieldSide.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldPrice2.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderList::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldBidID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldProgRptReqs.offset = -1;
     fieldBidType.offset = -1;
     fieldProgPeriodInterval.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldListExecInstType.offset = -1;
     fieldListExecInst.offset = -1;
     fieldEncodedListExecInstLen.offset = -1;
     fieldEncodedListExecInst.offset = -1;
     fieldAllowableOneSidednessPct.offset = -1;
     fieldAllowableOneSidednessValue.offset = -1;
     fieldAllowableOneSidednessCurr.offset = -1;
     fieldTotNoOrders.offset = -1;
     fieldLastFragment.offset = -1;
     fieldNoOrders.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageOrderCancelRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrigClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldListID.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldComplianceID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderCancelReplaceRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldListID.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     fieldNoAllocs.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     fieldNoTradingSessions.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldCurrency.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldPrice2.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrdStatusReqID.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageAllocationInstruction::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAllocID.offset = -1;
     fieldAllocTransType.offset = -1;
     fieldAllocType.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldRefAllocID.offset = -1;
     fieldAllocCancReplaceReason.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldAllocLinkID.offset = -1;
     fieldAllocLinkType.offset = -1;
     fieldBookingRefID.offset = -1;
     fieldAllocNoOrdersType.offset = -1;
     fieldNoOrders.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoExecs.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPreviouslyReported.offset = -1;
     fieldReversalIndicator.offset = -1;
     fieldMatchType.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     fieldNoInstrAttrib.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldPriceType.offset = -1;
     fieldAvgPx.offset = -1;
     fieldAvgParPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldCurrency.offset = -1;
     fieldAvgPxPrecision.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldBookingType.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldAutoAcceptIndicator.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldTotalAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldLegalConfirm.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldTotNoAllocs.offset = -1;
     fieldLastFragment.offset = -1;
     fieldNoAllocs.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageListCancelRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageListExecute::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldBidID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageListStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageListStatus::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldListStatusType.offset = -1;
     fieldNoRpts.offset = -1;
     fieldListOrderStatus.offset = -1;
     fieldRptSeq.offset = -1;
     fieldListStatusText.offset = -1;
     fieldEncodedListStatusTextLen.offset = -1;
     fieldEncodedListStatusText.offset = -1;
     fieldTransactTime.offset = -1;
     fieldTotNoOrders.offset = -1;
     fieldLastFragment.offset = -1;
     fieldNoOrders.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageAllocationInstructionAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAllocID.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSecondaryAllocID.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAllocStatus.offset = -1;
     fieldAllocRejCode.offset = -1;
     fieldAllocType.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNoAllocs.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageDontKnowTrade::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldExecID.offset = -1;
     fieldDKReason.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldRFQReqID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldNoRelatedSym.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuote::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteRespID.offset = -1;
     fieldQuoteType.offset = -1;
     fieldNoQuoteQualifiers.offset = -1;
     for( auto g = groupsQuoteQualifiers.begin(); g != groupsQuoteQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQuoteResponseLevel.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldBidPx.offset = -1;
     fieldOfferPx.offset = -1;
     fieldMktBidPx.offset = -1;
     fieldMktOfferPx.offset = -1;
     fieldMinBidSize.offset = -1;
     fieldBidSize.offset = -1;
     fieldMinOfferSize.offset = -1;
     fieldOfferSize.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldBidSpotRate.offset = -1;
     fieldOfferSpotRate.offset = -1;
     fieldBidForwardPoints.offset = -1;
     fieldOfferForwardPoints.offset = -1;
     fieldMidPx.offset = -1;
     fieldBidYield.offset = -1;
     fieldMidYield.offset = -1;
     fieldOfferYield.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrdType.offset = -1;
     fieldBidForwardPoints2.offset = -1;
     fieldOfferForwardPoints2.offset = -1;
     fieldSettlCurrBidFxRate.offset = -1;
     fieldSettlCurrOfferFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldCommType.offset = -1;
     fieldCommission.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldExDestination.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldPriceType.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSettlementInstructions::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSettlInstMsgID.offset = -1;
     fieldSettlInstReqID.offset = -1;
     fieldSettlInstMode.offset = -1;
     fieldSettlInstReqRejCode.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldClOrdID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldNoSettlInst.offset = -1;
     for( auto g = groupsSettlInst.begin(); g != groupsSettlInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageMarketDataRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMDReqID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldMarketDepth.offset = -1;
     fieldMDUpdateType.offset = -1;
     fieldAggregatedBook.offset = -1;
     fieldOpenCloseSettlFlag.offset = -1;
     fieldScope.offset = -1;
     fieldMDImplicitDelete.offset = -1;
     fieldNoMDEntryTypes.offset = -1;
     for( auto g = groupsMDEntryTypes.begin(); g != groupsMDEntryTypes.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoRelatedSym.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoTradingSessions.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldApplQueueAction.offset = -1;
     fieldApplQueueMax.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMarketDataSnapshotFullRefresh::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMDReqID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldFinancialStatus.offset = -1;
     fieldCorporateAction.offset = -1;
     fieldNetChgPrevDay.offset = -1;
     fieldNoMDEntries.offset = -1;
     for( auto g = groupsMDEntries.begin(); g != groupsMDEntries.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldApplQueueDepth.offset = -1;
     fieldApplQueueResolution.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMarketDataIncrementalRefresh::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMDReqID.offset = -1;
     fieldNoMDEntries.offset = -1;
     for( auto g = groupsMDEntries.begin(); g != groupsMDEntries.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldApplQueueDepth.offset = -1;
     fieldApplQueueResolution.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMarketDataRequestReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMDReqID.offset = -1;
     fieldMDReqRejReason.offset = -1;
     fieldNoAltMDSource.offset = -1;
     for( auto g = groupsAltMDSource.begin(); g != groupsAltMDSource.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteCancel::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteCancelType.offset = -1;
     fieldQuoteResponseLevel.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldNoQuoteEntries.offset = -1;
     for( auto g = groupsQuoteEntries.begin(); g != groupsQuoteEntries.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageQuoteStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteStatusReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMassQuoteAcknowledgement::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteStatus.offset = -1;
     fieldQuoteRejectReason.offset = -1;
     fieldQuoteResponseLevel.offset = -1;
     fieldQuoteType.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNoQuoteSets.offset = -1;
     for( auto g = groupsQuoteSets.begin(); g != groupsQuoteSets.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageSecurityDefinitionRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityRequestType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     fieldNoInstrAttrib.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldExpirationCycle.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityDefinition::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityResponseType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     fieldNoInstrAttrib.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldExpirationCycle.offset = -1;
     fieldRoundLot.offset = -1;
     fieldMinTradeVol.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityStatusReqID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     fieldNoInstrAttrib.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityStatus::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityStatusReqID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     fieldNoInstrAttrib.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldSecurityTradingStatus.offset = -1;
     fieldFinancialStatus.offset = -1;
     fieldCorporateAction.offset = -1;
     fieldHaltReasonChar.offset = -1;
     fieldInViewOfCommon.offset = -1;
     fieldDueToRelated.offset = -1;
     fieldBuyVolume.offset = -1;
     fieldSellVolume.offset = -1;
     fieldHighPx.offset = -1;
     fieldLowPx.offset = -1;
     fieldLastPx.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAdjustment.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradingSessionStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradSesReqID.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTradSesMethod.offset = -1;
     fieldTradSesMode.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradingSessionStatus::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradSesReqID.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTradSesMethod.offset = -1;
     fieldTradSesMode.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldTradSesStatus.offset = -1;
     fieldTradSesStatusRejReason.offset = -1;
     fieldTradSesStartTime.offset = -1;
     fieldTradSesOpenTime.offset = -1;
     fieldTradSesPreCloseTime.offset = -1;
     fieldTradSesCloseTime.offset = -1;
     fieldTradSesEndTime.offset = -1;
     fieldTotalVolumeTraded.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMassQuote::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteType.offset = -1;
     fieldQuoteResponseLevel.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDefBidSize.offset = -1;
     fieldDefOfferSize.offset = -1;
     fieldNoQuoteSets.offset = -1;
     for( auto g = groupsQuoteSets.begin(); g != groupsQuoteSets.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageBusinessMessageReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRefSeqNum.offset = -1;
     fieldRefMsgType.offset = -1;
     fieldBusinessRejectRefID.offset = -1;
     fieldBusinessRejectReason.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageBidRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBidID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldBidRequestTransType.offset = -1;
     fieldListName.offset = -1;
     fieldTotNoRelatedSym.offset = -1;
     fieldBidType.offset = -1;
     fieldNumTickets.offset = -1;
     fieldCurrency.offset = -1;
     fieldSideValue1.offset = -1;
     fieldSideValue2.offset = -1;
     fieldNoBidDescriptors.offset = -1;
     for( auto g = groupsBidDescriptors.begin(); g != groupsBidDescriptors.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoBidComponents.offset = -1;
     for( auto g = groupsBidComponents.begin(); g != groupsBidComponents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldLiquidityIndType.offset = -1;
     fieldWtAverageLiquidity.offset = -1;
     fieldExchangeForPhysical.offset = -1;
     fieldOutMainCntryUIndex.offset = -1;
     fieldCrossPercent.offset = -1;
     fieldProgRptReqs.offset = -1;
     fieldProgPeriodInterval.offset = -1;
     fieldIncTaxInd.offset = -1;
     fieldForexReq.offset = -1;
     fieldNumBidders.offset = -1;
     fieldTradeDate.offset = -1;
     fieldBidTradeType.offset = -1;
     fieldBasisPxType.offset = -1;
     fieldStrikeTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageBidResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBidID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldNoBidComponents.offset = -1;
     for( auto g = groupsBidComponents.begin(); g != groupsBidComponents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageListStrikePrice::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldTotNoStrikes.offset = -1;
     fieldLastFragment.offset = -1;
     fieldNoStrikes.offset = -1;
     for( auto g = groupsStrikes.begin(); g != groupsStrikes.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageXMLnonFIX::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCheckSum.offset = -1;
}

void MessageRegistrationInstructions::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRegistID.offset = -1;
     fieldRegistTransType.offset = -1;
     fieldRegistRefID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldRegistAcctType.offset = -1;
     fieldTaxAdvantageType.offset = -1;
     fieldOwnershipType.offset = -1;
     fieldNoRegistDtls.offset = -1;
     for( auto g = groupsRegistDtls.begin(); g != groupsRegistDtls.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoDistribInsts.offset = -1;
     for( auto g = groupsDistribInsts.begin(); g != groupsDistribInsts.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageRegistrationInstructionsResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRegistID.offset = -1;
     fieldRegistTransType.offset = -1;
     fieldRegistRefID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldRegistStatus.offset = -1;
     fieldRegistRejReasonCode.offset = -1;
     fieldRegistRejReasonText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderMassCancelRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldMassCancelRequestType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     fieldNoUnderlyingSecurityAltID.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     fieldNoUnderlyingStips.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderMassCancelReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldMassCancelRequestType.offset = -1;
     fieldMassCancelResponse.offset = -1;
     fieldMassCancelRejectReason.offset = -1;
     fieldTotalAffectedOrders.offset = -1;
     fieldNoAffectedOrders.offset = -1;
     for( auto g = groupsAffectedOrders.begin(); g != groupsAffectedOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     fieldNoUnderlyingSecurityAltID.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     fieldNoUnderlyingStips.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderCross::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldCrossPrioritization.offset = -1;
     fieldNoSides.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     fieldNoTradingSessions.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldPrevClosePx.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCrossOrderCancelReplaceRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldCrossID.offset = -1;
     fieldOrigCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldCrossPrioritization.offset = -1;
     fieldNoSides.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     fieldNoTradingSessions.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldPrevClosePx.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCrossOrderCancelRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldCrossID.offset = -1;
     fieldOrigCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldCrossPrioritization.offset = -1;
     fieldNoSides.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityTypeRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityTypes::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityResponseType.offset = -1;
     fieldTotNoSecurityTypes.offset = -1;
     fieldLastFragment.offset = -1;
     fieldNoSecurityTypes.offset = -1;
     for( auto g = groupsSecurityTypes.begin(); g != groupsSecurityTypes.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityListRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityListRequestType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     fieldNoInstrAttrib.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityList::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityRequestResult.offset = -1;
     fieldTotNoRelatedSym.offset = -1;
     fieldLastFragment.offset = -1;
     fieldNoRelatedSym.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageDerivativeSecurityListRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityListRequestType.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     fieldNoUnderlyingSecurityAltID.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     fieldNoUnderlyingStips.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSecuritySubType.offset = -1;
     fieldCurrency.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageDerivativeSecurityList::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityRequestResult.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     fieldNoUnderlyingSecurityAltID.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     fieldNoUnderlyingStips.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTotNoRelatedSym.offset = -1;
     fieldLastFragment.offset = -1;
     fieldNoRelatedSym.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageNewOrderMultileg::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     fieldNoAllocs.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     fieldNoTradingSessions.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrevClosePx.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldMultiLegRptTypeReq.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMultilegOrderCancelReplace::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     fieldNoAllocs.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     fieldNoTradingSessions.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrevClosePx.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldMultiLegRptTypeReq.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReportRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradeRequestID.offset = -1;
     fieldTradeRequestType.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradeReportID.offset = -1;
     fieldSecondaryTradeReportID.offset = -1;
     fieldExecID.offset = -1;
     fieldExecType.offset = -1;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldTrdType.offset = -1;
     fieldTrdSubType.offset = -1;
     fieldTransferReason.offset = -1;
     fieldSecondaryTrdType.offset = -1;
     fieldTradeLinkID.offset = -1;
     fieldTrdMatchID.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     fieldNoInstrAttrib.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoDates.offset = -1;
     for( auto g = groupsDates.begin(); g != groupsDates.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldClearingBusinessDate.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTimeBracket.offset = -1;
     fieldSide.offset = -1;
     fieldMultiLegReportingType.offset = -1;
     fieldTradeInputSource.offset = -1;
     fieldTradeInputDevice.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradeReportID.offset = -1;
     fieldTradeReportTransType.offset = -1;
     fieldTradeReportType.offset = -1;
     fieldTradeRequestID.offset = -1;
     fieldTrdType.offset = -1;
     fieldTrdSubType.offset = -1;
     fieldSecondaryTrdType.offset = -1;
     fieldTransferReason.offset = -1;
     fieldExecType.offset = -1;
     fieldTotNumTradeReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradeReportRefID.offset = -1;
     fieldSecondaryTradeReportRefID.offset = -1;
     fieldSecondaryTradeReportID.offset = -1;
     fieldTradeLinkID.offset = -1;
     fieldTrdMatchID.offset = -1;
     fieldExecID.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldSecondaryExecID.offset = -1;
     fieldExecRestatementReason.offset = -1;
     fieldPreviouslyReported.offset = -1;
     fieldPriceType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldQtyType.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingTradingSessionID.offset = -1;
     fieldUnderlyingTradingSessionSubID.offset = -1;
     fieldLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldLastParPx.offset = -1;
     fieldLastSpotRate.offset = -1;
     fieldLastForwardPoints.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradeDate.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldAvgPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldAvgPxIndicator.offset = -1;
     fieldNoPosAmt.offset = -1;
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMultiLegReportingType.offset = -1;
     fieldTradeLegRefID.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     fieldNoTrdRegTimestamps.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldMatchType.offset = -1;
     fieldNoSides.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCopyMsgIndicator.offset = -1;
     fieldPublishTrdIndicator.offset = -1;
     fieldShortSaleReason.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderMassStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMassStatusReqID.offset = -1;
     fieldMassStatusReqType.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     fieldNoUnderlyingSecurityAltID.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     fieldNoUnderlyingStips.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteRequestReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldRFQReqID.offset = -1;
     fieldQuoteRequestRejectReason.offset = -1;
     fieldNoRelatedSym.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageRFQRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRFQReqID.offset = -1;
     fieldNoRelatedSym.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteStatusReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteStatusReqID.offset = -1;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteRespID.offset = -1;
     fieldQuoteType.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoQuoteQualifiers.offset = -1;
     for( auto g = groupsQuoteQualifiers.begin(); g != groupsQuoteQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldExpireTime.offset = -1;
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldBidPx.offset = -1;
     fieldOfferPx.offset = -1;
     fieldMktBidPx.offset = -1;
     fieldMktOfferPx.offset = -1;
     fieldMinBidSize.offset = -1;
     fieldBidSize.offset = -1;
     fieldMinOfferSize.offset = -1;
     fieldOfferSize.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldBidSpotRate.offset = -1;
     fieldOfferSpotRate.offset = -1;
     fieldBidForwardPoints.offset = -1;
     fieldOfferForwardPoints.offset = -1;
     fieldMidPx.offset = -1;
     fieldBidYield.offset = -1;
     fieldMidYield.offset = -1;
     fieldOfferYield.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrdType.offset = -1;
     fieldBidForwardPoints2.offset = -1;
     fieldOfferForwardPoints2.offset = -1;
     fieldSettlCurrBidFxRate.offset = -1;
     fieldSettlCurrOfferFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldCommType.offset = -1;
     fieldCommission.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldExDestination.offset = -1;
     fieldQuoteStatus.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteRespID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteRespType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteType.offset = -1;
     fieldNoQuoteQualifiers.offset = -1;
     for( auto g = groupsQuoteQualifiers.begin(); g != groupsQuoteQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldBidPx.offset = -1;
     fieldOfferPx.offset = -1;
     fieldMktBidPx.offset = -1;
     fieldMktOfferPx.offset = -1;
     fieldMinBidSize.offset = -1;
     fieldBidSize.offset = -1;
     fieldMinOfferSize.offset = -1;
     fieldOfferSize.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldBidSpotRate.offset = -1;
     fieldOfferSpotRate.offset = -1;
     fieldBidForwardPoints.offset = -1;
     fieldOfferForwardPoints.offset = -1;
     fieldMidPx.offset = -1;
     fieldBidYield.offset = -1;
     fieldMidYield.offset = -1;
     fieldOfferYield.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrdType.offset = -1;
     fieldBidForwardPoints2.offset = -1;
     fieldOfferForwardPoints2.offset = -1;
     fieldSettlCurrBidFxRate.offset = -1;
     fieldSettlCurrOfferFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldExDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageConfirmation::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldConfirmID.offset = -1;
     fieldConfirmRefID.offset = -1;
     fieldConfirmReqID.offset = -1;
     fieldConfirmTransType.offset = -1;
     fieldConfirmType.offset = -1;
     fieldCopyMsgIndicator.offset = -1;
     fieldLegalConfirm.offset = -1;
     fieldConfirmStatus.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoOrders.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocID.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldIndividualAllocID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldTradeDate.offset = -1;
     fieldNoTrdRegTimestamps.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     fieldNoInstrAttrib.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldAllocQty.offset = -1;
     fieldQtyType.offset = -1;
     fieldSide.offset = -1;
     fieldCurrency.offset = -1;
     fieldLastMkt.offset = -1;
     fieldNoCapacities.offset = -1;
     for( auto g = groupsCapacities.begin(); g != groupsCapacities.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocAccount.offset = -1;
     fieldAllocAcctIDSource.offset = -1;
     fieldAllocAccountType.offset = -1;
     fieldAvgPx.offset = -1;
     fieldAvgPxPrecision.offset = -1;
     fieldPriceType.offset = -1;
     fieldAvgParPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldReportedPx.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldProcessCode.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldExDate.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldMaturityNetMoney.offset = -1;
     fieldSettlCurrAmt.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldSettlCurrFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     fieldNoDlvyInst.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldSharedCommission.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoMiscFees.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessagePositionMaintenanceRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosReqID.offset = -1;
     fieldPosTransType.offset = -1;
     fieldPosMaintAction.offset = -1;
     fieldOrigPosReqRefID.offset = -1;
     fieldPosMaintRptRefID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoTradingSessions.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     fieldNoPositions.offset = -1;
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAdjustmentType.offset = -1;
     fieldContraryInstructionIndicator.offset = -1;
     fieldPriorSpreadIndicator.offset = -1;
     fieldThresholdAmount.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessagePositionMaintenanceReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosMaintRptID.offset = -1;
     fieldPosTransType.offset = -1;
     fieldPosReqID.offset = -1;
     fieldPosMaintAction.offset = -1;
     fieldOrigPosReqRefID.offset = -1;
     fieldPosMaintStatus.offset = -1;
     fieldPosMaintResult.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoTradingSessions.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     fieldNoPositions.offset = -1;
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoPosAmt.offset = -1;
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAdjustmentType.offset = -1;
     fieldThresholdAmount.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageRequestForPositions::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosReqID.offset = -1;
     fieldPosReqType.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldNoTradingSessions.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageRequestForPositionsAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosMaintRptID.offset = -1;
     fieldPosReqID.offset = -1;
     fieldTotalNumPosReports.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldPosReqResult.offset = -1;
     fieldPosReqStatus.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessagePositionReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosMaintRptID.offset = -1;
     fieldPosReqID.offset = -1;
     fieldPosReqType.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTotalNumPosReports.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldPosReqResult.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     fieldSettlPrice.offset = -1;
     fieldSettlPriceType.offset = -1;
     fieldPriorSettlPrice.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoPositions.offset = -1;
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoPosAmt.offset = -1;
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldRegistStatus.offset = -1;
     fieldDeliveryDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReportRequestAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradeRequestID.offset = -1;
     fieldTradeRequestType.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTotNumTradeReports.offset = -1;
     fieldTradeRequestResult.offset = -1;
     fieldTradeRequestStatus.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMultiLegReportingType.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReportAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradeReportID.offset = -1;
     fieldTradeReportTransType.offset = -1;
     fieldTradeReportType.offset = -1;
     fieldTrdType.offset = -1;
     fieldTrdSubType.offset = -1;
     fieldSecondaryTrdType.offset = -1;
     fieldTransferReason.offset = -1;
     fieldExecType.offset = -1;
     fieldTradeReportRefID.offset = -1;
     fieldSecondaryTradeReportRefID.offset = -1;
     fieldTrdRptStatus.offset = -1;
     fieldTradeReportRejectReason.offset = -1;
     fieldSecondaryTradeReportID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradeLinkID.offset = -1;
     fieldTrdMatchID.offset = -1;
     fieldExecID.offset = -1;
     fieldSecondaryExecID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldNoTrdRegTimestamps.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldClearingFeeIndicator.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldNoAllocs.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageAllocationReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAllocReportID.offset = -1;
     fieldAllocID.offset = -1;
     fieldAllocTransType.offset = -1;
     fieldAllocReportRefID.offset = -1;
     fieldAllocCancReplaceReason.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldAllocReportType.offset = -1;
     fieldAllocStatus.offset = -1;
     fieldAllocRejCode.offset = -1;
     fieldRefAllocID.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldAllocLinkID.offset = -1;
     fieldAllocLinkType.offset = -1;
     fieldBookingRefID.offset = -1;
     fieldAllocNoOrdersType.offset = -1;
     fieldNoOrders.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoExecs.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPreviouslyReported.offset = -1;
     fieldReversalIndicator.offset = -1;
     fieldMatchType.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     fieldNoInstrAttrib.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldPriceType.offset = -1;
     fieldAvgPx.offset = -1;
     fieldAvgParPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldCurrency.offset = -1;
     fieldAvgPxPrecision.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldBookingType.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldAutoAcceptIndicator.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldTotalAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldLegalConfirm.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldTotNoAllocs.offset = -1;
     fieldLastFragment.offset = -1;
     fieldNoAllocs.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageAllocationReportAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAllocReportID.offset = -1;
     fieldAllocID.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSecondaryAllocID.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAllocStatus.offset = -1;
     fieldAllocRejCode.offset = -1;
     fieldAllocReportType.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNoAllocs.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageConfirmationAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldConfirmID.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAffirmStatus.offset = -1;
     fieldConfirmRejReason.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSettlementInstructionRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSettlInstReqID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocAccount.offset = -1;
     fieldAllocAcctIDSource.offset = -1;
     fieldSide.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldCFICode.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireTime.offset = -1;
     fieldLastUpdateTime.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageAssignmentReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAsgnRptID.offset = -1;
     fieldTotNumAssignmentReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoPositions.offset = -1;
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoPosAmt.offset = -1;
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldThresholdAmount.offset = -1;
     fieldSettlPrice.offset = -1;
     fieldSettlPriceType.offset = -1;
     fieldUnderlyingSettlPrice.offset = -1;
     fieldExpireDate.offset = -1;
     fieldAssignmentMethod.offset = -1;
     fieldAssignmentUnit.offset = -1;
     fieldOpenInterest.offset = -1;
     fieldExerciseMethod.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollReqID.offset = -1;
     fieldCollAsgnReason.offset = -1;
     fieldTransactTime.offset = -1;
     fieldExpireTime.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldNoExecs.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoTrades.offset = -1;
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     fieldNoTrdRegTimestamps.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldNoMiscFees.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralAssignment::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollAsgnID.offset = -1;
     fieldCollReqID.offset = -1;
     fieldCollAsgnReason.offset = -1;
     fieldCollAsgnTransType.offset = -1;
     fieldCollAsgnRefID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldExpireTime.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldNoExecs.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoTrades.offset = -1;
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     fieldNoTrdRegTimestamps.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldNoMiscFees.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     fieldNoDlvyInst.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollRespID.offset = -1;
     fieldCollAsgnID.offset = -1;
     fieldCollReqID.offset = -1;
     fieldCollAsgnReason.offset = -1;
     fieldCollAsgnTransType.offset = -1;
     fieldCollAsgnRespType.offset = -1;
     fieldCollAsgnRejectReason.offset = -1;
     fieldTransactTime.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldNoExecs.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoTrades.offset = -1;
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     fieldNoTrdRegTimestamps.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldNoMiscFees.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollRptID.offset = -1;
     fieldCollInquiryID.offset = -1;
     fieldCollStatus.offset = -1;
     fieldTotNumReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldNoExecs.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoTrades.offset = -1;
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     fieldNoTrdRegTimestamps.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldNoMiscFees.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     fieldNoDlvyInst.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralInquiry::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollInquiryID.offset = -1;
     fieldNoCollInquiryQualifier.offset = -1;
     for( auto g = groupsCollInquiryQualifier.begin(); g != groupsCollInquiryQualifier.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSubscriptionRequestType.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldNoExecs.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoTrades.offset = -1;
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     fieldNoTrdRegTimestamps.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldNoStipulations.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     fieldNoDlvyInst.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNetworkCounterpartySystemStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldNetworkRequestType.offset = -1;
     fieldNetworkRequestID.offset = -1;
     fieldNoCompIDs.offset = -1;
     for( auto g = groupsCompIDs.begin(); g != groupsCompIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageNetworkCounterpartySystemStatusResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldNetworkStatusResponseType.offset = -1;
     fieldNetworkRequestID.offset = -1;
     fieldNetworkResponseID.offset = -1;
     fieldLastNetworkResponseID.offset = -1;
     fieldNoCompIDs.offset = -1;
     for( auto g = groupsCompIDs.begin(); g != groupsCompIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageUserRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldUserRequestID.offset = -1;
     fieldUserRequestType.offset = -1;
     fieldUsername.offset = -1;
     fieldPassword.offset = -1;
     fieldNewPassword.offset = -1;
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageUserResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldUserRequestID.offset = -1;
     fieldUsername.offset = -1;
     fieldUserStatus.offset = -1;
     fieldUserStatusText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralInquiryAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollInquiryID.offset = -1;
     fieldCollInquiryStatus.offset = -1;
     fieldCollInquiryResult.offset = -1;
     fieldNoCollInquiryQualifier.offset = -1;
     for( auto g = groupsCollInquiryQualifier.begin(); g != groupsCollInquiryQualifier.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTotNumReports.offset = -1;
     fieldNoPartyIDs.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldNoExecs.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoTrades.offset = -1;
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     fieldNoSecurityAltID.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     fieldNoEvents.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldNoUnderlyings.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageConfirmationRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldConfirmReqID.offset = -1;
     fieldConfirmType.offset = -1;
     fieldNoOrders.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocID.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldIndividualAllocID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAllocAccount.offset = -1;
     fieldAllocAcctIDSource.offset = -1;
     fieldAllocAccountType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}
// end of MessageScanners.cxx


} // namespace fix44
