// Generated by https://github.com/sashamakarenko/fixpp
// Copyright (c) 2021 sashamakarenko
// https://github.com/sashamakarenko/fixpp/blob/main/LICENSE

#include <order/Messages.h>

namespace order
{

// start of MessageSanity.cxx

// Generated

// ---------------------------------- findBadField ---------------------------------

const char * MessageHeader::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldBeginString.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBeginString.offset - 1 - FieldBeginString::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBeginString.offset] == 1 ) return tagPtr;
   }
   if( fieldBodyLength.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldBodyLength.offset - 1 - FieldBodyLength::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldBodyLength.offset] == 1 ) return tagPtr;
   }
   if( fieldMsgType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMsgType.offset - 1 - FieldMsgType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMsgType.offset] == 1 ) return tagPtr;
   }
   if( fieldSenderCompID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSenderCompID.offset - 1 - FieldSenderCompID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSenderCompID.offset] == 1 ) return tagPtr;
   }
   if( fieldTargetCompID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTargetCompID.offset - 1 - FieldTargetCompID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTargetCompID.offset] == 1 ) return tagPtr;
   }
   if( fieldMsgSeqNum.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldMsgSeqNum.offset - 1 - FieldMsgSeqNum::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldMsgSeqNum.offset] == 1 ) return tagPtr;
   }
   if( fieldSendingTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSendingTime.offset - 1 - FieldSendingTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSendingTime.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageNewOrderSingle::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStopPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStopPx.offset - 1 - FieldStopPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStopPx.offset] == 1 ) return tagPtr;
   }
   if( fieldTransactTime.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTransactTime.offset - 1 - FieldTransactTime::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTransactTime.offset] == 1 ) return tagPtr;
   }
   return nullptr;
}

const char * MessageExecutionReport::findBadField() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrderID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderID.offset - 1 - FieldOrderID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderID.offset] == 1 ) return tagPtr;
   }
   if( fieldClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldClOrdID.offset - 1 - FieldClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldOrigClOrdID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrigClOrdID.offset - 1 - FieldOrigClOrdID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrigClOrdID.offset] == 1 ) return tagPtr;
   }
   if( fieldExecID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecID.offset - 1 - FieldExecID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecID.offset] == 1 ) return tagPtr;
   }
   if( fieldExecType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecType.offset - 1 - FieldExecType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecType.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdStatus.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdStatus.offset - 1 - FieldOrdStatus::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdStatus.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdRejReason.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdRejReason.offset - 1 - FieldOrdRejReason::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdRejReason.offset] == 1 ) return tagPtr;
   }
   if( fieldAccount.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAccount.offset - 1 - FieldAccount::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAccount.offset] == 1 ) return tagPtr;
   }
   if( fieldSymbol.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSymbol.offset - 1 - FieldSymbol::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSymbol.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityID.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityID.offset - 1 - FieldSecurityID::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityID.offset] == 1 ) return tagPtr;
   }
   if( fieldSecurityType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSecurityType.offset] == 1 ) return tagPtr;
   }
   if( fieldText.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldText.offset - 1 - FieldText::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldText.offset] == 1 ) return tagPtr;
   }
   if( fieldProduct.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldProduct.offset] == 1 ) return tagPtr;
   }
   if( fieldSide.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldSide.offset] == 1 ) return tagPtr;
   }
   if( fieldQtyType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldQtyType.offset] == 1 ) return tagPtr;
   }
   if( fieldOrderQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrderQty.offset - 1 - FieldOrderQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrderQty.offset] == 1 ) return tagPtr;
   }
   if( fieldOrdType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldOrdType.offset] == 1 ) return tagPtr;
   }
   if( fieldPriceType.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPriceType.offset] == 1 ) return tagPtr;
   }
   if( fieldPrice.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldPrice.offset - 1 - FieldPrice::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldPrice.offset] == 1 ) return tagPtr;
   }
   if( fieldStopPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldStopPx.offset - 1 - FieldStopPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldStopPx.offset] == 1 ) return tagPtr;
   }
   if( fieldCurrency.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCurrency.offset - 1 - FieldCurrency::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCurrency.offset] == 1 ) return tagPtr;
   }
   if( fieldTimeInForce.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldTimeInForce.offset] == 1 ) return tagPtr;
   }
   if( fieldExecInst.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldExecInst.offset - 1 - FieldExecInst::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldExecInst.offset] == 1 ) return tagPtr;
   }
   if( fieldLastQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastQty.offset - 1 - FieldLastQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastQty.offset] == 1 ) return tagPtr;
   }
   if( fieldLastPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLastPx.offset - 1 - FieldLastPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLastPx.offset] == 1 ) return tagPtr;
   }
   if( fieldLeavesQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldLeavesQty.offset - 1 - FieldLeavesQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldLeavesQty.offset] == 1 ) return tagPtr;
   }
   if( fieldAvgPx.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldAvgPx.offset - 1 - FieldAvgPx::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldAvgPx.offset] == 1 ) return tagPtr;
   }
   if( fieldCumQty.offset > 0 ){
       const char * tagPtr = _fixPtr + fieldCumQty.offset - 1 - FieldCumQty::tagWidth();
       if( not isGoodTag( tagPtr ) or _fixPtr[fieldCumQty.offset] == 1 ) return tagPtr;
   }
   if( fieldNoLegs.offset > 0 ){
     const char * tagPtr = _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth();
     if( not isGoodTag( tagPtr ) or _fixPtr[fieldNoLegs.offset] == 1 ) return tagPtr;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       tagPtr = g.findBadField();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}

// ---------------------------------- findBadGroup ---------------------------------

const char * MessageHeader::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageNewOrderSingle::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   return nullptr;
}

const char * MessageExecutionReport::findBadGroup( unsigned & noExpected, unsigned & noReceived ) const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldNoLegs.offset > 0 ){
     unsigned expected = fromString<unsigned>( _fixPtr + fieldNoLegs.offset );
     unsigned received = 0;
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * badSubgroup = g.findBadGroup( noExpected, noReceived );
       if( badSubgroup ) return badSubgroup;
       ++received;
     }
     if( expected != received ) { noExpected = expected; noReceived = received; return _fixPtr + fieldNoLegs.offset - 1 - FieldNoLegs::tagWidth(); }
   }
   return nullptr;
}

// ---------------------------------- findBadEnum ---------------------------------

const char * MessageHeader::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldMsgType.offset > 0 and MsgTypeEnums::findEnum( toRawEnum( _fixPtr + fieldMsgType.offset ) ) == nullptr ){
       return _fixPtr + fieldMsgType.offset - 1 - FieldMsgType::tagWidth();
   }
   return nullptr;
}

const char * MessageNewOrderSingle::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldOrdType.offset > 0 and OrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
   }
   return nullptr;
}

const char * MessageExecutionReport::findBadEnum() const {
   if( _fixPtr == nullptr ) return nullptr;
   if( fieldOrdStatus.offset > 0 and OrdStatusEnums::findEnum( toRawEnum( _fixPtr + fieldOrdStatus.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdStatus.offset - 1 - FieldOrdStatus::tagWidth();
   }
   if( fieldSecurityType.offset > 0 and SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + fieldSecurityType.offset ) ) == nullptr ){
       return _fixPtr + fieldSecurityType.offset - 1 - FieldSecurityType::tagWidth();
   }
   if( fieldProduct.offset > 0 and ProductEnums::findEnum( toRawEnum( _fixPtr + fieldProduct.offset ) ) == nullptr ){
       return _fixPtr + fieldProduct.offset - 1 - FieldProduct::tagWidth();
   }
   if( fieldSide.offset > 0 and SideEnums::findEnum( toRawEnum( _fixPtr + fieldSide.offset ) ) == nullptr ){
       return _fixPtr + fieldSide.offset - 1 - FieldSide::tagWidth();
   }
   if( fieldQtyType.offset > 0 and QtyTypeEnums::findEnum( toRawEnum( _fixPtr + fieldQtyType.offset ) ) == nullptr ){
       return _fixPtr + fieldQtyType.offset - 1 - FieldQtyType::tagWidth();
   }
   if( fieldOrdType.offset > 0 and OrdTypeEnums::findEnum( toRawEnum( _fixPtr + fieldOrdType.offset ) ) == nullptr ){
       return _fixPtr + fieldOrdType.offset - 1 - FieldOrdType::tagWidth();
   }
   if( fieldPriceType.offset > 0 and PriceTypeEnums::findEnum( toRawEnum( _fixPtr + fieldPriceType.offset ) ) == nullptr ){
       return _fixPtr + fieldPriceType.offset - 1 - FieldPriceType::tagWidth();
   }
   if( fieldTimeInForce.offset > 0 and TimeInForceEnums::findEnum( toRawEnum( _fixPtr + fieldTimeInForce.offset ) ) == nullptr ){
       return _fixPtr + fieldTimeInForce.offset - 1 - FieldTimeInForce::tagWidth();
   }
   if( fieldNoLegs.offset > 0 ){
     for( auto & g : groupsLegs ){
       if( g.getMessageBuffer() == nullptr ) break;
       const char * tagPtr = g.findBadEnum();
       if( tagPtr ) return tagPtr;
     }
   }
   return nullptr;
}
// end of MessageSanity.cxx


} // namespace order
