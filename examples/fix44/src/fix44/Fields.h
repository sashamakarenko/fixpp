// Generated by https://github.com/sashamakarenko/fixpp
// Copyright (c) 2021 sashamakarenko
// https://github.com/sashamakarenko/fixpp/blob/main/LICENSE
#pragma once
#ifndef fix44_FIELDS_H
#define fix44_FIELDS_H

#include <fix44/FixApi.h>

#include <iostream>
#include <map>

namespace fix44
{

struct FieldDepth
{
    int16_t depth          = -1;
    int16_t isFirstInGroup = false;

    const FieldDepth & inc()
    {
        ++depth;
        return *this;
    }
};

typedef FieldDepth (*GetDepthMethod)( raw_tag_t );

extern const std::map< raw_tag_t  , const char * const >           & RAW_TAG_TO_NAME;
extern const std::map< tag_t      , const char * const >           & TAG_TO_NAME;
extern const std::map< raw_tag_t  , const FieldEnumsBase * const > & RAW_TO_ENUM;
extern const std::map< tag_t      , const FieldEnumsBase * const > & TAG_TO_ENUM;
extern const std::map< std::string, tag_t >                        & FIELD_NAME_TO_TAG;
extern const std::map< tag_t      , FieldType >                    & TAG_TO_FIELD_TYPE;
extern const std::map< tag_t      , const std::string >            & TAG_TO_FIELD_TYPE_NAME;

tag_t getFieldTag( const std::string & fieldName );

const char * getFieldName( tag_t tagValue );

FieldType getFieldType( tag_t tagValue );

const std::string & getFieldTypeName( tag_t tagValue );

bool isHeaderField( tag_t tagValue );

// start of Fields.hxx

// Generated

// -------------------------------------- names ----------------------------------------
extern const std::string FixBeginStringValue; 
constexpr const char * const FixBeginStringInsertableTag = "8=" "FIX.4.4"; 
constexpr const unsigned FixBeginStringInsertableTagLength = 9;

extern const char * const FixAccount;
extern const char * const FixAdvId;
extern const char * const FixAdvRefID;
extern const char * const FixAdvSide;
extern const char * const FixAdvTransType;
extern const char * const FixAvgPx;
extern const char * const FixBeginSeqNo;
extern const char * const FixBeginString;
extern const char * const FixBodyLength;
extern const char * const FixCheckSum;
extern const char * const FixClOrdID;
extern const char * const FixCommission;
extern const char * const FixCommType;
extern const char * const FixCumQty;
extern const char * const FixCurrency;
extern const char * const FixEndSeqNo;
extern const char * const FixExecID;
extern const char * const FixExecInst;
extern const char * const FixExecRefID;
extern const char * const FixHandlInst;
extern const char * const FixSecurityIDSource;
extern const char * const FixIOIID;
extern const char * const FixIOIQltyInd;
extern const char * const FixIOIRefID;
extern const char * const FixIOIQty;
extern const char * const FixIOITransType;
extern const char * const FixLastCapacity;
extern const char * const FixLastMkt;
extern const char * const FixLastPx;
extern const char * const FixLastQty;
extern const char * const FixNoLinesOfText;
extern const char * const FixMsgSeqNum;
extern const char * const FixMsgType;
extern const char * const FixNewSeqNo;
extern const char * const FixOrderID;
extern const char * const FixOrderQty;
extern const char * const FixOrdStatus;
extern const char * const FixOrdType;
extern const char * const FixOrigClOrdID;
extern const char * const FixOrigTime;
extern const char * const FixPossDupFlag;
extern const char * const FixPrice;
extern const char * const FixRefSeqNum;
extern const char * const FixSecurityID;
extern const char * const FixSenderCompID;
extern const char * const FixSenderSubID;
extern const char * const FixSendingTime;
extern const char * const FixQuantity;
extern const char * const FixSide;
extern const char * const FixSymbol;
extern const char * const FixTargetCompID;
extern const char * const FixTargetSubID;
extern const char * const FixText;
extern const char * const FixTimeInForce;
extern const char * const FixTransactTime;
extern const char * const FixUrgency;
extern const char * const FixValidUntilTime;
extern const char * const FixSettlType;
extern const char * const FixSettlDate;
extern const char * const FixSymbolSfx;
extern const char * const FixListID;
extern const char * const FixListSeqNo;
extern const char * const FixTotNoOrders;
extern const char * const FixListExecInst;
extern const char * const FixAllocID;
extern const char * const FixAllocTransType;
extern const char * const FixRefAllocID;
extern const char * const FixNoOrders;
extern const char * const FixAvgPxPrecision;
extern const char * const FixTradeDate;
extern const char * const FixPositionEffect;
extern const char * const FixNoAllocs;
extern const char * const FixAllocAccount;
extern const char * const FixAllocQty;
extern const char * const FixProcessCode;
extern const char * const FixNoRpts;
extern const char * const FixRptSeq;
extern const char * const FixCxlQty;
extern const char * const FixNoDlvyInst;
extern const char * const FixAllocStatus;
extern const char * const FixAllocRejCode;
extern const char * const FixSignature;
extern const char * const FixSecureDataLen;
extern const char * const FixSecureData;
extern const char * const FixSignatureLength;
extern const char * const FixEmailType;
extern const char * const FixRawDataLength;
extern const char * const FixRawData;
extern const char * const FixPossResend;
extern const char * const FixEncryptMethod;
extern const char * const FixStopPx;
extern const char * const FixExDestination;
extern const char * const FixCxlRejReason;
extern const char * const FixOrdRejReason;
extern const char * const FixIOIQualifier;
extern const char * const FixIssuer;
extern const char * const FixSecurityDesc;
extern const char * const FixHeartBtInt;
extern const char * const FixMinQty;
extern const char * const FixMaxFloor;
extern const char * const FixTestReqID;
extern const char * const FixReportToExch;
extern const char * const FixLocateReqd;
extern const char * const FixOnBehalfOfCompID;
extern const char * const FixOnBehalfOfSubID;
extern const char * const FixQuoteID;
extern const char * const FixNetMoney;
extern const char * const FixSettlCurrAmt;
extern const char * const FixSettlCurrency;
extern const char * const FixForexReq;
extern const char * const FixOrigSendingTime;
extern const char * const FixGapFillFlag;
extern const char * const FixNoExecs;
extern const char * const FixExpireTime;
extern const char * const FixDKReason;
extern const char * const FixDeliverToCompID;
extern const char * const FixDeliverToSubID;
extern const char * const FixIOINaturalFlag;
extern const char * const FixQuoteReqID;
extern const char * const FixBidPx;
extern const char * const FixOfferPx;
extern const char * const FixBidSize;
extern const char * const FixOfferSize;
extern const char * const FixNoMiscFees;
extern const char * const FixMiscFeeAmt;
extern const char * const FixMiscFeeCurr;
extern const char * const FixMiscFeeType;
extern const char * const FixPrevClosePx;
extern const char * const FixResetSeqNumFlag;
extern const char * const FixSenderLocationID;
extern const char * const FixTargetLocationID;
extern const char * const FixOnBehalfOfLocationID;
extern const char * const FixDeliverToLocationID;
extern const char * const FixNoRelatedSym;
extern const char * const FixSubject;
extern const char * const FixHeadline;
extern const char * const FixURLLink;
extern const char * const FixExecType;
extern const char * const FixLeavesQty;
extern const char * const FixCashOrderQty;
extern const char * const FixAllocAvgPx;
extern const char * const FixAllocNetMoney;
extern const char * const FixSettlCurrFxRate;
extern const char * const FixSettlCurrFxRateCalc;
extern const char * const FixNumDaysInterest;
extern const char * const FixAccruedInterestRate;
extern const char * const FixAccruedInterestAmt;
extern const char * const FixSettlInstMode;
extern const char * const FixAllocText;
extern const char * const FixSettlInstID;
extern const char * const FixSettlInstTransType;
extern const char * const FixEmailThreadID;
extern const char * const FixSettlInstSource;
extern const char * const FixSecurityType;
extern const char * const FixEffectiveTime;
extern const char * const FixStandInstDbType;
extern const char * const FixStandInstDbName;
extern const char * const FixStandInstDbID;
extern const char * const FixSettlDeliveryType;
extern const char * const FixBidSpotRate;
extern const char * const FixBidForwardPoints;
extern const char * const FixOfferSpotRate;
extern const char * const FixOfferForwardPoints;
extern const char * const FixOrderQty2;
extern const char * const FixSettlDate2;
extern const char * const FixLastSpotRate;
extern const char * const FixLastForwardPoints;
extern const char * const FixAllocLinkID;
extern const char * const FixAllocLinkType;
extern const char * const FixSecondaryOrderID;
extern const char * const FixNoIOIQualifiers;
extern const char * const FixMaturityMonthYear;
extern const char * const FixPutOrCall;
extern const char * const FixStrikePrice;
extern const char * const FixCoveredOrUncovered;
extern const char * const FixOptAttribute;
extern const char * const FixSecurityExchange;
extern const char * const FixNotifyBrokerOfCredit;
extern const char * const FixAllocHandlInst;
extern const char * const FixMaxShow;
extern const char * const FixPegOffsetValue;
extern const char * const FixXmlDataLen;
extern const char * const FixXmlData;
extern const char * const FixSettlInstRefID;
extern const char * const FixNoRoutingIDs;
extern const char * const FixRoutingType;
extern const char * const FixRoutingID;
extern const char * const FixSpread;
extern const char * const FixBenchmarkCurveCurrency;
extern const char * const FixBenchmarkCurveName;
extern const char * const FixBenchmarkCurvePoint;
extern const char * const FixCouponRate;
extern const char * const FixCouponPaymentDate;
extern const char * const FixIssueDate;
extern const char * const FixRepurchaseTerm;
extern const char * const FixRepurchaseRate;
extern const char * const FixFactor;
extern const char * const FixTradeOriginationDate;
extern const char * const FixExDate;
extern const char * const FixContractMultiplier;
extern const char * const FixNoStipulations;
extern const char * const FixStipulationType;
extern const char * const FixStipulationValue;
extern const char * const FixYieldType;
extern const char * const FixYield;
extern const char * const FixTotalTakedown;
extern const char * const FixConcession;
extern const char * const FixRepoCollateralSecurityType;
extern const char * const FixRedemptionDate;
extern const char * const FixUnderlyingCouponPaymentDate;
extern const char * const FixUnderlyingIssueDate;
extern const char * const FixUnderlyingRepoCollateralSecurityType;
extern const char * const FixUnderlyingRepurchaseTerm;
extern const char * const FixUnderlyingRepurchaseRate;
extern const char * const FixUnderlyingFactor;
extern const char * const FixUnderlyingRedemptionDate;
extern const char * const FixLegCouponPaymentDate;
extern const char * const FixLegIssueDate;
extern const char * const FixLegRepoCollateralSecurityType;
extern const char * const FixLegRepurchaseTerm;
extern const char * const FixLegRepurchaseRate;
extern const char * const FixLegFactor;
extern const char * const FixLegRedemptionDate;
extern const char * const FixCreditRating;
extern const char * const FixUnderlyingCreditRating;
extern const char * const FixLegCreditRating;
extern const char * const FixTradedFlatSwitch;
extern const char * const FixBasisFeatureDate;
extern const char * const FixBasisFeaturePrice;
extern const char * const FixMDReqID;
extern const char * const FixSubscriptionRequestType;
extern const char * const FixMarketDepth;
extern const char * const FixMDUpdateType;
extern const char * const FixAggregatedBook;
extern const char * const FixNoMDEntryTypes;
extern const char * const FixNoMDEntries;
extern const char * const FixMDEntryType;
extern const char * const FixMDEntryPx;
extern const char * const FixMDEntrySize;
extern const char * const FixMDEntryDate;
extern const char * const FixMDEntryTime;
extern const char * const FixTickDirection;
extern const char * const FixMDMkt;
extern const char * const FixQuoteCondition;
extern const char * const FixTradeCondition;
extern const char * const FixMDEntryID;
extern const char * const FixMDUpdateAction;
extern const char * const FixMDEntryRefID;
extern const char * const FixMDReqRejReason;
extern const char * const FixMDEntryOriginator;
extern const char * const FixLocationID;
extern const char * const FixDeskID;
extern const char * const FixDeleteReason;
extern const char * const FixOpenCloseSettlFlag;
extern const char * const FixSellerDays;
extern const char * const FixMDEntryBuyer;
extern const char * const FixMDEntrySeller;
extern const char * const FixMDEntryPositionNo;
extern const char * const FixFinancialStatus;
extern const char * const FixCorporateAction;
extern const char * const FixDefBidSize;
extern const char * const FixDefOfferSize;
extern const char * const FixNoQuoteEntries;
extern const char * const FixNoQuoteSets;
extern const char * const FixQuoteStatus;
extern const char * const FixQuoteCancelType;
extern const char * const FixQuoteEntryID;
extern const char * const FixQuoteRejectReason;
extern const char * const FixQuoteResponseLevel;
extern const char * const FixQuoteSetID;
extern const char * const FixQuoteRequestType;
extern const char * const FixTotNoQuoteEntries;
extern const char * const FixUnderlyingSecurityIDSource;
extern const char * const FixUnderlyingIssuer;
extern const char * const FixUnderlyingSecurityDesc;
extern const char * const FixUnderlyingSecurityExchange;
extern const char * const FixUnderlyingSecurityID;
extern const char * const FixUnderlyingSecurityType;
extern const char * const FixUnderlyingSymbol;
extern const char * const FixUnderlyingSymbolSfx;
extern const char * const FixUnderlyingMaturityMonthYear;
extern const char * const FixUnderlyingPutOrCall;
extern const char * const FixUnderlyingStrikePrice;
extern const char * const FixUnderlyingOptAttribute;
extern const char * const FixUnderlyingCurrency;
extern const char * const FixSecurityReqID;
extern const char * const FixSecurityRequestType;
extern const char * const FixSecurityResponseID;
extern const char * const FixSecurityResponseType;
extern const char * const FixSecurityStatusReqID;
extern const char * const FixUnsolicitedIndicator;
extern const char * const FixSecurityTradingStatus;
extern const char * const FixHaltReasonChar;
extern const char * const FixInViewOfCommon;
extern const char * const FixDueToRelated;
extern const char * const FixBuyVolume;
extern const char * const FixSellVolume;
extern const char * const FixHighPx;
extern const char * const FixLowPx;
extern const char * const FixAdjustment;
extern const char * const FixTradSesReqID;
extern const char * const FixTradingSessionID;
extern const char * const FixContraTrader;
extern const char * const FixTradSesMethod;
extern const char * const FixTradSesMode;
extern const char * const FixTradSesStatus;
extern const char * const FixTradSesStartTime;
extern const char * const FixTradSesOpenTime;
extern const char * const FixTradSesPreCloseTime;
extern const char * const FixTradSesCloseTime;
extern const char * const FixTradSesEndTime;
extern const char * const FixNumberOfOrders;
extern const char * const FixMessageEncoding;
extern const char * const FixEncodedIssuerLen;
extern const char * const FixEncodedIssuer;
extern const char * const FixEncodedSecurityDescLen;
extern const char * const FixEncodedSecurityDesc;
extern const char * const FixEncodedListExecInstLen;
extern const char * const FixEncodedListExecInst;
extern const char * const FixEncodedTextLen;
extern const char * const FixEncodedText;
extern const char * const FixEncodedSubjectLen;
extern const char * const FixEncodedSubject;
extern const char * const FixEncodedHeadlineLen;
extern const char * const FixEncodedHeadline;
extern const char * const FixEncodedAllocTextLen;
extern const char * const FixEncodedAllocText;
extern const char * const FixEncodedUnderlyingIssuerLen;
extern const char * const FixEncodedUnderlyingIssuer;
extern const char * const FixEncodedUnderlyingSecurityDescLen;
extern const char * const FixEncodedUnderlyingSecurityDesc;
extern const char * const FixAllocPrice;
extern const char * const FixQuoteSetValidUntilTime;
extern const char * const FixQuoteEntryRejectReason;
extern const char * const FixLastMsgSeqNumProcessed;
extern const char * const FixRefTagID;
extern const char * const FixRefMsgType;
extern const char * const FixSessionRejectReason;
extern const char * const FixBidRequestTransType;
extern const char * const FixContraBroker;
extern const char * const FixComplianceID;
extern const char * const FixSolicitedFlag;
extern const char * const FixExecRestatementReason;
extern const char * const FixBusinessRejectRefID;
extern const char * const FixBusinessRejectReason;
extern const char * const FixGrossTradeAmt;
extern const char * const FixNoContraBrokers;
extern const char * const FixMaxMessageSize;
extern const char * const FixNoMsgTypes;
extern const char * const FixMsgDirection;
extern const char * const FixNoTradingSessions;
extern const char * const FixTotalVolumeTraded;
extern const char * const FixDiscretionInst;
extern const char * const FixDiscretionOffsetValue;
extern const char * const FixBidID;
extern const char * const FixClientBidID;
extern const char * const FixListName;
extern const char * const FixTotNoRelatedSym;
extern const char * const FixBidType;
extern const char * const FixNumTickets;
extern const char * const FixSideValue1;
extern const char * const FixSideValue2;
extern const char * const FixNoBidDescriptors;
extern const char * const FixBidDescriptorType;
extern const char * const FixBidDescriptor;
extern const char * const FixSideValueInd;
extern const char * const FixLiquidityPctLow;
extern const char * const FixLiquidityPctHigh;
extern const char * const FixLiquidityValue;
extern const char * const FixEFPTrackingError;
extern const char * const FixFairValue;
extern const char * const FixOutsideIndexPct;
extern const char * const FixValueOfFutures;
extern const char * const FixLiquidityIndType;
extern const char * const FixWtAverageLiquidity;
extern const char * const FixExchangeForPhysical;
extern const char * const FixOutMainCntryUIndex;
extern const char * const FixCrossPercent;
extern const char * const FixProgRptReqs;
extern const char * const FixProgPeriodInterval;
extern const char * const FixIncTaxInd;
extern const char * const FixNumBidders;
extern const char * const FixBidTradeType;
extern const char * const FixBasisPxType;
extern const char * const FixNoBidComponents;
extern const char * const FixCountry;
extern const char * const FixTotNoStrikes;
extern const char * const FixPriceType;
extern const char * const FixDayOrderQty;
extern const char * const FixDayCumQty;
extern const char * const FixDayAvgPx;
extern const char * const FixGTBookingInst;
extern const char * const FixNoStrikes;
extern const char * const FixListStatusType;
extern const char * const FixNetGrossInd;
extern const char * const FixListOrderStatus;
extern const char * const FixExpireDate;
extern const char * const FixListExecInstType;
extern const char * const FixCxlRejResponseTo;
extern const char * const FixUnderlyingCouponRate;
extern const char * const FixUnderlyingContractMultiplier;
extern const char * const FixContraTradeQty;
extern const char * const FixContraTradeTime;
extern const char * const FixLiquidityNumSecurities;
extern const char * const FixMultiLegReportingType;
extern const char * const FixStrikeTime;
extern const char * const FixListStatusText;
extern const char * const FixEncodedListStatusTextLen;
extern const char * const FixEncodedListStatusText;
extern const char * const FixPartyIDSource;
extern const char * const FixPartyID;
extern const char * const FixNetChgPrevDay;
extern const char * const FixPartyRole;
extern const char * const FixNoPartyIDs;
extern const char * const FixNoSecurityAltID;
extern const char * const FixSecurityAltID;
extern const char * const FixSecurityAltIDSource;
extern const char * const FixNoUnderlyingSecurityAltID;
extern const char * const FixUnderlyingSecurityAltID;
extern const char * const FixUnderlyingSecurityAltIDSource;
extern const char * const FixProduct;
extern const char * const FixCFICode;
extern const char * const FixUnderlyingProduct;
extern const char * const FixUnderlyingCFICode;
extern const char * const FixTestMessageIndicator;
extern const char * const FixBookingRefID;
extern const char * const FixIndividualAllocID;
extern const char * const FixRoundingDirection;
extern const char * const FixRoundingModulus;
extern const char * const FixCountryOfIssue;
extern const char * const FixStateOrProvinceOfIssue;
extern const char * const FixLocaleOfIssue;
extern const char * const FixNoRegistDtls;
extern const char * const FixMailingDtls;
extern const char * const FixInvestorCountryOfResidence;
extern const char * const FixPaymentRef;
extern const char * const FixDistribPaymentMethod;
extern const char * const FixCashDistribCurr;
extern const char * const FixCommCurrency;
extern const char * const FixCancellationRights;
extern const char * const FixMoneyLaunderingStatus;
extern const char * const FixMailingInst;
extern const char * const FixTransBkdTime;
extern const char * const FixExecPriceType;
extern const char * const FixExecPriceAdjustment;
extern const char * const FixDateOfBirth;
extern const char * const FixTradeReportTransType;
extern const char * const FixCardHolderName;
extern const char * const FixCardNumber;
extern const char * const FixCardExpDate;
extern const char * const FixCardIssNum;
extern const char * const FixPaymentMethod;
extern const char * const FixRegistAcctType;
extern const char * const FixDesignation;
extern const char * const FixTaxAdvantageType;
extern const char * const FixRegistRejReasonText;
extern const char * const FixFundRenewWaiv;
extern const char * const FixCashDistribAgentName;
extern const char * const FixCashDistribAgentCode;
extern const char * const FixCashDistribAgentAcctNumber;
extern const char * const FixCashDistribPayRef;
extern const char * const FixCashDistribAgentAcctName;
extern const char * const FixCardStartDate;
extern const char * const FixPaymentDate;
extern const char * const FixPaymentRemitterID;
extern const char * const FixRegistStatus;
extern const char * const FixRegistRejReasonCode;
extern const char * const FixRegistRefID;
extern const char * const FixRegistDtls;
extern const char * const FixNoDistribInsts;
extern const char * const FixRegistEmail;
extern const char * const FixDistribPercentage;
extern const char * const FixRegistID;
extern const char * const FixRegistTransType;
extern const char * const FixExecValuationPoint;
extern const char * const FixOrderPercent;
extern const char * const FixOwnershipType;
extern const char * const FixNoContAmts;
extern const char * const FixContAmtType;
extern const char * const FixContAmtValue;
extern const char * const FixContAmtCurr;
extern const char * const FixOwnerType;
extern const char * const FixPartySubID;
extern const char * const FixNestedPartyID;
extern const char * const FixNestedPartyIDSource;
extern const char * const FixSecondaryClOrdID;
extern const char * const FixSecondaryExecID;
extern const char * const FixOrderCapacity;
extern const char * const FixOrderRestrictions;
extern const char * const FixMassCancelRequestType;
extern const char * const FixMassCancelResponse;
extern const char * const FixMassCancelRejectReason;
extern const char * const FixTotalAffectedOrders;
extern const char * const FixNoAffectedOrders;
extern const char * const FixAffectedOrderID;
extern const char * const FixAffectedSecondaryOrderID;
extern const char * const FixQuoteType;
extern const char * const FixNestedPartyRole;
extern const char * const FixNoNestedPartyIDs;
extern const char * const FixTotalAccruedInterestAmt;
extern const char * const FixMaturityDate;
extern const char * const FixUnderlyingMaturityDate;
extern const char * const FixInstrRegistry;
extern const char * const FixCashMargin;
extern const char * const FixNestedPartySubID;
extern const char * const FixScope;
extern const char * const FixMDImplicitDelete;
extern const char * const FixCrossID;
extern const char * const FixCrossType;
extern const char * const FixCrossPrioritization;
extern const char * const FixOrigCrossID;
extern const char * const FixNoSides;
extern const char * const FixUsername;
extern const char * const FixPassword;
extern const char * const FixNoLegs;
extern const char * const FixLegCurrency;
extern const char * const FixTotNoSecurityTypes;
extern const char * const FixNoSecurityTypes;
extern const char * const FixSecurityListRequestType;
extern const char * const FixSecurityRequestResult;
extern const char * const FixRoundLot;
extern const char * const FixMinTradeVol;
extern const char * const FixMultiLegRptTypeReq;
extern const char * const FixLegPositionEffect;
extern const char * const FixLegCoveredOrUncovered;
extern const char * const FixLegPrice;
extern const char * const FixTradSesStatusRejReason;
extern const char * const FixTradeRequestID;
extern const char * const FixTradeRequestType;
extern const char * const FixPreviouslyReported;
extern const char * const FixTradeReportID;
extern const char * const FixTradeReportRefID;
extern const char * const FixMatchStatus;
extern const char * const FixMatchType;
extern const char * const FixOddLot;
extern const char * const FixNoClearingInstructions;
extern const char * const FixClearingInstruction;
extern const char * const FixTradeInputSource;
extern const char * const FixTradeInputDevice;
extern const char * const FixNoDates;
extern const char * const FixAccountType;
extern const char * const FixCustOrderCapacity;
extern const char * const FixClOrdLinkID;
extern const char * const FixMassStatusReqID;
extern const char * const FixMassStatusReqType;
extern const char * const FixOrigOrdModTime;
extern const char * const FixLegSettlType;
extern const char * const FixLegSettlDate;
extern const char * const FixDayBookingInst;
extern const char * const FixBookingUnit;
extern const char * const FixPreallocMethod;
extern const char * const FixUnderlyingCountryOfIssue;
extern const char * const FixUnderlyingStateOrProvinceOfIssue;
extern const char * const FixUnderlyingLocaleOfIssue;
extern const char * const FixUnderlyingInstrRegistry;
extern const char * const FixLegCountryOfIssue;
extern const char * const FixLegStateOrProvinceOfIssue;
extern const char * const FixLegLocaleOfIssue;
extern const char * const FixLegInstrRegistry;
extern const char * const FixLegSymbol;
extern const char * const FixLegSymbolSfx;
extern const char * const FixLegSecurityID;
extern const char * const FixLegSecurityIDSource;
extern const char * const FixNoLegSecurityAltID;
extern const char * const FixLegSecurityAltID;
extern const char * const FixLegSecurityAltIDSource;
extern const char * const FixLegProduct;
extern const char * const FixLegCFICode;
extern const char * const FixLegSecurityType;
extern const char * const FixLegMaturityMonthYear;
extern const char * const FixLegMaturityDate;
extern const char * const FixLegStrikePrice;
extern const char * const FixLegOptAttribute;
extern const char * const FixLegContractMultiplier;
extern const char * const FixLegCouponRate;
extern const char * const FixLegSecurityExchange;
extern const char * const FixLegIssuer;
extern const char * const FixEncodedLegIssuerLen;
extern const char * const FixEncodedLegIssuer;
extern const char * const FixLegSecurityDesc;
extern const char * const FixEncodedLegSecurityDescLen;
extern const char * const FixEncodedLegSecurityDesc;
extern const char * const FixLegRatioQty;
extern const char * const FixLegSide;
extern const char * const FixTradingSessionSubID;
extern const char * const FixAllocType;
extern const char * const FixNoHops;
extern const char * const FixHopCompID;
extern const char * const FixHopSendingTime;
extern const char * const FixHopRefID;
extern const char * const FixMidPx;
extern const char * const FixBidYield;
extern const char * const FixMidYield;
extern const char * const FixOfferYield;
extern const char * const FixClearingFeeIndicator;
extern const char * const FixWorkingIndicator;
extern const char * const FixLegLastPx;
extern const char * const FixPriorityIndicator;
extern const char * const FixPriceImprovement;
extern const char * const FixPrice2;
extern const char * const FixLastForwardPoints2;
extern const char * const FixBidForwardPoints2;
extern const char * const FixOfferForwardPoints2;
extern const char * const FixRFQReqID;
extern const char * const FixMktBidPx;
extern const char * const FixMktOfferPx;
extern const char * const FixMinBidSize;
extern const char * const FixMinOfferSize;
extern const char * const FixQuoteStatusReqID;
extern const char * const FixLegalConfirm;
extern const char * const FixUnderlyingLastPx;
extern const char * const FixUnderlyingLastQty;
extern const char * const FixLegRefID;
extern const char * const FixContraLegRefID;
extern const char * const FixSettlCurrBidFxRate;
extern const char * const FixSettlCurrOfferFxRate;
extern const char * const FixQuoteRequestRejectReason;
extern const char * const FixSideComplianceID;
extern const char * const FixAcctIDSource;
extern const char * const FixAllocAcctIDSource;
extern const char * const FixBenchmarkPrice;
extern const char * const FixBenchmarkPriceType;
extern const char * const FixConfirmID;
extern const char * const FixConfirmStatus;
extern const char * const FixConfirmTransType;
extern const char * const FixContractSettlMonth;
extern const char * const FixDeliveryForm;
extern const char * const FixLastParPx;
extern const char * const FixNoLegAllocs;
extern const char * const FixLegAllocAccount;
extern const char * const FixLegIndividualAllocID;
extern const char * const FixLegAllocQty;
extern const char * const FixLegAllocAcctIDSource;
extern const char * const FixLegSettlCurrency;
extern const char * const FixLegBenchmarkCurveCurrency;
extern const char * const FixLegBenchmarkCurveName;
extern const char * const FixLegBenchmarkCurvePoint;
extern const char * const FixLegBenchmarkPrice;
extern const char * const FixLegBenchmarkPriceType;
extern const char * const FixLegBidPx;
extern const char * const FixLegIOIQty;
extern const char * const FixNoLegStipulations;
extern const char * const FixLegOfferPx;
extern const char * const FixLegPriceType;
extern const char * const FixLegQty;
extern const char * const FixLegStipulationType;
extern const char * const FixLegStipulationValue;
extern const char * const FixLegSwapType;
extern const char * const FixPool;
extern const char * const FixQuotePriceType;
extern const char * const FixQuoteRespID;
extern const char * const FixQuoteRespType;
extern const char * const FixQuoteQualifier;
extern const char * const FixYieldRedemptionDate;
extern const char * const FixYieldRedemptionPrice;
extern const char * const FixYieldRedemptionPriceType;
extern const char * const FixBenchmarkSecurityID;
extern const char * const FixReversalIndicator;
extern const char * const FixYieldCalcDate;
extern const char * const FixNoPositions;
extern const char * const FixPosType;
extern const char * const FixLongQty;
extern const char * const FixShortQty;
extern const char * const FixPosQtyStatus;
extern const char * const FixPosAmtType;
extern const char * const FixPosAmt;
extern const char * const FixPosTransType;
extern const char * const FixPosReqID;
extern const char * const FixNoUnderlyings;
extern const char * const FixPosMaintAction;
extern const char * const FixOrigPosReqRefID;
extern const char * const FixPosMaintRptRefID;
extern const char * const FixClearingBusinessDate;
extern const char * const FixSettlSessID;
extern const char * const FixSettlSessSubID;
extern const char * const FixAdjustmentType;
extern const char * const FixContraryInstructionIndicator;
extern const char * const FixPriorSpreadIndicator;
extern const char * const FixPosMaintRptID;
extern const char * const FixPosMaintStatus;
extern const char * const FixPosMaintResult;
extern const char * const FixPosReqType;
extern const char * const FixResponseTransportType;
extern const char * const FixResponseDestination;
extern const char * const FixTotalNumPosReports;
extern const char * const FixPosReqResult;
extern const char * const FixPosReqStatus;
extern const char * const FixSettlPrice;
extern const char * const FixSettlPriceType;
extern const char * const FixUnderlyingSettlPrice;
extern const char * const FixUnderlyingSettlPriceType;
extern const char * const FixPriorSettlPrice;
extern const char * const FixNoQuoteQualifiers;
extern const char * const FixAllocSettlCurrency;
extern const char * const FixAllocSettlCurrAmt;
extern const char * const FixInterestAtMaturity;
extern const char * const FixLegDatedDate;
extern const char * const FixLegPool;
extern const char * const FixAllocInterestAtMaturity;
extern const char * const FixAllocAccruedInterestAmt;
extern const char * const FixDeliveryDate;
extern const char * const FixAssignmentMethod;
extern const char * const FixAssignmentUnit;
extern const char * const FixOpenInterest;
extern const char * const FixExerciseMethod;
extern const char * const FixTotNumTradeReports;
extern const char * const FixTradeRequestResult;
extern const char * const FixTradeRequestStatus;
extern const char * const FixTradeReportRejectReason;
extern const char * const FixSideMultiLegReportingType;
extern const char * const FixNoPosAmt;
extern const char * const FixAutoAcceptIndicator;
extern const char * const FixAllocReportID;
extern const char * const FixNoNested2PartyIDs;
extern const char * const FixNested2PartyID;
extern const char * const FixNested2PartyIDSource;
extern const char * const FixNested2PartyRole;
extern const char * const FixNested2PartySubID;
extern const char * const FixBenchmarkSecurityIDSource;
extern const char * const FixSecuritySubType;
extern const char * const FixUnderlyingSecuritySubType;
extern const char * const FixLegSecuritySubType;
extern const char * const FixAllowableOneSidednessPct;
extern const char * const FixAllowableOneSidednessValue;
extern const char * const FixAllowableOneSidednessCurr;
extern const char * const FixNoTrdRegTimestamps;
extern const char * const FixTrdRegTimestamp;
extern const char * const FixTrdRegTimestampType;
extern const char * const FixTrdRegTimestampOrigin;
extern const char * const FixConfirmRefID;
extern const char * const FixConfirmType;
extern const char * const FixConfirmRejReason;
extern const char * const FixBookingType;
extern const char * const FixIndividualAllocRejCode;
extern const char * const FixSettlInstMsgID;
extern const char * const FixNoSettlInst;
extern const char * const FixLastUpdateTime;
extern const char * const FixAllocSettlInstType;
extern const char * const FixNoSettlPartyIDs;
extern const char * const FixSettlPartyID;
extern const char * const FixSettlPartyIDSource;
extern const char * const FixSettlPartyRole;
extern const char * const FixSettlPartySubID;
extern const char * const FixSettlPartySubIDType;
extern const char * const FixDlvyInstType;
extern const char * const FixTerminationType;
extern const char * const FixNextExpectedMsgSeqNum;
extern const char * const FixOrdStatusReqID;
extern const char * const FixSettlInstReqID;
extern const char * const FixSettlInstReqRejCode;
extern const char * const FixSecondaryAllocID;
extern const char * const FixAllocReportType;
extern const char * const FixAllocReportRefID;
extern const char * const FixAllocCancReplaceReason;
extern const char * const FixCopyMsgIndicator;
extern const char * const FixAllocAccountType;
extern const char * const FixOrderAvgPx;
extern const char * const FixOrderBookingQty;
extern const char * const FixNoSettlPartySubIDs;
extern const char * const FixNoPartySubIDs;
extern const char * const FixPartySubIDType;
extern const char * const FixNoNestedPartySubIDs;
extern const char * const FixNestedPartySubIDType;
extern const char * const FixNoNested2PartySubIDs;
extern const char * const FixNested2PartySubIDType;
extern const char * const FixAllocIntermedReqType;
extern const char * const FixUnderlyingPx;
extern const char * const FixPriceDelta;
extern const char * const FixApplQueueMax;
extern const char * const FixApplQueueDepth;
extern const char * const FixApplQueueResolution;
extern const char * const FixApplQueueAction;
extern const char * const FixNoAltMDSource;
extern const char * const FixAltMDSourceID;
extern const char * const FixSecondaryTradeReportID;
extern const char * const FixAvgPxIndicator;
extern const char * const FixTradeLinkID;
extern const char * const FixOrderInputDevice;
extern const char * const FixUnderlyingTradingSessionID;
extern const char * const FixUnderlyingTradingSessionSubID;
extern const char * const FixTradeLegRefID;
extern const char * const FixExchangeRule;
extern const char * const FixTradeAllocIndicator;
extern const char * const FixExpirationCycle;
extern const char * const FixTrdType;
extern const char * const FixTrdSubType;
extern const char * const FixTransferReason;
extern const char * const FixTotNumAssignmentReports;
extern const char * const FixAsgnRptID;
extern const char * const FixThresholdAmount;
extern const char * const FixPegMoveType;
extern const char * const FixPegOffsetType;
extern const char * const FixPegLimitType;
extern const char * const FixPegRoundDirection;
extern const char * const FixPeggedPrice;
extern const char * const FixPegScope;
extern const char * const FixDiscretionMoveType;
extern const char * const FixDiscretionOffsetType;
extern const char * const FixDiscretionLimitType;
extern const char * const FixDiscretionRoundDirection;
extern const char * const FixDiscretionPrice;
extern const char * const FixDiscretionScope;
extern const char * const FixTargetStrategy;
extern const char * const FixTargetStrategyParameters;
extern const char * const FixParticipationRate;
extern const char * const FixTargetStrategyPerformance;
extern const char * const FixLastLiquidityInd;
extern const char * const FixPublishTrdIndicator;
extern const char * const FixShortSaleReason;
extern const char * const FixQtyType;
extern const char * const FixSecondaryTrdType;
extern const char * const FixTradeReportType;
extern const char * const FixAllocNoOrdersType;
extern const char * const FixSharedCommission;
extern const char * const FixConfirmReqID;
extern const char * const FixAvgParPx;
extern const char * const FixReportedPx;
extern const char * const FixNoCapacities;
extern const char * const FixOrderCapacityQty;
extern const char * const FixNoEvents;
extern const char * const FixEventType;
extern const char * const FixEventDate;
extern const char * const FixEventPx;
extern const char * const FixEventText;
extern const char * const FixPctAtRisk;
extern const char * const FixNoInstrAttrib;
extern const char * const FixInstrAttribType;
extern const char * const FixInstrAttribValue;
extern const char * const FixDatedDate;
extern const char * const FixInterestAccrualDate;
extern const char * const FixCPProgram;
extern const char * const FixCPRegType;
extern const char * const FixUnderlyingCPProgram;
extern const char * const FixUnderlyingCPRegType;
extern const char * const FixUnderlyingQty;
extern const char * const FixTrdMatchID;
extern const char * const FixSecondaryTradeReportRefID;
extern const char * const FixUnderlyingDirtyPrice;
extern const char * const FixUnderlyingEndPrice;
extern const char * const FixUnderlyingStartValue;
extern const char * const FixUnderlyingCurrentValue;
extern const char * const FixUnderlyingEndValue;
extern const char * const FixNoUnderlyingStips;
extern const char * const FixUnderlyingStipType;
extern const char * const FixUnderlyingStipValue;
extern const char * const FixMaturityNetMoney;
extern const char * const FixMiscFeeBasis;
extern const char * const FixTotNoAllocs;
extern const char * const FixLastFragment;
extern const char * const FixCollReqID;
extern const char * const FixCollAsgnReason;
extern const char * const FixCollInquiryQualifier;
extern const char * const FixNoTrades;
extern const char * const FixMarginRatio;
extern const char * const FixMarginExcess;
extern const char * const FixTotalNetValue;
extern const char * const FixCashOutstanding;
extern const char * const FixCollAsgnID;
extern const char * const FixCollAsgnTransType;
extern const char * const FixCollRespID;
extern const char * const FixCollAsgnRespType;
extern const char * const FixCollAsgnRejectReason;
extern const char * const FixCollAsgnRefID;
extern const char * const FixCollRptID;
extern const char * const FixCollInquiryID;
extern const char * const FixCollStatus;
extern const char * const FixTotNumReports;
extern const char * const FixLastRptRequested;
extern const char * const FixAgreementDesc;
extern const char * const FixAgreementID;
extern const char * const FixAgreementDate;
extern const char * const FixStartDate;
extern const char * const FixEndDate;
extern const char * const FixAgreementCurrency;
extern const char * const FixDeliveryType;
extern const char * const FixEndAccruedInterestAmt;
extern const char * const FixStartCash;
extern const char * const FixEndCash;
extern const char * const FixUserRequestID;
extern const char * const FixUserRequestType;
extern const char * const FixNewPassword;
extern const char * const FixUserStatus;
extern const char * const FixUserStatusText;
extern const char * const FixStatusValue;
extern const char * const FixStatusText;
extern const char * const FixRefCompID;
extern const char * const FixRefSubID;
extern const char * const FixNetworkResponseID;
extern const char * const FixNetworkRequestID;
extern const char * const FixLastNetworkResponseID;
extern const char * const FixNetworkRequestType;
extern const char * const FixNoCompIDs;
extern const char * const FixNetworkStatusResponseType;
extern const char * const FixNoCollInquiryQualifier;
extern const char * const FixTrdRptStatus;
extern const char * const FixAffirmStatus;
extern const char * const FixUnderlyingStrikeCurrency;
extern const char * const FixLegStrikeCurrency;
extern const char * const FixTimeBracket;
extern const char * const FixCollAction;
extern const char * const FixCollInquiryStatus;
extern const char * const FixCollInquiryResult;
extern const char * const FixStrikeCurrency;
extern const char * const FixNoNested3PartyIDs;
extern const char * const FixNested3PartyID;
extern const char * const FixNested3PartyIDSource;
extern const char * const FixNested3PartyRole;
extern const char * const FixNoNested3PartySubIDs;
extern const char * const FixNested3PartySubID;
extern const char * const FixNested3PartySubIDType;
extern const char * const FixLegContractSettlMonth;
extern const char * const FixLegInterestAccrualDate;

// -------------------------------------- typedefs and enums ----------------------------------------

typedef Field< FixAccount, 1, STRING > FieldAccount;
typedef Field< FixAdvId, 2, STRING > FieldAdvId;
typedef Field< FixAdvRefID, 3, STRING > FieldAdvRefID;
typedef Field< FixAdvSide, 4, CHAR > FieldAdvSide;
typedef Field< FixAdvTransType, 5, STRING > FieldAdvTransType;
typedef Field< FixAvgPx, 6, PRICE > FieldAvgPx;
typedef Field< FixBeginSeqNo, 7, SEQNUM > FieldBeginSeqNo;
typedef Field< FixBeginString, 8, STRING > FieldBeginString;
typedef Field< FixBodyLength, 9, LENGTH > FieldBodyLength;
typedef Field< FixCheckSum, 10, STRING > FieldCheckSum;
typedef Field< FixClOrdID, 11, STRING > FieldClOrdID;
typedef Field< FixCommission, 12, AMT > FieldCommission;
typedef Field< FixCommType, 13, CHAR > FieldCommType;
typedef Field< FixCumQty, 14, QTY > FieldCumQty;
typedef Field< FixCurrency, 15, CURRENCY > FieldCurrency;
typedef Field< FixEndSeqNo, 16, SEQNUM > FieldEndSeqNo;
typedef Field< FixExecID, 17, STRING > FieldExecID;
typedef Field< FixExecInst, 18, MULTIPLEVALUESTRING > FieldExecInst;
typedef Field< FixExecRefID, 19, STRING > FieldExecRefID;
typedef Field< FixHandlInst, 21, CHAR > FieldHandlInst;
typedef Field< FixSecurityIDSource, 22, STRING > FieldSecurityIDSource;
typedef Field< FixIOIID, 23, STRING > FieldIOIID;
typedef Field< FixIOIQltyInd, 25, CHAR > FieldIOIQltyInd;
typedef Field< FixIOIRefID, 26, STRING > FieldIOIRefID;
typedef Field< FixIOIQty, 27, STRING > FieldIOIQty;
typedef Field< FixIOITransType, 28, CHAR > FieldIOITransType;
typedef Field< FixLastCapacity, 29, CHAR > FieldLastCapacity;
typedef Field< FixLastMkt, 30, EXCHANGE > FieldLastMkt;
typedef Field< FixLastPx, 31, PRICE > FieldLastPx;
typedef Field< FixLastQty, 32, QTY > FieldLastQty;
typedef Field< FixNoLinesOfText, 33, NUMINGROUP > FieldNoLinesOfText;
typedef Field< FixMsgSeqNum, 34, SEQNUM > FieldMsgSeqNum;
typedef Field< FixMsgType, 35, STRING > FieldMsgType;
typedef Field< FixNewSeqNo, 36, SEQNUM > FieldNewSeqNo;
typedef Field< FixOrderID, 37, STRING > FieldOrderID;
typedef Field< FixOrderQty, 38, QTY > FieldOrderQty;
typedef Field< FixOrdStatus, 39, CHAR > FieldOrdStatus;
typedef Field< FixOrdType, 40, CHAR > FieldOrdType;
typedef Field< FixOrigClOrdID, 41, STRING > FieldOrigClOrdID;
typedef Field< FixOrigTime, 42, UTCTIMESTAMP > FieldOrigTime;
typedef Field< FixPossDupFlag, 43, BOOLEAN > FieldPossDupFlag;
typedef Field< FixPrice, 44, PRICE > FieldPrice;
typedef Field< FixRefSeqNum, 45, SEQNUM > FieldRefSeqNum;
typedef Field< FixSecurityID, 48, STRING > FieldSecurityID;
typedef Field< FixSenderCompID, 49, STRING > FieldSenderCompID;
typedef Field< FixSenderSubID, 50, STRING > FieldSenderSubID;
typedef Field< FixSendingTime, 52, UTCTIMESTAMP > FieldSendingTime;
typedef Field< FixQuantity, 53, QTY > FieldQuantity;
typedef Field< FixSide, 54, CHAR > FieldSide;
typedef Field< FixSymbol, 55, STRING > FieldSymbol;
typedef Field< FixTargetCompID, 56, STRING > FieldTargetCompID;
typedef Field< FixTargetSubID, 57, STRING > FieldTargetSubID;
typedef Field< FixText, 58, STRING > FieldText;
typedef Field< FixTimeInForce, 59, CHAR > FieldTimeInForce;
typedef Field< FixTransactTime, 60, UTCTIMESTAMP > FieldTransactTime;
typedef Field< FixUrgency, 61, CHAR > FieldUrgency;
typedef Field< FixValidUntilTime, 62, UTCTIMESTAMP > FieldValidUntilTime;
typedef Field< FixSettlType, 63, CHAR > FieldSettlType;
typedef Field< FixSettlDate, 64, LOCALMKTDATE > FieldSettlDate;
typedef Field< FixSymbolSfx, 65, STRING > FieldSymbolSfx;
typedef Field< FixListID, 66, STRING > FieldListID;
typedef Field< FixListSeqNo, 67, INT > FieldListSeqNo;
typedef Field< FixTotNoOrders, 68, INT > FieldTotNoOrders;
typedef Field< FixListExecInst, 69, STRING > FieldListExecInst;
typedef Field< FixAllocID, 70, STRING > FieldAllocID;
typedef Field< FixAllocTransType, 71, CHAR > FieldAllocTransType;
typedef Field< FixRefAllocID, 72, STRING > FieldRefAllocID;
typedef Field< FixNoOrders, 73, NUMINGROUP > FieldNoOrders;
typedef Field< FixAvgPxPrecision, 74, INT > FieldAvgPxPrecision;
typedef Field< FixTradeDate, 75, LOCALMKTDATE > FieldTradeDate;
typedef Field< FixPositionEffect, 77, CHAR > FieldPositionEffect;
typedef Field< FixNoAllocs, 78, NUMINGROUP > FieldNoAllocs;
typedef Field< FixAllocAccount, 79, STRING > FieldAllocAccount;
typedef Field< FixAllocQty, 80, QTY > FieldAllocQty;
typedef Field< FixProcessCode, 81, CHAR > FieldProcessCode;
typedef Field< FixNoRpts, 82, INT > FieldNoRpts;
typedef Field< FixRptSeq, 83, INT > FieldRptSeq;
typedef Field< FixCxlQty, 84, QTY > FieldCxlQty;
typedef Field< FixNoDlvyInst, 85, NUMINGROUP > FieldNoDlvyInst;
typedef Field< FixAllocStatus, 87, INT > FieldAllocStatus;
typedef Field< FixAllocRejCode, 88, INT > FieldAllocRejCode;
typedef Field< FixSignature, 89, DATA > FieldSignature;
typedef Field< FixSecureDataLen, 90, LENGTH > FieldSecureDataLen;
typedef Field< FixSecureData, 91, DATA > FieldSecureData;
typedef Field< FixSignatureLength, 93, LENGTH > FieldSignatureLength;
typedef Field< FixEmailType, 94, CHAR > FieldEmailType;
typedef Field< FixRawDataLength, 95, LENGTH > FieldRawDataLength;
typedef Field< FixRawData, 96, DATA > FieldRawData;
typedef Field< FixPossResend, 97, BOOLEAN > FieldPossResend;
typedef Field< FixEncryptMethod, 98, INT > FieldEncryptMethod;
typedef Field< FixStopPx, 99, PRICE > FieldStopPx;
typedef Field< FixExDestination, 100, EXCHANGE > FieldExDestination;
typedef Field< FixCxlRejReason, 102, INT > FieldCxlRejReason;
typedef Field< FixOrdRejReason, 103, INT > FieldOrdRejReason;
typedef Field< FixIOIQualifier, 104, CHAR > FieldIOIQualifier;
typedef Field< FixIssuer, 106, STRING > FieldIssuer;
typedef Field< FixSecurityDesc, 107, STRING > FieldSecurityDesc;
typedef Field< FixHeartBtInt, 108, INT > FieldHeartBtInt;
typedef Field< FixMinQty, 110, QTY > FieldMinQty;
typedef Field< FixMaxFloor, 111, QTY > FieldMaxFloor;
typedef Field< FixTestReqID, 112, STRING > FieldTestReqID;
typedef Field< FixReportToExch, 113, BOOLEAN > FieldReportToExch;
typedef Field< FixLocateReqd, 114, BOOLEAN > FieldLocateReqd;
typedef Field< FixOnBehalfOfCompID, 115, STRING > FieldOnBehalfOfCompID;
typedef Field< FixOnBehalfOfSubID, 116, STRING > FieldOnBehalfOfSubID;
typedef Field< FixQuoteID, 117, STRING > FieldQuoteID;
typedef Field< FixNetMoney, 118, AMT > FieldNetMoney;
typedef Field< FixSettlCurrAmt, 119, AMT > FieldSettlCurrAmt;
typedef Field< FixSettlCurrency, 120, CURRENCY > FieldSettlCurrency;
typedef Field< FixForexReq, 121, BOOLEAN > FieldForexReq;
typedef Field< FixOrigSendingTime, 122, UTCTIMESTAMP > FieldOrigSendingTime;
typedef Field< FixGapFillFlag, 123, BOOLEAN > FieldGapFillFlag;
typedef Field< FixNoExecs, 124, NUMINGROUP > FieldNoExecs;
typedef Field< FixExpireTime, 126, UTCTIMESTAMP > FieldExpireTime;
typedef Field< FixDKReason, 127, CHAR > FieldDKReason;
typedef Field< FixDeliverToCompID, 128, STRING > FieldDeliverToCompID;
typedef Field< FixDeliverToSubID, 129, STRING > FieldDeliverToSubID;
typedef Field< FixIOINaturalFlag, 130, BOOLEAN > FieldIOINaturalFlag;
typedef Field< FixQuoteReqID, 131, STRING > FieldQuoteReqID;
typedef Field< FixBidPx, 132, PRICE > FieldBidPx;
typedef Field< FixOfferPx, 133, PRICE > FieldOfferPx;
typedef Field< FixBidSize, 134, QTY > FieldBidSize;
typedef Field< FixOfferSize, 135, QTY > FieldOfferSize;
typedef Field< FixNoMiscFees, 136, NUMINGROUP > FieldNoMiscFees;
typedef Field< FixMiscFeeAmt, 137, AMT > FieldMiscFeeAmt;
typedef Field< FixMiscFeeCurr, 138, CURRENCY > FieldMiscFeeCurr;
typedef Field< FixMiscFeeType, 139, STRING > FieldMiscFeeType;
typedef Field< FixPrevClosePx, 140, PRICE > FieldPrevClosePx;
typedef Field< FixResetSeqNumFlag, 141, BOOLEAN > FieldResetSeqNumFlag;
typedef Field< FixSenderLocationID, 142, STRING > FieldSenderLocationID;
typedef Field< FixTargetLocationID, 143, STRING > FieldTargetLocationID;
typedef Field< FixOnBehalfOfLocationID, 144, STRING > FieldOnBehalfOfLocationID;
typedef Field< FixDeliverToLocationID, 145, STRING > FieldDeliverToLocationID;
typedef Field< FixNoRelatedSym, 146, NUMINGROUP > FieldNoRelatedSym;
typedef Field< FixSubject, 147, STRING > FieldSubject;
typedef Field< FixHeadline, 148, STRING > FieldHeadline;
typedef Field< FixURLLink, 149, STRING > FieldURLLink;
typedef Field< FixExecType, 150, CHAR > FieldExecType;
typedef Field< FixLeavesQty, 151, QTY > FieldLeavesQty;
typedef Field< FixCashOrderQty, 152, QTY > FieldCashOrderQty;
typedef Field< FixAllocAvgPx, 153, PRICE > FieldAllocAvgPx;
typedef Field< FixAllocNetMoney, 154, AMT > FieldAllocNetMoney;
typedef Field< FixSettlCurrFxRate, 155, FLOAT > FieldSettlCurrFxRate;
typedef Field< FixSettlCurrFxRateCalc, 156, CHAR > FieldSettlCurrFxRateCalc;
typedef Field< FixNumDaysInterest, 157, INT > FieldNumDaysInterest;
typedef Field< FixAccruedInterestRate, 158, PERCENTAGE > FieldAccruedInterestRate;
typedef Field< FixAccruedInterestAmt, 159, AMT > FieldAccruedInterestAmt;
typedef Field< FixSettlInstMode, 160, CHAR > FieldSettlInstMode;
typedef Field< FixAllocText, 161, STRING > FieldAllocText;
typedef Field< FixSettlInstID, 162, STRING > FieldSettlInstID;
typedef Field< FixSettlInstTransType, 163, CHAR > FieldSettlInstTransType;
typedef Field< FixEmailThreadID, 164, STRING > FieldEmailThreadID;
typedef Field< FixSettlInstSource, 165, CHAR > FieldSettlInstSource;
typedef Field< FixSecurityType, 167, STRING > FieldSecurityType;
typedef Field< FixEffectiveTime, 168, UTCTIMESTAMP > FieldEffectiveTime;
typedef Field< FixStandInstDbType, 169, INT > FieldStandInstDbType;
typedef Field< FixStandInstDbName, 170, STRING > FieldStandInstDbName;
typedef Field< FixStandInstDbID, 171, STRING > FieldStandInstDbID;
typedef Field< FixSettlDeliveryType, 172, INT > FieldSettlDeliveryType;
typedef Field< FixBidSpotRate, 188, PRICE > FieldBidSpotRate;
typedef Field< FixBidForwardPoints, 189, PRICEOFFSET > FieldBidForwardPoints;
typedef Field< FixOfferSpotRate, 190, PRICE > FieldOfferSpotRate;
typedef Field< FixOfferForwardPoints, 191, PRICEOFFSET > FieldOfferForwardPoints;
typedef Field< FixOrderQty2, 192, QTY > FieldOrderQty2;
typedef Field< FixSettlDate2, 193, LOCALMKTDATE > FieldSettlDate2;
typedef Field< FixLastSpotRate, 194, PRICE > FieldLastSpotRate;
typedef Field< FixLastForwardPoints, 195, PRICEOFFSET > FieldLastForwardPoints;
typedef Field< FixAllocLinkID, 196, STRING > FieldAllocLinkID;
typedef Field< FixAllocLinkType, 197, INT > FieldAllocLinkType;
typedef Field< FixSecondaryOrderID, 198, STRING > FieldSecondaryOrderID;
typedef Field< FixNoIOIQualifiers, 199, NUMINGROUP > FieldNoIOIQualifiers;
typedef Field< FixMaturityMonthYear, 200, MONTHYEAR > FieldMaturityMonthYear;
typedef Field< FixPutOrCall, 201, INT > FieldPutOrCall;
typedef Field< FixStrikePrice, 202, PRICE > FieldStrikePrice;
typedef Field< FixCoveredOrUncovered, 203, INT > FieldCoveredOrUncovered;
typedef Field< FixOptAttribute, 206, CHAR > FieldOptAttribute;
typedef Field< FixSecurityExchange, 207, EXCHANGE > FieldSecurityExchange;
typedef Field< FixNotifyBrokerOfCredit, 208, BOOLEAN > FieldNotifyBrokerOfCredit;
typedef Field< FixAllocHandlInst, 209, INT > FieldAllocHandlInst;
typedef Field< FixMaxShow, 210, QTY > FieldMaxShow;
typedef Field< FixPegOffsetValue, 211, FLOAT > FieldPegOffsetValue;
typedef Field< FixXmlDataLen, 212, LENGTH > FieldXmlDataLen;
typedef Field< FixXmlData, 213, DATA > FieldXmlData;
typedef Field< FixSettlInstRefID, 214, STRING > FieldSettlInstRefID;
typedef Field< FixNoRoutingIDs, 215, NUMINGROUP > FieldNoRoutingIDs;
typedef Field< FixRoutingType, 216, INT > FieldRoutingType;
typedef Field< FixRoutingID, 217, STRING > FieldRoutingID;
typedef Field< FixSpread, 218, PRICEOFFSET > FieldSpread;
typedef Field< FixBenchmarkCurveCurrency, 220, CURRENCY > FieldBenchmarkCurveCurrency;
typedef Field< FixBenchmarkCurveName, 221, STRING > FieldBenchmarkCurveName;
typedef Field< FixBenchmarkCurvePoint, 222, STRING > FieldBenchmarkCurvePoint;
typedef Field< FixCouponRate, 223, PERCENTAGE > FieldCouponRate;
typedef Field< FixCouponPaymentDate, 224, LOCALMKTDATE > FieldCouponPaymentDate;
typedef Field< FixIssueDate, 225, LOCALMKTDATE > FieldIssueDate;
typedef Field< FixRepurchaseTerm, 226, INT > FieldRepurchaseTerm;
typedef Field< FixRepurchaseRate, 227, PERCENTAGE > FieldRepurchaseRate;
typedef Field< FixFactor, 228, FLOAT > FieldFactor;
typedef Field< FixTradeOriginationDate, 229, LOCALMKTDATE > FieldTradeOriginationDate;
typedef Field< FixExDate, 230, LOCALMKTDATE > FieldExDate;
typedef Field< FixContractMultiplier, 231, FLOAT > FieldContractMultiplier;
typedef Field< FixNoStipulations, 232, NUMINGROUP > FieldNoStipulations;
typedef Field< FixStipulationType, 233, STRING > FieldStipulationType;
typedef Field< FixStipulationValue, 234, STRING > FieldStipulationValue;
typedef Field< FixYieldType, 235, STRING > FieldYieldType;
typedef Field< FixYield, 236, PERCENTAGE > FieldYield;
typedef Field< FixTotalTakedown, 237, AMT > FieldTotalTakedown;
typedef Field< FixConcession, 238, AMT > FieldConcession;
typedef Field< FixRepoCollateralSecurityType, 239, STRING > FieldRepoCollateralSecurityType;
typedef Field< FixRedemptionDate, 240, LOCALMKTDATE > FieldRedemptionDate;
typedef Field< FixUnderlyingCouponPaymentDate, 241, LOCALMKTDATE > FieldUnderlyingCouponPaymentDate;
typedef Field< FixUnderlyingIssueDate, 242, LOCALMKTDATE > FieldUnderlyingIssueDate;
typedef Field< FixUnderlyingRepoCollateralSecurityType, 243, STRING > FieldUnderlyingRepoCollateralSecurityType;
typedef Field< FixUnderlyingRepurchaseTerm, 244, INT > FieldUnderlyingRepurchaseTerm;
typedef Field< FixUnderlyingRepurchaseRate, 245, PERCENTAGE > FieldUnderlyingRepurchaseRate;
typedef Field< FixUnderlyingFactor, 246, FLOAT > FieldUnderlyingFactor;
typedef Field< FixUnderlyingRedemptionDate, 247, LOCALMKTDATE > FieldUnderlyingRedemptionDate;
typedef Field< FixLegCouponPaymentDate, 248, LOCALMKTDATE > FieldLegCouponPaymentDate;
typedef Field< FixLegIssueDate, 249, LOCALMKTDATE > FieldLegIssueDate;
typedef Field< FixLegRepoCollateralSecurityType, 250, STRING > FieldLegRepoCollateralSecurityType;
typedef Field< FixLegRepurchaseTerm, 251, INT > FieldLegRepurchaseTerm;
typedef Field< FixLegRepurchaseRate, 252, PERCENTAGE > FieldLegRepurchaseRate;
typedef Field< FixLegFactor, 253, FLOAT > FieldLegFactor;
typedef Field< FixLegRedemptionDate, 254, LOCALMKTDATE > FieldLegRedemptionDate;
typedef Field< FixCreditRating, 255, STRING > FieldCreditRating;
typedef Field< FixUnderlyingCreditRating, 256, STRING > FieldUnderlyingCreditRating;
typedef Field< FixLegCreditRating, 257, STRING > FieldLegCreditRating;
typedef Field< FixTradedFlatSwitch, 258, BOOLEAN > FieldTradedFlatSwitch;
typedef Field< FixBasisFeatureDate, 259, LOCALMKTDATE > FieldBasisFeatureDate;
typedef Field< FixBasisFeaturePrice, 260, PRICE > FieldBasisFeaturePrice;
typedef Field< FixMDReqID, 262, STRING > FieldMDReqID;
typedef Field< FixSubscriptionRequestType, 263, CHAR > FieldSubscriptionRequestType;
typedef Field< FixMarketDepth, 264, INT > FieldMarketDepth;
typedef Field< FixMDUpdateType, 265, INT > FieldMDUpdateType;
typedef Field< FixAggregatedBook, 266, BOOLEAN > FieldAggregatedBook;
typedef Field< FixNoMDEntryTypes, 267, NUMINGROUP > FieldNoMDEntryTypes;
typedef Field< FixNoMDEntries, 268, NUMINGROUP > FieldNoMDEntries;
typedef Field< FixMDEntryType, 269, CHAR > FieldMDEntryType;
typedef Field< FixMDEntryPx, 270, PRICE > FieldMDEntryPx;
typedef Field< FixMDEntrySize, 271, QTY > FieldMDEntrySize;
typedef Field< FixMDEntryDate, 272, UTCDATEONLY > FieldMDEntryDate;
typedef Field< FixMDEntryTime, 273, UTCTIMEONLY > FieldMDEntryTime;
typedef Field< FixTickDirection, 274, CHAR > FieldTickDirection;
typedef Field< FixMDMkt, 275, EXCHANGE > FieldMDMkt;
typedef Field< FixQuoteCondition, 276, MULTIPLEVALUESTRING > FieldQuoteCondition;
typedef Field< FixTradeCondition, 277, MULTIPLEVALUESTRING > FieldTradeCondition;
typedef Field< FixMDEntryID, 278, STRING > FieldMDEntryID;
typedef Field< FixMDUpdateAction, 279, CHAR > FieldMDUpdateAction;
typedef Field< FixMDEntryRefID, 280, STRING > FieldMDEntryRefID;
typedef Field< FixMDReqRejReason, 281, CHAR > FieldMDReqRejReason;
typedef Field< FixMDEntryOriginator, 282, STRING > FieldMDEntryOriginator;
typedef Field< FixLocationID, 283, STRING > FieldLocationID;
typedef Field< FixDeskID, 284, STRING > FieldDeskID;
typedef Field< FixDeleteReason, 285, CHAR > FieldDeleteReason;
typedef Field< FixOpenCloseSettlFlag, 286, MULTIPLEVALUESTRING > FieldOpenCloseSettlFlag;
typedef Field< FixSellerDays, 287, INT > FieldSellerDays;
typedef Field< FixMDEntryBuyer, 288, STRING > FieldMDEntryBuyer;
typedef Field< FixMDEntrySeller, 289, STRING > FieldMDEntrySeller;
typedef Field< FixMDEntryPositionNo, 290, INT > FieldMDEntryPositionNo;
typedef Field< FixFinancialStatus, 291, MULTIPLEVALUESTRING > FieldFinancialStatus;
typedef Field< FixCorporateAction, 292, MULTIPLEVALUESTRING > FieldCorporateAction;
typedef Field< FixDefBidSize, 293, QTY > FieldDefBidSize;
typedef Field< FixDefOfferSize, 294, QTY > FieldDefOfferSize;
typedef Field< FixNoQuoteEntries, 295, NUMINGROUP > FieldNoQuoteEntries;
typedef Field< FixNoQuoteSets, 296, NUMINGROUP > FieldNoQuoteSets;
typedef Field< FixQuoteStatus, 297, INT > FieldQuoteStatus;
typedef Field< FixQuoteCancelType, 298, INT > FieldQuoteCancelType;
typedef Field< FixQuoteEntryID, 299, STRING > FieldQuoteEntryID;
typedef Field< FixQuoteRejectReason, 300, INT > FieldQuoteRejectReason;
typedef Field< FixQuoteResponseLevel, 301, INT > FieldQuoteResponseLevel;
typedef Field< FixQuoteSetID, 302, STRING > FieldQuoteSetID;
typedef Field< FixQuoteRequestType, 303, INT > FieldQuoteRequestType;
typedef Field< FixTotNoQuoteEntries, 304, INT > FieldTotNoQuoteEntries;
typedef Field< FixUnderlyingSecurityIDSource, 305, STRING > FieldUnderlyingSecurityIDSource;
typedef Field< FixUnderlyingIssuer, 306, STRING > FieldUnderlyingIssuer;
typedef Field< FixUnderlyingSecurityDesc, 307, STRING > FieldUnderlyingSecurityDesc;
typedef Field< FixUnderlyingSecurityExchange, 308, EXCHANGE > FieldUnderlyingSecurityExchange;
typedef Field< FixUnderlyingSecurityID, 309, STRING > FieldUnderlyingSecurityID;
typedef Field< FixUnderlyingSecurityType, 310, STRING > FieldUnderlyingSecurityType;
typedef Field< FixUnderlyingSymbol, 311, STRING > FieldUnderlyingSymbol;
typedef Field< FixUnderlyingSymbolSfx, 312, STRING > FieldUnderlyingSymbolSfx;
typedef Field< FixUnderlyingMaturityMonthYear, 313, MONTHYEAR > FieldUnderlyingMaturityMonthYear;
typedef Field< FixUnderlyingPutOrCall, 315, INT > FieldUnderlyingPutOrCall;
typedef Field< FixUnderlyingStrikePrice, 316, PRICE > FieldUnderlyingStrikePrice;
typedef Field< FixUnderlyingOptAttribute, 317, CHAR > FieldUnderlyingOptAttribute;
typedef Field< FixUnderlyingCurrency, 318, CURRENCY > FieldUnderlyingCurrency;
typedef Field< FixSecurityReqID, 320, STRING > FieldSecurityReqID;
typedef Field< FixSecurityRequestType, 321, INT > FieldSecurityRequestType;
typedef Field< FixSecurityResponseID, 322, STRING > FieldSecurityResponseID;
typedef Field< FixSecurityResponseType, 323, INT > FieldSecurityResponseType;
typedef Field< FixSecurityStatusReqID, 324, STRING > FieldSecurityStatusReqID;
typedef Field< FixUnsolicitedIndicator, 325, BOOLEAN > FieldUnsolicitedIndicator;
typedef Field< FixSecurityTradingStatus, 326, INT > FieldSecurityTradingStatus;
typedef Field< FixHaltReasonChar, 327, CHAR > FieldHaltReasonChar;
typedef Field< FixInViewOfCommon, 328, BOOLEAN > FieldInViewOfCommon;
typedef Field< FixDueToRelated, 329, BOOLEAN > FieldDueToRelated;
typedef Field< FixBuyVolume, 330, QTY > FieldBuyVolume;
typedef Field< FixSellVolume, 331, QTY > FieldSellVolume;
typedef Field< FixHighPx, 332, PRICE > FieldHighPx;
typedef Field< FixLowPx, 333, PRICE > FieldLowPx;
typedef Field< FixAdjustment, 334, INT > FieldAdjustment;
typedef Field< FixTradSesReqID, 335, STRING > FieldTradSesReqID;
typedef Field< FixTradingSessionID, 336, STRING > FieldTradingSessionID;
typedef Field< FixContraTrader, 337, STRING > FieldContraTrader;
typedef Field< FixTradSesMethod, 338, INT > FieldTradSesMethod;
typedef Field< FixTradSesMode, 339, INT > FieldTradSesMode;
typedef Field< FixTradSesStatus, 340, INT > FieldTradSesStatus;
typedef Field< FixTradSesStartTime, 341, UTCTIMESTAMP > FieldTradSesStartTime;
typedef Field< FixTradSesOpenTime, 342, UTCTIMESTAMP > FieldTradSesOpenTime;
typedef Field< FixTradSesPreCloseTime, 343, UTCTIMESTAMP > FieldTradSesPreCloseTime;
typedef Field< FixTradSesCloseTime, 344, UTCTIMESTAMP > FieldTradSesCloseTime;
typedef Field< FixTradSesEndTime, 345, UTCTIMESTAMP > FieldTradSesEndTime;
typedef Field< FixNumberOfOrders, 346, INT > FieldNumberOfOrders;
typedef Field< FixMessageEncoding, 347, STRING > FieldMessageEncoding;
typedef Field< FixEncodedIssuerLen, 348, LENGTH > FieldEncodedIssuerLen;
typedef Field< FixEncodedIssuer, 349, DATA > FieldEncodedIssuer;
typedef Field< FixEncodedSecurityDescLen, 350, LENGTH > FieldEncodedSecurityDescLen;
typedef Field< FixEncodedSecurityDesc, 351, DATA > FieldEncodedSecurityDesc;
typedef Field< FixEncodedListExecInstLen, 352, LENGTH > FieldEncodedListExecInstLen;
typedef Field< FixEncodedListExecInst, 353, DATA > FieldEncodedListExecInst;
typedef Field< FixEncodedTextLen, 354, LENGTH > FieldEncodedTextLen;
typedef Field< FixEncodedText, 355, DATA > FieldEncodedText;
typedef Field< FixEncodedSubjectLen, 356, LENGTH > FieldEncodedSubjectLen;
typedef Field< FixEncodedSubject, 357, DATA > FieldEncodedSubject;
typedef Field< FixEncodedHeadlineLen, 358, LENGTH > FieldEncodedHeadlineLen;
typedef Field< FixEncodedHeadline, 359, DATA > FieldEncodedHeadline;
typedef Field< FixEncodedAllocTextLen, 360, LENGTH > FieldEncodedAllocTextLen;
typedef Field< FixEncodedAllocText, 361, DATA > FieldEncodedAllocText;
typedef Field< FixEncodedUnderlyingIssuerLen, 362, LENGTH > FieldEncodedUnderlyingIssuerLen;
typedef Field< FixEncodedUnderlyingIssuer, 363, DATA > FieldEncodedUnderlyingIssuer;
typedef Field< FixEncodedUnderlyingSecurityDescLen, 364, LENGTH > FieldEncodedUnderlyingSecurityDescLen;
typedef Field< FixEncodedUnderlyingSecurityDesc, 365, DATA > FieldEncodedUnderlyingSecurityDesc;
typedef Field< FixAllocPrice, 366, PRICE > FieldAllocPrice;
typedef Field< FixQuoteSetValidUntilTime, 367, UTCTIMESTAMP > FieldQuoteSetValidUntilTime;
typedef Field< FixQuoteEntryRejectReason, 368, INT > FieldQuoteEntryRejectReason;
typedef Field< FixLastMsgSeqNumProcessed, 369, SEQNUM > FieldLastMsgSeqNumProcessed;
typedef Field< FixRefTagID, 371, INT > FieldRefTagID;
typedef Field< FixRefMsgType, 372, STRING > FieldRefMsgType;
typedef Field< FixSessionRejectReason, 373, INT > FieldSessionRejectReason;
typedef Field< FixBidRequestTransType, 374, CHAR > FieldBidRequestTransType;
typedef Field< FixContraBroker, 375, STRING > FieldContraBroker;
typedef Field< FixComplianceID, 376, STRING > FieldComplianceID;
typedef Field< FixSolicitedFlag, 377, BOOLEAN > FieldSolicitedFlag;
typedef Field< FixExecRestatementReason, 378, INT > FieldExecRestatementReason;
typedef Field< FixBusinessRejectRefID, 379, STRING > FieldBusinessRejectRefID;
typedef Field< FixBusinessRejectReason, 380, INT > FieldBusinessRejectReason;
typedef Field< FixGrossTradeAmt, 381, AMT > FieldGrossTradeAmt;
typedef Field< FixNoContraBrokers, 382, NUMINGROUP > FieldNoContraBrokers;
typedef Field< FixMaxMessageSize, 383, LENGTH > FieldMaxMessageSize;
typedef Field< FixNoMsgTypes, 384, NUMINGROUP > FieldNoMsgTypes;
typedef Field< FixMsgDirection, 385, CHAR > FieldMsgDirection;
typedef Field< FixNoTradingSessions, 386, NUMINGROUP > FieldNoTradingSessions;
typedef Field< FixTotalVolumeTraded, 387, QTY > FieldTotalVolumeTraded;
typedef Field< FixDiscretionInst, 388, CHAR > FieldDiscretionInst;
typedef Field< FixDiscretionOffsetValue, 389, FLOAT > FieldDiscretionOffsetValue;
typedef Field< FixBidID, 390, STRING > FieldBidID;
typedef Field< FixClientBidID, 391, STRING > FieldClientBidID;
typedef Field< FixListName, 392, STRING > FieldListName;
typedef Field< FixTotNoRelatedSym, 393, INT > FieldTotNoRelatedSym;
typedef Field< FixBidType, 394, INT > FieldBidType;
typedef Field< FixNumTickets, 395, INT > FieldNumTickets;
typedef Field< FixSideValue1, 396, AMT > FieldSideValue1;
typedef Field< FixSideValue2, 397, AMT > FieldSideValue2;
typedef Field< FixNoBidDescriptors, 398, NUMINGROUP > FieldNoBidDescriptors;
typedef Field< FixBidDescriptorType, 399, INT > FieldBidDescriptorType;
typedef Field< FixBidDescriptor, 400, STRING > FieldBidDescriptor;
typedef Field< FixSideValueInd, 401, INT > FieldSideValueInd;
typedef Field< FixLiquidityPctLow, 402, PERCENTAGE > FieldLiquidityPctLow;
typedef Field< FixLiquidityPctHigh, 403, PERCENTAGE > FieldLiquidityPctHigh;
typedef Field< FixLiquidityValue, 404, AMT > FieldLiquidityValue;
typedef Field< FixEFPTrackingError, 405, PERCENTAGE > FieldEFPTrackingError;
typedef Field< FixFairValue, 406, AMT > FieldFairValue;
typedef Field< FixOutsideIndexPct, 407, PERCENTAGE > FieldOutsideIndexPct;
typedef Field< FixValueOfFutures, 408, AMT > FieldValueOfFutures;
typedef Field< FixLiquidityIndType, 409, INT > FieldLiquidityIndType;
typedef Field< FixWtAverageLiquidity, 410, PERCENTAGE > FieldWtAverageLiquidity;
typedef Field< FixExchangeForPhysical, 411, BOOLEAN > FieldExchangeForPhysical;
typedef Field< FixOutMainCntryUIndex, 412, AMT > FieldOutMainCntryUIndex;
typedef Field< FixCrossPercent, 413, PERCENTAGE > FieldCrossPercent;
typedef Field< FixProgRptReqs, 414, INT > FieldProgRptReqs;
typedef Field< FixProgPeriodInterval, 415, INT > FieldProgPeriodInterval;
typedef Field< FixIncTaxInd, 416, INT > FieldIncTaxInd;
typedef Field< FixNumBidders, 417, INT > FieldNumBidders;
typedef Field< FixBidTradeType, 418, CHAR > FieldBidTradeType;
typedef Field< FixBasisPxType, 419, CHAR > FieldBasisPxType;
typedef Field< FixNoBidComponents, 420, NUMINGROUP > FieldNoBidComponents;
typedef Field< FixCountry, 421, COUNTRY > FieldCountry;
typedef Field< FixTotNoStrikes, 422, INT > FieldTotNoStrikes;
typedef Field< FixPriceType, 423, INT > FieldPriceType;
typedef Field< FixDayOrderQty, 424, QTY > FieldDayOrderQty;
typedef Field< FixDayCumQty, 425, QTY > FieldDayCumQty;
typedef Field< FixDayAvgPx, 426, PRICE > FieldDayAvgPx;
typedef Field< FixGTBookingInst, 427, INT > FieldGTBookingInst;
typedef Field< FixNoStrikes, 428, NUMINGROUP > FieldNoStrikes;
typedef Field< FixListStatusType, 429, INT > FieldListStatusType;
typedef Field< FixNetGrossInd, 430, INT > FieldNetGrossInd;
typedef Field< FixListOrderStatus, 431, INT > FieldListOrderStatus;
typedef Field< FixExpireDate, 432, LOCALMKTDATE > FieldExpireDate;
typedef Field< FixListExecInstType, 433, CHAR > FieldListExecInstType;
typedef Field< FixCxlRejResponseTo, 434, CHAR > FieldCxlRejResponseTo;
typedef Field< FixUnderlyingCouponRate, 435, PERCENTAGE > FieldUnderlyingCouponRate;
typedef Field< FixUnderlyingContractMultiplier, 436, FLOAT > FieldUnderlyingContractMultiplier;
typedef Field< FixContraTradeQty, 437, QTY > FieldContraTradeQty;
typedef Field< FixContraTradeTime, 438, UTCTIMESTAMP > FieldContraTradeTime;
typedef Field< FixLiquidityNumSecurities, 441, INT > FieldLiquidityNumSecurities;
typedef Field< FixMultiLegReportingType, 442, CHAR > FieldMultiLegReportingType;
typedef Field< FixStrikeTime, 443, UTCTIMESTAMP > FieldStrikeTime;
typedef Field< FixListStatusText, 444, STRING > FieldListStatusText;
typedef Field< FixEncodedListStatusTextLen, 445, LENGTH > FieldEncodedListStatusTextLen;
typedef Field< FixEncodedListStatusText, 446, DATA > FieldEncodedListStatusText;
typedef Field< FixPartyIDSource, 447, CHAR > FieldPartyIDSource;
typedef Field< FixPartyID, 448, STRING > FieldPartyID;
typedef Field< FixNetChgPrevDay, 451, PRICEOFFSET > FieldNetChgPrevDay;
typedef Field< FixPartyRole, 452, INT > FieldPartyRole;
typedef Field< FixNoPartyIDs, 453, NUMINGROUP > FieldNoPartyIDs;
typedef Field< FixNoSecurityAltID, 454, NUMINGROUP > FieldNoSecurityAltID;
typedef Field< FixSecurityAltID, 455, STRING > FieldSecurityAltID;
typedef Field< FixSecurityAltIDSource, 456, STRING > FieldSecurityAltIDSource;
typedef Field< FixNoUnderlyingSecurityAltID, 457, NUMINGROUP > FieldNoUnderlyingSecurityAltID;
typedef Field< FixUnderlyingSecurityAltID, 458, STRING > FieldUnderlyingSecurityAltID;
typedef Field< FixUnderlyingSecurityAltIDSource, 459, STRING > FieldUnderlyingSecurityAltIDSource;
typedef Field< FixProduct, 460, INT > FieldProduct;
typedef Field< FixCFICode, 461, STRING > FieldCFICode;
typedef Field< FixUnderlyingProduct, 462, INT > FieldUnderlyingProduct;
typedef Field< FixUnderlyingCFICode, 463, STRING > FieldUnderlyingCFICode;
typedef Field< FixTestMessageIndicator, 464, BOOLEAN > FieldTestMessageIndicator;
typedef Field< FixBookingRefID, 466, STRING > FieldBookingRefID;
typedef Field< FixIndividualAllocID, 467, STRING > FieldIndividualAllocID;
typedef Field< FixRoundingDirection, 468, CHAR > FieldRoundingDirection;
typedef Field< FixRoundingModulus, 469, FLOAT > FieldRoundingModulus;
typedef Field< FixCountryOfIssue, 470, COUNTRY > FieldCountryOfIssue;
typedef Field< FixStateOrProvinceOfIssue, 471, STRING > FieldStateOrProvinceOfIssue;
typedef Field< FixLocaleOfIssue, 472, STRING > FieldLocaleOfIssue;
typedef Field< FixNoRegistDtls, 473, NUMINGROUP > FieldNoRegistDtls;
typedef Field< FixMailingDtls, 474, STRING > FieldMailingDtls;
typedef Field< FixInvestorCountryOfResidence, 475, COUNTRY > FieldInvestorCountryOfResidence;
typedef Field< FixPaymentRef, 476, STRING > FieldPaymentRef;
typedef Field< FixDistribPaymentMethod, 477, INT > FieldDistribPaymentMethod;
typedef Field< FixCashDistribCurr, 478, CURRENCY > FieldCashDistribCurr;
typedef Field< FixCommCurrency, 479, CURRENCY > FieldCommCurrency;
typedef Field< FixCancellationRights, 480, CHAR > FieldCancellationRights;
typedef Field< FixMoneyLaunderingStatus, 481, CHAR > FieldMoneyLaunderingStatus;
typedef Field< FixMailingInst, 482, STRING > FieldMailingInst;
typedef Field< FixTransBkdTime, 483, UTCTIMESTAMP > FieldTransBkdTime;
typedef Field< FixExecPriceType, 484, CHAR > FieldExecPriceType;
typedef Field< FixExecPriceAdjustment, 485, FLOAT > FieldExecPriceAdjustment;
typedef Field< FixDateOfBirth, 486, LOCALMKTDATE > FieldDateOfBirth;
typedef Field< FixTradeReportTransType, 487, INT > FieldTradeReportTransType;
typedef Field< FixCardHolderName, 488, STRING > FieldCardHolderName;
typedef Field< FixCardNumber, 489, STRING > FieldCardNumber;
typedef Field< FixCardExpDate, 490, LOCALMKTDATE > FieldCardExpDate;
typedef Field< FixCardIssNum, 491, STRING > FieldCardIssNum;
typedef Field< FixPaymentMethod, 492, INT > FieldPaymentMethod;
typedef Field< FixRegistAcctType, 493, STRING > FieldRegistAcctType;
typedef Field< FixDesignation, 494, STRING > FieldDesignation;
typedef Field< FixTaxAdvantageType, 495, INT > FieldTaxAdvantageType;
typedef Field< FixRegistRejReasonText, 496, STRING > FieldRegistRejReasonText;
typedef Field< FixFundRenewWaiv, 497, CHAR > FieldFundRenewWaiv;
typedef Field< FixCashDistribAgentName, 498, STRING > FieldCashDistribAgentName;
typedef Field< FixCashDistribAgentCode, 499, STRING > FieldCashDistribAgentCode;
typedef Field< FixCashDistribAgentAcctNumber, 500, STRING > FieldCashDistribAgentAcctNumber;
typedef Field< FixCashDistribPayRef, 501, STRING > FieldCashDistribPayRef;
typedef Field< FixCashDistribAgentAcctName, 502, STRING > FieldCashDistribAgentAcctName;
typedef Field< FixCardStartDate, 503, LOCALMKTDATE > FieldCardStartDate;
typedef Field< FixPaymentDate, 504, LOCALMKTDATE > FieldPaymentDate;
typedef Field< FixPaymentRemitterID, 505, STRING > FieldPaymentRemitterID;
typedef Field< FixRegistStatus, 506, CHAR > FieldRegistStatus;
typedef Field< FixRegistRejReasonCode, 507, INT > FieldRegistRejReasonCode;
typedef Field< FixRegistRefID, 508, STRING > FieldRegistRefID;
typedef Field< FixRegistDtls, 509, STRING > FieldRegistDtls;
typedef Field< FixNoDistribInsts, 510, NUMINGROUP > FieldNoDistribInsts;
typedef Field< FixRegistEmail, 511, STRING > FieldRegistEmail;
typedef Field< FixDistribPercentage, 512, PERCENTAGE > FieldDistribPercentage;
typedef Field< FixRegistID, 513, STRING > FieldRegistID;
typedef Field< FixRegistTransType, 514, CHAR > FieldRegistTransType;
typedef Field< FixExecValuationPoint, 515, UTCTIMESTAMP > FieldExecValuationPoint;
typedef Field< FixOrderPercent, 516, PERCENTAGE > FieldOrderPercent;
typedef Field< FixOwnershipType, 517, CHAR > FieldOwnershipType;
typedef Field< FixNoContAmts, 518, NUMINGROUP > FieldNoContAmts;
typedef Field< FixContAmtType, 519, INT > FieldContAmtType;
typedef Field< FixContAmtValue, 520, FLOAT > FieldContAmtValue;
typedef Field< FixContAmtCurr, 521, CURRENCY > FieldContAmtCurr;
typedef Field< FixOwnerType, 522, INT > FieldOwnerType;
typedef Field< FixPartySubID, 523, STRING > FieldPartySubID;
typedef Field< FixNestedPartyID, 524, STRING > FieldNestedPartyID;
typedef Field< FixNestedPartyIDSource, 525, CHAR > FieldNestedPartyIDSource;
typedef Field< FixSecondaryClOrdID, 526, STRING > FieldSecondaryClOrdID;
typedef Field< FixSecondaryExecID, 527, STRING > FieldSecondaryExecID;
typedef Field< FixOrderCapacity, 528, CHAR > FieldOrderCapacity;
typedef Field< FixOrderRestrictions, 529, MULTIPLEVALUESTRING > FieldOrderRestrictions;
typedef Field< FixMassCancelRequestType, 530, CHAR > FieldMassCancelRequestType;
typedef Field< FixMassCancelResponse, 531, CHAR > FieldMassCancelResponse;
typedef Field< FixMassCancelRejectReason, 532, CHAR > FieldMassCancelRejectReason;
typedef Field< FixTotalAffectedOrders, 533, INT > FieldTotalAffectedOrders;
typedef Field< FixNoAffectedOrders, 534, NUMINGROUP > FieldNoAffectedOrders;
typedef Field< FixAffectedOrderID, 535, STRING > FieldAffectedOrderID;
typedef Field< FixAffectedSecondaryOrderID, 536, STRING > FieldAffectedSecondaryOrderID;
typedef Field< FixQuoteType, 537, INT > FieldQuoteType;
typedef Field< FixNestedPartyRole, 538, INT > FieldNestedPartyRole;
typedef Field< FixNoNestedPartyIDs, 539, NUMINGROUP > FieldNoNestedPartyIDs;
typedef Field< FixTotalAccruedInterestAmt, 540, AMT > FieldTotalAccruedInterestAmt;
typedef Field< FixMaturityDate, 541, LOCALMKTDATE > FieldMaturityDate;
typedef Field< FixUnderlyingMaturityDate, 542, LOCALMKTDATE > FieldUnderlyingMaturityDate;
typedef Field< FixInstrRegistry, 543, STRING > FieldInstrRegistry;
typedef Field< FixCashMargin, 544, CHAR > FieldCashMargin;
typedef Field< FixNestedPartySubID, 545, STRING > FieldNestedPartySubID;
typedef Field< FixScope, 546, MULTIPLEVALUESTRING > FieldScope;
typedef Field< FixMDImplicitDelete, 547, BOOLEAN > FieldMDImplicitDelete;
typedef Field< FixCrossID, 548, STRING > FieldCrossID;
typedef Field< FixCrossType, 549, INT > FieldCrossType;
typedef Field< FixCrossPrioritization, 550, INT > FieldCrossPrioritization;
typedef Field< FixOrigCrossID, 551, STRING > FieldOrigCrossID;
typedef Field< FixNoSides, 552, NUMINGROUP > FieldNoSides;
typedef Field< FixUsername, 553, STRING > FieldUsername;
typedef Field< FixPassword, 554, STRING > FieldPassword;
typedef Field< FixNoLegs, 555, NUMINGROUP > FieldNoLegs;
typedef Field< FixLegCurrency, 556, CURRENCY > FieldLegCurrency;
typedef Field< FixTotNoSecurityTypes, 557, INT > FieldTotNoSecurityTypes;
typedef Field< FixNoSecurityTypes, 558, NUMINGROUP > FieldNoSecurityTypes;
typedef Field< FixSecurityListRequestType, 559, INT > FieldSecurityListRequestType;
typedef Field< FixSecurityRequestResult, 560, INT > FieldSecurityRequestResult;
typedef Field< FixRoundLot, 561, QTY > FieldRoundLot;
typedef Field< FixMinTradeVol, 562, QTY > FieldMinTradeVol;
typedef Field< FixMultiLegRptTypeReq, 563, INT > FieldMultiLegRptTypeReq;
typedef Field< FixLegPositionEffect, 564, CHAR > FieldLegPositionEffect;
typedef Field< FixLegCoveredOrUncovered, 565, INT > FieldLegCoveredOrUncovered;
typedef Field< FixLegPrice, 566, PRICE > FieldLegPrice;
typedef Field< FixTradSesStatusRejReason, 567, INT > FieldTradSesStatusRejReason;
typedef Field< FixTradeRequestID, 568, STRING > FieldTradeRequestID;
typedef Field< FixTradeRequestType, 569, INT > FieldTradeRequestType;
typedef Field< FixPreviouslyReported, 570, BOOLEAN > FieldPreviouslyReported;
typedef Field< FixTradeReportID, 571, STRING > FieldTradeReportID;
typedef Field< FixTradeReportRefID, 572, STRING > FieldTradeReportRefID;
typedef Field< FixMatchStatus, 573, CHAR > FieldMatchStatus;
typedef Field< FixMatchType, 574, STRING > FieldMatchType;
typedef Field< FixOddLot, 575, BOOLEAN > FieldOddLot;
typedef Field< FixNoClearingInstructions, 576, NUMINGROUP > FieldNoClearingInstructions;
typedef Field< FixClearingInstruction, 577, INT > FieldClearingInstruction;
typedef Field< FixTradeInputSource, 578, STRING > FieldTradeInputSource;
typedef Field< FixTradeInputDevice, 579, STRING > FieldTradeInputDevice;
typedef Field< FixNoDates, 580, NUMINGROUP > FieldNoDates;
typedef Field< FixAccountType, 581, INT > FieldAccountType;
typedef Field< FixCustOrderCapacity, 582, INT > FieldCustOrderCapacity;
typedef Field< FixClOrdLinkID, 583, STRING > FieldClOrdLinkID;
typedef Field< FixMassStatusReqID, 584, STRING > FieldMassStatusReqID;
typedef Field< FixMassStatusReqType, 585, INT > FieldMassStatusReqType;
typedef Field< FixOrigOrdModTime, 586, UTCTIMESTAMP > FieldOrigOrdModTime;
typedef Field< FixLegSettlType, 587, CHAR > FieldLegSettlType;
typedef Field< FixLegSettlDate, 588, LOCALMKTDATE > FieldLegSettlDate;
typedef Field< FixDayBookingInst, 589, CHAR > FieldDayBookingInst;
typedef Field< FixBookingUnit, 590, CHAR > FieldBookingUnit;
typedef Field< FixPreallocMethod, 591, CHAR > FieldPreallocMethod;
typedef Field< FixUnderlyingCountryOfIssue, 592, COUNTRY > FieldUnderlyingCountryOfIssue;
typedef Field< FixUnderlyingStateOrProvinceOfIssue, 593, STRING > FieldUnderlyingStateOrProvinceOfIssue;
typedef Field< FixUnderlyingLocaleOfIssue, 594, STRING > FieldUnderlyingLocaleOfIssue;
typedef Field< FixUnderlyingInstrRegistry, 595, STRING > FieldUnderlyingInstrRegistry;
typedef Field< FixLegCountryOfIssue, 596, COUNTRY > FieldLegCountryOfIssue;
typedef Field< FixLegStateOrProvinceOfIssue, 597, STRING > FieldLegStateOrProvinceOfIssue;
typedef Field< FixLegLocaleOfIssue, 598, STRING > FieldLegLocaleOfIssue;
typedef Field< FixLegInstrRegistry, 599, STRING > FieldLegInstrRegistry;
typedef Field< FixLegSymbol, 600, STRING > FieldLegSymbol;
typedef Field< FixLegSymbolSfx, 601, STRING > FieldLegSymbolSfx;
typedef Field< FixLegSecurityID, 602, STRING > FieldLegSecurityID;
typedef Field< FixLegSecurityIDSource, 603, STRING > FieldLegSecurityIDSource;
typedef Field< FixNoLegSecurityAltID, 604, NUMINGROUP > FieldNoLegSecurityAltID;
typedef Field< FixLegSecurityAltID, 605, STRING > FieldLegSecurityAltID;
typedef Field< FixLegSecurityAltIDSource, 606, STRING > FieldLegSecurityAltIDSource;
typedef Field< FixLegProduct, 607, INT > FieldLegProduct;
typedef Field< FixLegCFICode, 608, STRING > FieldLegCFICode;
typedef Field< FixLegSecurityType, 609, STRING > FieldLegSecurityType;
typedef Field< FixLegMaturityMonthYear, 610, MONTHYEAR > FieldLegMaturityMonthYear;
typedef Field< FixLegMaturityDate, 611, LOCALMKTDATE > FieldLegMaturityDate;
typedef Field< FixLegStrikePrice, 612, PRICE > FieldLegStrikePrice;
typedef Field< FixLegOptAttribute, 613, CHAR > FieldLegOptAttribute;
typedef Field< FixLegContractMultiplier, 614, FLOAT > FieldLegContractMultiplier;
typedef Field< FixLegCouponRate, 615, PERCENTAGE > FieldLegCouponRate;
typedef Field< FixLegSecurityExchange, 616, EXCHANGE > FieldLegSecurityExchange;
typedef Field< FixLegIssuer, 617, STRING > FieldLegIssuer;
typedef Field< FixEncodedLegIssuerLen, 618, LENGTH > FieldEncodedLegIssuerLen;
typedef Field< FixEncodedLegIssuer, 619, DATA > FieldEncodedLegIssuer;
typedef Field< FixLegSecurityDesc, 620, STRING > FieldLegSecurityDesc;
typedef Field< FixEncodedLegSecurityDescLen, 621, LENGTH > FieldEncodedLegSecurityDescLen;
typedef Field< FixEncodedLegSecurityDesc, 622, DATA > FieldEncodedLegSecurityDesc;
typedef Field< FixLegRatioQty, 623, FLOAT > FieldLegRatioQty;
typedef Field< FixLegSide, 624, CHAR > FieldLegSide;
typedef Field< FixTradingSessionSubID, 625, STRING > FieldTradingSessionSubID;
typedef Field< FixAllocType, 626, INT > FieldAllocType;
typedef Field< FixNoHops, 627, NUMINGROUP > FieldNoHops;
typedef Field< FixHopCompID, 628, STRING > FieldHopCompID;
typedef Field< FixHopSendingTime, 629, UTCTIMESTAMP > FieldHopSendingTime;
typedef Field< FixHopRefID, 630, SEQNUM > FieldHopRefID;
typedef Field< FixMidPx, 631, PRICE > FieldMidPx;
typedef Field< FixBidYield, 632, PERCENTAGE > FieldBidYield;
typedef Field< FixMidYield, 633, PERCENTAGE > FieldMidYield;
typedef Field< FixOfferYield, 634, PERCENTAGE > FieldOfferYield;
typedef Field< FixClearingFeeIndicator, 635, STRING > FieldClearingFeeIndicator;
typedef Field< FixWorkingIndicator, 636, BOOLEAN > FieldWorkingIndicator;
typedef Field< FixLegLastPx, 637, PRICE > FieldLegLastPx;
typedef Field< FixPriorityIndicator, 638, INT > FieldPriorityIndicator;
typedef Field< FixPriceImprovement, 639, PRICEOFFSET > FieldPriceImprovement;
typedef Field< FixPrice2, 640, PRICE > FieldPrice2;
typedef Field< FixLastForwardPoints2, 641, PRICEOFFSET > FieldLastForwardPoints2;
typedef Field< FixBidForwardPoints2, 642, PRICEOFFSET > FieldBidForwardPoints2;
typedef Field< FixOfferForwardPoints2, 643, PRICEOFFSET > FieldOfferForwardPoints2;
typedef Field< FixRFQReqID, 644, STRING > FieldRFQReqID;
typedef Field< FixMktBidPx, 645, PRICE > FieldMktBidPx;
typedef Field< FixMktOfferPx, 646, PRICE > FieldMktOfferPx;
typedef Field< FixMinBidSize, 647, QTY > FieldMinBidSize;
typedef Field< FixMinOfferSize, 648, QTY > FieldMinOfferSize;
typedef Field< FixQuoteStatusReqID, 649, STRING > FieldQuoteStatusReqID;
typedef Field< FixLegalConfirm, 650, BOOLEAN > FieldLegalConfirm;
typedef Field< FixUnderlyingLastPx, 651, PRICE > FieldUnderlyingLastPx;
typedef Field< FixUnderlyingLastQty, 652, QTY > FieldUnderlyingLastQty;
typedef Field< FixLegRefID, 654, STRING > FieldLegRefID;
typedef Field< FixContraLegRefID, 655, STRING > FieldContraLegRefID;
typedef Field< FixSettlCurrBidFxRate, 656, FLOAT > FieldSettlCurrBidFxRate;
typedef Field< FixSettlCurrOfferFxRate, 657, FLOAT > FieldSettlCurrOfferFxRate;
typedef Field< FixQuoteRequestRejectReason, 658, INT > FieldQuoteRequestRejectReason;
typedef Field< FixSideComplianceID, 659, STRING > FieldSideComplianceID;
typedef Field< FixAcctIDSource, 660, INT > FieldAcctIDSource;
typedef Field< FixAllocAcctIDSource, 661, INT > FieldAllocAcctIDSource;
typedef Field< FixBenchmarkPrice, 662, PRICE > FieldBenchmarkPrice;
typedef Field< FixBenchmarkPriceType, 663, INT > FieldBenchmarkPriceType;
typedef Field< FixConfirmID, 664, STRING > FieldConfirmID;
typedef Field< FixConfirmStatus, 665, INT > FieldConfirmStatus;
typedef Field< FixConfirmTransType, 666, INT > FieldConfirmTransType;
typedef Field< FixContractSettlMonth, 667, MONTHYEAR > FieldContractSettlMonth;
typedef Field< FixDeliveryForm, 668, INT > FieldDeliveryForm;
typedef Field< FixLastParPx, 669, PRICE > FieldLastParPx;
typedef Field< FixNoLegAllocs, 670, NUMINGROUP > FieldNoLegAllocs;
typedef Field< FixLegAllocAccount, 671, STRING > FieldLegAllocAccount;
typedef Field< FixLegIndividualAllocID, 672, STRING > FieldLegIndividualAllocID;
typedef Field< FixLegAllocQty, 673, QTY > FieldLegAllocQty;
typedef Field< FixLegAllocAcctIDSource, 674, STRING > FieldLegAllocAcctIDSource;
typedef Field< FixLegSettlCurrency, 675, CURRENCY > FieldLegSettlCurrency;
typedef Field< FixLegBenchmarkCurveCurrency, 676, CURRENCY > FieldLegBenchmarkCurveCurrency;
typedef Field< FixLegBenchmarkCurveName, 677, STRING > FieldLegBenchmarkCurveName;
typedef Field< FixLegBenchmarkCurvePoint, 678, STRING > FieldLegBenchmarkCurvePoint;
typedef Field< FixLegBenchmarkPrice, 679, PRICE > FieldLegBenchmarkPrice;
typedef Field< FixLegBenchmarkPriceType, 680, INT > FieldLegBenchmarkPriceType;
typedef Field< FixLegBidPx, 681, PRICE > FieldLegBidPx;
typedef Field< FixLegIOIQty, 682, STRING > FieldLegIOIQty;
typedef Field< FixNoLegStipulations, 683, NUMINGROUP > FieldNoLegStipulations;
typedef Field< FixLegOfferPx, 684, PRICE > FieldLegOfferPx;
typedef Field< FixLegPriceType, 686, INT > FieldLegPriceType;
typedef Field< FixLegQty, 687, QTY > FieldLegQty;
typedef Field< FixLegStipulationType, 688, STRING > FieldLegStipulationType;
typedef Field< FixLegStipulationValue, 689, STRING > FieldLegStipulationValue;
typedef Field< FixLegSwapType, 690, INT > FieldLegSwapType;
typedef Field< FixPool, 691, STRING > FieldPool;
typedef Field< FixQuotePriceType, 692, INT > FieldQuotePriceType;
typedef Field< FixQuoteRespID, 693, STRING > FieldQuoteRespID;
typedef Field< FixQuoteRespType, 694, INT > FieldQuoteRespType;
typedef Field< FixQuoteQualifier, 695, CHAR > FieldQuoteQualifier;
typedef Field< FixYieldRedemptionDate, 696, LOCALMKTDATE > FieldYieldRedemptionDate;
typedef Field< FixYieldRedemptionPrice, 697, PRICE > FieldYieldRedemptionPrice;
typedef Field< FixYieldRedemptionPriceType, 698, INT > FieldYieldRedemptionPriceType;
typedef Field< FixBenchmarkSecurityID, 699, STRING > FieldBenchmarkSecurityID;
typedef Field< FixReversalIndicator, 700, BOOLEAN > FieldReversalIndicator;
typedef Field< FixYieldCalcDate, 701, LOCALMKTDATE > FieldYieldCalcDate;
typedef Field< FixNoPositions, 702, NUMINGROUP > FieldNoPositions;
typedef Field< FixPosType, 703, STRING > FieldPosType;
typedef Field< FixLongQty, 704, QTY > FieldLongQty;
typedef Field< FixShortQty, 705, QTY > FieldShortQty;
typedef Field< FixPosQtyStatus, 706, INT > FieldPosQtyStatus;
typedef Field< FixPosAmtType, 707, STRING > FieldPosAmtType;
typedef Field< FixPosAmt, 708, AMT > FieldPosAmt;
typedef Field< FixPosTransType, 709, INT > FieldPosTransType;
typedef Field< FixPosReqID, 710, STRING > FieldPosReqID;
typedef Field< FixNoUnderlyings, 711, NUMINGROUP > FieldNoUnderlyings;
typedef Field< FixPosMaintAction, 712, INT > FieldPosMaintAction;
typedef Field< FixOrigPosReqRefID, 713, STRING > FieldOrigPosReqRefID;
typedef Field< FixPosMaintRptRefID, 714, STRING > FieldPosMaintRptRefID;
typedef Field< FixClearingBusinessDate, 715, LOCALMKTDATE > FieldClearingBusinessDate;
typedef Field< FixSettlSessID, 716, STRING > FieldSettlSessID;
typedef Field< FixSettlSessSubID, 717, STRING > FieldSettlSessSubID;
typedef Field< FixAdjustmentType, 718, INT > FieldAdjustmentType;
typedef Field< FixContraryInstructionIndicator, 719, BOOLEAN > FieldContraryInstructionIndicator;
typedef Field< FixPriorSpreadIndicator, 720, BOOLEAN > FieldPriorSpreadIndicator;
typedef Field< FixPosMaintRptID, 721, STRING > FieldPosMaintRptID;
typedef Field< FixPosMaintStatus, 722, INT > FieldPosMaintStatus;
typedef Field< FixPosMaintResult, 723, INT > FieldPosMaintResult;
typedef Field< FixPosReqType, 724, INT > FieldPosReqType;
typedef Field< FixResponseTransportType, 725, INT > FieldResponseTransportType;
typedef Field< FixResponseDestination, 726, STRING > FieldResponseDestination;
typedef Field< FixTotalNumPosReports, 727, INT > FieldTotalNumPosReports;
typedef Field< FixPosReqResult, 728, INT > FieldPosReqResult;
typedef Field< FixPosReqStatus, 729, INT > FieldPosReqStatus;
typedef Field< FixSettlPrice, 730, PRICE > FieldSettlPrice;
typedef Field< FixSettlPriceType, 731, INT > FieldSettlPriceType;
typedef Field< FixUnderlyingSettlPrice, 732, PRICE > FieldUnderlyingSettlPrice;
typedef Field< FixUnderlyingSettlPriceType, 733, INT > FieldUnderlyingSettlPriceType;
typedef Field< FixPriorSettlPrice, 734, PRICE > FieldPriorSettlPrice;
typedef Field< FixNoQuoteQualifiers, 735, NUMINGROUP > FieldNoQuoteQualifiers;
typedef Field< FixAllocSettlCurrency, 736, CURRENCY > FieldAllocSettlCurrency;
typedef Field< FixAllocSettlCurrAmt, 737, AMT > FieldAllocSettlCurrAmt;
typedef Field< FixInterestAtMaturity, 738, AMT > FieldInterestAtMaturity;
typedef Field< FixLegDatedDate, 739, LOCALMKTDATE > FieldLegDatedDate;
typedef Field< FixLegPool, 740, STRING > FieldLegPool;
typedef Field< FixAllocInterestAtMaturity, 741, AMT > FieldAllocInterestAtMaturity;
typedef Field< FixAllocAccruedInterestAmt, 742, AMT > FieldAllocAccruedInterestAmt;
typedef Field< FixDeliveryDate, 743, LOCALMKTDATE > FieldDeliveryDate;
typedef Field< FixAssignmentMethod, 744, CHAR > FieldAssignmentMethod;
typedef Field< FixAssignmentUnit, 745, QTY > FieldAssignmentUnit;
typedef Field< FixOpenInterest, 746, AMT > FieldOpenInterest;
typedef Field< FixExerciseMethod, 747, CHAR > FieldExerciseMethod;
typedef Field< FixTotNumTradeReports, 748, INT > FieldTotNumTradeReports;
typedef Field< FixTradeRequestResult, 749, INT > FieldTradeRequestResult;
typedef Field< FixTradeRequestStatus, 750, INT > FieldTradeRequestStatus;
typedef Field< FixTradeReportRejectReason, 751, INT > FieldTradeReportRejectReason;
typedef Field< FixSideMultiLegReportingType, 752, INT > FieldSideMultiLegReportingType;
typedef Field< FixNoPosAmt, 753, NUMINGROUP > FieldNoPosAmt;
typedef Field< FixAutoAcceptIndicator, 754, BOOLEAN > FieldAutoAcceptIndicator;
typedef Field< FixAllocReportID, 755, STRING > FieldAllocReportID;
typedef Field< FixNoNested2PartyIDs, 756, NUMINGROUP > FieldNoNested2PartyIDs;
typedef Field< FixNested2PartyID, 757, STRING > FieldNested2PartyID;
typedef Field< FixNested2PartyIDSource, 758, CHAR > FieldNested2PartyIDSource;
typedef Field< FixNested2PartyRole, 759, INT > FieldNested2PartyRole;
typedef Field< FixNested2PartySubID, 760, STRING > FieldNested2PartySubID;
typedef Field< FixBenchmarkSecurityIDSource, 761, STRING > FieldBenchmarkSecurityIDSource;
typedef Field< FixSecuritySubType, 762, STRING > FieldSecuritySubType;
typedef Field< FixUnderlyingSecuritySubType, 763, STRING > FieldUnderlyingSecuritySubType;
typedef Field< FixLegSecuritySubType, 764, STRING > FieldLegSecuritySubType;
typedef Field< FixAllowableOneSidednessPct, 765, PERCENTAGE > FieldAllowableOneSidednessPct;
typedef Field< FixAllowableOneSidednessValue, 766, AMT > FieldAllowableOneSidednessValue;
typedef Field< FixAllowableOneSidednessCurr, 767, CURRENCY > FieldAllowableOneSidednessCurr;
typedef Field< FixNoTrdRegTimestamps, 768, NUMINGROUP > FieldNoTrdRegTimestamps;
typedef Field< FixTrdRegTimestamp, 769, UTCTIMESTAMP > FieldTrdRegTimestamp;
typedef Field< FixTrdRegTimestampType, 770, INT > FieldTrdRegTimestampType;
typedef Field< FixTrdRegTimestampOrigin, 771, STRING > FieldTrdRegTimestampOrigin;
typedef Field< FixConfirmRefID, 772, STRING > FieldConfirmRefID;
typedef Field< FixConfirmType, 773, INT > FieldConfirmType;
typedef Field< FixConfirmRejReason, 774, INT > FieldConfirmRejReason;
typedef Field< FixBookingType, 775, INT > FieldBookingType;
typedef Field< FixIndividualAllocRejCode, 776, INT > FieldIndividualAllocRejCode;
typedef Field< FixSettlInstMsgID, 777, STRING > FieldSettlInstMsgID;
typedef Field< FixNoSettlInst, 778, NUMINGROUP > FieldNoSettlInst;
typedef Field< FixLastUpdateTime, 779, UTCTIMESTAMP > FieldLastUpdateTime;
typedef Field< FixAllocSettlInstType, 780, INT > FieldAllocSettlInstType;
typedef Field< FixNoSettlPartyIDs, 781, NUMINGROUP > FieldNoSettlPartyIDs;
typedef Field< FixSettlPartyID, 782, STRING > FieldSettlPartyID;
typedef Field< FixSettlPartyIDSource, 783, CHAR > FieldSettlPartyIDSource;
typedef Field< FixSettlPartyRole, 784, INT > FieldSettlPartyRole;
typedef Field< FixSettlPartySubID, 785, STRING > FieldSettlPartySubID;
typedef Field< FixSettlPartySubIDType, 786, INT > FieldSettlPartySubIDType;
typedef Field< FixDlvyInstType, 787, CHAR > FieldDlvyInstType;
typedef Field< FixTerminationType, 788, INT > FieldTerminationType;
typedef Field< FixNextExpectedMsgSeqNum, 789, SEQNUM > FieldNextExpectedMsgSeqNum;
typedef Field< FixOrdStatusReqID, 790, STRING > FieldOrdStatusReqID;
typedef Field< FixSettlInstReqID, 791, STRING > FieldSettlInstReqID;
typedef Field< FixSettlInstReqRejCode, 792, INT > FieldSettlInstReqRejCode;
typedef Field< FixSecondaryAllocID, 793, STRING > FieldSecondaryAllocID;
typedef Field< FixAllocReportType, 794, INT > FieldAllocReportType;
typedef Field< FixAllocReportRefID, 795, STRING > FieldAllocReportRefID;
typedef Field< FixAllocCancReplaceReason, 796, INT > FieldAllocCancReplaceReason;
typedef Field< FixCopyMsgIndicator, 797, BOOLEAN > FieldCopyMsgIndicator;
typedef Field< FixAllocAccountType, 798, INT > FieldAllocAccountType;
typedef Field< FixOrderAvgPx, 799, PRICE > FieldOrderAvgPx;
typedef Field< FixOrderBookingQty, 800, QTY > FieldOrderBookingQty;
typedef Field< FixNoSettlPartySubIDs, 801, NUMINGROUP > FieldNoSettlPartySubIDs;
typedef Field< FixNoPartySubIDs, 802, NUMINGROUP > FieldNoPartySubIDs;
typedef Field< FixPartySubIDType, 803, INT > FieldPartySubIDType;
typedef Field< FixNoNestedPartySubIDs, 804, NUMINGROUP > FieldNoNestedPartySubIDs;
typedef Field< FixNestedPartySubIDType, 805, INT > FieldNestedPartySubIDType;
typedef Field< FixNoNested2PartySubIDs, 806, NUMINGROUP > FieldNoNested2PartySubIDs;
typedef Field< FixNested2PartySubIDType, 807, INT > FieldNested2PartySubIDType;
typedef Field< FixAllocIntermedReqType, 808, INT > FieldAllocIntermedReqType;
typedef Field< FixUnderlyingPx, 810, PRICE > FieldUnderlyingPx;
typedef Field< FixPriceDelta, 811, FLOAT > FieldPriceDelta;
typedef Field< FixApplQueueMax, 812, INT > FieldApplQueueMax;
typedef Field< FixApplQueueDepth, 813, INT > FieldApplQueueDepth;
typedef Field< FixApplQueueResolution, 814, INT > FieldApplQueueResolution;
typedef Field< FixApplQueueAction, 815, INT > FieldApplQueueAction;
typedef Field< FixNoAltMDSource, 816, NUMINGROUP > FieldNoAltMDSource;
typedef Field< FixAltMDSourceID, 817, STRING > FieldAltMDSourceID;
typedef Field< FixSecondaryTradeReportID, 818, STRING > FieldSecondaryTradeReportID;
typedef Field< FixAvgPxIndicator, 819, INT > FieldAvgPxIndicator;
typedef Field< FixTradeLinkID, 820, STRING > FieldTradeLinkID;
typedef Field< FixOrderInputDevice, 821, STRING > FieldOrderInputDevice;
typedef Field< FixUnderlyingTradingSessionID, 822, STRING > FieldUnderlyingTradingSessionID;
typedef Field< FixUnderlyingTradingSessionSubID, 823, STRING > FieldUnderlyingTradingSessionSubID;
typedef Field< FixTradeLegRefID, 824, STRING > FieldTradeLegRefID;
typedef Field< FixExchangeRule, 825, STRING > FieldExchangeRule;
typedef Field< FixTradeAllocIndicator, 826, INT > FieldTradeAllocIndicator;
typedef Field< FixExpirationCycle, 827, INT > FieldExpirationCycle;
typedef Field< FixTrdType, 828, INT > FieldTrdType;
typedef Field< FixTrdSubType, 829, INT > FieldTrdSubType;
typedef Field< FixTransferReason, 830, STRING > FieldTransferReason;
typedef Field< FixTotNumAssignmentReports, 832, INT > FieldTotNumAssignmentReports;
typedef Field< FixAsgnRptID, 833, STRING > FieldAsgnRptID;
typedef Field< FixThresholdAmount, 834, PRICEOFFSET > FieldThresholdAmount;
typedef Field< FixPegMoveType, 835, INT > FieldPegMoveType;
typedef Field< FixPegOffsetType, 836, INT > FieldPegOffsetType;
typedef Field< FixPegLimitType, 837, INT > FieldPegLimitType;
typedef Field< FixPegRoundDirection, 838, INT > FieldPegRoundDirection;
typedef Field< FixPeggedPrice, 839, PRICE > FieldPeggedPrice;
typedef Field< FixPegScope, 840, INT > FieldPegScope;
typedef Field< FixDiscretionMoveType, 841, INT > FieldDiscretionMoveType;
typedef Field< FixDiscretionOffsetType, 842, INT > FieldDiscretionOffsetType;
typedef Field< FixDiscretionLimitType, 843, INT > FieldDiscretionLimitType;
typedef Field< FixDiscretionRoundDirection, 844, INT > FieldDiscretionRoundDirection;
typedef Field< FixDiscretionPrice, 845, PRICE > FieldDiscretionPrice;
typedef Field< FixDiscretionScope, 846, INT > FieldDiscretionScope;
typedef Field< FixTargetStrategy, 847, INT > FieldTargetStrategy;
typedef Field< FixTargetStrategyParameters, 848, STRING > FieldTargetStrategyParameters;
typedef Field< FixParticipationRate, 849, PERCENTAGE > FieldParticipationRate;
typedef Field< FixTargetStrategyPerformance, 850, FLOAT > FieldTargetStrategyPerformance;
typedef Field< FixLastLiquidityInd, 851, INT > FieldLastLiquidityInd;
typedef Field< FixPublishTrdIndicator, 852, BOOLEAN > FieldPublishTrdIndicator;
typedef Field< FixShortSaleReason, 853, INT > FieldShortSaleReason;
typedef Field< FixQtyType, 854, INT > FieldQtyType;
typedef Field< FixSecondaryTrdType, 855, INT > FieldSecondaryTrdType;
typedef Field< FixTradeReportType, 856, INT > FieldTradeReportType;
typedef Field< FixAllocNoOrdersType, 857, INT > FieldAllocNoOrdersType;
typedef Field< FixSharedCommission, 858, AMT > FieldSharedCommission;
typedef Field< FixConfirmReqID, 859, STRING > FieldConfirmReqID;
typedef Field< FixAvgParPx, 860, PRICE > FieldAvgParPx;
typedef Field< FixReportedPx, 861, PRICE > FieldReportedPx;
typedef Field< FixNoCapacities, 862, NUMINGROUP > FieldNoCapacities;
typedef Field< FixOrderCapacityQty, 863, QTY > FieldOrderCapacityQty;
typedef Field< FixNoEvents, 864, NUMINGROUP > FieldNoEvents;
typedef Field< FixEventType, 865, INT > FieldEventType;
typedef Field< FixEventDate, 866, LOCALMKTDATE > FieldEventDate;
typedef Field< FixEventPx, 867, PRICE > FieldEventPx;
typedef Field< FixEventText, 868, STRING > FieldEventText;
typedef Field< FixPctAtRisk, 869, PERCENTAGE > FieldPctAtRisk;
typedef Field< FixNoInstrAttrib, 870, NUMINGROUP > FieldNoInstrAttrib;
typedef Field< FixInstrAttribType, 871, INT > FieldInstrAttribType;
typedef Field< FixInstrAttribValue, 872, STRING > FieldInstrAttribValue;
typedef Field< FixDatedDate, 873, LOCALMKTDATE > FieldDatedDate;
typedef Field< FixInterestAccrualDate, 874, LOCALMKTDATE > FieldInterestAccrualDate;
typedef Field< FixCPProgram, 875, INT > FieldCPProgram;
typedef Field< FixCPRegType, 876, STRING > FieldCPRegType;
typedef Field< FixUnderlyingCPProgram, 877, STRING > FieldUnderlyingCPProgram;
typedef Field< FixUnderlyingCPRegType, 878, STRING > FieldUnderlyingCPRegType;
typedef Field< FixUnderlyingQty, 879, QTY > FieldUnderlyingQty;
typedef Field< FixTrdMatchID, 880, STRING > FieldTrdMatchID;
typedef Field< FixSecondaryTradeReportRefID, 881, STRING > FieldSecondaryTradeReportRefID;
typedef Field< FixUnderlyingDirtyPrice, 882, PRICE > FieldUnderlyingDirtyPrice;
typedef Field< FixUnderlyingEndPrice, 883, PRICE > FieldUnderlyingEndPrice;
typedef Field< FixUnderlyingStartValue, 884, AMT > FieldUnderlyingStartValue;
typedef Field< FixUnderlyingCurrentValue, 885, AMT > FieldUnderlyingCurrentValue;
typedef Field< FixUnderlyingEndValue, 886, AMT > FieldUnderlyingEndValue;
typedef Field< FixNoUnderlyingStips, 887, NUMINGROUP > FieldNoUnderlyingStips;
typedef Field< FixUnderlyingStipType, 888, STRING > FieldUnderlyingStipType;
typedef Field< FixUnderlyingStipValue, 889, STRING > FieldUnderlyingStipValue;
typedef Field< FixMaturityNetMoney, 890, AMT > FieldMaturityNetMoney;
typedef Field< FixMiscFeeBasis, 891, INT > FieldMiscFeeBasis;
typedef Field< FixTotNoAllocs, 892, INT > FieldTotNoAllocs;
typedef Field< FixLastFragment, 893, BOOLEAN > FieldLastFragment;
typedef Field< FixCollReqID, 894, STRING > FieldCollReqID;
typedef Field< FixCollAsgnReason, 895, INT > FieldCollAsgnReason;
typedef Field< FixCollInquiryQualifier, 896, INT > FieldCollInquiryQualifier;
typedef Field< FixNoTrades, 897, NUMINGROUP > FieldNoTrades;
typedef Field< FixMarginRatio, 898, PERCENTAGE > FieldMarginRatio;
typedef Field< FixMarginExcess, 899, AMT > FieldMarginExcess;
typedef Field< FixTotalNetValue, 900, AMT > FieldTotalNetValue;
typedef Field< FixCashOutstanding, 901, AMT > FieldCashOutstanding;
typedef Field< FixCollAsgnID, 902, STRING > FieldCollAsgnID;
typedef Field< FixCollAsgnTransType, 903, INT > FieldCollAsgnTransType;
typedef Field< FixCollRespID, 904, STRING > FieldCollRespID;
typedef Field< FixCollAsgnRespType, 905, INT > FieldCollAsgnRespType;
typedef Field< FixCollAsgnRejectReason, 906, INT > FieldCollAsgnRejectReason;
typedef Field< FixCollAsgnRefID, 907, STRING > FieldCollAsgnRefID;
typedef Field< FixCollRptID, 908, STRING > FieldCollRptID;
typedef Field< FixCollInquiryID, 909, STRING > FieldCollInquiryID;
typedef Field< FixCollStatus, 910, INT > FieldCollStatus;
typedef Field< FixTotNumReports, 911, INT > FieldTotNumReports;
typedef Field< FixLastRptRequested, 912, BOOLEAN > FieldLastRptRequested;
typedef Field< FixAgreementDesc, 913, STRING > FieldAgreementDesc;
typedef Field< FixAgreementID, 914, STRING > FieldAgreementID;
typedef Field< FixAgreementDate, 915, LOCALMKTDATE > FieldAgreementDate;
typedef Field< FixStartDate, 916, LOCALMKTDATE > FieldStartDate;
typedef Field< FixEndDate, 917, LOCALMKTDATE > FieldEndDate;
typedef Field< FixAgreementCurrency, 918, CURRENCY > FieldAgreementCurrency;
typedef Field< FixDeliveryType, 919, INT > FieldDeliveryType;
typedef Field< FixEndAccruedInterestAmt, 920, AMT > FieldEndAccruedInterestAmt;
typedef Field< FixStartCash, 921, AMT > FieldStartCash;
typedef Field< FixEndCash, 922, AMT > FieldEndCash;
typedef Field< FixUserRequestID, 923, STRING > FieldUserRequestID;
typedef Field< FixUserRequestType, 924, INT > FieldUserRequestType;
typedef Field< FixNewPassword, 925, STRING > FieldNewPassword;
typedef Field< FixUserStatus, 926, INT > FieldUserStatus;
typedef Field< FixUserStatusText, 927, STRING > FieldUserStatusText;
typedef Field< FixStatusValue, 928, INT > FieldStatusValue;
typedef Field< FixStatusText, 929, STRING > FieldStatusText;
typedef Field< FixRefCompID, 930, STRING > FieldRefCompID;
typedef Field< FixRefSubID, 931, STRING > FieldRefSubID;
typedef Field< FixNetworkResponseID, 932, STRING > FieldNetworkResponseID;
typedef Field< FixNetworkRequestID, 933, STRING > FieldNetworkRequestID;
typedef Field< FixLastNetworkResponseID, 934, STRING > FieldLastNetworkResponseID;
typedef Field< FixNetworkRequestType, 935, INT > FieldNetworkRequestType;
typedef Field< FixNoCompIDs, 936, NUMINGROUP > FieldNoCompIDs;
typedef Field< FixNetworkStatusResponseType, 937, INT > FieldNetworkStatusResponseType;
typedef Field< FixNoCollInquiryQualifier, 938, NUMINGROUP > FieldNoCollInquiryQualifier;
typedef Field< FixTrdRptStatus, 939, INT > FieldTrdRptStatus;
typedef Field< FixAffirmStatus, 940, INT > FieldAffirmStatus;
typedef Field< FixUnderlyingStrikeCurrency, 941, CURRENCY > FieldUnderlyingStrikeCurrency;
typedef Field< FixLegStrikeCurrency, 942, CURRENCY > FieldLegStrikeCurrency;
typedef Field< FixTimeBracket, 943, STRING > FieldTimeBracket;
typedef Field< FixCollAction, 944, INT > FieldCollAction;
typedef Field< FixCollInquiryStatus, 945, INT > FieldCollInquiryStatus;
typedef Field< FixCollInquiryResult, 946, INT > FieldCollInquiryResult;
typedef Field< FixStrikeCurrency, 947, CURRENCY > FieldStrikeCurrency;
typedef Field< FixNoNested3PartyIDs, 948, NUMINGROUP > FieldNoNested3PartyIDs;
typedef Field< FixNested3PartyID, 949, STRING > FieldNested3PartyID;
typedef Field< FixNested3PartyIDSource, 950, CHAR > FieldNested3PartyIDSource;
typedef Field< FixNested3PartyRole, 951, INT > FieldNested3PartyRole;
typedef Field< FixNoNested3PartySubIDs, 952, NUMINGROUP > FieldNoNested3PartySubIDs;
typedef Field< FixNested3PartySubID, 953, STRING > FieldNested3PartySubID;
typedef Field< FixNested3PartySubIDType, 954, INT > FieldNested3PartySubIDType;
typedef Field< FixLegContractSettlMonth, 955, MONTHYEAR > FieldLegContractSettlMonth;
typedef Field< FixLegInterestAccrualDate, 956, LOCALMKTDATE > FieldLegInterestAccrualDate;

struct AdvSideEnums final: FieldEnumsBase {
   typedef FieldAdvSide::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AdvSideEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType BUY;
   static constexpr ValueType ITEM_BUY = 'B';
   static const ItemType SELL;
   static constexpr ValueType ITEM_SELL = 'S';
   static const ItemType CROSS;
   static constexpr ValueType ITEM_CROSS = 'X';
   static const ItemType TRADE;
   static constexpr ValueType ITEM_TRADE = 'T';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AdvTransTypeEnums final: FieldEnumsBase {
   typedef FieldAdvTransType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AdvTransTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = SOHSTR(N);
   static const ItemType CANCEL;
   static constexpr ValueType ITEM_CANCEL = SOHSTR(C);
   static const ItemType REPLACE;
   static constexpr ValueType ITEM_REPLACE = SOHSTR(R);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CommTypeEnums final: FieldEnumsBase {
   typedef FieldCommType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CommTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PER_UNIT;
   static constexpr ValueType ITEM_PER_UNIT = '1';
   static const ItemType PERCENTAGE;
   static constexpr ValueType ITEM_PERCENTAGE = '2';
   static const ItemType ABSOLUTE;
   static constexpr ValueType ITEM_ABSOLUTE = '3';
   static const ItemType _4;
   static constexpr ValueType ITEM__4 = '4';
   static const ItemType _5;
   static constexpr ValueType ITEM__5 = '5';
   static const ItemType POINTS_PER_BOND_OR_CONTRACT_SUPPLY_CONTRACTMULTIPLIER;
   static constexpr ValueType ITEM_POINTS_PER_BOND_OR_CONTRACT_SUPPLY_CONTRACTMULTIPLIER = '6';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ExecInstEnums final: FieldEnumsBase {
   typedef FieldExecInst::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ExecInstEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NOT_HELD;
   static constexpr ValueType ITEM_NOT_HELD = SOHSTR(1);
   static const ItemType WORK;
   static constexpr ValueType ITEM_WORK = SOHSTR(2);
   static const ItemType GO_ALONG;
   static constexpr ValueType ITEM_GO_ALONG = SOHSTR(3);
   static const ItemType OVER_THE_DAY;
   static constexpr ValueType ITEM_OVER_THE_DAY = SOHSTR(4);
   static const ItemType HELD;
   static constexpr ValueType ITEM_HELD = SOHSTR(5);
   static const ItemType PARTICIPATE_DONT_INITIATE;
   static constexpr ValueType ITEM_PARTICIPATE_DONT_INITIATE = SOHSTR(6);
   static const ItemType STRICT_SCALE;
   static constexpr ValueType ITEM_STRICT_SCALE = SOHSTR(7);
   static const ItemType TRY_TO_SCALE;
   static constexpr ValueType ITEM_TRY_TO_SCALE = SOHSTR(8);
   static const ItemType STAY_ON_BIDSIDE;
   static constexpr ValueType ITEM_STAY_ON_BIDSIDE = SOHSTR(9);
   static const ItemType STAY_ON_OFFERSIDE;
   static constexpr ValueType ITEM_STAY_ON_OFFERSIDE = SOHSTR(0);
   static const ItemType NO_CROSS;
   static constexpr ValueType ITEM_NO_CROSS = SOHSTR(A);
   static const ItemType OK_TO_CROSS;
   static constexpr ValueType ITEM_OK_TO_CROSS = SOHSTR(B);
   static const ItemType CALL_FIRST;
   static constexpr ValueType ITEM_CALL_FIRST = SOHSTR(C);
   static const ItemType PERCENT_OF_VOLUME;
   static constexpr ValueType ITEM_PERCENT_OF_VOLUME = SOHSTR(D);
   static const ItemType DO_NOT_INCREASE;
   static constexpr ValueType ITEM_DO_NOT_INCREASE = SOHSTR(E);
   static const ItemType DO_NOT_REDUCE;
   static constexpr ValueType ITEM_DO_NOT_REDUCE = SOHSTR(F);
   static const ItemType ALL_OR_NONE;
   static constexpr ValueType ITEM_ALL_OR_NONE = SOHSTR(G);
   static const ItemType REINSTATE_ON_SYSTEM_FAILURE;
   static constexpr ValueType ITEM_REINSTATE_ON_SYSTEM_FAILURE = SOHSTR(H);
   static const ItemType INSTITUTIONS_ONLY;
   static constexpr ValueType ITEM_INSTITUTIONS_ONLY = SOHSTR(I);
   static const ItemType REINSTATE_ON_TRADING_HALT;
   static constexpr ValueType ITEM_REINSTATE_ON_TRADING_HALT = SOHSTR(J);
   static const ItemType CANCEL_ON_TRADING_HALT;
   static constexpr ValueType ITEM_CANCEL_ON_TRADING_HALT = SOHSTR(K);
   static const ItemType LAST_PEG;
   static constexpr ValueType ITEM_LAST_PEG = SOHSTR(L);
   static const ItemType MID_PRICE_PEG;
   static constexpr ValueType ITEM_MID_PRICE_PEG = SOHSTR(M);
   static const ItemType NON_NEGOTIABLE;
   static constexpr ValueType ITEM_NON_NEGOTIABLE = SOHSTR(N);
   static const ItemType OPENING_PEG;
   static constexpr ValueType ITEM_OPENING_PEG = SOHSTR(O);
   static const ItemType MARKET_PEG;
   static constexpr ValueType ITEM_MARKET_PEG = SOHSTR(P);
   static const ItemType CANCEL_ON_SYSTEM_FAILURE;
   static constexpr ValueType ITEM_CANCEL_ON_SYSTEM_FAILURE = SOHSTR(Q);
   static const ItemType PRIMARY_PEG;
   static constexpr ValueType ITEM_PRIMARY_PEG = SOHSTR(R);
   static const ItemType SUSPEND;
   static constexpr ValueType ITEM_SUSPEND = SOHSTR(S);
   static const ItemType CUSTOMER_DISPLAY_INSTRUCTION;
   static constexpr ValueType ITEM_CUSTOMER_DISPLAY_INSTRUCTION = SOHSTR(U);
   static const ItemType NETTING;
   static constexpr ValueType ITEM_NETTING = SOHSTR(V);
   static const ItemType PEG_TO_VWAP;
   static constexpr ValueType ITEM_PEG_TO_VWAP = SOHSTR(W);
   static const ItemType TRADE_ALONG;
   static constexpr ValueType ITEM_TRADE_ALONG = SOHSTR(X);
   static const ItemType TRY_TO_STOP;
   static constexpr ValueType ITEM_TRY_TO_STOP = SOHSTR(Y);
   static const ItemType CANCEL_IF_NOT_BEST;
   static constexpr ValueType ITEM_CANCEL_IF_NOT_BEST = SOHSTR(Z);
   static const ItemType TRAILING_STOP_PEG;
   static constexpr ValueType ITEM_TRAILING_STOP_PEG = SOHSTR(a);
   static const ItemType STRICT_LIMIT;
   static constexpr ValueType ITEM_STRICT_LIMIT = SOHSTR(b);
   static const ItemType IGNORE_PRICE_VALIDITY_CHECKS;
   static constexpr ValueType ITEM_IGNORE_PRICE_VALIDITY_CHECKS = SOHSTR(c);
   static const ItemType PEG_TO_LIMIT_PRICE;
   static constexpr ValueType ITEM_PEG_TO_LIMIT_PRICE = SOHSTR(d);
   static const ItemType WORK_TO_TARGET_STRATEGY;
   static constexpr ValueType ITEM_WORK_TO_TARGET_STRATEGY = SOHSTR(e);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct HandlInstEnums final: FieldEnumsBase {
   typedef FieldHandlInst::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const HandlInstEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION;
   static constexpr ValueType ITEM_AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION = '1';
   static const ItemType AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK;
   static constexpr ValueType ITEM_AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK = '2';
   static const ItemType MANUAL_ORDER_BEST_EXECUTION;
   static constexpr ValueType ITEM_MANUAL_ORDER_BEST_EXECUTION = '3';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SecurityIDSourceEnums final: FieldEnumsBase {
   typedef FieldSecurityIDSource::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SecurityIDSourceEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CUSIP;
   static constexpr ValueType ITEM_CUSIP = SOHSTR(1);
   static const ItemType SEDOL;
   static constexpr ValueType ITEM_SEDOL = SOHSTR(2);
   static const ItemType QUIK;
   static constexpr ValueType ITEM_QUIK = SOHSTR(3);
   static const ItemType ISIN_NUMBER;
   static constexpr ValueType ITEM_ISIN_NUMBER = SOHSTR(4);
   static const ItemType RIC_CODE;
   static constexpr ValueType ITEM_RIC_CODE = SOHSTR(5);
   static const ItemType ISO_CURRENCY_CODE;
   static constexpr ValueType ITEM_ISO_CURRENCY_CODE = SOHSTR(6);
   static const ItemType ISO_COUNTRY_CODE;
   static constexpr ValueType ITEM_ISO_COUNTRY_CODE = SOHSTR(7);
   static const ItemType EXCHANGE_SYMBOL;
   static constexpr ValueType ITEM_EXCHANGE_SYMBOL = SOHSTR(8);
   static const ItemType CONSOLIDATED_TAPE_ASSOCIATION;
   static constexpr ValueType ITEM_CONSOLIDATED_TAPE_ASSOCIATION = SOHSTR(9);
   static const ItemType BLOOMBERG_SYMBOL;
   static constexpr ValueType ITEM_BLOOMBERG_SYMBOL = SOHSTR(A);
   static const ItemType WERTPAPIER;
   static constexpr ValueType ITEM_WERTPAPIER = SOHSTR(B);
   static const ItemType DUTCH;
   static constexpr ValueType ITEM_DUTCH = SOHSTR(C);
   static const ItemType VALOREN;
   static constexpr ValueType ITEM_VALOREN = SOHSTR(D);
   static const ItemType SICOVAM;
   static constexpr ValueType ITEM_SICOVAM = SOHSTR(E);
   static const ItemType BELGIAN;
   static constexpr ValueType ITEM_BELGIAN = SOHSTR(F);
   static const ItemType COMMON;
   static constexpr ValueType ITEM_COMMON = SOHSTR(G);
   static const ItemType CLEARING_HOUSE;
   static constexpr ValueType ITEM_CLEARING_HOUSE = SOHSTR(H);
   static const ItemType ISDA_FPML_PRODUCT_SPECIFICATION;
   static constexpr ValueType ITEM_ISDA_FPML_PRODUCT_SPECIFICATION = SOHSTR(I);
   static const ItemType OPTIONS_PRICE_REPORTING_AUTHORITY;
   static constexpr ValueType ITEM_OPTIONS_PRICE_REPORTING_AUTHORITY = SOHSTR(J);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct IOIQltyIndEnums final: FieldEnumsBase {
   typedef FieldIOIQltyInd::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const IOIQltyIndEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType LOW;
   static constexpr ValueType ITEM_LOW = 'L';
   static const ItemType MEDIUM;
   static constexpr ValueType ITEM_MEDIUM = 'M';
   static const ItemType HIGH;
   static constexpr ValueType ITEM_HIGH = 'H';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct IOIQtyEnums final: FieldEnumsBase {
   typedef FieldIOIQty::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const IOIQtyEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SMALL;
   static constexpr ValueType ITEM_SMALL = SOHSTR(S);
   static const ItemType MEDIUM;
   static constexpr ValueType ITEM_MEDIUM = SOHSTR(M);
   static const ItemType LARGE;
   static constexpr ValueType ITEM_LARGE = SOHSTR(L);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct IOITransTypeEnums final: FieldEnumsBase {
   typedef FieldIOITransType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const IOITransTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = 'N';
   static const ItemType CANCEL;
   static constexpr ValueType ITEM_CANCEL = 'C';
   static const ItemType REPLACE;
   static constexpr ValueType ITEM_REPLACE = 'R';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct LastCapacityEnums final: FieldEnumsBase {
   typedef FieldLastCapacity::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const LastCapacityEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType AGENT;
   static constexpr ValueType ITEM_AGENT = '1';
   static const ItemType CROSS_AS_AGENT;
   static constexpr ValueType ITEM_CROSS_AS_AGENT = '2';
   static const ItemType CROSS_AS_PRINCIPAL;
   static constexpr ValueType ITEM_CROSS_AS_PRINCIPAL = '3';
   static const ItemType PRINCIPAL;
   static constexpr ValueType ITEM_PRINCIPAL = '4';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MsgTypeEnums final: FieldEnumsBase {
   typedef FieldMsgType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MsgTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType HEARTBEAT;
   static constexpr ValueType ITEM_HEARTBEAT = SOHSTR(0);
   static const ItemType TEST_REQUEST;
   static constexpr ValueType ITEM_TEST_REQUEST = SOHSTR(1);
   static const ItemType RESEND_REQUEST;
   static constexpr ValueType ITEM_RESEND_REQUEST = SOHSTR(2);
   static const ItemType REJECT;
   static constexpr ValueType ITEM_REJECT = SOHSTR(3);
   static const ItemType SEQUENCE_RESET;
   static constexpr ValueType ITEM_SEQUENCE_RESET = SOHSTR(4);
   static const ItemType LOGOUT;
   static constexpr ValueType ITEM_LOGOUT = SOHSTR(5);
   static const ItemType INDICATION_OF_INTEREST;
   static constexpr ValueType ITEM_INDICATION_OF_INTEREST = SOHSTR(6);
   static const ItemType ADVERTISEMENT;
   static constexpr ValueType ITEM_ADVERTISEMENT = SOHSTR(7);
   static const ItemType EXECUTION_REPORT;
   static constexpr ValueType ITEM_EXECUTION_REPORT = SOHSTR(8);
   static const ItemType ORDER_CANCEL_REJECT;
   static constexpr ValueType ITEM_ORDER_CANCEL_REJECT = SOHSTR(9);
   static const ItemType LOGON;
   static constexpr ValueType ITEM_LOGON = SOHSTR(A);
   static const ItemType NEWS;
   static constexpr ValueType ITEM_NEWS = SOHSTR(B);
   static const ItemType EMAIL;
   static constexpr ValueType ITEM_EMAIL = SOHSTR(C);
   static const ItemType ORDER_SINGLE;
   static constexpr ValueType ITEM_ORDER_SINGLE = SOHSTR(D);
   static const ItemType ORDER_LIST;
   static constexpr ValueType ITEM_ORDER_LIST = SOHSTR(E);
   static const ItemType ORDER_CANCEL_REQUEST;
   static constexpr ValueType ITEM_ORDER_CANCEL_REQUEST = SOHSTR(F);
   static const ItemType ORDER_CANCEL_REPLACE_REQUEST;
   static constexpr ValueType ITEM_ORDER_CANCEL_REPLACE_REQUEST = SOHSTR(G);
   static const ItemType ORDER_STATUS_REQUEST;
   static constexpr ValueType ITEM_ORDER_STATUS_REQUEST = SOHSTR(H);
   static const ItemType ALLOCATION_INSTRUCTION;
   static constexpr ValueType ITEM_ALLOCATION_INSTRUCTION = SOHSTR(J);
   static const ItemType LIST_CANCEL_REQUEST;
   static constexpr ValueType ITEM_LIST_CANCEL_REQUEST = SOHSTR(K);
   static const ItemType LIST_EXECUTE;
   static constexpr ValueType ITEM_LIST_EXECUTE = SOHSTR(L);
   static const ItemType LIST_STATUS_REQUEST;
   static constexpr ValueType ITEM_LIST_STATUS_REQUEST = SOHSTR(M);
   static const ItemType LIST_STATUS;
   static constexpr ValueType ITEM_LIST_STATUS = SOHSTR(N);
   static const ItemType ALLOCATION_INSTRUCTION_ACK;
   static constexpr ValueType ITEM_ALLOCATION_INSTRUCTION_ACK = SOHSTR(P);
   static const ItemType DONT_KNOW_TRADE;
   static constexpr ValueType ITEM_DONT_KNOW_TRADE = SOHSTR(Q);
   static const ItemType QUOTE_REQUEST;
   static constexpr ValueType ITEM_QUOTE_REQUEST = SOHSTR(R);
   static const ItemType QUOTE;
   static constexpr ValueType ITEM_QUOTE = SOHSTR(S);
   static const ItemType SETTLEMENT_INSTRUCTIONS;
   static constexpr ValueType ITEM_SETTLEMENT_INSTRUCTIONS = SOHSTR(T);
   static const ItemType MARKET_DATA_REQUEST;
   static constexpr ValueType ITEM_MARKET_DATA_REQUEST = SOHSTR(V);
   static const ItemType MARKET_DATA_SNAPSHOT_FULL_REFRESH;
   static constexpr ValueType ITEM_MARKET_DATA_SNAPSHOT_FULL_REFRESH = SOHSTR(W);
   static const ItemType MARKET_DATA_INCREMENTAL_REFRESH;
   static constexpr ValueType ITEM_MARKET_DATA_INCREMENTAL_REFRESH = SOHSTR(X);
   static const ItemType MARKET_DATA_REQUEST_REJECT;
   static constexpr ValueType ITEM_MARKET_DATA_REQUEST_REJECT = SOHSTR(Y);
   static const ItemType QUOTE_CANCEL;
   static constexpr ValueType ITEM_QUOTE_CANCEL = SOHSTR(Z);
   static const ItemType QUOTE_STATUS_REQUEST;
   static constexpr ValueType ITEM_QUOTE_STATUS_REQUEST = SOHSTR(a);
   static const ItemType MASS_QUOTE_ACKNOWLEDGEMENT;
   static constexpr ValueType ITEM_MASS_QUOTE_ACKNOWLEDGEMENT = SOHSTR(b);
   static const ItemType SECURITY_DEFINITION_REQUEST;
   static constexpr ValueType ITEM_SECURITY_DEFINITION_REQUEST = SOHSTR(c);
   static const ItemType SECURITY_DEFINITION;
   static constexpr ValueType ITEM_SECURITY_DEFINITION = SOHSTR(d);
   static const ItemType SECURITY_STATUS_REQUEST;
   static constexpr ValueType ITEM_SECURITY_STATUS_REQUEST = SOHSTR(e);
   static const ItemType SECURITY_STATUS;
   static constexpr ValueType ITEM_SECURITY_STATUS = SOHSTR(f);
   static const ItemType TRADING_SESSION_STATUS_REQUEST;
   static constexpr ValueType ITEM_TRADING_SESSION_STATUS_REQUEST = SOHSTR(g);
   static const ItemType TRADING_SESSION_STATUS;
   static constexpr ValueType ITEM_TRADING_SESSION_STATUS = SOHSTR(h);
   static const ItemType MASS_QUOTE;
   static constexpr ValueType ITEM_MASS_QUOTE = SOHSTR(i);
   static const ItemType BUSINESS_MESSAGE_REJECT;
   static constexpr ValueType ITEM_BUSINESS_MESSAGE_REJECT = SOHSTR(j);
   static const ItemType BID_REQUEST;
   static constexpr ValueType ITEM_BID_REQUEST = SOHSTR(k);
   static const ItemType BID_RESPONSE;
   static constexpr ValueType ITEM_BID_RESPONSE = SOHSTR(l);
   static const ItemType LIST_STRIKE_PRICE;
   static constexpr ValueType ITEM_LIST_STRIKE_PRICE = SOHSTR(m);
   static const ItemType XML_MESSAGE;
   static constexpr ValueType ITEM_XML_MESSAGE = SOHSTR(n);
   static const ItemType REGISTRATION_INSTRUCTIONS;
   static constexpr ValueType ITEM_REGISTRATION_INSTRUCTIONS = SOHSTR(o);
   static const ItemType REGISTRATION_INSTRUCTIONS_RESPONSE;
   static constexpr ValueType ITEM_REGISTRATION_INSTRUCTIONS_RESPONSE = SOHSTR(p);
   static const ItemType ORDER_MASS_CANCEL_REQUEST;
   static constexpr ValueType ITEM_ORDER_MASS_CANCEL_REQUEST = SOHSTR(q);
   static const ItemType ORDER_MASS_CANCEL_REPORT;
   static constexpr ValueType ITEM_ORDER_MASS_CANCEL_REPORT = SOHSTR(r);
   static const ItemType NEW_ORDER_s;
   static constexpr ValueType ITEM_NEW_ORDER_s = SOHSTR(s);
   static const ItemType CROSS_ORDER_CANCEL_REPLACE_REQUEST;
   static constexpr ValueType ITEM_CROSS_ORDER_CANCEL_REPLACE_REQUEST = SOHSTR(t);
   static const ItemType CROSS_ORDER_CANCEL_REQUEST;
   static constexpr ValueType ITEM_CROSS_ORDER_CANCEL_REQUEST = SOHSTR(u);
   static const ItemType SECURITY_TYPE_REQUEST;
   static constexpr ValueType ITEM_SECURITY_TYPE_REQUEST = SOHSTR(v);
   static const ItemType SECURITY_TYPES;
   static constexpr ValueType ITEM_SECURITY_TYPES = SOHSTR(w);
   static const ItemType SECURITY_LIST_REQUEST;
   static constexpr ValueType ITEM_SECURITY_LIST_REQUEST = SOHSTR(x);
   static const ItemType SECURITY_LIST;
   static constexpr ValueType ITEM_SECURITY_LIST = SOHSTR(y);
   static const ItemType DERIVATIVE_SECURITY_LIST_REQUEST;
   static constexpr ValueType ITEM_DERIVATIVE_SECURITY_LIST_REQUEST = SOHSTR(z);
   static const ItemType DERIVATIVE_SECURITY_LIST;
   static constexpr ValueType ITEM_DERIVATIVE_SECURITY_LIST = SOHSTR(AA);
   static const ItemType NEW_ORDER_AB;
   static constexpr ValueType ITEM_NEW_ORDER_AB = SOHSTR(AB);
   static const ItemType MULTILEG_ORDER_CANCEL_REPLACE;
   static constexpr ValueType ITEM_MULTILEG_ORDER_CANCEL_REPLACE = SOHSTR(AC);
   static const ItemType TRADE_CAPTURE_REPORT_REQUEST;
   static constexpr ValueType ITEM_TRADE_CAPTURE_REPORT_REQUEST = SOHSTR(AD);
   static const ItemType TRADE_CAPTURE_REPORT;
   static constexpr ValueType ITEM_TRADE_CAPTURE_REPORT = SOHSTR(AE);
   static const ItemType ORDER_MASS_STATUS_REQUEST;
   static constexpr ValueType ITEM_ORDER_MASS_STATUS_REQUEST = SOHSTR(AF);
   static const ItemType QUOTE_REQUEST_REJECT;
   static constexpr ValueType ITEM_QUOTE_REQUEST_REJECT = SOHSTR(AG);
   static const ItemType RFQ_REQUEST;
   static constexpr ValueType ITEM_RFQ_REQUEST = SOHSTR(AH);
   static const ItemType QUOTE_STATUS_REPORT;
   static constexpr ValueType ITEM_QUOTE_STATUS_REPORT = SOHSTR(AI);
   static const ItemType QUOTE_RESPONSE;
   static constexpr ValueType ITEM_QUOTE_RESPONSE = SOHSTR(AJ);
   static const ItemType CONFIRMATION;
   static constexpr ValueType ITEM_CONFIRMATION = SOHSTR(AK);
   static const ItemType POSITION_MAINTENANCE_REQUEST;
   static constexpr ValueType ITEM_POSITION_MAINTENANCE_REQUEST = SOHSTR(AL);
   static const ItemType POSITION_MAINTENANCE_REPORT;
   static constexpr ValueType ITEM_POSITION_MAINTENANCE_REPORT = SOHSTR(AM);
   static const ItemType REQUEST_FOR_POSITIONS;
   static constexpr ValueType ITEM_REQUEST_FOR_POSITIONS = SOHSTR(AN);
   static const ItemType REQUEST_FOR_POSITIONS_ACK;
   static constexpr ValueType ITEM_REQUEST_FOR_POSITIONS_ACK = SOHSTR(AO);
   static const ItemType POSITION_REPORT;
   static constexpr ValueType ITEM_POSITION_REPORT = SOHSTR(AP);
   static const ItemType TRADE_CAPTURE_REPORT_REQUEST_ACK;
   static constexpr ValueType ITEM_TRADE_CAPTURE_REPORT_REQUEST_ACK = SOHSTR(AQ);
   static const ItemType TRADE_CAPTURE_REPORT_ACK;
   static constexpr ValueType ITEM_TRADE_CAPTURE_REPORT_ACK = SOHSTR(AR);
   static const ItemType ALLOCATION_REPORT;
   static constexpr ValueType ITEM_ALLOCATION_REPORT = SOHSTR(AS);
   static const ItemType ALLOCATION_REPORT_ACK;
   static constexpr ValueType ITEM_ALLOCATION_REPORT_ACK = SOHSTR(AT);
   static const ItemType CONFIRMATION_ACK;
   static constexpr ValueType ITEM_CONFIRMATION_ACK = SOHSTR(AU);
   static const ItemType SETTLEMENT_INSTRUCTION_REQUEST;
   static constexpr ValueType ITEM_SETTLEMENT_INSTRUCTION_REQUEST = SOHSTR(AV);
   static const ItemType ASSIGNMENT_REPORT;
   static constexpr ValueType ITEM_ASSIGNMENT_REPORT = SOHSTR(AW);
   static const ItemType COLLATERAL_REQUEST;
   static constexpr ValueType ITEM_COLLATERAL_REQUEST = SOHSTR(AX);
   static const ItemType COLLATERAL_ASSIGNMENT;
   static constexpr ValueType ITEM_COLLATERAL_ASSIGNMENT = SOHSTR(AY);
   static const ItemType COLLATERAL_RESPONSE;
   static constexpr ValueType ITEM_COLLATERAL_RESPONSE = SOHSTR(AZ);
   static const ItemType COLLATERAL_REPORT;
   static constexpr ValueType ITEM_COLLATERAL_REPORT = SOHSTR(BA);
   static const ItemType COLLATERAL_INQUIRY;
   static constexpr ValueType ITEM_COLLATERAL_INQUIRY = SOHSTR(BB);
   static const ItemType NETWORK_BC;
   static constexpr ValueType ITEM_NETWORK_BC = SOHSTR(BC);
   static const ItemType NETWORK_BD;
   static constexpr ValueType ITEM_NETWORK_BD = SOHSTR(BD);
   static const ItemType USER_REQUEST;
   static constexpr ValueType ITEM_USER_REQUEST = SOHSTR(BE);
   static const ItemType USER_RESPONSE;
   static constexpr ValueType ITEM_USER_RESPONSE = SOHSTR(BF);
   static const ItemType COLLATERAL_INQUIRY_ACK;
   static constexpr ValueType ITEM_COLLATERAL_INQUIRY_ACK = SOHSTR(BG);
   static const ItemType CONFIRMATION_REQUEST;
   static constexpr ValueType ITEM_CONFIRMATION_REQUEST = SOHSTR(BH);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct OrdStatusEnums final: FieldEnumsBase {
   typedef FieldOrdStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const OrdStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = '0';
   static const ItemType PARTIALLY_FILLED;
   static constexpr ValueType ITEM_PARTIALLY_FILLED = '1';
   static const ItemType FILLED;
   static constexpr ValueType ITEM_FILLED = '2';
   static const ItemType DONE_FOR_DAY;
   static constexpr ValueType ITEM_DONE_FOR_DAY = '3';
   static const ItemType CANCELED;
   static constexpr ValueType ITEM_CANCELED = '4';
   static const ItemType PENDING_CANCEL;
   static constexpr ValueType ITEM_PENDING_CANCEL = '6';
   static const ItemType STOPPED;
   static constexpr ValueType ITEM_STOPPED = '7';
   static const ItemType REJECTED;
   static constexpr ValueType ITEM_REJECTED = '8';
   static const ItemType SUSPENDED;
   static constexpr ValueType ITEM_SUSPENDED = '9';
   static const ItemType PENDING_NEW;
   static constexpr ValueType ITEM_PENDING_NEW = 'A';
   static const ItemType CALCULATED;
   static constexpr ValueType ITEM_CALCULATED = 'B';
   static const ItemType EXPIRED;
   static constexpr ValueType ITEM_EXPIRED = 'C';
   static const ItemType ACCEPTED_FOR_BIDDING;
   static constexpr ValueType ITEM_ACCEPTED_FOR_BIDDING = 'D';
   static const ItemType PENDING_REPLACE;
   static constexpr ValueType ITEM_PENDING_REPLACE = 'E';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct OrdTypeEnums final: FieldEnumsBase {
   typedef FieldOrdType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const OrdTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType MARKET;
   static constexpr ValueType ITEM_MARKET = '1';
   static const ItemType LIMIT;
   static constexpr ValueType ITEM_LIMIT = '2';
   static const ItemType STOP;
   static constexpr ValueType ITEM_STOP = '3';
   static const ItemType STOP_LIMIT;
   static constexpr ValueType ITEM_STOP_LIMIT = '4';
   static const ItemType WITH_OR_WITHOUT;
   static constexpr ValueType ITEM_WITH_OR_WITHOUT = '6';
   static const ItemType LIMIT_OR_BETTER;
   static constexpr ValueType ITEM_LIMIT_OR_BETTER = '7';
   static const ItemType LIMIT_WITH_OR_WITHOUT;
   static constexpr ValueType ITEM_LIMIT_WITH_OR_WITHOUT = '8';
   static const ItemType ON_BASIS;
   static constexpr ValueType ITEM_ON_BASIS = '9';
   static const ItemType PREVIOUSLY_QUOTED;
   static constexpr ValueType ITEM_PREVIOUSLY_QUOTED = 'D';
   static const ItemType PREVIOUSLY_INDICATED;
   static constexpr ValueType ITEM_PREVIOUSLY_INDICATED = 'E';
   static const ItemType FOREX;
   static constexpr ValueType ITEM_FOREX = 'G';
   static const ItemType FUNARI;
   static constexpr ValueType ITEM_FUNARI = 'I';
   static const ItemType MARKET_IF_TOUCHED;
   static constexpr ValueType ITEM_MARKET_IF_TOUCHED = 'J';
   static const ItemType MARKET_WITH_LEFTOVER_AS_LIMIT;
   static constexpr ValueType ITEM_MARKET_WITH_LEFTOVER_AS_LIMIT = 'K';
   static const ItemType PREVIOUS_FUND_VALUATION_POINT;
   static constexpr ValueType ITEM_PREVIOUS_FUND_VALUATION_POINT = 'L';
   static const ItemType NEXT_FUND_VALUATION_POINT;
   static constexpr ValueType ITEM_NEXT_FUND_VALUATION_POINT = 'M';
   static const ItemType PEGGED;
   static constexpr ValueType ITEM_PEGGED = 'P';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PossDupFlagEnums final: FieldEnumsBase {
   typedef FieldPossDupFlag::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PossDupFlagEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SideEnums final: FieldEnumsBase {
   typedef FieldSide::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SideEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType BUY;
   static constexpr ValueType ITEM_BUY = '1';
   static const ItemType SELL;
   static constexpr ValueType ITEM_SELL = '2';
   static const ItemType BUY_MINUS;
   static constexpr ValueType ITEM_BUY_MINUS = '3';
   static const ItemType SELL_PLUS;
   static constexpr ValueType ITEM_SELL_PLUS = '4';
   static const ItemType SELL_SHORT;
   static constexpr ValueType ITEM_SELL_SHORT = '5';
   static const ItemType SELL_SHORT_EXEMPT;
   static constexpr ValueType ITEM_SELL_SHORT_EXEMPT = '6';
   static const ItemType UNDISCLOSED;
   static constexpr ValueType ITEM_UNDISCLOSED = '7';
   static const ItemType CROSS;
   static constexpr ValueType ITEM_CROSS = '8';
   static const ItemType CROSS_SHORT;
   static constexpr ValueType ITEM_CROSS_SHORT = '9';
   static const ItemType CROSS_SHORT_EXEMPT;
   static constexpr ValueType ITEM_CROSS_SHORT_EXEMPT = 'A';
   static const ItemType AS_DEFINED;
   static constexpr ValueType ITEM_AS_DEFINED = 'B';
   static const ItemType OPPOSITE;
   static constexpr ValueType ITEM_OPPOSITE = 'C';
   static const ItemType SUBSCRIBE;
   static constexpr ValueType ITEM_SUBSCRIBE = 'D';
   static const ItemType REDEEM;
   static constexpr ValueType ITEM_REDEEM = 'E';
   static const ItemType LEND;
   static constexpr ValueType ITEM_LEND = 'F';
   static const ItemType BORROW;
   static constexpr ValueType ITEM_BORROW = 'G';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TimeInForceEnums final: FieldEnumsBase {
   typedef FieldTimeInForce::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TimeInForceEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType DAY;
   static constexpr ValueType ITEM_DAY = '0';
   static const ItemType GOOD_TILL_CANCEL;
   static constexpr ValueType ITEM_GOOD_TILL_CANCEL = '1';
   static const ItemType AT_THE_OPENING;
   static constexpr ValueType ITEM_AT_THE_OPENING = '2';
   static const ItemType IMMEDIATE_OR_CANCEL;
   static constexpr ValueType ITEM_IMMEDIATE_OR_CANCEL = '3';
   static const ItemType FILL_OR_KILL;
   static constexpr ValueType ITEM_FILL_OR_KILL = '4';
   static const ItemType GOOD_TILL_CROSSING;
   static constexpr ValueType ITEM_GOOD_TILL_CROSSING = '5';
   static const ItemType GOOD_TILL_DATE;
   static constexpr ValueType ITEM_GOOD_TILL_DATE = '6';
   static const ItemType AT_THE_CLOSE;
   static constexpr ValueType ITEM_AT_THE_CLOSE = '7';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct UrgencyEnums final: FieldEnumsBase {
   typedef FieldUrgency::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const UrgencyEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NORMAL;
   static constexpr ValueType ITEM_NORMAL = '0';
   static const ItemType FLASH;
   static constexpr ValueType ITEM_FLASH = '1';
   static const ItemType BACKGROUND;
   static constexpr ValueType ITEM_BACKGROUND = '2';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SettlTypeEnums final: FieldEnumsBase {
   typedef FieldSettlType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SettlTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType REGULAR;
   static constexpr ValueType ITEM_REGULAR = '0';
   static const ItemType CASH;
   static constexpr ValueType ITEM_CASH = '1';
   static const ItemType NEXT_DAY;
   static constexpr ValueType ITEM_NEXT_DAY = '2';
   static const ItemType T_PLUS_2;
   static constexpr ValueType ITEM_T_PLUS_2 = '3';
   static const ItemType T_PLUS_3;
   static constexpr ValueType ITEM_T_PLUS_3 = '4';
   static const ItemType T_PLUS_4;
   static constexpr ValueType ITEM_T_PLUS_4 = '5';
   static const ItemType FUTURE;
   static constexpr ValueType ITEM_FUTURE = '6';
   static const ItemType WHEN_AND_IF_ISSUED;
   static constexpr ValueType ITEM_WHEN_AND_IF_ISSUED = '7';
   static const ItemType SELLERS_OPTION;
   static constexpr ValueType ITEM_SELLERS_OPTION = '8';
   static const ItemType T_PLUS_5;
   static constexpr ValueType ITEM_T_PLUS_5 = '9';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AllocTransTypeEnums final: FieldEnumsBase {
   typedef FieldAllocTransType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AllocTransTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = '0';
   static const ItemType REPLACE;
   static constexpr ValueType ITEM_REPLACE = '1';
   static const ItemType CANCEL;
   static constexpr ValueType ITEM_CANCEL = '2';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PositionEffectEnums final: FieldEnumsBase {
   typedef FieldPositionEffect::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PositionEffectEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType OPEN;
   static constexpr ValueType ITEM_OPEN = 'O';
   static const ItemType CLOSE;
   static constexpr ValueType ITEM_CLOSE = 'C';
   static const ItemType ROLLED;
   static constexpr ValueType ITEM_ROLLED = 'R';
   static const ItemType FIFO;
   static constexpr ValueType ITEM_FIFO = 'F';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ProcessCodeEnums final: FieldEnumsBase {
   typedef FieldProcessCode::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ProcessCodeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType REGULAR;
   static constexpr ValueType ITEM_REGULAR = '0';
   static const ItemType SOFT_DOLLAR;
   static constexpr ValueType ITEM_SOFT_DOLLAR = '1';
   static const ItemType STEP_IN;
   static constexpr ValueType ITEM_STEP_IN = '2';
   static const ItemType STEP_OUT;
   static constexpr ValueType ITEM_STEP_OUT = '3';
   static const ItemType SOFT_DOLLAR_STEP_IN;
   static constexpr ValueType ITEM_SOFT_DOLLAR_STEP_IN = '4';
   static const ItemType SOFT_DOLLAR_STEP_OUT;
   static constexpr ValueType ITEM_SOFT_DOLLAR_STEP_OUT = '5';
   static const ItemType PLAN_SPONSOR;
   static constexpr ValueType ITEM_PLAN_SPONSOR = '6';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AllocStatusEnums final: FieldEnumsBase {
   typedef FieldAllocStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AllocStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ACCEPTED;
   static constexpr ValueType ITEM_ACCEPTED = 0;
   static const ItemType BLOCK_LEVEL_REJECT;
   static constexpr ValueType ITEM_BLOCK_LEVEL_REJECT = 1;
   static const ItemType ACCOUNT_LEVEL_REJECT;
   static constexpr ValueType ITEM_ACCOUNT_LEVEL_REJECT = 2;
   static const ItemType RECEIVED;
   static constexpr ValueType ITEM_RECEIVED = 3;
   static const ItemType INCOMPLETE;
   static constexpr ValueType ITEM_INCOMPLETE = 4;
   static const ItemType REJECTED_BY_INTERMEDIARY;
   static constexpr ValueType ITEM_REJECTED_BY_INTERMEDIARY = 5;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AllocRejCodeEnums final: FieldEnumsBase {
   typedef FieldAllocRejCode::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AllocRejCodeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType UNKNOWN_ACCOUNT;
   static constexpr ValueType ITEM_UNKNOWN_ACCOUNT = 0;
   static const ItemType INCORRECT_QUANTITY;
   static constexpr ValueType ITEM_INCORRECT_QUANTITY = 1;
   static const ItemType INCORRECT_AVERAGE_PRICE;
   static constexpr ValueType ITEM_INCORRECT_AVERAGE_PRICE = 2;
   static const ItemType UNKNOWN_EXECUTING_BROKER_MNEMONIC;
   static constexpr ValueType ITEM_UNKNOWN_EXECUTING_BROKER_MNEMONIC = 3;
   static const ItemType COMMISSION_DIFFERENCE;
   static constexpr ValueType ITEM_COMMISSION_DIFFERENCE = 4;
   static const ItemType UNKNOWN_ORDERID;
   static constexpr ValueType ITEM_UNKNOWN_ORDERID = 5;
   static const ItemType UNKNOWN_LISTID;
   static constexpr ValueType ITEM_UNKNOWN_LISTID = 6;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 7;
   static const ItemType INCORRECT_ALLOCATED_QUANTITY;
   static constexpr ValueType ITEM_INCORRECT_ALLOCATED_QUANTITY = 8;
   static const ItemType CALCULATION_DIFFERENCE;
   static constexpr ValueType ITEM_CALCULATION_DIFFERENCE = 9;
   static const ItemType UNKNOWN_OR_STALE_EXECID;
   static constexpr ValueType ITEM_UNKNOWN_OR_STALE_EXECID = 10;
   static const ItemType MISMATCHED_DATA_VALUE;
   static constexpr ValueType ITEM_MISMATCHED_DATA_VALUE = 11;
   static const ItemType UNKNOWN_CLORDID;
   static constexpr ValueType ITEM_UNKNOWN_CLORDID = 12;
   static const ItemType WAREHOUSE_REQUEST_REJECTED;
   static constexpr ValueType ITEM_WAREHOUSE_REQUEST_REJECTED = 13;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct EmailTypeEnums final: FieldEnumsBase {
   typedef FieldEmailType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const EmailTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = '0';
   static const ItemType REPLY;
   static constexpr ValueType ITEM_REPLY = '1';
   static const ItemType ADMIN_REPLY;
   static constexpr ValueType ITEM_ADMIN_REPLY = '2';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PossResendEnums final: FieldEnumsBase {
   typedef FieldPossResend::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PossResendEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct EncryptMethodEnums final: FieldEnumsBase {
   typedef FieldEncryptMethod::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const EncryptMethodEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NONE;
   static constexpr ValueType ITEM_NONE = 0;
   static const ItemType PKCS;
   static constexpr ValueType ITEM_PKCS = 1;
   static const ItemType DES;
   static constexpr ValueType ITEM_DES = 2;
   static const ItemType PKCS_DES;
   static constexpr ValueType ITEM_PKCS_DES = 3;
   static const ItemType PGP_DES;
   static constexpr ValueType ITEM_PGP_DES = 4;
   static const ItemType PGP_DES_MD5;
   static constexpr ValueType ITEM_PGP_DES_MD5 = 5;
   static const ItemType PEM_DES_MD5;
   static constexpr ValueType ITEM_PEM_DES_MD5 = 6;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CxlRejReasonEnums final: FieldEnumsBase {
   typedef FieldCxlRejReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CxlRejReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType TOO_LATE_TO_CANCEL;
   static constexpr ValueType ITEM_TOO_LATE_TO_CANCEL = 0;
   static const ItemType UNKNOWN_ORDER;
   static constexpr ValueType ITEM_UNKNOWN_ORDER = 1;
   static const ItemType BROKER;
   static constexpr ValueType ITEM_BROKER = 2;
   static const ItemType ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS;
   static constexpr ValueType ITEM_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS = 3;
   static const ItemType UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST;
   static constexpr ValueType ITEM_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST = 4;
   static const ItemType ORIGORDMODTIME;
   static constexpr ValueType ITEM_ORIGORDMODTIME = 5;
   static const ItemType DUPLICATE_CLORDID;
   static constexpr ValueType ITEM_DUPLICATE_CLORDID = 6;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct OrdRejReasonEnums final: FieldEnumsBase {
   typedef FieldOrdRejReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const OrdRejReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType BROKER;
   static constexpr ValueType ITEM_BROKER = 0;
   static const ItemType UNKNOWN_SYMBOL;
   static constexpr ValueType ITEM_UNKNOWN_SYMBOL = 1;
   static const ItemType EXCHANGE_CLOSED;
   static constexpr ValueType ITEM_EXCHANGE_CLOSED = 2;
   static const ItemType ORDER_EXCEEDS_LIMIT;
   static constexpr ValueType ITEM_ORDER_EXCEEDS_LIMIT = 3;
   static const ItemType TOO_LATE_TO_ENTER;
   static constexpr ValueType ITEM_TOO_LATE_TO_ENTER = 4;
   static const ItemType UNKNOWN_ORDER;
   static constexpr ValueType ITEM_UNKNOWN_ORDER = 5;
   static const ItemType DUPLICATE_ORDER;
   static constexpr ValueType ITEM_DUPLICATE_ORDER = 6;
   static const ItemType DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER;
   static constexpr ValueType ITEM_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER = 7;
   static const ItemType STALE_ORDER;
   static constexpr ValueType ITEM_STALE_ORDER = 8;
   static const ItemType TRADE_ALONG_REQUIRED;
   static constexpr ValueType ITEM_TRADE_ALONG_REQUIRED = 9;
   static const ItemType INVALID_INVESTOR_ID;
   static constexpr ValueType ITEM_INVALID_INVESTOR_ID = 10;
   static const ItemType UNSUPPORTED_ORDER_CHARACTERISTIC12_SURVEILLENCE_OPTION;
   static constexpr ValueType ITEM_UNSUPPORTED_ORDER_CHARACTERISTIC12_SURVEILLENCE_OPTION = 11;
   static const ItemType INCORRECT_QUANTITY;
   static constexpr ValueType ITEM_INCORRECT_QUANTITY = 13;
   static const ItemType INCORRECT_ALLOCATED_QUANTITY;
   static constexpr ValueType ITEM_INCORRECT_ALLOCATED_QUANTITY = 14;
   static const ItemType UNKNOWN_ACCOUNT;
   static constexpr ValueType ITEM_UNKNOWN_ACCOUNT = 15;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct IOIQualifierEnums final: FieldEnumsBase {
   typedef FieldIOIQualifier::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const IOIQualifierEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ALL_OR_NONE;
   static constexpr ValueType ITEM_ALL_OR_NONE = 'A';
   static const ItemType MARKET_ON_CLOSE;
   static constexpr ValueType ITEM_MARKET_ON_CLOSE = 'B';
   static const ItemType AT_THE_CLOSE;
   static constexpr ValueType ITEM_AT_THE_CLOSE = 'C';
   static const ItemType VWAP;
   static constexpr ValueType ITEM_VWAP = 'D';
   static const ItemType IN_TOUCH_WITH;
   static constexpr ValueType ITEM_IN_TOUCH_WITH = 'I';
   static const ItemType LIMIT;
   static constexpr ValueType ITEM_LIMIT = 'L';
   static const ItemType MORE_BEHIND;
   static constexpr ValueType ITEM_MORE_BEHIND = 'M';
   static const ItemType AT_THE_OPEN;
   static constexpr ValueType ITEM_AT_THE_OPEN = 'O';
   static const ItemType TAKING_A_POSITION;
   static constexpr ValueType ITEM_TAKING_A_POSITION = 'P';
   static const ItemType AT_THE_MARKET;
   static constexpr ValueType ITEM_AT_THE_MARKET = 'Q';
   static const ItemType READY_TO_TRADE;
   static constexpr ValueType ITEM_READY_TO_TRADE = 'R';
   static const ItemType PORTFOLIO_SHOWN;
   static constexpr ValueType ITEM_PORTFOLIO_SHOWN = 'S';
   static const ItemType THROUGH_THE_DAY;
   static constexpr ValueType ITEM_THROUGH_THE_DAY = 'T';
   static const ItemType VERSUS;
   static constexpr ValueType ITEM_VERSUS = 'V';
   static const ItemType INDICATION;
   static constexpr ValueType ITEM_INDICATION = 'W';
   static const ItemType CROSSING_OPPORTUNITY;
   static constexpr ValueType ITEM_CROSSING_OPPORTUNITY = 'X';
   static const ItemType AT_THE_MIDPOINT;
   static constexpr ValueType ITEM_AT_THE_MIDPOINT = 'Y';
   static const ItemType PRE_OPEN;
   static constexpr ValueType ITEM_PRE_OPEN = 'Z';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ReportToExchEnums final: FieldEnumsBase {
   typedef FieldReportToExch::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ReportToExchEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct LocateReqdEnums final: FieldEnumsBase {
   typedef FieldLocateReqd::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const LocateReqdEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ForexReqEnums final: FieldEnumsBase {
   typedef FieldForexReq::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ForexReqEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct GapFillFlagEnums final: FieldEnumsBase {
   typedef FieldGapFillFlag::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const GapFillFlagEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DKReasonEnums final: FieldEnumsBase {
   typedef FieldDKReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DKReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType UNKNOWN_SYMBOL;
   static constexpr ValueType ITEM_UNKNOWN_SYMBOL = 'A';
   static const ItemType WRONG_SIDE;
   static constexpr ValueType ITEM_WRONG_SIDE = 'B';
   static const ItemType QUANTITY_EXCEEDS_ORDER;
   static constexpr ValueType ITEM_QUANTITY_EXCEEDS_ORDER = 'C';
   static const ItemType NO_MATCHING_ORDER;
   static constexpr ValueType ITEM_NO_MATCHING_ORDER = 'D';
   static const ItemType PRICE_EXCEEDS_LIMIT;
   static constexpr ValueType ITEM_PRICE_EXCEEDS_LIMIT = 'E';
   static const ItemType CALCULATION_DIFFERENCE;
   static constexpr ValueType ITEM_CALCULATION_DIFFERENCE = 'F';
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 'Z';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct IOINaturalFlagEnums final: FieldEnumsBase {
   typedef FieldIOINaturalFlag::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const IOINaturalFlagEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MiscFeeTypeEnums final: FieldEnumsBase {
   typedef FieldMiscFeeType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MiscFeeTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType REGULATORY;
   static constexpr ValueType ITEM_REGULATORY = SOHSTR(1);
   static const ItemType TAX;
   static constexpr ValueType ITEM_TAX = SOHSTR(2);
   static const ItemType LOCAL_COMMISSION;
   static constexpr ValueType ITEM_LOCAL_COMMISSION = SOHSTR(3);
   static const ItemType EXCHANGE_FEES;
   static constexpr ValueType ITEM_EXCHANGE_FEES = SOHSTR(4);
   static const ItemType STAMP;
   static constexpr ValueType ITEM_STAMP = SOHSTR(5);
   static const ItemType LEVY;
   static constexpr ValueType ITEM_LEVY = SOHSTR(6);
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = SOHSTR(7);
   static const ItemType MARKUP;
   static constexpr ValueType ITEM_MARKUP = SOHSTR(8);
   static const ItemType CONSUMPTION_TAX;
   static constexpr ValueType ITEM_CONSUMPTION_TAX = SOHSTR(9);
   static const ItemType PER_TRANSACTION;
   static constexpr ValueType ITEM_PER_TRANSACTION = SOHSTR(10);
   static const ItemType CONVERSION;
   static constexpr ValueType ITEM_CONVERSION = SOHSTR(11);
   static const ItemType AGENT;
   static constexpr ValueType ITEM_AGENT = SOHSTR(12);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ResetSeqNumFlagEnums final: FieldEnumsBase {
   typedef FieldResetSeqNumFlag::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ResetSeqNumFlagEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ExecTypeEnums final: FieldEnumsBase {
   typedef FieldExecType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ExecTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = '0';
   static const ItemType DONE_FOR_DAY;
   static constexpr ValueType ITEM_DONE_FOR_DAY = '3';
   static const ItemType CANCELED;
   static constexpr ValueType ITEM_CANCELED = '4';
   static const ItemType REPLACE;
   static constexpr ValueType ITEM_REPLACE = '5';
   static const ItemType PENDING_CANCEL;
   static constexpr ValueType ITEM_PENDING_CANCEL = '6';
   static const ItemType STOPPED;
   static constexpr ValueType ITEM_STOPPED = '7';
   static const ItemType REJECTED;
   static constexpr ValueType ITEM_REJECTED = '8';
   static const ItemType SUSPENDED;
   static constexpr ValueType ITEM_SUSPENDED = '9';
   static const ItemType PENDING_NEW;
   static constexpr ValueType ITEM_PENDING_NEW = 'A';
   static const ItemType CALCULATED;
   static constexpr ValueType ITEM_CALCULATED = 'B';
   static const ItemType EXPIRED;
   static constexpr ValueType ITEM_EXPIRED = 'C';
   static const ItemType RESTATED;
   static constexpr ValueType ITEM_RESTATED = 'D';
   static const ItemType PENDING_REPLACE;
   static constexpr ValueType ITEM_PENDING_REPLACE = 'E';
   static const ItemType TRADE;
   static constexpr ValueType ITEM_TRADE = 'F';
   static const ItemType TRADE_CORRECT;
   static constexpr ValueType ITEM_TRADE_CORRECT = 'G';
   static const ItemType TRADE_CANCEL;
   static constexpr ValueType ITEM_TRADE_CANCEL = 'H';
   static const ItemType ORDER_STATUS;
   static constexpr ValueType ITEM_ORDER_STATUS = 'I';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SettlCurrFxRateCalcEnums final: FieldEnumsBase {
   typedef FieldSettlCurrFxRateCalc::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SettlCurrFxRateCalcEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType MULTIPLY;
   static constexpr ValueType ITEM_MULTIPLY = 'M';
   static const ItemType DIVIDE;
   static constexpr ValueType ITEM_DIVIDE = 'D';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SettlInstModeEnums final: FieldEnumsBase {
   typedef FieldSettlInstMode::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SettlInstModeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType STANDING_INSTRUCTIONS_PROVIDED;
   static constexpr ValueType ITEM_STANDING_INSTRUCTIONS_PROVIDED = '1';
   static const ItemType SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT;
   static constexpr ValueType ITEM_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT = '4';
   static const ItemType REQUEST_REJECT;
   static constexpr ValueType ITEM_REQUEST_REJECT = '5';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SettlInstTransTypeEnums final: FieldEnumsBase {
   typedef FieldSettlInstTransType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SettlInstTransTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = 'N';
   static const ItemType CANCEL;
   static constexpr ValueType ITEM_CANCEL = 'C';
   static const ItemType REPLACE;
   static constexpr ValueType ITEM_REPLACE = 'R';
   static const ItemType RESTATE;
   static constexpr ValueType ITEM_RESTATE = 'T';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SettlInstSourceEnums final: FieldEnumsBase {
   typedef FieldSettlInstSource::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SettlInstSourceEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType BROKERS_INSTRUCTIONS;
   static constexpr ValueType ITEM_BROKERS_INSTRUCTIONS = '1';
   static const ItemType INSTITUTIONS_INSTRUCTIONS;
   static constexpr ValueType ITEM_INSTITUTIONS_INSTRUCTIONS = '2';
   static const ItemType INVESTOR;
   static constexpr ValueType ITEM_INVESTOR = '3';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SecurityTypeEnums final: FieldEnumsBase {
   typedef FieldSecurityType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SecurityTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType FUTURE;
   static constexpr ValueType ITEM_FUTURE = SOHSTR(FUT);
   static const ItemType OPTION;
   static constexpr ValueType ITEM_OPTION = SOHSTR(OPT);
   static const ItemType EURO_SUPRANATIONAL_COUPONS;
   static constexpr ValueType ITEM_EURO_SUPRANATIONAL_COUPONS = SOHSTR(EUSUPRA);
   static const ItemType FEDERAL_AGENCY_COUPON;
   static constexpr ValueType ITEM_FEDERAL_AGENCY_COUPON = SOHSTR(FAC);
   static const ItemType FEDERAL_AGENCY_DISCOUNT_NOTE;
   static constexpr ValueType ITEM_FEDERAL_AGENCY_DISCOUNT_NOTE = SOHSTR(FADN);
   static const ItemType PRIVATE_EXPORT_FUNDING;
   static constexpr ValueType ITEM_PRIVATE_EXPORT_FUNDING = SOHSTR(PEF);
   static const ItemType USD_SUPRANATIONAL_COUPONS;
   static constexpr ValueType ITEM_USD_SUPRANATIONAL_COUPONS = SOHSTR(SUPRA);
   static const ItemType CORPORATE_BOND;
   static constexpr ValueType ITEM_CORPORATE_BOND = SOHSTR(CORP);
   static const ItemType CORPORATE_PRIVATE_PLACEMENT;
   static constexpr ValueType ITEM_CORPORATE_PRIVATE_PLACEMENT = SOHSTR(CPP);
   static const ItemType CONVERTIBLE_BOND;
   static constexpr ValueType ITEM_CONVERTIBLE_BOND = SOHSTR(CB);
   static const ItemType DUAL_CURRENCY;
   static constexpr ValueType ITEM_DUAL_CURRENCY = SOHSTR(DUAL);
   static const ItemType EURO_CORPORATE_BOND;
   static constexpr ValueType ITEM_EURO_CORPORATE_BOND = SOHSTR(EUCORP);
   static const ItemType INDEXED_LINKED;
   static constexpr ValueType ITEM_INDEXED_LINKED = SOHSTR(XLINKD);
   static const ItemType STRUCTURED_NOTES;
   static constexpr ValueType ITEM_STRUCTURED_NOTES = SOHSTR(STRUCT);
   static const ItemType YANKEE_CORPORATE_BOND;
   static constexpr ValueType ITEM_YANKEE_CORPORATE_BOND = SOHSTR(YANK);
   static const ItemType FOREIGN_EXCHANGE_CONTRACT;
   static constexpr ValueType ITEM_FOREIGN_EXCHANGE_CONTRACT = SOHSTR(FOR);
   static const ItemType COMMON_STOCK;
   static constexpr ValueType ITEM_COMMON_STOCK = SOHSTR(CS);
   static const ItemType PREFERRED_STOCK;
   static constexpr ValueType ITEM_PREFERRED_STOCK = SOHSTR(PS);
   static const ItemType BRADY_BOND;
   static constexpr ValueType ITEM_BRADY_BOND = SOHSTR(BRADY);
   static const ItemType EURO_SOVEREIGNS;
   static constexpr ValueType ITEM_EURO_SOVEREIGNS = SOHSTR(EUSOV);
   static const ItemType US_TREASURY_BOND;
   static constexpr ValueType ITEM_US_TREASURY_BOND = SOHSTR(TBOND);
   static const ItemType INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE;
   static constexpr ValueType ITEM_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE = SOHSTR(TINT);
   static const ItemType TREASURY_INFLATION_PROTECTED_SECURITIES;
   static constexpr ValueType ITEM_TREASURY_INFLATION_PROTECTED_SECURITIES = SOHSTR(TIPS);
   static const ItemType PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE;
   static constexpr ValueType ITEM_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE = SOHSTR(TCAL);
   static const ItemType PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE;
   static constexpr ValueType ITEM_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE = SOHSTR(TPRN);
   static const ItemType US_TREASURY_NOTE_UST;
   static constexpr ValueType ITEM_US_TREASURY_NOTE_UST = SOHSTR(UST);
   static const ItemType US_TREASURY_BILL_USTB;
   static constexpr ValueType ITEM_US_TREASURY_BILL_USTB = SOHSTR(USTB);
   static const ItemType US_TREASURY_NOTE_TNOTE;
   static constexpr ValueType ITEM_US_TREASURY_NOTE_TNOTE = SOHSTR(TNOTE);
   static const ItemType US_TREASURY_BILL_TBILL;
   static constexpr ValueType ITEM_US_TREASURY_BILL_TBILL = SOHSTR(TBILL);
   static const ItemType REPURCHASE;
   static constexpr ValueType ITEM_REPURCHASE = SOHSTR(REPO);
   static const ItemType FORWARD;
   static constexpr ValueType ITEM_FORWARD = SOHSTR(FORWARD);
   static const ItemType BUY_SELLBACK;
   static constexpr ValueType ITEM_BUY_SELLBACK = SOHSTR(BUYSELL);
   static const ItemType SECURITIES_LOAN;
   static constexpr ValueType ITEM_SECURITIES_LOAN = SOHSTR(SECLOAN);
   static const ItemType SECURITIES_PLEDGE;
   static constexpr ValueType ITEM_SECURITIES_PLEDGE = SOHSTR(SECPLEDGE);
   static const ItemType TERM_LOAN;
   static constexpr ValueType ITEM_TERM_LOAN = SOHSTR(TERM);
   static const ItemType REVOLVER_LOAN;
   static constexpr ValueType ITEM_REVOLVER_LOAN = SOHSTR(RVLV);
   static const ItemType REVOLVER_TERM_LOAN;
   static constexpr ValueType ITEM_REVOLVER_TERM_LOAN = SOHSTR(RVLVTRM);
   static const ItemType BRIDGE_LOAN;
   static constexpr ValueType ITEM_BRIDGE_LOAN = SOHSTR(BRIDGE);
   static const ItemType LETTER_OF_CREDIT;
   static constexpr ValueType ITEM_LETTER_OF_CREDIT = SOHSTR(LOFC);
   static const ItemType SWING_LINE_FACILITY;
   static constexpr ValueType ITEM_SWING_LINE_FACILITY = SOHSTR(SWING);
   static const ItemType DEBTOR_IN_POSSESSION;
   static constexpr ValueType ITEM_DEBTOR_IN_POSSESSION = SOHSTR(DINP);
   static const ItemType DEFAULTED;
   static constexpr ValueType ITEM_DEFAULTED = SOHSTR(DEFLTED);
   static const ItemType WITHDRAWN;
   static constexpr ValueType ITEM_WITHDRAWN = SOHSTR(WITHDRN);
   static const ItemType REPLACED;
   static constexpr ValueType ITEM_REPLACED = SOHSTR(REPLACD);
   static const ItemType MATURED;
   static constexpr ValueType ITEM_MATURED = SOHSTR(MATURED);
   static const ItemType AMENDED_RESTATED;
   static constexpr ValueType ITEM_AMENDED_RESTATED = SOHSTR(AMENDED);
   static const ItemType RETIRED;
   static constexpr ValueType ITEM_RETIRED = SOHSTR(RETIRED);
   static const ItemType BANKERS_ACCEPTANCE;
   static constexpr ValueType ITEM_BANKERS_ACCEPTANCE = SOHSTR(BA);
   static const ItemType BANK_NOTES;
   static constexpr ValueType ITEM_BANK_NOTES = SOHSTR(BN);
   static const ItemType BILL_OF_EXCHANGES;
   static constexpr ValueType ITEM_BILL_OF_EXCHANGES = SOHSTR(BOX);
   static const ItemType CERTIFICATE_OF_DEPOSIT;
   static constexpr ValueType ITEM_CERTIFICATE_OF_DEPOSIT = SOHSTR(CD);
   static const ItemType CALL_LOANS;
   static constexpr ValueType ITEM_CALL_LOANS = SOHSTR(CL);
   static const ItemType COMMERCIAL_PAPER;
   static constexpr ValueType ITEM_COMMERCIAL_PAPER = SOHSTR(CP);
   static const ItemType DEPOSIT_NOTES;
   static constexpr ValueType ITEM_DEPOSIT_NOTES = SOHSTR(DN);
   static const ItemType EURO_CERTIFICATE_OF_DEPOSIT;
   static constexpr ValueType ITEM_EURO_CERTIFICATE_OF_DEPOSIT = SOHSTR(EUCD);
   static const ItemType EURO_COMMERCIAL_PAPER;
   static constexpr ValueType ITEM_EURO_COMMERCIAL_PAPER = SOHSTR(EUCP);
   static const ItemType LIQUIDITY_NOTE;
   static constexpr ValueType ITEM_LIQUIDITY_NOTE = SOHSTR(LQN);
   static const ItemType MEDIUM_TERM_NOTES;
   static constexpr ValueType ITEM_MEDIUM_TERM_NOTES = SOHSTR(MTN);
   static const ItemType OVERNIGHT;
   static constexpr ValueType ITEM_OVERNIGHT = SOHSTR(ONITE);
   static const ItemType PROMISSORY_NOTE;
   static constexpr ValueType ITEM_PROMISSORY_NOTE = SOHSTR(PN);
   static const ItemType PLAZOS_FIJOS;
   static constexpr ValueType ITEM_PLAZOS_FIJOS = SOHSTR(PZFJ);
   static const ItemType SHORT_TERM_LOAN_NOTE;
   static constexpr ValueType ITEM_SHORT_TERM_LOAN_NOTE = SOHSTR(STN);
   static const ItemType TIME_DEPOSIT;
   static constexpr ValueType ITEM_TIME_DEPOSIT = SOHSTR(TD);
   static const ItemType EXTENDED_COMM_NOTE;
   static constexpr ValueType ITEM_EXTENDED_COMM_NOTE = SOHSTR(XCN);
   static const ItemType YANKEE_CERTIFICATE_OF_DEPOSIT;
   static constexpr ValueType ITEM_YANKEE_CERTIFICATE_OF_DEPOSIT = SOHSTR(YCD);
   static const ItemType ASSET_BACKED_SECURITIES;
   static constexpr ValueType ITEM_ASSET_BACKED_SECURITIES = SOHSTR(ABS);
   static const ItemType CORP_MORTGAGE_BACKED_SECURITIES;
   static constexpr ValueType ITEM_CORP_MORTGAGE_BACKED_SECURITIES = SOHSTR(CMBS);
   static const ItemType COLLATERALIZED_MORTGAGE_OBLIGATION;
   static constexpr ValueType ITEM_COLLATERALIZED_MORTGAGE_OBLIGATION = SOHSTR(CMO);
   static const ItemType IOETTE_MORTGAGE;
   static constexpr ValueType ITEM_IOETTE_MORTGAGE = SOHSTR(IET);
   static const ItemType MORTGAGE_BACKED_SECURITIES;
   static constexpr ValueType ITEM_MORTGAGE_BACKED_SECURITIES = SOHSTR(MBS);
   static const ItemType MORTGAGE_INTEREST_ONLY;
   static constexpr ValueType ITEM_MORTGAGE_INTEREST_ONLY = SOHSTR(MIO);
   static const ItemType MORTGAGE_PRINCIPAL_ONLY;
   static constexpr ValueType ITEM_MORTGAGE_PRINCIPAL_ONLY = SOHSTR(MPO);
   static const ItemType MORTGAGE_PRIVATE_PLACEMENT;
   static constexpr ValueType ITEM_MORTGAGE_PRIVATE_PLACEMENT = SOHSTR(MPP);
   static const ItemType MISCELLANEOUS_PASS_THROUGH;
   static constexpr ValueType ITEM_MISCELLANEOUS_PASS_THROUGH = SOHSTR(MPT);
   static const ItemType PFANDBRIEFE;
   static constexpr ValueType ITEM_PFANDBRIEFE = SOHSTR(PFAND);
   static const ItemType TO_BE_ANNOUNCED;
   static constexpr ValueType ITEM_TO_BE_ANNOUNCED = SOHSTR(TBA);
   static const ItemType OTHER_ANTICIPATION_NOTES_BAN_GAN_ETC;
   static constexpr ValueType ITEM_OTHER_ANTICIPATION_NOTES_BAN_GAN_ETC = SOHSTR(AN);
   static const ItemType CERTIFICATE_OF_OBLIGATION;
   static constexpr ValueType ITEM_CERTIFICATE_OF_OBLIGATION = SOHSTR(COFO);
   static const ItemType CERTIFICATE_OF_PARTICIPATION;
   static constexpr ValueType ITEM_CERTIFICATE_OF_PARTICIPATION = SOHSTR(COFP);
   static const ItemType GENERAL_OBLIGATION_BONDS;
   static constexpr ValueType ITEM_GENERAL_OBLIGATION_BONDS = SOHSTR(GO);
   static const ItemType MANDATORY_TENDER;
   static constexpr ValueType ITEM_MANDATORY_TENDER = SOHSTR(MT);
   static const ItemType REVENUE_ANTICIPATION_NOTE;
   static constexpr ValueType ITEM_REVENUE_ANTICIPATION_NOTE = SOHSTR(RAN);
   static const ItemType REVENUE_BONDS;
   static constexpr ValueType ITEM_REVENUE_BONDS = SOHSTR(REV);
   static const ItemType SPECIAL_ASSESSMENT;
   static constexpr ValueType ITEM_SPECIAL_ASSESSMENT = SOHSTR(SPCLA);
   static const ItemType SPECIAL_OBLIGATION;
   static constexpr ValueType ITEM_SPECIAL_OBLIGATION = SOHSTR(SPCLO);
   static const ItemType SPECIAL_TAX;
   static constexpr ValueType ITEM_SPECIAL_TAX = SOHSTR(SPCLT);
   static const ItemType TAX_ANTICIPATION_NOTE;
   static constexpr ValueType ITEM_TAX_ANTICIPATION_NOTE = SOHSTR(TAN);
   static const ItemType TAX_ALLOCATION;
   static constexpr ValueType ITEM_TAX_ALLOCATION = SOHSTR(TAXA);
   static const ItemType TAX_EXEMPT_COMMERCIAL_PAPER;
   static constexpr ValueType ITEM_TAX_EXEMPT_COMMERCIAL_PAPER = SOHSTR(TECP);
   static const ItemType TAX_REVENUE_ANTICIPATION_NOTE;
   static constexpr ValueType ITEM_TAX_REVENUE_ANTICIPATION_NOTE = SOHSTR(TRAN);
   static const ItemType VARIABLE_RATE_DEMAND_NOTE;
   static constexpr ValueType ITEM_VARIABLE_RATE_DEMAND_NOTE = SOHSTR(VRDN);
   static const ItemType WARRANT;
   static constexpr ValueType ITEM_WARRANT = SOHSTR(WAR);
   static const ItemType MUTUAL_FUND;
   static constexpr ValueType ITEM_MUTUAL_FUND = SOHSTR(MF);
   static const ItemType MULTI_LEG_INSTRUMENT;
   static constexpr ValueType ITEM_MULTI_LEG_INSTRUMENT = SOHSTR(MLEG);
   static const ItemType NO_SECURITY_TYPE;
   static constexpr ValueType ITEM_NO_SECURITY_TYPE = SOHSTR(NONE);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct StandInstDbTypeEnums final: FieldEnumsBase {
   typedef FieldStandInstDbType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const StandInstDbTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 0;
   static const ItemType DTC_SID;
   static constexpr ValueType ITEM_DTC_SID = 1;
   static const ItemType THOMSON_ALERT;
   static constexpr ValueType ITEM_THOMSON_ALERT = 2;
   static const ItemType A_GLOBAL_CUSTODIAN;
   static constexpr ValueType ITEM_A_GLOBAL_CUSTODIAN = 3;
   static const ItemType ACCOUNTNET;
   static constexpr ValueType ITEM_ACCOUNTNET = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SettlDeliveryTypeEnums final: FieldEnumsBase {
   typedef FieldSettlDeliveryType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SettlDeliveryTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType VERSUS_PAYMENT_DELIVER;
   static constexpr ValueType ITEM_VERSUS_PAYMENT_DELIVER = 0;
   static const ItemType FREE_DELIVER;
   static constexpr ValueType ITEM_FREE_DELIVER = 1;
   static const ItemType TRI_PARTY;
   static constexpr ValueType ITEM_TRI_PARTY = 2;
   static const ItemType HOLD_IN_CUSTODY;
   static constexpr ValueType ITEM_HOLD_IN_CUSTODY = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AllocLinkTypeEnums final: FieldEnumsBase {
   typedef FieldAllocLinkType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AllocLinkTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType F_X_NETTING;
   static constexpr ValueType ITEM_F_X_NETTING = 0;
   static const ItemType F_X_SWAP;
   static constexpr ValueType ITEM_F_X_SWAP = 1;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PutOrCallEnums final: FieldEnumsBase {
   typedef FieldPutOrCall::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PutOrCallEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PUT;
   static constexpr ValueType ITEM_PUT = 0;
   static const ItemType CALL;
   static constexpr ValueType ITEM_CALL = 1;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CoveredOrUncoveredEnums final: FieldEnumsBase {
   typedef FieldCoveredOrUncovered::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CoveredOrUncoveredEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType COVERED;
   static constexpr ValueType ITEM_COVERED = 0;
   static const ItemType UNCOVERED;
   static constexpr ValueType ITEM_UNCOVERED = 1;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct NotifyBrokerOfCreditEnums final: FieldEnumsBase {
   typedef FieldNotifyBrokerOfCredit::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const NotifyBrokerOfCreditEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AllocHandlInstEnums final: FieldEnumsBase {
   typedef FieldAllocHandlInst::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AllocHandlInstEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType MATCH;
   static constexpr ValueType ITEM_MATCH = 1;
   static const ItemType FORWARD;
   static constexpr ValueType ITEM_FORWARD = 2;
   static const ItemType FORWARD_AND_MATCH;
   static constexpr ValueType ITEM_FORWARD_AND_MATCH = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct RoutingTypeEnums final: FieldEnumsBase {
   typedef FieldRoutingType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const RoutingTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType TARGET_FIRM;
   static constexpr ValueType ITEM_TARGET_FIRM = 1;
   static const ItemType TARGET_LIST;
   static constexpr ValueType ITEM_TARGET_LIST = 2;
   static const ItemType BLOCK_FIRM;
   static constexpr ValueType ITEM_BLOCK_FIRM = 3;
   static const ItemType BLOCK_LIST;
   static constexpr ValueType ITEM_BLOCK_LIST = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct StipulationTypeEnums final: FieldEnumsBase {
   typedef FieldStipulationType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const StipulationTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType AMT;
   static constexpr ValueType ITEM_AMT = SOHSTR(AMT);
   static const ItemType AUTO_REINVESTMENT_AT_RATE_OR_BETTER;
   static constexpr ValueType ITEM_AUTO_REINVESTMENT_AT_RATE_OR_BETTER = SOHSTR(AUTOREINV);
   static const ItemType BANK_QUALIFIED;
   static constexpr ValueType ITEM_BANK_QUALIFIED = SOHSTR(BANKQUAL);
   static const ItemType BARGAIN_CONDITIONS_SEE;
   static constexpr ValueType ITEM_BARGAIN_CONDITIONS_SEE = SOHSTR(BGNCON);
   static const ItemType COUPON_RANGE;
   static constexpr ValueType ITEM_COUPON_RANGE = SOHSTR(COUPON);
   static const ItemType ISO_CURRENCY_CODE;
   static constexpr ValueType ITEM_ISO_CURRENCY_CODE = SOHSTR(CURRENCY);
   static const ItemType CUSTOM_START_END_DATE;
   static constexpr ValueType ITEM_CUSTOM_START_END_DATE = SOHSTR(CUSTOMDATE);
   static const ItemType GEOGRAPHICS_AND_RANGE;
   static constexpr ValueType ITEM_GEOGRAPHICS_AND_RANGE = SOHSTR(GEOG);
   static const ItemType VALUATION_DISCOUNT;
   static constexpr ValueType ITEM_VALUATION_DISCOUNT = SOHSTR(HAIRCUT);
   static const ItemType INSURED;
   static constexpr ValueType ITEM_INSURED = SOHSTR(INSURED);
   static const ItemType YEAR_OR_YEAR_MONTH_OF_ISSUE;
   static constexpr ValueType ITEM_YEAR_OR_YEAR_MONTH_OF_ISSUE = SOHSTR(ISSUE);
   static const ItemType ISSUERS_TICKER;
   static constexpr ValueType ITEM_ISSUERS_TICKER = SOHSTR(ISSUER);
   static const ItemType ISSUE_SIZE_RANGE;
   static constexpr ValueType ITEM_ISSUE_SIZE_RANGE = SOHSTR(ISSUESIZE);
   static const ItemType LOOKBACK_DAYS;
   static constexpr ValueType ITEM_LOOKBACK_DAYS = SOHSTR(LOOKBACK);
   static const ItemType EXPLICIT_LOT_IDENTIFIER;
   static constexpr ValueType ITEM_EXPLICIT_LOT_IDENTIFIER = SOHSTR(LOT);
   static const ItemType LOT_VARIANCE;
   static constexpr ValueType ITEM_LOT_VARIANCE = SOHSTR(LOTVAR);
   static const ItemType MATURITY_YEAR_AND_MONTH;
   static constexpr ValueType ITEM_MATURITY_YEAR_AND_MONTH = SOHSTR(MAT);
   static const ItemType MATURITY_RANGE;
   static constexpr ValueType ITEM_MATURITY_RANGE = SOHSTR(MATURITY);
   static const ItemType MAXIMUM_SUBSTITUTIONS;
   static constexpr ValueType ITEM_MAXIMUM_SUBSTITUTIONS = SOHSTR(MAXSUBS);
   static const ItemType MINIMUM_QUANTITY;
   static constexpr ValueType ITEM_MINIMUM_QUANTITY = SOHSTR(MINQTY);
   static const ItemType MINIMUM_INCREMENT;
   static constexpr ValueType ITEM_MINIMUM_INCREMENT = SOHSTR(MININCR);
   static const ItemType MINIMUM_DENOMINATION;
   static constexpr ValueType ITEM_MINIMUM_DENOMINATION = SOHSTR(MINDNOM);
   static const ItemType PAYMENT_FREQUENCY_CALENDAR;
   static constexpr ValueType ITEM_PAYMENT_FREQUENCY_CALENDAR = SOHSTR(PAYFREQ);
   static const ItemType NUMBER_OF_PIECES;
   static constexpr ValueType ITEM_NUMBER_OF_PIECES = SOHSTR(PIECES);
   static const ItemType POOLS_MAXIMUM;
   static constexpr ValueType ITEM_POOLS_MAXIMUM = SOHSTR(PMAX);
   static const ItemType POOLS_PER_MILLION;
   static constexpr ValueType ITEM_POOLS_PER_MILLION = SOHSTR(PPM);
   static const ItemType POOLS_PER_LOT;
   static constexpr ValueType ITEM_POOLS_PER_LOT = SOHSTR(PPL);
   static const ItemType POOLS_PER_TRADE;
   static constexpr ValueType ITEM_POOLS_PER_TRADE = SOHSTR(PPT);
   static const ItemType PRICE_RANGE;
   static constexpr ValueType ITEM_PRICE_RANGE = SOHSTR(PRICE);
   static const ItemType PRICING_FREQUENCY;
   static constexpr ValueType ITEM_PRICING_FREQUENCY = SOHSTR(PRICEFREQ);
   static const ItemType PRODUCTION_YEAR;
   static constexpr ValueType ITEM_PRODUCTION_YEAR = SOHSTR(PROD);
   static const ItemType CALL_PROTECTION;
   static constexpr ValueType ITEM_CALL_PROTECTION = SOHSTR(PROTECT);
   static const ItemType PURPOSE;
   static constexpr ValueType ITEM_PURPOSE = SOHSTR(PURPOSE);
   static const ItemType BENCHMARK_PRICE_SOURCE;
   static constexpr ValueType ITEM_BENCHMARK_PRICE_SOURCE = SOHSTR(PXSOURCE);
   static const ItemType RATING_SOURCE_AND_RANGE;
   static constexpr ValueType ITEM_RATING_SOURCE_AND_RANGE = SOHSTR(RATING);
   static const ItemType TYPE_OF_REDEMPTION_VALUES_ARE_NONCALLABLE_CALLABLE_PREFUNDED_ESCROWEDTOMATURITY_PUTABLE_CONVERTIBLE;
   static constexpr ValueType ITEM_TYPE_OF_REDEMPTION_VALUES_ARE_NONCALLABLE_CALLABLE_PREFUNDED_ESCROWEDTOMATURITY_PUTABLE_CONVERTIBLE = SOHSTR(REDEMPTION);
   static const ItemType RESTRICTED;
   static constexpr ValueType ITEM_RESTRICTED = SOHSTR(RESTRICTED);
   static const ItemType MARKET_SECTOR;
   static constexpr ValueType ITEM_MARKET_SECTOR = SOHSTR(SECTOR);
   static const ItemType SECURITYTYPE_INCLUDED_OR_EXCLUDED;
   static constexpr ValueType ITEM_SECURITYTYPE_INCLUDED_OR_EXCLUDED = SOHSTR(SECTYPE);
   static const ItemType STRUCTURE;
   static constexpr ValueType ITEM_STRUCTURE = SOHSTR(STRUCT);
   static const ItemType SUBSTITUTIONS_FREQUENCY;
   static constexpr ValueType ITEM_SUBSTITUTIONS_FREQUENCY = SOHSTR(SUBSFREQ);
   static const ItemType SUBSTITUTIONS_LEFT;
   static constexpr ValueType ITEM_SUBSTITUTIONS_LEFT = SOHSTR(SUBSLEFT);
   static const ItemType FREEFORM_TEXT;
   static constexpr ValueType ITEM_FREEFORM_TEXT = SOHSTR(TEXT);
   static const ItemType TRADE_VARIANCE;
   static constexpr ValueType ITEM_TRADE_VARIANCE = SOHSTR(TRDVAR);
   static const ItemType WEIGHTED_AVERAGE_COUPONVALUE_IN_PERCENT;
   static constexpr ValueType ITEM_WEIGHTED_AVERAGE_COUPONVALUE_IN_PERCENT = SOHSTR(WAC);
   static const ItemType WEIGHTED_AVERAGE_LIFE_COUPON_VALUE_IN_PERCENT;
   static constexpr ValueType ITEM_WEIGHTED_AVERAGE_LIFE_COUPON_VALUE_IN_PERCENT = SOHSTR(WAL);
   static const ItemType WEIGHTED_AVERAGE_LOAN_AGE_VALUE_IN_MONTHS;
   static constexpr ValueType ITEM_WEIGHTED_AVERAGE_LOAN_AGE_VALUE_IN_MONTHS = SOHSTR(WALA);
   static const ItemType WEIGHTED_AVERAGE_MATURITY_VALUE_IN_MONTHS;
   static constexpr ValueType ITEM_WEIGHTED_AVERAGE_MATURITY_VALUE_IN_MONTHS = SOHSTR(WAM);
   static const ItemType WHOLE_POOL;
   static constexpr ValueType ITEM_WHOLE_POOL = SOHSTR(WHOLE);
   static const ItemType YIELD_RANGE;
   static constexpr ValueType ITEM_YIELD_RANGE = SOHSTR(YIELD);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct YieldTypeEnums final: FieldEnumsBase {
   typedef FieldYieldType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const YieldTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType AFTER_TAX_YIELD;
   static constexpr ValueType ITEM_AFTER_TAX_YIELD = SOHSTR(AFTERTAX);
   static const ItemType ANNUAL_YIELD;
   static constexpr ValueType ITEM_ANNUAL_YIELD = SOHSTR(ANNUAL);
   static const ItemType YIELD_AT_ISSUE;
   static constexpr ValueType ITEM_YIELD_AT_ISSUE = SOHSTR(ATISSUE);
   static const ItemType YIELD_TO_AVERAGE_MATURITY;
   static constexpr ValueType ITEM_YIELD_TO_AVERAGE_MATURITY = SOHSTR(AVGMATURITY);
   static const ItemType BOOK_YIELD;
   static constexpr ValueType ITEM_BOOK_YIELD = SOHSTR(BOOK);
   static const ItemType YIELD_TO_NEXT_CALL;
   static constexpr ValueType ITEM_YIELD_TO_NEXT_CALL = SOHSTR(CALL);
   static const ItemType YIELD_CHANGE_SINCE_CLOSE;
   static constexpr ValueType ITEM_YIELD_CHANGE_SINCE_CLOSE = SOHSTR(CHANGE);
   static const ItemType CLOSING_YIELD;
   static constexpr ValueType ITEM_CLOSING_YIELD = SOHSTR(CLOSE);
   static const ItemType COMPOUND_YIELD;
   static constexpr ValueType ITEM_COMPOUND_YIELD = SOHSTR(COMPOUND);
   static const ItemType CURRENT_YIELD;
   static constexpr ValueType ITEM_CURRENT_YIELD = SOHSTR(CURRENT);
   static const ItemType TRUE_GROSS_YIELD;
   static constexpr ValueType ITEM_TRUE_GROSS_YIELD = SOHSTR(GROSS);
   static const ItemType GOVERNMENT_EQUIVALENT_YIELD;
   static constexpr ValueType ITEM_GOVERNMENT_EQUIVALENT_YIELD = SOHSTR(GOVTEQUIV);
   static const ItemType YIELD_WITH_INFLATION_ASSUMPTION;
   static constexpr ValueType ITEM_YIELD_WITH_INFLATION_ASSUMPTION = SOHSTR(INFLATION);
   static const ItemType INVERSE_FLOATER_BOND_YIELD;
   static constexpr ValueType ITEM_INVERSE_FLOATER_BOND_YIELD = SOHSTR(INVERSEFLOATER);
   static const ItemType MOST_RECENT_CLOSING_YIELD;
   static constexpr ValueType ITEM_MOST_RECENT_CLOSING_YIELD = SOHSTR(LASTCLOSE);
   static const ItemType CLOSING_YIELD_MOST_RECENT_MONTH;
   static constexpr ValueType ITEM_CLOSING_YIELD_MOST_RECENT_MONTH = SOHSTR(LASTMONTH);
   static const ItemType CLOSING_YIELD_MOST_RECENT_QUARTER;
   static constexpr ValueType ITEM_CLOSING_YIELD_MOST_RECENT_QUARTER = SOHSTR(LASTQUARTER);
   static const ItemType CLOSING_YIELD_MOST_RECENT_YEAR;
   static constexpr ValueType ITEM_CLOSING_YIELD_MOST_RECENT_YEAR = SOHSTR(LASTYEAR);
   static const ItemType YIELD_TO_LONGEST_AVERAGE_LIFE;
   static constexpr ValueType ITEM_YIELD_TO_LONGEST_AVERAGE_LIFE = SOHSTR(LONGAVGLIFE);
   static const ItemType MARK_TO_MARKET_YIELD;
   static constexpr ValueType ITEM_MARK_TO_MARKET_YIELD = SOHSTR(MARK);
   static const ItemType YIELD_TO_MATURITY;
   static constexpr ValueType ITEM_YIELD_TO_MATURITY = SOHSTR(MATURITY);
   static const ItemType YIELD_TO_NEXT_REFUND;
   static constexpr ValueType ITEM_YIELD_TO_NEXT_REFUND = SOHSTR(NEXTREFUND);
   static const ItemType OPEN_AVERAGE_YIELD;
   static constexpr ValueType ITEM_OPEN_AVERAGE_YIELD = SOHSTR(OPENAVG);
   static const ItemType YIELD_TO_NEXT_PUT;
   static constexpr ValueType ITEM_YIELD_TO_NEXT_PUT = SOHSTR(PUT);
   static const ItemType PREVIOUS_CLOSE_YIELD;
   static constexpr ValueType ITEM_PREVIOUS_CLOSE_YIELD = SOHSTR(PREVCLOSE);
   static const ItemType PROCEEDS_YIELD;
   static constexpr ValueType ITEM_PROCEEDS_YIELD = SOHSTR(PROCEEDS);
   static const ItemType SEMI_ANNUAL_YIELD;
   static constexpr ValueType ITEM_SEMI_ANNUAL_YIELD = SOHSTR(SEMIANNUAL);
   static const ItemType YIELD_TO_SHORTEST_AVERAGE_LIFE;
   static constexpr ValueType ITEM_YIELD_TO_SHORTEST_AVERAGE_LIFE = SOHSTR(SHORTAVGLIFE);
   static const ItemType SIMPLE_YIELD;
   static constexpr ValueType ITEM_SIMPLE_YIELD = SOHSTR(SIMPLE);
   static const ItemType TAX_EQUIVALENT_YIELD;
   static constexpr ValueType ITEM_TAX_EQUIVALENT_YIELD = SOHSTR(TAXEQUIV);
   static const ItemType YIELD_TO_TENDER_DATE;
   static constexpr ValueType ITEM_YIELD_TO_TENDER_DATE = SOHSTR(TENDER);
   static const ItemType TRUE_YIELD;
   static constexpr ValueType ITEM_TRUE_YIELD = SOHSTR(TRUE);
   static const ItemType YIELD_VALUE_OF_1_32;
   static constexpr ValueType ITEM_YIELD_VALUE_OF_1_32 = SOHSTR(VALUE1/32);
   static const ItemType YIELD_TO_WORST;
   static constexpr ValueType ITEM_YIELD_TO_WORST = SOHSTR(WORST);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TradedFlatSwitchEnums final: FieldEnumsBase {
   typedef FieldTradedFlatSwitch::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TradedFlatSwitchEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SubscriptionRequestTypeEnums final: FieldEnumsBase {
   typedef FieldSubscriptionRequestType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SubscriptionRequestTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SNAPSHOT;
   static constexpr ValueType ITEM_SNAPSHOT = '0';
   static const ItemType SNAPSHOT_PLUS_UPDATES;
   static constexpr ValueType ITEM_SNAPSHOT_PLUS_UPDATES = '1';
   static const ItemType DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST;
   static constexpr ValueType ITEM_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST = '2';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MDUpdateTypeEnums final: FieldEnumsBase {
   typedef FieldMDUpdateType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MDUpdateTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType FULL_REFRESH;
   static constexpr ValueType ITEM_FULL_REFRESH = 0;
   static const ItemType INCREMENTAL_REFRESH;
   static constexpr ValueType ITEM_INCREMENTAL_REFRESH = 1;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AggregatedBookEnums final: FieldEnumsBase {
   typedef FieldAggregatedBook::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AggregatedBookEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MDEntryTypeEnums final: FieldEnumsBase {
   typedef FieldMDEntryType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MDEntryTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType BID;
   static constexpr ValueType ITEM_BID = '0';
   static const ItemType OFFER;
   static constexpr ValueType ITEM_OFFER = '1';
   static const ItemType TRADE;
   static constexpr ValueType ITEM_TRADE = '2';
   static const ItemType INDEX_VALUE;
   static constexpr ValueType ITEM_INDEX_VALUE = '3';
   static const ItemType OPENING_PRICE;
   static constexpr ValueType ITEM_OPENING_PRICE = '4';
   static const ItemType CLOSING_PRICE;
   static constexpr ValueType ITEM_CLOSING_PRICE = '5';
   static const ItemType SETTLEMENT_PRICE;
   static constexpr ValueType ITEM_SETTLEMENT_PRICE = '6';
   static const ItemType TRADING_SESSION_HIGH_PRICE;
   static constexpr ValueType ITEM_TRADING_SESSION_HIGH_PRICE = '7';
   static const ItemType TRADING_SESSION_LOW_PRICE;
   static constexpr ValueType ITEM_TRADING_SESSION_LOW_PRICE = '8';
   static const ItemType TRADING_SESSION_VWAP_PRICE;
   static constexpr ValueType ITEM_TRADING_SESSION_VWAP_PRICE = '9';
   static const ItemType IMBALANCE;
   static constexpr ValueType ITEM_IMBALANCE = 'A';
   static const ItemType TRADE_VOLUME;
   static constexpr ValueType ITEM_TRADE_VOLUME = 'B';
   static const ItemType OPEN_INTEREST;
   static constexpr ValueType ITEM_OPEN_INTEREST = 'C';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TickDirectionEnums final: FieldEnumsBase {
   typedef FieldTickDirection::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TickDirectionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PLUS_TICK;
   static constexpr ValueType ITEM_PLUS_TICK = '0';
   static const ItemType ZERO_PLUS_TICK;
   static constexpr ValueType ITEM_ZERO_PLUS_TICK = '1';
   static const ItemType MINUS_TICK;
   static constexpr ValueType ITEM_MINUS_TICK = '2';
   static const ItemType ZERO_MINUS_TICK;
   static constexpr ValueType ITEM_ZERO_MINUS_TICK = '3';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct QuoteConditionEnums final: FieldEnumsBase {
   typedef FieldQuoteCondition::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const QuoteConditionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType OPEN;
   static constexpr ValueType ITEM_OPEN = SOHSTR(A);
   static const ItemType CLOSED;
   static constexpr ValueType ITEM_CLOSED = SOHSTR(B);
   static const ItemType EXCHANGE_BEST;
   static constexpr ValueType ITEM_EXCHANGE_BEST = SOHSTR(C);
   static const ItemType CONSOLIDATED_BEST;
   static constexpr ValueType ITEM_CONSOLIDATED_BEST = SOHSTR(D);
   static const ItemType LOCKED;
   static constexpr ValueType ITEM_LOCKED = SOHSTR(E);
   static const ItemType CROSSED;
   static constexpr ValueType ITEM_CROSSED = SOHSTR(F);
   static const ItemType DEPTH;
   static constexpr ValueType ITEM_DEPTH = SOHSTR(G);
   static const ItemType FAST_TRADING;
   static constexpr ValueType ITEM_FAST_TRADING = SOHSTR(H);
   static const ItemType NON_FIRM;
   static constexpr ValueType ITEM_NON_FIRM = SOHSTR(I);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TradeConditionEnums final: FieldEnumsBase {
   typedef FieldTradeCondition::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TradeConditionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CASH;
   static constexpr ValueType ITEM_CASH = SOHSTR(A);
   static const ItemType AVERAGE_PRICE_TRADE;
   static constexpr ValueType ITEM_AVERAGE_PRICE_TRADE = SOHSTR(B);
   static const ItemType CASH_TRADE;
   static constexpr ValueType ITEM_CASH_TRADE = SOHSTR(C);
   static const ItemType NEXT_DAY;
   static constexpr ValueType ITEM_NEXT_DAY = SOHSTR(D);
   static const ItemType OPENING;
   static constexpr ValueType ITEM_OPENING = SOHSTR(E);
   static const ItemType INTRADAY_TRADE_DETAIL;
   static constexpr ValueType ITEM_INTRADAY_TRADE_DETAIL = SOHSTR(F);
   static const ItemType RULE_127_TRADE;
   static constexpr ValueType ITEM_RULE_127_TRADE = SOHSTR(G);
   static const ItemType RULE_155_TRADE;
   static constexpr ValueType ITEM_RULE_155_TRADE = SOHSTR(H);
   static const ItemType SOLD_LAST;
   static constexpr ValueType ITEM_SOLD_LAST = SOHSTR(I);
   static const ItemType NEXT_DAY_TRADE;
   static constexpr ValueType ITEM_NEXT_DAY_TRADE = SOHSTR(J);
   static const ItemType OPENED;
   static constexpr ValueType ITEM_OPENED = SOHSTR(K);
   static const ItemType SELLER;
   static constexpr ValueType ITEM_SELLER = SOHSTR(L);
   static const ItemType SOLD;
   static constexpr ValueType ITEM_SOLD = SOHSTR(M);
   static const ItemType STOPPED_STOCK;
   static constexpr ValueType ITEM_STOPPED_STOCK = SOHSTR(N);
   static const ItemType IMBALANCE_MORE_BUYERS;
   static constexpr ValueType ITEM_IMBALANCE_MORE_BUYERS = SOHSTR(P);
   static const ItemType IMBALANCE_MORE_SELLERS;
   static constexpr ValueType ITEM_IMBALANCE_MORE_SELLERS = SOHSTR(Q);
   static const ItemType OPENING_PRICE;
   static constexpr ValueType ITEM_OPENING_PRICE = SOHSTR(R);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MDUpdateActionEnums final: FieldEnumsBase {
   typedef FieldMDUpdateAction::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MDUpdateActionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = '0';
   static const ItemType CHANGE;
   static constexpr ValueType ITEM_CHANGE = '1';
   static const ItemType DELETE;
   static constexpr ValueType ITEM_DELETE = '2';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MDReqRejReasonEnums final: FieldEnumsBase {
   typedef FieldMDReqRejReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MDReqRejReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType UNKNOWN_SYMBOL;
   static constexpr ValueType ITEM_UNKNOWN_SYMBOL = '0';
   static const ItemType DUPLICATE_MDREQID;
   static constexpr ValueType ITEM_DUPLICATE_MDREQID = '1';
   static const ItemType INSUFFICIENT_BANDWIDTH;
   static constexpr ValueType ITEM_INSUFFICIENT_BANDWIDTH = '2';
   static const ItemType INSUFFICIENT_PERMISSIONS;
   static constexpr ValueType ITEM_INSUFFICIENT_PERMISSIONS = '3';
   static const ItemType UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE;
   static constexpr ValueType ITEM_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE = '4';
   static const ItemType UNSUPPORTED_MARKETDEPTH;
   static constexpr ValueType ITEM_UNSUPPORTED_MARKETDEPTH = '5';
   static const ItemType UNSUPPORTED_MDUPDATETYPE;
   static constexpr ValueType ITEM_UNSUPPORTED_MDUPDATETYPE = '6';
   static const ItemType UNSUPPORTED_AGGREGATEDBOOK;
   static constexpr ValueType ITEM_UNSUPPORTED_AGGREGATEDBOOK = '7';
   static const ItemType UNSUPPORTED_MDENTRYTYPE;
   static constexpr ValueType ITEM_UNSUPPORTED_MDENTRYTYPE = '8';
   static const ItemType UNSUPPORTED_TRADINGSESSIONID;
   static constexpr ValueType ITEM_UNSUPPORTED_TRADINGSESSIONID = '9';
   static const ItemType UNSUPPORTED_SCOPE;
   static constexpr ValueType ITEM_UNSUPPORTED_SCOPE = 'A';
   static const ItemType UNSUPPORTED_OPENCLOSESETTLEFLAG;
   static constexpr ValueType ITEM_UNSUPPORTED_OPENCLOSESETTLEFLAG = 'B';
   static const ItemType UNSUPPORTED_MDIMPLICITDELETE;
   static constexpr ValueType ITEM_UNSUPPORTED_MDIMPLICITDELETE = 'C';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DeleteReasonEnums final: FieldEnumsBase {
   typedef FieldDeleteReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DeleteReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CANCELATION;
   static constexpr ValueType ITEM_CANCELATION = '0';
   static const ItemType ERROR;
   static constexpr ValueType ITEM_ERROR = '1';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct OpenCloseSettlFlagEnums final: FieldEnumsBase {
   typedef FieldOpenCloseSettlFlag::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const OpenCloseSettlFlagEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType DAILY_OPEN;
   static constexpr ValueType ITEM_DAILY_OPEN = SOHSTR(0);
   static const ItemType SESSION_OPEN;
   static constexpr ValueType ITEM_SESSION_OPEN = SOHSTR(1);
   static const ItemType DELIVERY_SETTLEMENT_ENTRY;
   static constexpr ValueType ITEM_DELIVERY_SETTLEMENT_ENTRY = SOHSTR(2);
   static const ItemType EXPECTED_ENTRY;
   static constexpr ValueType ITEM_EXPECTED_ENTRY = SOHSTR(3);
   static const ItemType ENTRY_FROM_PREVIOUS_BUSINESS_DAY;
   static constexpr ValueType ITEM_ENTRY_FROM_PREVIOUS_BUSINESS_DAY = SOHSTR(4);
   static const ItemType THEORETICAL_PRICE_VALUE;
   static constexpr ValueType ITEM_THEORETICAL_PRICE_VALUE = SOHSTR(5);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct FinancialStatusEnums final: FieldEnumsBase {
   typedef FieldFinancialStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const FinancialStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType BANKRUPT;
   static constexpr ValueType ITEM_BANKRUPT = SOHSTR(1);
   static const ItemType PENDING_DELISTING;
   static constexpr ValueType ITEM_PENDING_DELISTING = SOHSTR(2);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CorporateActionEnums final: FieldEnumsBase {
   typedef FieldCorporateAction::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CorporateActionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType EX_DIVIDEND;
   static constexpr ValueType ITEM_EX_DIVIDEND = SOHSTR(A);
   static const ItemType EX_DISTRIBUTION;
   static constexpr ValueType ITEM_EX_DISTRIBUTION = SOHSTR(B);
   static const ItemType EX_RIGHTS;
   static constexpr ValueType ITEM_EX_RIGHTS = SOHSTR(C);
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = SOHSTR(D);
   static const ItemType EX_INTEREST;
   static constexpr ValueType ITEM_EX_INTEREST = SOHSTR(E);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct QuoteStatusEnums final: FieldEnumsBase {
   typedef FieldQuoteStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const QuoteStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ACCEPTED;
   static constexpr ValueType ITEM_ACCEPTED = 0;
   static const ItemType CANCELED_FOR_SYMBOL;
   static constexpr ValueType ITEM_CANCELED_FOR_SYMBOL = 1;
   static const ItemType CANCELED_FOR_SECURITY_TYPE;
   static constexpr ValueType ITEM_CANCELED_FOR_SECURITY_TYPE = 2;
   static const ItemType CANCELED_FOR_UNDERLYING;
   static constexpr ValueType ITEM_CANCELED_FOR_UNDERLYING = 3;
   static const ItemType CANCELED_ALL;
   static constexpr ValueType ITEM_CANCELED_ALL = 4;
   static const ItemType REJECTED;
   static constexpr ValueType ITEM_REJECTED = 5;
   static const ItemType REMOVED_FROM_MARKET;
   static constexpr ValueType ITEM_REMOVED_FROM_MARKET = 6;
   static const ItemType EXPIRED;
   static constexpr ValueType ITEM_EXPIRED = 7;
   static const ItemType QUERY;
   static constexpr ValueType ITEM_QUERY = 8;
   static const ItemType QUOTE_NOT_FOUND;
   static constexpr ValueType ITEM_QUOTE_NOT_FOUND = 9;
   static const ItemType PENDING;
   static constexpr ValueType ITEM_PENDING = 10;
   static const ItemType PASS;
   static constexpr ValueType ITEM_PASS = 11;
   static const ItemType LOCKED_MARKET_WARNING;
   static constexpr ValueType ITEM_LOCKED_MARKET_WARNING = 12;
   static const ItemType CROSS_MARKET_WARNING;
   static constexpr ValueType ITEM_CROSS_MARKET_WARNING = 13;
   static const ItemType CANCELED_DUE_TO_LOCK_MARKET;
   static constexpr ValueType ITEM_CANCELED_DUE_TO_LOCK_MARKET = 14;
   static const ItemType CANCELED_DUE_TO_CROSS_MARKET;
   static constexpr ValueType ITEM_CANCELED_DUE_TO_CROSS_MARKET = 15;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct QuoteCancelTypeEnums final: FieldEnumsBase {
   typedef FieldQuoteCancelType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const QuoteCancelTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CANCEL_FOR_SYMBOL;
   static constexpr ValueType ITEM_CANCEL_FOR_SYMBOL = 1;
   static const ItemType CANCEL_FOR_SECURITY_TYPE;
   static constexpr ValueType ITEM_CANCEL_FOR_SECURITY_TYPE = 2;
   static const ItemType CANCEL_FOR_UNDERLYING_SYMBOL;
   static constexpr ValueType ITEM_CANCEL_FOR_UNDERLYING_SYMBOL = 3;
   static const ItemType CANCEL_ALL_QUOTES;
   static constexpr ValueType ITEM_CANCEL_ALL_QUOTES = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct QuoteRejectReasonEnums final: FieldEnumsBase {
   typedef FieldQuoteRejectReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const QuoteRejectReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType UNKNOWN_SYMBOL;
   static constexpr ValueType ITEM_UNKNOWN_SYMBOL = 1;
   static const ItemType EXCHANGE;
   static constexpr ValueType ITEM_EXCHANGE = 2;
   static const ItemType QUOTE_REQUEST_EXCEEDS_LIMIT;
   static constexpr ValueType ITEM_QUOTE_REQUEST_EXCEEDS_LIMIT = 3;
   static const ItemType TOO_LATE_TO_ENTER;
   static constexpr ValueType ITEM_TOO_LATE_TO_ENTER = 4;
   static const ItemType UNKNOWN_QUOTE;
   static constexpr ValueType ITEM_UNKNOWN_QUOTE = 5;
   static const ItemType DUPLICATE_QUOTE;
   static constexpr ValueType ITEM_DUPLICATE_QUOTE = 6;
   static const ItemType INVALID_BID_ASK_SPREAD;
   static constexpr ValueType ITEM_INVALID_BID_ASK_SPREAD = 7;
   static const ItemType INVALID_PRICE;
   static constexpr ValueType ITEM_INVALID_PRICE = 8;
   static const ItemType NOT_AUTHORIZED_TO_QUOTE_SECURITY;
   static constexpr ValueType ITEM_NOT_AUTHORIZED_TO_QUOTE_SECURITY = 9;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct QuoteResponseLevelEnums final: FieldEnumsBase {
   typedef FieldQuoteResponseLevel::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const QuoteResponseLevelEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NO_ACKNOWLEDGEMENT;
   static constexpr ValueType ITEM_NO_ACKNOWLEDGEMENT = 0;
   static const ItemType ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES;
   static constexpr ValueType ITEM_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES = 1;
   static const ItemType ACKNOWLEDGE_EACH_QUOTE_MESSAGES;
   static constexpr ValueType ITEM_ACKNOWLEDGE_EACH_QUOTE_MESSAGES = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct QuoteRequestTypeEnums final: FieldEnumsBase {
   typedef FieldQuoteRequestType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const QuoteRequestTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType MANUAL;
   static constexpr ValueType ITEM_MANUAL = 1;
   static const ItemType AUTOMATIC;
   static constexpr ValueType ITEM_AUTOMATIC = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SecurityRequestTypeEnums final: FieldEnumsBase {
   typedef FieldSecurityRequestType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SecurityRequestTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS;
   static constexpr ValueType ITEM_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS = 0;
   static const ItemType REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED;
   static constexpr ValueType ITEM_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED = 1;
   static const ItemType REQUEST_LIST_SECURITY_TYPES;
   static constexpr ValueType ITEM_REQUEST_LIST_SECURITY_TYPES = 2;
   static const ItemType REQUEST_LIST_SECURITIES;
   static constexpr ValueType ITEM_REQUEST_LIST_SECURITIES = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SecurityResponseTypeEnums final: FieldEnumsBase {
   typedef FieldSecurityResponseType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SecurityResponseTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ACCEPT_SECURITY_PROPOSAL_AS_IS;
   static constexpr ValueType ITEM_ACCEPT_SECURITY_PROPOSAL_AS_IS = 1;
   static const ItemType ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE;
   static constexpr ValueType ITEM_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE = 2;
   static const ItemType REJECT_SECURITY_PROPOSAL;
   static constexpr ValueType ITEM_REJECT_SECURITY_PROPOSAL = 5;
   static const ItemType CAN_NOT_MATCH_SELECTION_CRITERIA;
   static constexpr ValueType ITEM_CAN_NOT_MATCH_SELECTION_CRITERIA = 6;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct UnsolicitedIndicatorEnums final: FieldEnumsBase {
   typedef FieldUnsolicitedIndicator::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const UnsolicitedIndicatorEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SecurityTradingStatusEnums final: FieldEnumsBase {
   typedef FieldSecurityTradingStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SecurityTradingStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType OPENING_DELAY;
   static constexpr ValueType ITEM_OPENING_DELAY = 1;
   static const ItemType TRADING_HALT;
   static constexpr ValueType ITEM_TRADING_HALT = 2;
   static const ItemType RESUME;
   static constexpr ValueType ITEM_RESUME = 3;
   static const ItemType NO_OPEN_NO_RESUME;
   static constexpr ValueType ITEM_NO_OPEN_NO_RESUME = 4;
   static const ItemType PRICE_INDICATION;
   static constexpr ValueType ITEM_PRICE_INDICATION = 5;
   static const ItemType TRADING_RANGE_INDICATION;
   static constexpr ValueType ITEM_TRADING_RANGE_INDICATION = 6;
   static const ItemType MARKET_IMBALANCE_BUY;
   static constexpr ValueType ITEM_MARKET_IMBALANCE_BUY = 7;
   static const ItemType MARKET_IMBALANCE_SELL;
   static constexpr ValueType ITEM_MARKET_IMBALANCE_SELL = 8;
   static const ItemType MARKET_ON_CLOSE_IMBALANCE_BUY;
   static constexpr ValueType ITEM_MARKET_ON_CLOSE_IMBALANCE_BUY = 9;
   static const ItemType MARKET_ON_CLOSE_IMBALANCE_SELL;
   static constexpr ValueType ITEM_MARKET_ON_CLOSE_IMBALANCE_SELL = 10;
   static const ItemType NO_MARKET_IMBALANCE;
   static constexpr ValueType ITEM_NO_MARKET_IMBALANCE = 12;
   static const ItemType NO_MARKET_ON_CLOSE_IMBALANCE;
   static constexpr ValueType ITEM_NO_MARKET_ON_CLOSE_IMBALANCE = 13;
   static const ItemType ITS_PRE_OPENING;
   static constexpr ValueType ITEM_ITS_PRE_OPENING = 14;
   static const ItemType NEW_PRICE_INDICATION;
   static constexpr ValueType ITEM_NEW_PRICE_INDICATION = 15;
   static const ItemType TRADE_DISSEMINATION_TIME;
   static constexpr ValueType ITEM_TRADE_DISSEMINATION_TIME = 16;
   static const ItemType READY_TO_TRADE;
   static constexpr ValueType ITEM_READY_TO_TRADE = 17;
   static const ItemType NOT_AVAILABLE_FOR_TRADING;
   static constexpr ValueType ITEM_NOT_AVAILABLE_FOR_TRADING = 18;
   static const ItemType NOT_TRADED_ON_THIS_MARKET;
   static constexpr ValueType ITEM_NOT_TRADED_ON_THIS_MARKET = 19;
   static const ItemType UNKNOWN_OR_INVALID;
   static constexpr ValueType ITEM_UNKNOWN_OR_INVALID = 20;
   static const ItemType PRE_OPEN;
   static constexpr ValueType ITEM_PRE_OPEN = 21;
   static const ItemType OPENING_ROTATION;
   static constexpr ValueType ITEM_OPENING_ROTATION = 22;
   static const ItemType FAST_MARKET;
   static constexpr ValueType ITEM_FAST_MARKET = 23;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct HaltReasonCharEnums final: FieldEnumsBase {
   typedef FieldHaltReasonChar::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const HaltReasonCharEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ORDER_IMBALANCE;
   static constexpr ValueType ITEM_ORDER_IMBALANCE = 'I';
   static const ItemType EQUIPMENT_CHANGEOVER;
   static constexpr ValueType ITEM_EQUIPMENT_CHANGEOVER = 'X';
   static const ItemType NEWS_PENDING;
   static constexpr ValueType ITEM_NEWS_PENDING = 'P';
   static const ItemType NEWS_DISSEMINATION;
   static constexpr ValueType ITEM_NEWS_DISSEMINATION = 'D';
   static const ItemType ORDER_INFLUX;
   static constexpr ValueType ITEM_ORDER_INFLUX = 'E';
   static const ItemType ADDITIONAL_INFORMATION;
   static constexpr ValueType ITEM_ADDITIONAL_INFORMATION = 'M';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct InViewOfCommonEnums final: FieldEnumsBase {
   typedef FieldInViewOfCommon::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const InViewOfCommonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DueToRelatedEnums final: FieldEnumsBase {
   typedef FieldDueToRelated::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DueToRelatedEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AdjustmentEnums final: FieldEnumsBase {
   typedef FieldAdjustment::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AdjustmentEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CANCEL;
   static constexpr ValueType ITEM_CANCEL = 1;
   static const ItemType ERROR;
   static constexpr ValueType ITEM_ERROR = 2;
   static const ItemType CORRECTION;
   static constexpr ValueType ITEM_CORRECTION = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TradSesMethodEnums final: FieldEnumsBase {
   typedef FieldTradSesMethod::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TradSesMethodEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ELECTRONIC;
   static constexpr ValueType ITEM_ELECTRONIC = 1;
   static const ItemType OPEN_OUTCRY;
   static constexpr ValueType ITEM_OPEN_OUTCRY = 2;
   static const ItemType TWO_PARTY;
   static constexpr ValueType ITEM_TWO_PARTY = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TradSesModeEnums final: FieldEnumsBase {
   typedef FieldTradSesMode::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TradSesModeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType TESTING;
   static constexpr ValueType ITEM_TESTING = 1;
   static const ItemType SIMULATED;
   static constexpr ValueType ITEM_SIMULATED = 2;
   static const ItemType PRODUCTION;
   static constexpr ValueType ITEM_PRODUCTION = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TradSesStatusEnums final: FieldEnumsBase {
   typedef FieldTradSesStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TradSesStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType UNKNOWN;
   static constexpr ValueType ITEM_UNKNOWN = 0;
   static const ItemType HALTED;
   static constexpr ValueType ITEM_HALTED = 1;
   static const ItemType OPEN;
   static constexpr ValueType ITEM_OPEN = 2;
   static const ItemType CLOSED;
   static constexpr ValueType ITEM_CLOSED = 3;
   static const ItemType PRE_OPEN;
   static constexpr ValueType ITEM_PRE_OPEN = 4;
   static const ItemType PRE_CLOSE;
   static constexpr ValueType ITEM_PRE_CLOSE = 5;
   static const ItemType REQUEST_REJECTED;
   static constexpr ValueType ITEM_REQUEST_REJECTED = 6;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MessageEncodingEnums final: FieldEnumsBase {
   typedef FieldMessageEncoding::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MessageEncodingEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType JIS;
   static constexpr ValueType ITEM_JIS = SOHSTR(ISO-2022-JP);
   static const ItemType EUC;
   static constexpr ValueType ITEM_EUC = SOHSTR(EUC-JP);
   static const ItemType FOR_USING_SJIS;
   static constexpr ValueType ITEM_FOR_USING_SJIS = SOHSTR(Shift_JIS);
   static const ItemType UNICODE;
   static constexpr ValueType ITEM_UNICODE = SOHSTR(UTF-8);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SessionRejectReasonEnums final: FieldEnumsBase {
   typedef FieldSessionRejectReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SessionRejectReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType INVALID_TAG_NUMBER;
   static constexpr ValueType ITEM_INVALID_TAG_NUMBER = 0;
   static const ItemType REQUIRED_TAG_MISSING;
   static constexpr ValueType ITEM_REQUIRED_TAG_MISSING = 1;
   static const ItemType TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE;
   static constexpr ValueType ITEM_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE = 2;
   static const ItemType UNDEFINED_TAG;
   static constexpr ValueType ITEM_UNDEFINED_TAG = 3;
   static const ItemType TAG_SPECIFIED_WITHOUT_A_VALUE;
   static constexpr ValueType ITEM_TAG_SPECIFIED_WITHOUT_A_VALUE = 4;
   static const ItemType VALUE_IS_INCORRECT;
   static constexpr ValueType ITEM_VALUE_IS_INCORRECT = 5;
   static const ItemType INCORRECT_DATA_FORMAT_FOR_VALUE;
   static constexpr ValueType ITEM_INCORRECT_DATA_FORMAT_FOR_VALUE = 6;
   static const ItemType DECRYPTION_PROBLEM;
   static constexpr ValueType ITEM_DECRYPTION_PROBLEM = 7;
   static const ItemType SIGNATURE_PROBLEM;
   static constexpr ValueType ITEM_SIGNATURE_PROBLEM = 8;
   static const ItemType COMPID_PROBLEM;
   static constexpr ValueType ITEM_COMPID_PROBLEM = 9;
   static const ItemType SENDINGTIME_ACCURACY_PROBLEM;
   static constexpr ValueType ITEM_SENDINGTIME_ACCURACY_PROBLEM = 10;
   static const ItemType INVALID_MSGTYPE;
   static constexpr ValueType ITEM_INVALID_MSGTYPE = 11;
   static const ItemType XML_VALIDATION_ERROR;
   static constexpr ValueType ITEM_XML_VALIDATION_ERROR = 12;
   static const ItemType TAG_APPEARS_MORE_THAN_ONCE;
   static constexpr ValueType ITEM_TAG_APPEARS_MORE_THAN_ONCE = 13;
   static const ItemType TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER;
   static constexpr ValueType ITEM_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER = 14;
   static const ItemType REPEATING_GROUP_FIELDS_OUT_OF_ORDER;
   static constexpr ValueType ITEM_REPEATING_GROUP_FIELDS_OUT_OF_ORDER = 15;
   static const ItemType INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP;
   static constexpr ValueType ITEM_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP = 16;
   static const ItemType NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER;
   static constexpr ValueType ITEM_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER = 17;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct BidRequestTransTypeEnums final: FieldEnumsBase {
   typedef FieldBidRequestTransType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const BidRequestTransTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = 'N';
   static const ItemType CANCEL;
   static constexpr ValueType ITEM_CANCEL = 'C';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SolicitedFlagEnums final: FieldEnumsBase {
   typedef FieldSolicitedFlag::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SolicitedFlagEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ExecRestatementReasonEnums final: FieldEnumsBase {
   typedef FieldExecRestatementReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ExecRestatementReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType GT_CORPORATE_ACTION;
   static constexpr ValueType ITEM_GT_CORPORATE_ACTION = 0;
   static const ItemType GT_RENEWAL;
   static constexpr ValueType ITEM_GT_RENEWAL = 1;
   static const ItemType VERBAL_CHANGE;
   static constexpr ValueType ITEM_VERBAL_CHANGE = 2;
   static const ItemType REPRICING_OF_ORDER;
   static constexpr ValueType ITEM_REPRICING_OF_ORDER = 3;
   static const ItemType BROKER_OPTION;
   static constexpr ValueType ITEM_BROKER_OPTION = 4;
   static const ItemType PARTIAL_DECLINE_OF_ORDERQTY;
   static constexpr ValueType ITEM_PARTIAL_DECLINE_OF_ORDERQTY = 5;
   static const ItemType CANCEL_ON_TRADING_HALT;
   static constexpr ValueType ITEM_CANCEL_ON_TRADING_HALT = 6;
   static const ItemType CANCEL_ON_SYSTEM_FAILURE;
   static constexpr ValueType ITEM_CANCEL_ON_SYSTEM_FAILURE = 7;
   static const ItemType MARKET;
   static constexpr ValueType ITEM_MARKET = 8;
   static const ItemType CANCELED_NOT_BEST;
   static constexpr ValueType ITEM_CANCELED_NOT_BEST = 9;
   static const ItemType WAREHOUSE_RECAP;
   static constexpr ValueType ITEM_WAREHOUSE_RECAP = 10;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct BusinessRejectReasonEnums final: FieldEnumsBase {
   typedef FieldBusinessRejectReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const BusinessRejectReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 0;
   static const ItemType UNKOWN_ID;
   static constexpr ValueType ITEM_UNKOWN_ID = 1;
   static const ItemType UNKNOWN_SECURITY;
   static constexpr ValueType ITEM_UNKNOWN_SECURITY = 2;
   static const ItemType UNSUPPORTED_MESSAGE_TYPE;
   static constexpr ValueType ITEM_UNSUPPORTED_MESSAGE_TYPE = 3;
   static const ItemType APPLICATION_NOT_AVAILABLE;
   static constexpr ValueType ITEM_APPLICATION_NOT_AVAILABLE = 4;
   static const ItemType CONDITIONALLY_REQUIRED_FIELD_MISSING;
   static constexpr ValueType ITEM_CONDITIONALLY_REQUIRED_FIELD_MISSING = 5;
   static const ItemType NOT_AUTHORIZED;
   static constexpr ValueType ITEM_NOT_AUTHORIZED = 6;
   static const ItemType DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME;
   static constexpr ValueType ITEM_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME = 7;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MsgDirectionEnums final: FieldEnumsBase {
   typedef FieldMsgDirection::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MsgDirectionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SEND;
   static constexpr ValueType ITEM_SEND = 'S';
   static const ItemType RECEIVE;
   static constexpr ValueType ITEM_RECEIVE = 'R';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DiscretionInstEnums final: FieldEnumsBase {
   typedef FieldDiscretionInst::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DiscretionInstEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType RELATED_TO_DISPLAYED_PRICE;
   static constexpr ValueType ITEM_RELATED_TO_DISPLAYED_PRICE = '0';
   static const ItemType RELATED_TO_MARKET_PRICE;
   static constexpr ValueType ITEM_RELATED_TO_MARKET_PRICE = '1';
   static const ItemType RELATED_TO_PRIMARY_PRICE;
   static constexpr ValueType ITEM_RELATED_TO_PRIMARY_PRICE = '2';
   static const ItemType RELATED_TO_LOCAL_PRIMARY_PRICE;
   static constexpr ValueType ITEM_RELATED_TO_LOCAL_PRIMARY_PRICE = '3';
   static const ItemType RELATED_TO_MIDPOINT_PRICE;
   static constexpr ValueType ITEM_RELATED_TO_MIDPOINT_PRICE = '4';
   static const ItemType RELATED_TO_LAST_TRADE_PRICE;
   static constexpr ValueType ITEM_RELATED_TO_LAST_TRADE_PRICE = '5';
   static const ItemType RELATED_TO_VWAP;
   static constexpr ValueType ITEM_RELATED_TO_VWAP = '6';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct BidTypeEnums final: FieldEnumsBase {
   typedef FieldBidType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const BidTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NON_DISCLOSED_STYLE;
   static constexpr ValueType ITEM_NON_DISCLOSED_STYLE = 1;
   static const ItemType DISCLOSED_STYLE;
   static constexpr ValueType ITEM_DISCLOSED_STYLE = 2;
   static const ItemType NO_BIDDING_PROCESS;
   static constexpr ValueType ITEM_NO_BIDDING_PROCESS = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct BidDescriptorTypeEnums final: FieldEnumsBase {
   typedef FieldBidDescriptorType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const BidDescriptorTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SECTOR;
   static constexpr ValueType ITEM_SECTOR = 1;
   static const ItemType COUNTRY;
   static constexpr ValueType ITEM_COUNTRY = 2;
   static const ItemType INDEX;
   static constexpr ValueType ITEM_INDEX = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SideValueIndEnums final: FieldEnumsBase {
   typedef FieldSideValueInd::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SideValueIndEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SIDEVALUE1;
   static constexpr ValueType ITEM_SIDEVALUE1 = 1;
   static const ItemType SIDEVALUE_2;
   static constexpr ValueType ITEM_SIDEVALUE_2 = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct LiquidityIndTypeEnums final: FieldEnumsBase {
   typedef FieldLiquidityIndType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const LiquidityIndTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType _5DAY_MOVING_AVERAGE;
   static constexpr ValueType ITEM__5DAY_MOVING_AVERAGE = 1;
   static const ItemType _20_DAY_MOVING_AVERAGE;
   static constexpr ValueType ITEM__20_DAY_MOVING_AVERAGE = 2;
   static const ItemType NORMAL_MARKET_SIZE;
   static constexpr ValueType ITEM_NORMAL_MARKET_SIZE = 3;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ExchangeForPhysicalEnums final: FieldEnumsBase {
   typedef FieldExchangeForPhysical::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ExchangeForPhysicalEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ProgRptReqsEnums final: FieldEnumsBase {
   typedef FieldProgRptReqs::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ProgRptReqsEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST;
   static constexpr ValueType ITEM_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST = 1;
   static const ItemType SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD;
   static constexpr ValueType ITEM_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD = 2;
   static const ItemType REAL_TIME_EXECUTION_REPORTS;
   static constexpr ValueType ITEM_REAL_TIME_EXECUTION_REPORTS = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct IncTaxIndEnums final: FieldEnumsBase {
   typedef FieldIncTaxInd::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const IncTaxIndEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NET;
   static constexpr ValueType ITEM_NET = 1;
   static const ItemType GROSS;
   static constexpr ValueType ITEM_GROSS = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct BidTradeTypeEnums final: FieldEnumsBase {
   typedef FieldBidTradeType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const BidTradeTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType RISK_TRADE;
   static constexpr ValueType ITEM_RISK_TRADE = 'R';
   static const ItemType VWAP_GUARANTEE;
   static constexpr ValueType ITEM_VWAP_GUARANTEE = 'G';
   static const ItemType AGENCY;
   static constexpr ValueType ITEM_AGENCY = 'A';
   static const ItemType GUARANTEED_CLOSE;
   static constexpr ValueType ITEM_GUARANTEED_CLOSE = 'J';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct BasisPxTypeEnums final: FieldEnumsBase {
   typedef FieldBasisPxType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const BasisPxTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CLOSING_PRICE_AT_MORNING_SESSION;
   static constexpr ValueType ITEM_CLOSING_PRICE_AT_MORNING_SESSION = '2';
   static const ItemType CLOSING_PRICE;
   static constexpr ValueType ITEM_CLOSING_PRICE = '3';
   static const ItemType CURRENT_PRICE;
   static constexpr ValueType ITEM_CURRENT_PRICE = '4';
   static const ItemType SQ;
   static constexpr ValueType ITEM_SQ = '5';
   static const ItemType VWAP_THROUGH_A_DAY;
   static constexpr ValueType ITEM_VWAP_THROUGH_A_DAY = '6';
   static const ItemType VWAP_THROUGH_A_MORNING_SESSION;
   static constexpr ValueType ITEM_VWAP_THROUGH_A_MORNING_SESSION = '7';
   static const ItemType VWAP_THROUGH_AN_AFTERNOON_SESSION;
   static constexpr ValueType ITEM_VWAP_THROUGH_AN_AFTERNOON_SESSION = '8';
   static const ItemType VWAP_THROUGH_A_DAY_EXCEPT_YORI;
   static constexpr ValueType ITEM_VWAP_THROUGH_A_DAY_EXCEPT_YORI = '9';
   static const ItemType VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI;
   static constexpr ValueType ITEM_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI = 'A';
   static const ItemType VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI;
   static constexpr ValueType ITEM_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI = 'B';
   static const ItemType STRIKE;
   static constexpr ValueType ITEM_STRIKE = 'C';
   static const ItemType OPEN;
   static constexpr ValueType ITEM_OPEN = 'D';
   static const ItemType OTHERS;
   static constexpr ValueType ITEM_OTHERS = 'Z';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PriceTypeEnums final: FieldEnumsBase {
   typedef FieldPriceType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PriceTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PERCENTAGE;
   static constexpr ValueType ITEM_PERCENTAGE = 1;
   static const ItemType PER_UNIT;
   static constexpr ValueType ITEM_PER_UNIT = 2;
   static const ItemType FIXED_AMOUNT;
   static constexpr ValueType ITEM_FIXED_AMOUNT = 3;
   static const ItemType DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR;
   static constexpr ValueType ITEM_DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR = 4;
   static const ItemType PREMIUM_PERCENTAGE_POINTS_OVER_PAR;
   static constexpr ValueType ITEM_PREMIUM_PERCENTAGE_POINTS_OVER_PAR = 5;
   static const ItemType SPREAD;
   static constexpr ValueType ITEM_SPREAD = 6;
   static const ItemType TED_PRICE;
   static constexpr ValueType ITEM_TED_PRICE = 7;
   static const ItemType TED_YIELD;
   static constexpr ValueType ITEM_TED_YIELD = 8;
   static const ItemType YIELD;
   static constexpr ValueType ITEM_YIELD = 9;
   static const ItemType FIXED_CABINET_TRADE_PRICE;
   static constexpr ValueType ITEM_FIXED_CABINET_TRADE_PRICE = 10;
   static const ItemType VARIABLE_CABINET_TRADE_PRICE;
   static constexpr ValueType ITEM_VARIABLE_CABINET_TRADE_PRICE = 11;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct GTBookingInstEnums final: FieldEnumsBase {
   typedef FieldGTBookingInst::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const GTBookingInstEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION;
   static constexpr ValueType ITEM_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION = 0;
   static const ItemType ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES;
   static constexpr ValueType ITEM_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES = 1;
   static const ItemType ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE;
   static constexpr ValueType ITEM_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ListStatusTypeEnums final: FieldEnumsBase {
   typedef FieldListStatusType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ListStatusTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ACK;
   static constexpr ValueType ITEM_ACK = 1;
   static const ItemType RESPONSE;
   static constexpr ValueType ITEM_RESPONSE = 2;
   static const ItemType TIMED;
   static constexpr ValueType ITEM_TIMED = 3;
   static const ItemType EXECSTARTED;
   static constexpr ValueType ITEM_EXECSTARTED = 4;
   static const ItemType ALLDONE;
   static constexpr ValueType ITEM_ALLDONE = 5;
   static const ItemType ALERT;
   static constexpr ValueType ITEM_ALERT = 6;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct NetGrossIndEnums final: FieldEnumsBase {
   typedef FieldNetGrossInd::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const NetGrossIndEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NET;
   static constexpr ValueType ITEM_NET = 1;
   static const ItemType GROSS;
   static constexpr ValueType ITEM_GROSS = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ListOrderStatusEnums final: FieldEnumsBase {
   typedef FieldListOrderStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ListOrderStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType INBIDDINGPROCESS;
   static constexpr ValueType ITEM_INBIDDINGPROCESS = 1;
   static const ItemType RECEIVEDFOREXECUTION;
   static constexpr ValueType ITEM_RECEIVEDFOREXECUTION = 2;
   static const ItemType EXECUTING;
   static constexpr ValueType ITEM_EXECUTING = 3;
   static const ItemType CANCELING;
   static constexpr ValueType ITEM_CANCELING = 4;
   static const ItemType ALERT;
   static constexpr ValueType ITEM_ALERT = 5;
   static const ItemType ALL_DONE;
   static constexpr ValueType ITEM_ALL_DONE = 6;
   static const ItemType REJECT;
   static constexpr ValueType ITEM_REJECT = 7;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ListExecInstTypeEnums final: FieldEnumsBase {
   typedef FieldListExecInstType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ListExecInstTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType IMMEDIATE;
   static constexpr ValueType ITEM_IMMEDIATE = '1';
   static const ItemType WAIT_FOR_EXECUTE_INSTRUCTION;
   static constexpr ValueType ITEM_WAIT_FOR_EXECUTE_INSTRUCTION = '2';
   static const ItemType EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN;
   static constexpr ValueType ITEM_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN = '3';
   static const ItemType EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP;
   static constexpr ValueType ITEM_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP = '4';
   static const ItemType EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW;
   static constexpr ValueType ITEM_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW = '5';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CxlRejResponseToEnums final: FieldEnumsBase {
   typedef FieldCxlRejResponseTo::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CxlRejResponseToEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ORDER_CANCEL_REQUEST;
   static constexpr ValueType ITEM_ORDER_CANCEL_REQUEST = '1';
   static const ItemType ORDER_CANCEL_REPLACE_REQUEST;
   static constexpr ValueType ITEM_ORDER_CANCEL_REPLACE_REQUEST = '2';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MultiLegReportingTypeEnums final: FieldEnumsBase {
   typedef FieldMultiLegReportingType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MultiLegReportingTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SINGLE_SECURITY;
   static constexpr ValueType ITEM_SINGLE_SECURITY = '1';
   static const ItemType INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY;
   static constexpr ValueType ITEM_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY = '2';
   static const ItemType MULTI_LEG_SECURITY;
   static constexpr ValueType ITEM_MULTI_LEG_SECURITY = '3';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PartyIDSourceEnums final: FieldEnumsBase {
   typedef FieldPartyIDSource::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PartyIDSourceEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType BIC;
   static constexpr ValueType ITEM_BIC = 'B';
   static const ItemType GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER;
   static constexpr ValueType ITEM_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER = 'C';
   static const ItemType PROPRIETARY_CUSTOM_CODE;
   static constexpr ValueType ITEM_PROPRIETARY_CUSTOM_CODE = 'D';
   static const ItemType ISO_COUNTRY_CODE;
   static constexpr ValueType ITEM_ISO_COUNTRY_CODE = 'E';
   static const ItemType SETTLEMENT_ENTITY_LOCATION;
   static constexpr ValueType ITEM_SETTLEMENT_ENTITY_LOCATION = 'F';
   static const ItemType MIC;
   static constexpr ValueType ITEM_MIC = 'G';
   static const ItemType CSD_PARTICIPANT_MEMBER_CODE;
   static constexpr ValueType ITEM_CSD_PARTICIPANT_MEMBER_CODE = 'H';
   static const ItemType KOREAN_INVESTOR_ID;
   static constexpr ValueType ITEM_KOREAN_INVESTOR_ID = '1';
   static const ItemType TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII;
   static constexpr ValueType ITEM_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII = '2';
   static const ItemType TAIWANESE_TRADING_ACCOUNT;
   static constexpr ValueType ITEM_TAIWANESE_TRADING_ACCOUNT = '3';
   static const ItemType MALAYSIAN_CENTRAL_DEPOSITORY;
   static constexpr ValueType ITEM_MALAYSIAN_CENTRAL_DEPOSITORY = '4';
   static const ItemType CHINESE_B_SHARE;
   static constexpr ValueType ITEM_CHINESE_B_SHARE = '5';
   static const ItemType UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER;
   static constexpr ValueType ITEM_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER = '6';
   static const ItemType US_SOCIAL_SECURITY_NUMBER;
   static constexpr ValueType ITEM_US_SOCIAL_SECURITY_NUMBER = '7';
   static const ItemType US_EMPLOYER_IDENTIFICATION_NUMBER;
   static constexpr ValueType ITEM_US_EMPLOYER_IDENTIFICATION_NUMBER = '8';
   static const ItemType AUSTRALIAN_BUSINESS_NUMBER;
   static constexpr ValueType ITEM_AUSTRALIAN_BUSINESS_NUMBER = '9';
   static const ItemType AUSTRALIAN_TAX_FILE_NUMBER;
   static constexpr ValueType ITEM_AUSTRALIAN_TAX_FILE_NUMBER = 'A';
   static const ItemType DIRECTED_BROKER_THREE_CHARACTER_ACRONYM_AS_DEFINED_IN_ISITC_ETC_BEST_PRACTICE_GUIDELINES_DOCUMENT;
   static constexpr ValueType ITEM_DIRECTED_BROKER_THREE_CHARACTER_ACRONYM_AS_DEFINED_IN_ISITC_ETC_BEST_PRACTICE_GUIDELINES_DOCUMENT = 'I';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PartyRoleEnums final: FieldEnumsBase {
   typedef FieldPartyRole::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PartyRoleEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType EXECUTING_FIRM;
   static constexpr ValueType ITEM_EXECUTING_FIRM = 1;
   static const ItemType BROKER_OF_CREDIT;
   static constexpr ValueType ITEM_BROKER_OF_CREDIT = 2;
   static const ItemType CLIENT_ID;
   static constexpr ValueType ITEM_CLIENT_ID = 3;
   static const ItemType CLEARING_FIRM;
   static constexpr ValueType ITEM_CLEARING_FIRM = 4;
   static const ItemType INVESTOR_ID;
   static constexpr ValueType ITEM_INVESTOR_ID = 5;
   static const ItemType INTRODUCING_FIRM;
   static constexpr ValueType ITEM_INTRODUCING_FIRM = 6;
   static const ItemType ENTERING_FIRM;
   static constexpr ValueType ITEM_ENTERING_FIRM = 7;
   static const ItemType LOCATE_LENDING_FIRM;
   static constexpr ValueType ITEM_LOCATE_LENDING_FIRM = 8;
   static const ItemType FUND_MANAGER_CLIENT_ID;
   static constexpr ValueType ITEM_FUND_MANAGER_CLIENT_ID = 9;
   static const ItemType SETTLEMENT_LOCATION;
   static constexpr ValueType ITEM_SETTLEMENT_LOCATION = 10;
   static const ItemType ORDER_ORIGINATION_TRADER;
   static constexpr ValueType ITEM_ORDER_ORIGINATION_TRADER = 11;
   static const ItemType EXECUTING_TRADER;
   static constexpr ValueType ITEM_EXECUTING_TRADER = 12;
   static const ItemType ORDER_ORIGINATION_FIRM;
   static constexpr ValueType ITEM_ORDER_ORIGINATION_FIRM = 13;
   static const ItemType GIVEUP_CLEARING_FIRM;
   static constexpr ValueType ITEM_GIVEUP_CLEARING_FIRM = 14;
   static const ItemType CORRESPONDANT_CLEARING_FIRM;
   static constexpr ValueType ITEM_CORRESPONDANT_CLEARING_FIRM = 15;
   static const ItemType EXECUTING_SYSTEM;
   static constexpr ValueType ITEM_EXECUTING_SYSTEM = 16;
   static const ItemType CONTRA_FIRM;
   static constexpr ValueType ITEM_CONTRA_FIRM = 17;
   static const ItemType CONTRA_CLEARING_FIRM;
   static constexpr ValueType ITEM_CONTRA_CLEARING_FIRM = 18;
   static const ItemType SPONSORING_FIRM;
   static constexpr ValueType ITEM_SPONSORING_FIRM = 19;
   static const ItemType UNDERLYING_CONTRA_FIRM;
   static constexpr ValueType ITEM_UNDERLYING_CONTRA_FIRM = 20;
   static const ItemType CLEARING_ORGANIZATION;
   static constexpr ValueType ITEM_CLEARING_ORGANIZATION = 21;
   static const ItemType EXCHANGE;
   static constexpr ValueType ITEM_EXCHANGE = 22;
   static const ItemType CUSTOMER_ACCOUNT;
   static constexpr ValueType ITEM_CUSTOMER_ACCOUNT = 24;
   static const ItemType CORRESPONDENT_CLEARING_ORGANIZATION;
   static constexpr ValueType ITEM_CORRESPONDENT_CLEARING_ORGANIZATION = 25;
   static const ItemType CORRESPONDENT_BROKER;
   static constexpr ValueType ITEM_CORRESPONDENT_BROKER = 26;
   static const ItemType BUYER_SELLER;
   static constexpr ValueType ITEM_BUYER_SELLER = 27;
   static const ItemType CUSTODIAN;
   static constexpr ValueType ITEM_CUSTODIAN = 28;
   static const ItemType INTERMEDIARY;
   static constexpr ValueType ITEM_INTERMEDIARY = 29;
   static const ItemType AGENT;
   static constexpr ValueType ITEM_AGENT = 30;
   static const ItemType SUB_CUSTODIAN;
   static constexpr ValueType ITEM_SUB_CUSTODIAN = 31;
   static const ItemType BENEFICIARY;
   static constexpr ValueType ITEM_BENEFICIARY = 32;
   static const ItemType INTERESTED_PARTY;
   static constexpr ValueType ITEM_INTERESTED_PARTY = 33;
   static const ItemType REGULATORY_BODY;
   static constexpr ValueType ITEM_REGULATORY_BODY = 34;
   static const ItemType LIQUIDITY_PROVIDER;
   static constexpr ValueType ITEM_LIQUIDITY_PROVIDER = 35;
   static const ItemType ENTERING_TRADER;
   static constexpr ValueType ITEM_ENTERING_TRADER = 36;
   static const ItemType CONTRA_TRADER;
   static constexpr ValueType ITEM_CONTRA_TRADER = 37;
   static const ItemType POSITION_ACCOUNT;
   static constexpr ValueType ITEM_POSITION_ACCOUNT = 38;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ProductEnums final: FieldEnumsBase {
   typedef FieldProduct::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ProductEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType AGENCY;
   static constexpr ValueType ITEM_AGENCY = 1;
   static const ItemType COMMODITY;
   static constexpr ValueType ITEM_COMMODITY = 2;
   static const ItemType CORPORATE;
   static constexpr ValueType ITEM_CORPORATE = 3;
   static const ItemType CURRENCY;
   static constexpr ValueType ITEM_CURRENCY = 4;
   static const ItemType EQUITY;
   static constexpr ValueType ITEM_EQUITY = 5;
   static const ItemType GOVERNMENT;
   static constexpr ValueType ITEM_GOVERNMENT = 6;
   static const ItemType INDEX;
   static constexpr ValueType ITEM_INDEX = 7;
   static const ItemType LOAN;
   static constexpr ValueType ITEM_LOAN = 8;
   static const ItemType MONEYMARKET;
   static constexpr ValueType ITEM_MONEYMARKET = 9;
   static const ItemType MORTGAGE;
   static constexpr ValueType ITEM_MORTGAGE = 10;
   static const ItemType MUNICIPAL;
   static constexpr ValueType ITEM_MUNICIPAL = 11;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 12;
   static const ItemType FINANCING;
   static constexpr ValueType ITEM_FINANCING = 13;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TestMessageIndicatorEnums final: FieldEnumsBase {
   typedef FieldTestMessageIndicator::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TestMessageIndicatorEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct RoundingDirectionEnums final: FieldEnumsBase {
   typedef FieldRoundingDirection::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const RoundingDirectionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ROUND_TO_NEAREST;
   static constexpr ValueType ITEM_ROUND_TO_NEAREST = '0';
   static const ItemType ROUND_DOWN;
   static constexpr ValueType ITEM_ROUND_DOWN = '1';
   static const ItemType ROUND_UP;
   static constexpr ValueType ITEM_ROUND_UP = '2';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DistribPaymentMethodEnums final: FieldEnumsBase {
   typedef FieldDistribPaymentMethod::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DistribPaymentMethodEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CREST;
   static constexpr ValueType ITEM_CREST = 1;
   static const ItemType NSCC;
   static constexpr ValueType ITEM_NSCC = 2;
   static const ItemType EUROCLEAR;
   static constexpr ValueType ITEM_EUROCLEAR = 3;
   static const ItemType CLEARSTREAM;
   static constexpr ValueType ITEM_CLEARSTREAM = 4;
   static const ItemType CHEQUE;
   static constexpr ValueType ITEM_CHEQUE = 5;
   static const ItemType TELEGRAPHIC_TRANSFER;
   static constexpr ValueType ITEM_TELEGRAPHIC_TRANSFER = 6;
   static const ItemType FEDWIRE;
   static constexpr ValueType ITEM_FEDWIRE = 7;
   static const ItemType DIRECT_CREDIT;
   static constexpr ValueType ITEM_DIRECT_CREDIT = 8;
   static const ItemType ACH_CREDIT;
   static constexpr ValueType ITEM_ACH_CREDIT = 9;
   static const ItemType BPAY;
   static constexpr ValueType ITEM_BPAY = 10;
   static const ItemType HIGH_VALUE_CLEARING_SYSTEM;
   static constexpr ValueType ITEM_HIGH_VALUE_CLEARING_SYSTEM = 11;
   static const ItemType REINVEST_IN_FUND;
   static constexpr ValueType ITEM_REINVEST_IN_FUND = 12;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CancellationRightsEnums final: FieldEnumsBase {
   typedef FieldCancellationRights::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CancellationRightsEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO_EXECUTION_ONLY;
   static constexpr ValueType ITEM_NO_EXECUTION_ONLY = 'N';
   static const ItemType NO_WAIVER_AGREEMENT;
   static constexpr ValueType ITEM_NO_WAIVER_AGREEMENT = 'M';
   static const ItemType NO_INSTITUTIONAL;
   static constexpr ValueType ITEM_NO_INSTITUTIONAL = 'O';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MoneyLaunderingStatusEnums final: FieldEnumsBase {
   typedef FieldMoneyLaunderingStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MoneyLaunderingStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PASSED;
   static constexpr ValueType ITEM_PASSED = 'Y';
   static const ItemType NOT_CHECKED;
   static constexpr ValueType ITEM_NOT_CHECKED = 'N';
   static const ItemType EXEMPT_BELOW_THE_LIMIT;
   static constexpr ValueType ITEM_EXEMPT_BELOW_THE_LIMIT = '1';
   static const ItemType EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION;
   static constexpr ValueType ITEM_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION = '2';
   static const ItemType EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION;
   static constexpr ValueType ITEM_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION = '3';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ExecPriceTypeEnums final: FieldEnumsBase {
   typedef FieldExecPriceType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ExecPriceTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType BID_PRICE;
   static constexpr ValueType ITEM_BID_PRICE = 'B';
   static const ItemType CREATION_PRICE;
   static constexpr ValueType ITEM_CREATION_PRICE = 'C';
   static const ItemType CREATION_PRICE_PLUS_ADJUSTMENT;
   static constexpr ValueType ITEM_CREATION_PRICE_PLUS_ADJUSTMENT = 'D';
   static const ItemType CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT;
   static constexpr ValueType ITEM_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT = 'E';
   static const ItemType OFFER_PRICE;
   static constexpr ValueType ITEM_OFFER_PRICE = 'O';
   static const ItemType OFFER_PRICE_MINUS_ADJUSTMENT;
   static constexpr ValueType ITEM_OFFER_PRICE_MINUS_ADJUSTMENT = 'P';
   static const ItemType OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT;
   static constexpr ValueType ITEM_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT = 'Q';
   static const ItemType SINGLE_PRICE;
   static constexpr ValueType ITEM_SINGLE_PRICE = 'S';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PaymentMethodEnums final: FieldEnumsBase {
   typedef FieldPaymentMethod::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PaymentMethodEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CREST;
   static constexpr ValueType ITEM_CREST = 1;
   static const ItemType NSCC;
   static constexpr ValueType ITEM_NSCC = 2;
   static const ItemType EUROCLEAR;
   static constexpr ValueType ITEM_EUROCLEAR = 3;
   static const ItemType CLEARSTREAM;
   static constexpr ValueType ITEM_CLEARSTREAM = 4;
   static const ItemType CHEQUE;
   static constexpr ValueType ITEM_CHEQUE = 5;
   static const ItemType TELEGRAPHIC_TRANSFER;
   static constexpr ValueType ITEM_TELEGRAPHIC_TRANSFER = 6;
   static const ItemType FEDWIRE;
   static constexpr ValueType ITEM_FEDWIRE = 7;
   static const ItemType DEBIT_CARD;
   static constexpr ValueType ITEM_DEBIT_CARD = 8;
   static const ItemType DIRECT_DEBIT;
   static constexpr ValueType ITEM_DIRECT_DEBIT = 9;
   static const ItemType DIRECT_CREDIT;
   static constexpr ValueType ITEM_DIRECT_CREDIT = 10;
   static const ItemType CREDIT_CARD;
   static constexpr ValueType ITEM_CREDIT_CARD = 11;
   static const ItemType ACH_DEBIT;
   static constexpr ValueType ITEM_ACH_DEBIT = 12;
   static const ItemType ACH_CREDIT;
   static constexpr ValueType ITEM_ACH_CREDIT = 13;
   static const ItemType BPAY;
   static constexpr ValueType ITEM_BPAY = 14;
   static const ItemType HIGH_VALUE_CLEARING_SYSTEM;
   static constexpr ValueType ITEM_HIGH_VALUE_CLEARING_SYSTEM = 15;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TaxAdvantageTypeEnums final: FieldEnumsBase {
   typedef FieldTaxAdvantageType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TaxAdvantageTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NONE_NOT_APPLICABLE;
   static constexpr ValueType ITEM_NONE_NOT_APPLICABLE = 0;
   static const ItemType MAXI_ISA;
   static constexpr ValueType ITEM_MAXI_ISA = 1;
   static const ItemType TESSA;
   static constexpr ValueType ITEM_TESSA = 2;
   static const ItemType MINI_CASH_ISA;
   static constexpr ValueType ITEM_MINI_CASH_ISA = 3;
   static const ItemType MINI_STOCKS_AND_SHARES_ISA;
   static constexpr ValueType ITEM_MINI_STOCKS_AND_SHARES_ISA = 4;
   static const ItemType MINI_INSURANCE_ISA;
   static constexpr ValueType ITEM_MINI_INSURANCE_ISA = 5;
   static const ItemType CURRENT_YEAR_PAYMENT;
   static constexpr ValueType ITEM_CURRENT_YEAR_PAYMENT = 6;
   static const ItemType PRIOR_YEAR_PAYMENT;
   static constexpr ValueType ITEM_PRIOR_YEAR_PAYMENT = 7;
   static const ItemType ASSET_TRANSFER;
   static constexpr ValueType ITEM_ASSET_TRANSFER = 8;
   static const ItemType EMPLOYEE;
   static constexpr ValueType ITEM_EMPLOYEE = 9;
   static const ItemType EMPLOYEE_CURRENT_YEAR;
   static constexpr ValueType ITEM_EMPLOYEE_CURRENT_YEAR = 10;
   static const ItemType EMPLOYER;
   static constexpr ValueType ITEM_EMPLOYER = 11;
   static const ItemType EMPLOYER_CURRENT_YEAR;
   static constexpr ValueType ITEM_EMPLOYER_CURRENT_YEAR = 12;
   static const ItemType NON_FUND_PROTOTYPE_IRA;
   static constexpr ValueType ITEM_NON_FUND_PROTOTYPE_IRA = 13;
   static const ItemType NON_FUND_QUALIFIED_PLAN;
   static constexpr ValueType ITEM_NON_FUND_QUALIFIED_PLAN = 14;
   static const ItemType DEFINED_CONTRIBUTION_PLAN;
   static constexpr ValueType ITEM_DEFINED_CONTRIBUTION_PLAN = 15;
   static const ItemType INDIVIDUAL_RETIREMENT_ACCOUNT;
   static constexpr ValueType ITEM_INDIVIDUAL_RETIREMENT_ACCOUNT = 16;
   static const ItemType INDIVIDUAL_RETIREMENT_ACCOUNT_ROLLOVER;
   static constexpr ValueType ITEM_INDIVIDUAL_RETIREMENT_ACCOUNT_ROLLOVER = 17;
   static const ItemType KEOGH;
   static constexpr ValueType ITEM_KEOGH = 18;
   static const ItemType PROFIT_SHARING_PLAN;
   static constexpr ValueType ITEM_PROFIT_SHARING_PLAN = 19;
   static const ItemType _401K;
   static constexpr ValueType ITEM__401K = 20;
   static const ItemType SELF_DIRECTED_IRA;
   static constexpr ValueType ITEM_SELF_DIRECTED_IRA = 21;
   static const ItemType _403;
   static constexpr ValueType ITEM__403 = 22;
   static const ItemType _457;
   static constexpr ValueType ITEM__457 = 23;
   static const ItemType ROTH_IRA_24;
   static constexpr ValueType ITEM_ROTH_IRA_24 = 24;
   static const ItemType ROTH_IRA_25;
   static constexpr ValueType ITEM_ROTH_IRA_25 = 25;
   static const ItemType ROTH_CONVERSION_IRA_26;
   static constexpr ValueType ITEM_ROTH_CONVERSION_IRA_26 = 26;
   static const ItemType ROTH_CONVERSION_IRA_27;
   static constexpr ValueType ITEM_ROTH_CONVERSION_IRA_27 = 27;
   static const ItemType EDUCATION_IRA_28;
   static constexpr ValueType ITEM_EDUCATION_IRA_28 = 28;
   static const ItemType EDUCATION_IRA_29;
   static constexpr ValueType ITEM_EDUCATION_IRA_29 = 29;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct FundRenewWaivEnums final: FieldEnumsBase {
   typedef FieldFundRenewWaiv::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const FundRenewWaivEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct RegistStatusEnums final: FieldEnumsBase {
   typedef FieldRegistStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const RegistStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ACCEPTED;
   static constexpr ValueType ITEM_ACCEPTED = 'A';
   static const ItemType REJECTED;
   static constexpr ValueType ITEM_REJECTED = 'R';
   static const ItemType HELD;
   static constexpr ValueType ITEM_HELD = 'H';
   static const ItemType REMINDER_IE_REGISTRATION_INSTRUCTIONS_ARE_STILL_OUTSTANDING;
   static constexpr ValueType ITEM_REMINDER_IE_REGISTRATION_INSTRUCTIONS_ARE_STILL_OUTSTANDING = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct RegistRejReasonCodeEnums final: FieldEnumsBase {
   typedef FieldRegistRejReasonCode::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const RegistRejReasonCodeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType INVALID_UNACCEPTABLE_ACCOUNT_TYPE;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_ACCOUNT_TYPE = 1;
   static const ItemType INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE = 2;
   static const ItemType INVALID_UNACCEPTABLE_OWNERSHIP_TYPE;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE = 3;
   static const ItemType INVALID_UNACCEPTABLE_NO_REG_DETLS;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_NO_REG_DETLS = 4;
   static const ItemType INVALID_UNACCEPTABLE_REG_SEQ_NO;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_REG_SEQ_NO = 5;
   static const ItemType INVALID_UNACCEPTABLE_REG_DTLS;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_REG_DTLS = 6;
   static const ItemType INVALID_UNACCEPTABLE_MAILING_DTLS;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_MAILING_DTLS = 7;
   static const ItemType INVALID_UNACCEPTABLE_MAILING_INST;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_MAILING_INST = 8;
   static const ItemType INVALID_UNACCEPTABLE_INVESTOR_ID;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_INVESTOR_ID = 9;
   static const ItemType INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE = 10;
   static const ItemType INVALID_UNACCEPTABLE_DATE_OF_BIRTH;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_DATE_OF_BIRTH = 11;
   static const ItemType INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE = 12;
   static const ItemType INVALID_UNACCEPTABLE_NODISTRIBINSTNS;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_NODISTRIBINSTNS = 13;
   static const ItemType INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE = 14;
   static const ItemType INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD = 15;
   static const ItemType INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME = 16;
   static const ItemType INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE = 17;
   static const ItemType INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM;
   static constexpr ValueType ITEM_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM = 18;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct RegistTransTypeEnums final: FieldEnumsBase {
   typedef FieldRegistTransType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const RegistTransTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = '0';
   static const ItemType REPLACE;
   static constexpr ValueType ITEM_REPLACE = '1';
   static const ItemType CANCEL;
   static constexpr ValueType ITEM_CANCEL = '2';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct OwnershipTypeEnums final: FieldEnumsBase {
   typedef FieldOwnershipType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const OwnershipTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType JOINT_INVESTORS;
   static constexpr ValueType ITEM_JOINT_INVESTORS = 'J';
   static const ItemType TENANTS_IN_COMMON;
   static constexpr ValueType ITEM_TENANTS_IN_COMMON = 'T';
   static const ItemType JOINT_TRUSTEES;
   static constexpr ValueType ITEM_JOINT_TRUSTEES = '2';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ContAmtTypeEnums final: FieldEnumsBase {
   typedef FieldContAmtType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ContAmtTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType COMMISSION_AMOUNT;
   static constexpr ValueType ITEM_COMMISSION_AMOUNT = 1;
   static const ItemType COMMISSION;
   static constexpr ValueType ITEM_COMMISSION = 2;
   static const ItemType INITIAL_CHARGE_AMOUNT;
   static constexpr ValueType ITEM_INITIAL_CHARGE_AMOUNT = 3;
   static const ItemType INITIAL_CHARGE;
   static constexpr ValueType ITEM_INITIAL_CHARGE = 4;
   static const ItemType DISCOUNT_AMOUNT;
   static constexpr ValueType ITEM_DISCOUNT_AMOUNT = 5;
   static const ItemType DISCOUNT;
   static constexpr ValueType ITEM_DISCOUNT = 6;
   static const ItemType DILUTION_LEVY_AMOUNT;
   static constexpr ValueType ITEM_DILUTION_LEVY_AMOUNT = 7;
   static const ItemType DILUTION_LEVY;
   static constexpr ValueType ITEM_DILUTION_LEVY = 8;
   static const ItemType EXIT_CHARGE_AMOUNT;
   static constexpr ValueType ITEM_EXIT_CHARGE_AMOUNT = 9;
   static const ItemType EXIT_CHARGE;
   static constexpr ValueType ITEM_EXIT_CHARGE = 10;
   static const ItemType FUND_BASED_RENEWAL_COMMISSION;
   static constexpr ValueType ITEM_FUND_BASED_RENEWAL_COMMISSION = 11;
   static const ItemType PROJECTED_FUND_VALUE;
   static constexpr ValueType ITEM_PROJECTED_FUND_VALUE = 12;
   static const ItemType FUND_BASED_RENEWAL_COMMISSION_AMOUNT_13;
   static constexpr ValueType ITEM_FUND_BASED_RENEWAL_COMMISSION_AMOUNT_13 = 13;
   static const ItemType FUND_BASED_RENEWAL_COMMISSION_AMOUNT_14;
   static constexpr ValueType ITEM_FUND_BASED_RENEWAL_COMMISSION_AMOUNT_14 = 14;
   static const ItemType NET_SETTLEMENT_AMOUNT;
   static constexpr ValueType ITEM_NET_SETTLEMENT_AMOUNT = 15;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct OwnerTypeEnums final: FieldEnumsBase {
   typedef FieldOwnerType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const OwnerTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType INDIVIDUAL_INVESTOR;
   static constexpr ValueType ITEM_INDIVIDUAL_INVESTOR = 1;
   static const ItemType PUBLIC_COMPANY;
   static constexpr ValueType ITEM_PUBLIC_COMPANY = 2;
   static const ItemType PRIVATE_COMPANY;
   static constexpr ValueType ITEM_PRIVATE_COMPANY = 3;
   static const ItemType INDIVIDUAL_TRUSTEE;
   static constexpr ValueType ITEM_INDIVIDUAL_TRUSTEE = 4;
   static const ItemType COMPANY_TRUSTEE;
   static constexpr ValueType ITEM_COMPANY_TRUSTEE = 5;
   static const ItemType PENSION_PLAN;
   static constexpr ValueType ITEM_PENSION_PLAN = 6;
   static const ItemType CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT;
   static constexpr ValueType ITEM_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT = 7;
   static const ItemType TRUSTS;
   static constexpr ValueType ITEM_TRUSTS = 8;
   static const ItemType FIDUCIARIES;
   static constexpr ValueType ITEM_FIDUCIARIES = 9;
   static const ItemType NETWORKING_SUB_ACCOUNT;
   static constexpr ValueType ITEM_NETWORKING_SUB_ACCOUNT = 10;
   static const ItemType NON_PROFIT_ORGANIZATION;
   static constexpr ValueType ITEM_NON_PROFIT_ORGANIZATION = 11;
   static const ItemType CORPORATE_BODY;
   static constexpr ValueType ITEM_CORPORATE_BODY = 12;
   static const ItemType NOMINEE;
   static constexpr ValueType ITEM_NOMINEE = 13;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct OrderCapacityEnums final: FieldEnumsBase {
   typedef FieldOrderCapacity::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const OrderCapacityEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType AGENCY;
   static constexpr ValueType ITEM_AGENCY = 'A';
   static const ItemType PROPRIETARY;
   static constexpr ValueType ITEM_PROPRIETARY = 'G';
   static const ItemType INDIVIDUAL;
   static constexpr ValueType ITEM_INDIVIDUAL = 'I';
   static const ItemType PRINCIPAL;
   static constexpr ValueType ITEM_PRINCIPAL = 'P';
   static const ItemType RISKLESS_PRINCIPAL;
   static constexpr ValueType ITEM_RISKLESS_PRINCIPAL = 'R';
   static const ItemType AGENT_FOR_OTHER_MEMBER;
   static constexpr ValueType ITEM_AGENT_FOR_OTHER_MEMBER = 'W';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct OrderRestrictionsEnums final: FieldEnumsBase {
   typedef FieldOrderRestrictions::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const OrderRestrictionsEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PROGRAM_TRADE;
   static constexpr ValueType ITEM_PROGRAM_TRADE = SOHSTR(1);
   static const ItemType INDEX_ARBITRAGE;
   static constexpr ValueType ITEM_INDEX_ARBITRAGE = SOHSTR(2);
   static const ItemType NON_INDEX_ARBITRAGE;
   static constexpr ValueType ITEM_NON_INDEX_ARBITRAGE = SOHSTR(3);
   static const ItemType COMPETING_MARKET_MAKER;
   static constexpr ValueType ITEM_COMPETING_MARKET_MAKER = SOHSTR(4);
   static const ItemType ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY;
   static constexpr ValueType ITEM_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY = SOHSTR(5);
   static const ItemType ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY;
   static constexpr ValueType ITEM_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY = SOHSTR(6);
   static const ItemType FOREIGN_ENTITY;
   static constexpr ValueType ITEM_FOREIGN_ENTITY = SOHSTR(7);
   static const ItemType EXTERNAL_MARKET_PARTICIPANT;
   static constexpr ValueType ITEM_EXTERNAL_MARKET_PARTICIPANT = SOHSTR(8);
   static const ItemType EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE;
   static constexpr ValueType ITEM_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE = SOHSTR(9);
   static const ItemType RISKLESS_ARBITRAGE;
   static constexpr ValueType ITEM_RISKLESS_ARBITRAGE = SOHSTR(A);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MassCancelRequestTypeEnums final: FieldEnumsBase {
   typedef FieldMassCancelRequestType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MassCancelRequestTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CANCEL_ORDERS_FOR_A_SECURITY;
   static constexpr ValueType ITEM_CANCEL_ORDERS_FOR_A_SECURITY = '1';
   static const ItemType CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY;
   static constexpr ValueType ITEM_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = '2';
   static const ItemType CANCEL_ORDERS_FOR_A_PRODUCT;
   static constexpr ValueType ITEM_CANCEL_ORDERS_FOR_A_PRODUCT = '3';
   static const ItemType CANCEL_ORDERS_FOR_A_CFICODE;
   static constexpr ValueType ITEM_CANCEL_ORDERS_FOR_A_CFICODE = '4';
   static const ItemType CANCEL_ORDERS_FOR_A_SECURITYTYPE;
   static constexpr ValueType ITEM_CANCEL_ORDERS_FOR_A_SECURITYTYPE = '5';
   static const ItemType CANCEL_ORDERS_FOR_A_TRADING_SESSION;
   static constexpr ValueType ITEM_CANCEL_ORDERS_FOR_A_TRADING_SESSION = '6';
   static const ItemType CANCEL_ALL_ORDERS;
   static constexpr ValueType ITEM_CANCEL_ALL_ORDERS = '7';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MassCancelResponseEnums final: FieldEnumsBase {
   typedef FieldMassCancelResponse::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MassCancelResponseEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CANCEL_REQUEST_REJECTED;
   static constexpr ValueType ITEM_CANCEL_REQUEST_REJECTED = '0';
   static const ItemType CANCEL_ORDERS_FOR_A_SECURITY;
   static constexpr ValueType ITEM_CANCEL_ORDERS_FOR_A_SECURITY = '1';
   static const ItemType CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY;
   static constexpr ValueType ITEM_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = '2';
   static const ItemType CANCEL_ORDERS_FOR_A_PRODUCT;
   static constexpr ValueType ITEM_CANCEL_ORDERS_FOR_A_PRODUCT = '3';
   static const ItemType CANCEL_ORDERS_FOR_A_CFICODE;
   static constexpr ValueType ITEM_CANCEL_ORDERS_FOR_A_CFICODE = '4';
   static const ItemType CANCEL_ORDERS_FOR_A_SECURITYTYPE;
   static constexpr ValueType ITEM_CANCEL_ORDERS_FOR_A_SECURITYTYPE = '5';
   static const ItemType CANCEL_ORDERS_FOR_A_TRADING_SESSION;
   static constexpr ValueType ITEM_CANCEL_ORDERS_FOR_A_TRADING_SESSION = '6';
   static const ItemType CANCEL_ALL_ORDERS;
   static constexpr ValueType ITEM_CANCEL_ALL_ORDERS = '7';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MassCancelRejectReasonEnums final: FieldEnumsBase {
   typedef FieldMassCancelRejectReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MassCancelRejectReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType MASS_CANCEL_NOT_SUPPORTED;
   static constexpr ValueType ITEM_MASS_CANCEL_NOT_SUPPORTED = '0';
   static const ItemType INVALID_OR_UNKNOWN_SECURITY;
   static constexpr ValueType ITEM_INVALID_OR_UNKNOWN_SECURITY = '1';
   static const ItemType INVALID_OR_UNKNOWN_UNDERLYING;
   static constexpr ValueType ITEM_INVALID_OR_UNKNOWN_UNDERLYING = '2';
   static const ItemType INVALID_OR_UNKNOWN_PRODUCT;
   static constexpr ValueType ITEM_INVALID_OR_UNKNOWN_PRODUCT = '3';
   static const ItemType INVALID_OR_UNKNOWN_CFICODE;
   static constexpr ValueType ITEM_INVALID_OR_UNKNOWN_CFICODE = '4';
   static const ItemType INVALID_OR_UNKNOWN_SECURITY_TYPE;
   static constexpr ValueType ITEM_INVALID_OR_UNKNOWN_SECURITY_TYPE = '5';
   static const ItemType INVALID_OR_UNKNOWN_TRADING_SESSION;
   static constexpr ValueType ITEM_INVALID_OR_UNKNOWN_TRADING_SESSION = '6';
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = '9';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct QuoteTypeEnums final: FieldEnumsBase {
   typedef FieldQuoteType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const QuoteTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType INDICATIVE;
   static constexpr ValueType ITEM_INDICATIVE = 0;
   static const ItemType TRADEABLE;
   static constexpr ValueType ITEM_TRADEABLE = 1;
   static const ItemType RESTRICTED_TRADEABLE;
   static constexpr ValueType ITEM_RESTRICTED_TRADEABLE = 2;
   static const ItemType COUNTER;
   static constexpr ValueType ITEM_COUNTER = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CashMarginEnums final: FieldEnumsBase {
   typedef FieldCashMargin::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CashMarginEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CASH;
   static constexpr ValueType ITEM_CASH = '1';
   static const ItemType MARGIN_OPEN;
   static constexpr ValueType ITEM_MARGIN_OPEN = '2';
   static const ItemType MARGIN_CLOSE;
   static constexpr ValueType ITEM_MARGIN_CLOSE = '3';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ScopeEnums final: FieldEnumsBase {
   typedef FieldScope::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ScopeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType LOCAL;
   static constexpr ValueType ITEM_LOCAL = SOHSTR(1);
   static const ItemType NATIONAL;
   static constexpr ValueType ITEM_NATIONAL = SOHSTR(2);
   static const ItemType GLOBAL;
   static constexpr ValueType ITEM_GLOBAL = SOHSTR(3);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MDImplicitDeleteEnums final: FieldEnumsBase {
   typedef FieldMDImplicitDelete::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MDImplicitDeleteEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CrossTypeEnums final: FieldEnumsBase {
   typedef FieldCrossType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CrossTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_BOTH_SIDES_ARE_TREATED_IN_THE_SAME_MANNER_THIS_IS_EQUIVALENT_TO_AN_ALL_OR_NONE;
   static constexpr ValueType ITEM_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_BOTH_SIDES_ARE_TREATED_IN_THE_SAME_MANNER_THIS_IS_EQUIVALENT_TO_AN_ALL_OR_NONE = 1;
   static const ItemType CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_ONE_SIDE_IS_FULLY_EXECUTED_THE_OTHER_SIDE_IS_PARTIALLY_EXECUTED_WITH_THE_REMAINDER_BEING_CANCELLED_THIS_IS_EQUIVALENT_TO_AN_IMMEDIATE_OR_CANCEL_ON_THE_OTHER_SIDE_NOTE_THE_CROSSPRIORITZATION;
   static constexpr ValueType ITEM_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_ONE_SIDE_IS_FULLY_EXECUTED_THE_OTHER_SIDE_IS_PARTIALLY_EXECUTED_WITH_THE_REMAINDER_BEING_CANCELLED_THIS_IS_EQUIVALENT_TO_AN_IMMEDIATE_OR_CANCEL_ON_THE_OTHER_SIDE_NOTE_THE_CROSSPRIORITZATION = 2;
   static const ItemType CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE_ONE_SIDE_OF_THE_CROSS_IS_FULLY_EXECUTED;
   static constexpr ValueType ITEM_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE_ONE_SIDE_OF_THE_CROSS_IS_FULLY_EXECUTED = 3;
   static const ItemType CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE_IN_THE_CASE_OTHER_ORDERS_EXIST_WITH_THE_SAME_PRICE_THE_QUANTITY_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_EXISTING_ORDERS_AND_QUOTES_THE_REMAINDER_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_OTHER_SIDE_OF_THE_CROSS_THE_TWO_SIDES_POTENTIALLY_HAVE_DIFFERENT_QUANTITIES;
   static constexpr ValueType ITEM_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE_IN_THE_CASE_OTHER_ORDERS_EXIST_WITH_THE_SAME_PRICE_THE_QUANTITY_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_EXISTING_ORDERS_AND_QUOTES_THE_REMAINDER_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_OTHER_SIDE_OF_THE_CROSS_THE_TWO_SIDES_POTENTIALLY_HAVE_DIFFERENT_QUANTITIES = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CrossPrioritizationEnums final: FieldEnumsBase {
   typedef FieldCrossPrioritization::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CrossPrioritizationEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NONE;
   static constexpr ValueType ITEM_NONE = 0;
   static const ItemType BUY_SIDE_IS_PRIORITIZED;
   static constexpr ValueType ITEM_BUY_SIDE_IS_PRIORITIZED = 1;
   static const ItemType SELL_SIDE_IS_PRIORITIZED;
   static constexpr ValueType ITEM_SELL_SIDE_IS_PRIORITIZED = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct NoSidesEnums final: FieldEnumsBase {
   typedef FieldNoSides::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const NoSidesEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ONE_SIDE;
   static constexpr ValueType ITEM_ONE_SIDE = 1;
   static const ItemType BOTH_SIDES;
   static constexpr ValueType ITEM_BOTH_SIDES = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SecurityListRequestTypeEnums final: FieldEnumsBase {
   typedef FieldSecurityListRequestType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SecurityListRequestTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SYMBOL;
   static constexpr ValueType ITEM_SYMBOL = 0;
   static const ItemType SECURITYTYPE_AND_OR_CFICODE;
   static constexpr ValueType ITEM_SECURITYTYPE_AND_OR_CFICODE = 1;
   static const ItemType PRODUCT;
   static constexpr ValueType ITEM_PRODUCT = 2;
   static const ItemType TRADINGSESSIONID;
   static constexpr ValueType ITEM_TRADINGSESSIONID = 3;
   static const ItemType ALL_SECURITIES;
   static constexpr ValueType ITEM_ALL_SECURITIES = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SecurityRequestResultEnums final: FieldEnumsBase {
   typedef FieldSecurityRequestResult::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SecurityRequestResultEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType VALID_REQUEST;
   static constexpr ValueType ITEM_VALID_REQUEST = 0;
   static const ItemType INVALID_OR_UNSUPPORTED_REQUEST;
   static constexpr ValueType ITEM_INVALID_OR_UNSUPPORTED_REQUEST = 1;
   static const ItemType NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA;
   static constexpr ValueType ITEM_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA = 2;
   static const ItemType NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA;
   static constexpr ValueType ITEM_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA = 3;
   static const ItemType INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE;
   static constexpr ValueType ITEM_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE = 4;
   static const ItemType REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED;
   static constexpr ValueType ITEM_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED = 5;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MultiLegRptTypeReqEnums final: FieldEnumsBase {
   typedef FieldMultiLegRptTypeReq::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MultiLegRptTypeReqEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType REPORT_BY_MULITLEG_SECURITY_ONLY;
   static constexpr ValueType ITEM_REPORT_BY_MULITLEG_SECURITY_ONLY = 0;
   static const ItemType REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY;
   static constexpr ValueType ITEM_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY = 1;
   static const ItemType REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY;
   static constexpr ValueType ITEM_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TradSesStatusRejReasonEnums final: FieldEnumsBase {
   typedef FieldTradSesStatusRejReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TradSesStatusRejReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType UNKNOWN_OR_INVALID_TRADINGSESSIONID;
   static constexpr ValueType ITEM_UNKNOWN_OR_INVALID_TRADINGSESSIONID = 1;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TradeRequestTypeEnums final: FieldEnumsBase {
   typedef FieldTradeRequestType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TradeRequestTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ALL_TRADES;
   static constexpr ValueType ITEM_ALL_TRADES = 0;
   static const ItemType MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST;
   static constexpr ValueType ITEM_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST = 1;
   static const ItemType UNMATCHED_TRADES_THAT_MATCH_CRITERIA;
   static constexpr ValueType ITEM_UNMATCHED_TRADES_THAT_MATCH_CRITERIA = 2;
   static const ItemType UNREPORTED_TRADES_THAT_MATCH_CRITERIA;
   static constexpr ValueType ITEM_UNREPORTED_TRADES_THAT_MATCH_CRITERIA = 3;
   static const ItemType ADVISORIES_THAT_MATCH_CRITERIA;
   static constexpr ValueType ITEM_ADVISORIES_THAT_MATCH_CRITERIA = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PreviouslyReportedEnums final: FieldEnumsBase {
   typedef FieldPreviouslyReported::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PreviouslyReportedEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MatchStatusEnums final: FieldEnumsBase {
   typedef FieldMatchStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MatchStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType COMPARED_MATCHED_OR_AFFIRMED;
   static constexpr ValueType ITEM_COMPARED_MATCHED_OR_AFFIRMED = '0';
   static const ItemType UNCOMPARED_UNMATCHED_OR_UNAFFIRMED;
   static constexpr ValueType ITEM_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED = '1';
   static const ItemType ADVISORY_OR_ALERT;
   static constexpr ValueType ITEM_ADVISORY_OR_ALERT = '2';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MatchTypeEnums final: FieldEnumsBase {
   typedef FieldMatchType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MatchTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_AND_EXECUTION_TIME;
   static constexpr ValueType ITEM_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_AND_EXECUTION_TIME = SOHSTR(A1);
   static const ItemType EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES;
   static constexpr ValueType ITEM_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES = SOHSTR(A2);
   static const ItemType EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AND_EXECUTION_TIME;
   static constexpr ValueType ITEM_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AND_EXECUTION_TIME = SOHSTR(A3);
   static const ItemType EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES;
   static constexpr ValueType ITEM_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES = SOHSTR(A4);
   static const ItemType EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME;
   static constexpr ValueType ITEM_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME = SOHSTR(A5);
   static const ItemType COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS_PAIR_OFFS;
   static constexpr ValueType ITEM_COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS_PAIR_OFFS = SOHSTR(AQ);
   static const ItemType SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED;
   static constexpr ValueType ITEM_SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = SOHSTR(S1);
   static const ItemType SUMMARIZED_MATCH_USING_A2_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED;
   static constexpr ValueType ITEM_SUMMARIZED_MATCH_USING_A2_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = SOHSTR(S2);
   static const ItemType SUMMARIZED_MATCH_USING_A3_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED;
   static constexpr ValueType ITEM_SUMMARIZED_MATCH_USING_A3_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = SOHSTR(S3);
   static const ItemType SUMMARIZED_MATCH_USING_A4_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED;
   static constexpr ValueType ITEM_SUMMARIZED_MATCH_USING_A4_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = SOHSTR(S4);
   static const ItemType SUMMARIZED_MATCH_USING_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED;
   static constexpr ValueType ITEM_SUMMARIZED_MATCH_USING_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = SOHSTR(S5);
   static const ItemType EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_MINUS_BADGES_AND_TIMES_ACT_M1_MATCH;
   static constexpr ValueType ITEM_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_MINUS_BADGES_AND_TIMES_ACT_M1_MATCH = SOHSTR(M1);
   static const ItemType SUMMARIZED_MATCH_MINUS_BADGES_AND_TIMES_ACT_M2_MATCH;
   static constexpr ValueType ITEM_SUMMARIZED_MATCH_MINUS_BADGES_AND_TIMES_ACT_M2_MATCH = SOHSTR(M2);
   static const ItemType OCS_LOCKED_IN_NON_ACT;
   static constexpr ValueType ITEM_OCS_LOCKED_IN_NON_ACT = SOHSTR(MT);
   static const ItemType ACT_ACCEPTED_TRADE;
   static constexpr ValueType ITEM_ACT_ACCEPTED_TRADE = SOHSTR(M3);
   static const ItemType ACT_DEFAULT_TRADE;
   static constexpr ValueType ITEM_ACT_DEFAULT_TRADE = SOHSTR(M4);
   static const ItemType ACT_DEFAULT_AFTER_M2;
   static constexpr ValueType ITEM_ACT_DEFAULT_AFTER_M2 = SOHSTR(M5);
   static const ItemType ACT_M6_MATCH;
   static constexpr ValueType ITEM_ACT_M6_MATCH = SOHSTR(M6);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct OddLotEnums final: FieldEnumsBase {
   typedef FieldOddLot::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const OddLotEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ClearingInstructionEnums final: FieldEnumsBase {
   typedef FieldClearingInstruction::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ClearingInstructionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PROCESS_NORMALLY;
   static constexpr ValueType ITEM_PROCESS_NORMALLY = 0;
   static const ItemType EXCLUDE_FROM_ALL_NETTING;
   static constexpr ValueType ITEM_EXCLUDE_FROM_ALL_NETTING = 1;
   static const ItemType BILATERAL_NETTING_ONLY;
   static constexpr ValueType ITEM_BILATERAL_NETTING_ONLY = 2;
   static const ItemType EX_CLEARING;
   static constexpr ValueType ITEM_EX_CLEARING = 3;
   static const ItemType SPECIAL_TRADE;
   static constexpr ValueType ITEM_SPECIAL_TRADE = 4;
   static const ItemType MULTILATERAL_NETTING;
   static constexpr ValueType ITEM_MULTILATERAL_NETTING = 5;
   static const ItemType CLEAR_AGAINST_CENTRAL_COUNTERPARTY;
   static constexpr ValueType ITEM_CLEAR_AGAINST_CENTRAL_COUNTERPARTY = 6;
   static const ItemType EXCLUDE_FROM_CENTRAL_COUNTERPARTY;
   static constexpr ValueType ITEM_EXCLUDE_FROM_CENTRAL_COUNTERPARTY = 7;
   static const ItemType MANUAL_MODE;
   static constexpr ValueType ITEM_MANUAL_MODE = 8;
   static const ItemType AUTOMATIC_POSTING_MODE;
   static constexpr ValueType ITEM_AUTOMATIC_POSTING_MODE = 9;
   static const ItemType AUTOMATIC_GIVE_UP_MODE;
   static constexpr ValueType ITEM_AUTOMATIC_GIVE_UP_MODE = 10;
   static const ItemType QUALIFIED_SERVICE_REPRESENTATIVE;
   static constexpr ValueType ITEM_QUALIFIED_SERVICE_REPRESENTATIVE = 11;
   static const ItemType CUSTOMER_TRADE;
   static constexpr ValueType ITEM_CUSTOMER_TRADE = 12;
   static const ItemType SELF_CLEARING;
   static constexpr ValueType ITEM_SELF_CLEARING = 13;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AccountTypeEnums final: FieldEnumsBase {
   typedef FieldAccountType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AccountTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS;
   static constexpr ValueType ITEM_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS = 1;
   static const ItemType ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS;
   static constexpr ValueType ITEM_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS = 2;
   static const ItemType HOUSE_TRADER;
   static constexpr ValueType ITEM_HOUSE_TRADER = 3;
   static const ItemType FLOOR_TRADER;
   static constexpr ValueType ITEM_FLOOR_TRADER = 4;
   static const ItemType ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED;
   static constexpr ValueType ITEM_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED = 6;
   static const ItemType ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED;
   static constexpr ValueType ITEM_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED = 7;
   static const ItemType JOINT_BACKOFFICE_ACCOUNT;
   static constexpr ValueType ITEM_JOINT_BACKOFFICE_ACCOUNT = 8;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CustOrderCapacityEnums final: FieldEnumsBase {
   typedef FieldCustOrderCapacity::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CustOrderCapacityEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT;
   static constexpr ValueType ITEM_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT = 1;
   static const ItemType CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT;
   static constexpr ValueType ITEM_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT = 2;
   static const ItemType MEMBER_TRADING_FOR_ANOTHER_MEMBER;
   static constexpr ValueType ITEM_MEMBER_TRADING_FOR_ANOTHER_MEMBER = 3;
   static const ItemType ALL_OTHER;
   static constexpr ValueType ITEM_ALL_OTHER = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MassStatusReqTypeEnums final: FieldEnumsBase {
   typedef FieldMassStatusReqType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MassStatusReqTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType STATUS_FOR_ORDERS_FOR_A_SECURITY;
   static constexpr ValueType ITEM_STATUS_FOR_ORDERS_FOR_A_SECURITY = 1;
   static const ItemType STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY;
   static constexpr ValueType ITEM_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY = 2;
   static const ItemType STATUS_FOR_ORDERS_FOR_A_PRODUCT;
   static constexpr ValueType ITEM_STATUS_FOR_ORDERS_FOR_A_PRODUCT = 3;
   static const ItemType STATUS_FOR_ORDERS_FOR_A_CFICODE;
   static constexpr ValueType ITEM_STATUS_FOR_ORDERS_FOR_A_CFICODE = 4;
   static const ItemType STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE;
   static constexpr ValueType ITEM_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE = 5;
   static const ItemType STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION;
   static constexpr ValueType ITEM_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION = 6;
   static const ItemType STATUS_FOR_ALL_ORDERS;
   static constexpr ValueType ITEM_STATUS_FOR_ALL_ORDERS = 7;
   static const ItemType STATUS_FOR_ORDERS_FOR_A_PARTYID;
   static constexpr ValueType ITEM_STATUS_FOR_ORDERS_FOR_A_PARTYID = 8;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DayBookingInstEnums final: FieldEnumsBase {
   typedef FieldDayBookingInst::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DayBookingInstEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR;
   static constexpr ValueType ITEM_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR = '0';
   static const ItemType SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING;
   static constexpr ValueType ITEM_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING = '1';
   static const ItemType ACCUMULATE;
   static constexpr ValueType ITEM_ACCUMULATE = '2';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct BookingUnitEnums final: FieldEnumsBase {
   typedef FieldBookingUnit::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const BookingUnitEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT;
   static constexpr ValueType ITEM_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT = '0';
   static const ItemType AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER;
   static constexpr ValueType ITEM_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER = '1';
   static const ItemType AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE;
   static constexpr ValueType ITEM_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE = '2';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PreallocMethodEnums final: FieldEnumsBase {
   typedef FieldPreallocMethod::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PreallocMethodEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PRO_RATA;
   static constexpr ValueType ITEM_PRO_RATA = '0';
   static const ItemType DO_NOT_PRO_RATA_DISCUSS_FIRST;
   static constexpr ValueType ITEM_DO_NOT_PRO_RATA_DISCUSS_FIRST = '1';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AllocTypeEnums final: FieldEnumsBase {
   typedef FieldAllocType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AllocTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CALCULATED;
   static constexpr ValueType ITEM_CALCULATED = 1;
   static const ItemType PRELIMINARY;
   static constexpr ValueType ITEM_PRELIMINARY = 2;
   static const ItemType READY_TO_BOOK;
   static constexpr ValueType ITEM_READY_TO_BOOK = 5;
   static const ItemType WAREHOUSE_INSTRUCTION;
   static constexpr ValueType ITEM_WAREHOUSE_INSTRUCTION = 7;
   static const ItemType REQUEST_TO_INTERMEDIARY;
   static constexpr ValueType ITEM_REQUEST_TO_INTERMEDIARY = 8;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ClearingFeeIndicatorEnums final: FieldEnumsBase {
   typedef FieldClearingFeeIndicator::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ClearingFeeIndicatorEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CBOE_MEMBER;
   static constexpr ValueType ITEM_CBOE_MEMBER = SOHSTR(B);
   static const ItemType NON_MEMBER_AND_CUSTOMER;
   static constexpr ValueType ITEM_NON_MEMBER_AND_CUSTOMER = SOHSTR(C);
   static const ItemType EQUITY_MEMBER_AND_CLEARING_MEMBER;
   static constexpr ValueType ITEM_EQUITY_MEMBER_AND_CLEARING_MEMBER = SOHSTR(E);
   static const ItemType FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS;
   static constexpr ValueType ITEM_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS = SOHSTR(F);
   static const ItemType _106H_AND_106J_FIRMS;
   static constexpr ValueType ITEM__106H_AND_106J_FIRMS = SOHSTR(H);
   static const ItemType GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS;
   static constexpr ValueType ITEM_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS = SOHSTR(I);
   static const ItemType LESSEE_AND_106F_EMPLOYEES;
   static constexpr ValueType ITEM_LESSEE_AND_106F_EMPLOYEES = SOHSTR(L);
   static const ItemType ALL_OTHER_OWNERSHIP_TYPES;
   static constexpr ValueType ITEM_ALL_OTHER_OWNERSHIP_TYPES = SOHSTR(M);
   static const ItemType _1ST_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT;
   static constexpr ValueType ITEM__1ST_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = SOHSTR(1);
   static const ItemType _2ND_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT;
   static constexpr ValueType ITEM__2ND_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = SOHSTR(2);
   static const ItemType _3RD_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT;
   static constexpr ValueType ITEM__3RD_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = SOHSTR(3);
   static const ItemType _4TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT;
   static constexpr ValueType ITEM__4TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = SOHSTR(4);
   static const ItemType _5TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT;
   static constexpr ValueType ITEM__5TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = SOHSTR(5);
   static const ItemType _6TH_YEAR_AND_BEYOND_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT;
   static constexpr ValueType ITEM__6TH_YEAR_AND_BEYOND_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = SOHSTR(9);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct WorkingIndicatorEnums final: FieldEnumsBase {
   typedef FieldWorkingIndicator::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const WorkingIndicatorEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PriorityIndicatorEnums final: FieldEnumsBase {
   typedef FieldPriorityIndicator::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PriorityIndicatorEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PRIORITY_UNCHANGED;
   static constexpr ValueType ITEM_PRIORITY_UNCHANGED = 0;
   static const ItemType LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE;
   static constexpr ValueType ITEM_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE = 1;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct LegalConfirmEnums final: FieldEnumsBase {
   typedef FieldLegalConfirm::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const LegalConfirmEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct QuoteRequestRejectReasonEnums final: FieldEnumsBase {
   typedef FieldQuoteRequestRejectReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const QuoteRequestRejectReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType UNKNOWN_SYMBOL;
   static constexpr ValueType ITEM_UNKNOWN_SYMBOL = 1;
   static const ItemType EXCHANGE;
   static constexpr ValueType ITEM_EXCHANGE = 2;
   static const ItemType QUOTE_REQUEST_EXCEEDS_LIMIT;
   static constexpr ValueType ITEM_QUOTE_REQUEST_EXCEEDS_LIMIT = 3;
   static const ItemType TOO_LATE_TO_ENTER;
   static constexpr ValueType ITEM_TOO_LATE_TO_ENTER = 4;
   static const ItemType INVALID_PRICE;
   static constexpr ValueType ITEM_INVALID_PRICE = 5;
   static const ItemType NOT_AUTHORIZED_TO_REQUEST_QUOTE;
   static constexpr ValueType ITEM_NOT_AUTHORIZED_TO_REQUEST_QUOTE = 6;
   static const ItemType NO_MATCH_FOR_INQUIRY;
   static constexpr ValueType ITEM_NO_MATCH_FOR_INQUIRY = 7;
   static const ItemType NO_MARKET_FOR_INSTRUMENT;
   static constexpr ValueType ITEM_NO_MARKET_FOR_INSTRUMENT = 8;
   static const ItemType NO_INVENTORY;
   static constexpr ValueType ITEM_NO_INVENTORY = 9;
   static const ItemType PASS;
   static constexpr ValueType ITEM_PASS = 10;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AcctIDSourceEnums final: FieldEnumsBase {
   typedef FieldAcctIDSource::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AcctIDSourceEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType BIC;
   static constexpr ValueType ITEM_BIC = 1;
   static const ItemType SID_CODE;
   static constexpr ValueType ITEM_SID_CODE = 2;
   static const ItemType TFM;
   static constexpr ValueType ITEM_TFM = 3;
   static const ItemType OMGEO;
   static constexpr ValueType ITEM_OMGEO = 4;
   static const ItemType DTCC_CODE;
   static constexpr ValueType ITEM_DTCC_CODE = 5;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ConfirmStatusEnums final: FieldEnumsBase {
   typedef FieldConfirmStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ConfirmStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType RECEIVED;
   static constexpr ValueType ITEM_RECEIVED = 1;
   static const ItemType MISMATCHED_ACCOUNT;
   static constexpr ValueType ITEM_MISMATCHED_ACCOUNT = 2;
   static const ItemType MISSING_SETTLEMENT_INSTRUCTIONS;
   static constexpr ValueType ITEM_MISSING_SETTLEMENT_INSTRUCTIONS = 3;
   static const ItemType CONFIRMED;
   static constexpr ValueType ITEM_CONFIRMED = 4;
   static const ItemType REQUEST_REJECTED;
   static constexpr ValueType ITEM_REQUEST_REJECTED = 5;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ConfirmTransTypeEnums final: FieldEnumsBase {
   typedef FieldConfirmTransType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ConfirmTransTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = 0;
   static const ItemType REPLACE;
   static constexpr ValueType ITEM_REPLACE = 1;
   static const ItemType CANCEL;
   static constexpr ValueType ITEM_CANCEL = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DeliveryFormEnums final: FieldEnumsBase {
   typedef FieldDeliveryForm::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DeliveryFormEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType BOOKENTRY;
   static constexpr ValueType ITEM_BOOKENTRY = 1;
   static const ItemType BEARER;
   static constexpr ValueType ITEM_BEARER = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct LegSwapTypeEnums final: FieldEnumsBase {
   typedef FieldLegSwapType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const LegSwapTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PAR_FOR_PAR;
   static constexpr ValueType ITEM_PAR_FOR_PAR = 1;
   static const ItemType MODIFIED_DURATION;
   static constexpr ValueType ITEM_MODIFIED_DURATION = 2;
   static const ItemType RISK;
   static constexpr ValueType ITEM_RISK = 4;
   static const ItemType PROCEEDS;
   static constexpr ValueType ITEM_PROCEEDS = 5;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct QuotePriceTypeEnums final: FieldEnumsBase {
   typedef FieldQuotePriceType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const QuotePriceTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PERCENT;
   static constexpr ValueType ITEM_PERCENT = 1;
   static const ItemType PER_SHARE;
   static constexpr ValueType ITEM_PER_SHARE = 2;
   static const ItemType FIXED_AMOUNT;
   static constexpr ValueType ITEM_FIXED_AMOUNT = 3;
   static const ItemType DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR;
   static constexpr ValueType ITEM_DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR = 4;
   static const ItemType PREMIUM_PERCENTAGE_POINTS_OVER_PAR;
   static constexpr ValueType ITEM_PREMIUM_PERCENTAGE_POINTS_OVER_PAR = 5;
   static const ItemType BASIS_POINTS_RELATIVE_TO_BENCHMARK;
   static constexpr ValueType ITEM_BASIS_POINTS_RELATIVE_TO_BENCHMARK = 6;
   static const ItemType TED_PRICE;
   static constexpr ValueType ITEM_TED_PRICE = 7;
   static const ItemType TED_YIELD;
   static constexpr ValueType ITEM_TED_YIELD = 8;
   static const ItemType YIELD_SPREAD;
   static constexpr ValueType ITEM_YIELD_SPREAD = 9;
   static const ItemType YIELD;
   static constexpr ValueType ITEM_YIELD = 10;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct QuoteRespTypeEnums final: FieldEnumsBase {
   typedef FieldQuoteRespType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const QuoteRespTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType HIT_LIFT;
   static constexpr ValueType ITEM_HIT_LIFT = 1;
   static const ItemType COUNTER;
   static constexpr ValueType ITEM_COUNTER = 2;
   static const ItemType EXPIRED;
   static constexpr ValueType ITEM_EXPIRED = 3;
   static const ItemType COVER;
   static constexpr ValueType ITEM_COVER = 4;
   static const ItemType DONE_AWAY;
   static constexpr ValueType ITEM_DONE_AWAY = 5;
   static const ItemType PASS;
   static constexpr ValueType ITEM_PASS = 6;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PosTypeEnums final: FieldEnumsBase {
   typedef FieldPosType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PosTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType TRANSACTION_QUANTITY;
   static constexpr ValueType ITEM_TRANSACTION_QUANTITY = SOHSTR(TQ);
   static const ItemType INTRA_SPREAD_QTY;
   static constexpr ValueType ITEM_INTRA_SPREAD_QTY = SOHSTR(IAS);
   static const ItemType INTER_SPREAD_QTY;
   static constexpr ValueType ITEM_INTER_SPREAD_QTY = SOHSTR(IES);
   static const ItemType END_OF_DAY_QTY;
   static constexpr ValueType ITEM_END_OF_DAY_QTY = SOHSTR(FIN);
   static const ItemType START_OF_DAY_QTY;
   static constexpr ValueType ITEM_START_OF_DAY_QTY = SOHSTR(SOD);
   static const ItemType OPTION_EXERCISE_QTY;
   static constexpr ValueType ITEM_OPTION_EXERCISE_QTY = SOHSTR(EX);
   static const ItemType OPTION_ASSIGNMENT;
   static constexpr ValueType ITEM_OPTION_ASSIGNMENT = SOHSTR(AS);
   static const ItemType TRANSACTION_FROM_EXERCISE;
   static constexpr ValueType ITEM_TRANSACTION_FROM_EXERCISE = SOHSTR(TX);
   static const ItemType TRANSACTION_FROM_ASSIGNMENT;
   static constexpr ValueType ITEM_TRANSACTION_FROM_ASSIGNMENT = SOHSTR(TA);
   static const ItemType PIT_TRADE_QTY;
   static constexpr ValueType ITEM_PIT_TRADE_QTY = SOHSTR(PIT);
   static const ItemType TRANSFER_TRADE_QTY;
   static constexpr ValueType ITEM_TRANSFER_TRADE_QTY = SOHSTR(TRF);
   static const ItemType ELECTRONIC_TRADE_QTY;
   static constexpr ValueType ITEM_ELECTRONIC_TRADE_QTY = SOHSTR(ETR);
   static const ItemType ALLOCATION_TRADE_QTY;
   static constexpr ValueType ITEM_ALLOCATION_TRADE_QTY = SOHSTR(ALC);
   static const ItemType ADJUSTMENT_QTY;
   static constexpr ValueType ITEM_ADJUSTMENT_QTY = SOHSTR(PA);
   static const ItemType AS_OF_TRADE_QTY;
   static constexpr ValueType ITEM_AS_OF_TRADE_QTY = SOHSTR(ASF);
   static const ItemType DELIVERY_QTY;
   static constexpr ValueType ITEM_DELIVERY_QTY = SOHSTR(DLV);
   static const ItemType TOTAL_TRANSACTION_QTY;
   static constexpr ValueType ITEM_TOTAL_TRANSACTION_QTY = SOHSTR(TOT);
   static const ItemType CROSS_MARGIN_QTY;
   static constexpr ValueType ITEM_CROSS_MARGIN_QTY = SOHSTR(XM);
   static const ItemType INTEGRAL_SPLIT;
   static constexpr ValueType ITEM_INTEGRAL_SPLIT = SOHSTR(SPL);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PosQtyStatusEnums final: FieldEnumsBase {
   typedef FieldPosQtyStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PosQtyStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SUBMITTED;
   static constexpr ValueType ITEM_SUBMITTED = 0;
   static const ItemType ACCEPTED;
   static constexpr ValueType ITEM_ACCEPTED = 1;
   static const ItemType REJECTED;
   static constexpr ValueType ITEM_REJECTED = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PosAmtTypeEnums final: FieldEnumsBase {
   typedef FieldPosAmtType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PosAmtTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType FINAL_MARK_TO_MARKET_AMOUNT;
   static constexpr ValueType ITEM_FINAL_MARK_TO_MARKET_AMOUNT = SOHSTR(FMTM);
   static const ItemType INCREMENTAL_MARK_TO_MARKET_AMOUNT;
   static constexpr ValueType ITEM_INCREMENTAL_MARK_TO_MARKET_AMOUNT = SOHSTR(IMTM);
   static const ItemType TRADE_VARIATION_AMOUNT;
   static constexpr ValueType ITEM_TRADE_VARIATION_AMOUNT = SOHSTR(TVAR);
   static const ItemType START_OF_DAY_MARK_TO_MARKET_AMOUNT;
   static constexpr ValueType ITEM_START_OF_DAY_MARK_TO_MARKET_AMOUNT = SOHSTR(SMTM);
   static const ItemType PREMIUM_AMOUNT;
   static constexpr ValueType ITEM_PREMIUM_AMOUNT = SOHSTR(PREM);
   static const ItemType CASH_RESIDUAL_AMOUNT;
   static constexpr ValueType ITEM_CASH_RESIDUAL_AMOUNT = SOHSTR(CRES);
   static const ItemType CASH_AMOUNT;
   static constexpr ValueType ITEM_CASH_AMOUNT = SOHSTR(CASH);
   static const ItemType VALUE_ADJUSTED_AMOUNT;
   static constexpr ValueType ITEM_VALUE_ADJUSTED_AMOUNT = SOHSTR(VADJ);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PosTransTypeEnums final: FieldEnumsBase {
   typedef FieldPosTransType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PosTransTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType EXERCISE;
   static constexpr ValueType ITEM_EXERCISE = 1;
   static const ItemType DO_NOT_EXERCISE;
   static constexpr ValueType ITEM_DO_NOT_EXERCISE = 2;
   static const ItemType POSITION_ADJUSTMENT;
   static constexpr ValueType ITEM_POSITION_ADJUSTMENT = 3;
   static const ItemType POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION;
   static constexpr ValueType ITEM_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION = 4;
   static const ItemType PLEDGE;
   static constexpr ValueType ITEM_PLEDGE = 5;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PosMaintActionEnums final: FieldEnumsBase {
   typedef FieldPosMaintAction::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PosMaintActionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW_USED_TO_INCREMENT_THE_OVERALL_TRANSACTION_QUANTITY;
   static constexpr ValueType ITEM_NEW_USED_TO_INCREMENT_THE_OVERALL_TRANSACTION_QUANTITY = 1;
   static const ItemType REPLACE_USED_TO_OVERRIDE_THE_OVERALL_TRANSACTION_QUANTITY_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_THE_REFERENCE_ID;
   static constexpr ValueType ITEM_REPLACE_USED_TO_OVERRIDE_THE_OVERALL_TRANSACTION_QUANTITY_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_THE_REFERENCE_ID = 2;
   static const ItemType CANCEL_USED_TO_REMOVE_THE_OVERALL_TRANSACTION_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_REFERENCE_ID;
   static constexpr ValueType ITEM_CANCEL_USED_TO_REMOVE_THE_OVERALL_TRANSACTION_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_REFERENCE_ID = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SettlSessIDEnums final: FieldEnumsBase {
   typedef FieldSettlSessID::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SettlSessIDEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType INTRADAY;
   static constexpr ValueType ITEM_INTRADAY = SOHSTR(ITD);
   static const ItemType REGULAR_TRADING_HOURS;
   static constexpr ValueType ITEM_REGULAR_TRADING_HOURS = SOHSTR(RTH);
   static const ItemType ELECTRONIC_TRADING_HOURS;
   static constexpr ValueType ITEM_ELECTRONIC_TRADING_HOURS = SOHSTR(ETH);
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AdjustmentTypeEnums final: FieldEnumsBase {
   typedef FieldAdjustmentType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AdjustmentTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PROCESS_REQUEST_AS_MARGIN_DISPOSITION;
   static constexpr ValueType ITEM_PROCESS_REQUEST_AS_MARGIN_DISPOSITION = 0;
   static const ItemType DELTA_PLUS;
   static constexpr ValueType ITEM_DELTA_PLUS = 1;
   static const ItemType DELTA_MINUS;
   static constexpr ValueType ITEM_DELTA_MINUS = 2;
   static const ItemType FINAL;
   static constexpr ValueType ITEM_FINAL = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PosMaintStatusEnums final: FieldEnumsBase {
   typedef FieldPosMaintStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PosMaintStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ACCEPTED;
   static constexpr ValueType ITEM_ACCEPTED = 0;
   static const ItemType ACCEPTED_WITH_WARNINGS;
   static constexpr ValueType ITEM_ACCEPTED_WITH_WARNINGS = 1;
   static const ItemType REJECTED;
   static constexpr ValueType ITEM_REJECTED = 2;
   static const ItemType COMPLETED;
   static constexpr ValueType ITEM_COMPLETED = 3;
   static const ItemType COMPLETED_WITH_WARNINGS;
   static constexpr ValueType ITEM_COMPLETED_WITH_WARNINGS = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PosMaintResultEnums final: FieldEnumsBase {
   typedef FieldPosMaintResult::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PosMaintResultEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SUCCESSFUL_COMPLETION;
   static constexpr ValueType ITEM_SUCCESSFUL_COMPLETION = 0;
   static const ItemType REJECTED;
   static constexpr ValueType ITEM_REJECTED = 1;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PosReqTypeEnums final: FieldEnumsBase {
   typedef FieldPosReqType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PosReqTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType POSITIONS;
   static constexpr ValueType ITEM_POSITIONS = 0;
   static const ItemType TRADES;
   static constexpr ValueType ITEM_TRADES = 1;
   static const ItemType EXERCISES;
   static constexpr ValueType ITEM_EXERCISES = 2;
   static const ItemType ASSIGNMENTS;
   static constexpr ValueType ITEM_ASSIGNMENTS = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ResponseTransportTypeEnums final: FieldEnumsBase {
   typedef FieldResponseTransportType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ResponseTransportTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType INBAND_TRANSPORT_THE_REQUEST_WAS_SENT_OVER;
   static constexpr ValueType ITEM_INBAND_TRANSPORT_THE_REQUEST_WAS_SENT_OVER = 0;
   static const ItemType OUT_OF_BAND_PRE_ARRANGED_OUT_OF_BAND_DELIVERY_MECHANISM;
   static constexpr ValueType ITEM_OUT_OF_BAND_PRE_ARRANGED_OUT_OF_BAND_DELIVERY_MECHANISM = 1;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PosReqResultEnums final: FieldEnumsBase {
   typedef FieldPosReqResult::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PosReqResultEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType VALID_REQUEST;
   static constexpr ValueType ITEM_VALID_REQUEST = 0;
   static const ItemType INVALID_OR_UNSUPPORTED_REQUEST;
   static constexpr ValueType ITEM_INVALID_OR_UNSUPPORTED_REQUEST = 1;
   static const ItemType NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA;
   static constexpr ValueType ITEM_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA = 2;
   static const ItemType NOT_AUTHORIZED_TO_REQUEST_POSITIONS;
   static constexpr ValueType ITEM_NOT_AUTHORIZED_TO_REQUEST_POSITIONS = 3;
   static const ItemType REQUEST_FOR_POSITION_NOT_SUPPORTED;
   static constexpr ValueType ITEM_REQUEST_FOR_POSITION_NOT_SUPPORTED = 4;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PosReqStatusEnums final: FieldEnumsBase {
   typedef FieldPosReqStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PosReqStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType COMPLETED;
   static constexpr ValueType ITEM_COMPLETED = 0;
   static const ItemType COMPLETED_WITH_WARNINGS;
   static constexpr ValueType ITEM_COMPLETED_WITH_WARNINGS = 1;
   static const ItemType REJECTED;
   static constexpr ValueType ITEM_REJECTED = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SettlPriceTypeEnums final: FieldEnumsBase {
   typedef FieldSettlPriceType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SettlPriceTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType FINAL;
   static constexpr ValueType ITEM_FINAL = 1;
   static const ItemType THEORETICAL;
   static constexpr ValueType ITEM_THEORETICAL = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AssignmentMethodEnums final: FieldEnumsBase {
   typedef FieldAssignmentMethod::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AssignmentMethodEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType RANDOM;
   static constexpr ValueType ITEM_RANDOM = 'R';
   static const ItemType PRORATA;
   static constexpr ValueType ITEM_PRORATA = 'P';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ExerciseMethodEnums final: FieldEnumsBase {
   typedef FieldExerciseMethod::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ExerciseMethodEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType AUTOMATIC;
   static constexpr ValueType ITEM_AUTOMATIC = 'A';
   static const ItemType MANUAL;
   static constexpr ValueType ITEM_MANUAL = 'M';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TradeRequestResultEnums final: FieldEnumsBase {
   typedef FieldTradeRequestResult::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TradeRequestResultEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SUCCESSFUL;
   static constexpr ValueType ITEM_SUCCESSFUL = 0;
   static const ItemType INVALID_OR_UNKNOWN_INSTRUMENT;
   static constexpr ValueType ITEM_INVALID_OR_UNKNOWN_INSTRUMENT = 1;
   static const ItemType INVALID_TYPE_OF_TRADE_REQUESTED;
   static constexpr ValueType ITEM_INVALID_TYPE_OF_TRADE_REQUESTED = 2;
   static const ItemType INVALID_PARTIES;
   static constexpr ValueType ITEM_INVALID_PARTIES = 3;
   static const ItemType INVALID_TRANSPORT_TYPE_REQUESTED;
   static constexpr ValueType ITEM_INVALID_TRANSPORT_TYPE_REQUESTED = 4;
   static const ItemType INVALID_DESTINATION_REQUESTED;
   static constexpr ValueType ITEM_INVALID_DESTINATION_REQUESTED = 5;
   static const ItemType TRADEREQUESTTYPE_NOT_SUPPORTED;
   static constexpr ValueType ITEM_TRADEREQUESTTYPE_NOT_SUPPORTED = 8;
   static const ItemType UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST;
   static constexpr ValueType ITEM_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST = 9;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TradeRequestStatusEnums final: FieldEnumsBase {
   typedef FieldTradeRequestStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TradeRequestStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ACCEPTED;
   static constexpr ValueType ITEM_ACCEPTED = 0;
   static const ItemType COMPLETED;
   static constexpr ValueType ITEM_COMPLETED = 1;
   static const ItemType REJECTED;
   static constexpr ValueType ITEM_REJECTED = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TradeReportRejectReasonEnums final: FieldEnumsBase {
   typedef FieldTradeReportRejectReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TradeReportRejectReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SUCCESSFUL;
   static constexpr ValueType ITEM_SUCCESSFUL = 0;
   static const ItemType INVALID_PARTY_INFORMATION;
   static constexpr ValueType ITEM_INVALID_PARTY_INFORMATION = 1;
   static const ItemType UNKNOWN_INSTRUMENT;
   static constexpr ValueType ITEM_UNKNOWN_INSTRUMENT = 2;
   static const ItemType UNAUTHORIZED_TO_REPORT_TRADES;
   static constexpr ValueType ITEM_UNAUTHORIZED_TO_REPORT_TRADES = 3;
   static const ItemType INVALID_TRADE_TYPE;
   static constexpr ValueType ITEM_INVALID_TRADE_TYPE = 4;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SideMultiLegReportingTypeEnums final: FieldEnumsBase {
   typedef FieldSideMultiLegReportingType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SideMultiLegReportingTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SINGLE_SECURITY;
   static constexpr ValueType ITEM_SINGLE_SECURITY = 1;
   static const ItemType INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY;
   static constexpr ValueType ITEM_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY = 2;
   static const ItemType MULTI_LEG_SECURITY;
   static constexpr ValueType ITEM_MULTI_LEG_SECURITY = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TrdRegTimestampTypeEnums final: FieldEnumsBase {
   typedef FieldTrdRegTimestampType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TrdRegTimestampTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType EXECUTION_TIME;
   static constexpr ValueType ITEM_EXECUTION_TIME = 1;
   static const ItemType TIME_IN;
   static constexpr ValueType ITEM_TIME_IN = 2;
   static const ItemType TIME_OUT;
   static constexpr ValueType ITEM_TIME_OUT = 3;
   static const ItemType BROKER_RECEIPT;
   static constexpr ValueType ITEM_BROKER_RECEIPT = 4;
   static const ItemType BROKER_EXECUTION;
   static constexpr ValueType ITEM_BROKER_EXECUTION = 5;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ConfirmTypeEnums final: FieldEnumsBase {
   typedef FieldConfirmType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ConfirmTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType STATUS;
   static constexpr ValueType ITEM_STATUS = 1;
   static const ItemType CONFIRMATION;
   static constexpr ValueType ITEM_CONFIRMATION = 2;
   static const ItemType CONFIRMATION_REQUEST_REJECTED;
   static constexpr ValueType ITEM_CONFIRMATION_REQUEST_REJECTED = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ConfirmRejReasonEnums final: FieldEnumsBase {
   typedef FieldConfirmRejReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ConfirmRejReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType MISMATCHED_ACCOUNT;
   static constexpr ValueType ITEM_MISMATCHED_ACCOUNT = 1;
   static const ItemType MISSING_SETTLEMENT_INSTRUCTIONS;
   static constexpr ValueType ITEM_MISSING_SETTLEMENT_INSTRUCTIONS = 2;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct BookingTypeEnums final: FieldEnumsBase {
   typedef FieldBookingType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const BookingTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType REGULAR_BOOKING;
   static constexpr ValueType ITEM_REGULAR_BOOKING = 0;
   static const ItemType CFD;
   static constexpr ValueType ITEM_CFD = 1;
   static const ItemType TOTAL_RETURN_SWAP;
   static constexpr ValueType ITEM_TOTAL_RETURN_SWAP = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AllocSettlInstTypeEnums final: FieldEnumsBase {
   typedef FieldAllocSettlInstType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AllocSettlInstTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType USE_DEFAULT_INSTRUCTIONS;
   static constexpr ValueType ITEM_USE_DEFAULT_INSTRUCTIONS = 0;
   static const ItemType DERIVE_FROM_PARAMETERS_PROVIDED;
   static constexpr ValueType ITEM_DERIVE_FROM_PARAMETERS_PROVIDED = 1;
   static const ItemType FULL_DETAILS_PROVIDED;
   static constexpr ValueType ITEM_FULL_DETAILS_PROVIDED = 2;
   static const ItemType SSI_DB_IDS_PROVIDED;
   static constexpr ValueType ITEM_SSI_DB_IDS_PROVIDED = 3;
   static const ItemType PHONE_FOR_INSTRUCTIONS;
   static constexpr ValueType ITEM_PHONE_FOR_INSTRUCTIONS = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DlvyInstTypeEnums final: FieldEnumsBase {
   typedef FieldDlvyInstType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DlvyInstTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SECURITIES;
   static constexpr ValueType ITEM_SECURITIES = 'S';
   static const ItemType CASH;
   static constexpr ValueType ITEM_CASH = 'C';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TerminationTypeEnums final: FieldEnumsBase {
   typedef FieldTerminationType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TerminationTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType OVERNIGHT;
   static constexpr ValueType ITEM_OVERNIGHT = 1;
   static const ItemType TERM;
   static constexpr ValueType ITEM_TERM = 2;
   static const ItemType FLEXIBLE;
   static constexpr ValueType ITEM_FLEXIBLE = 3;
   static const ItemType OPEN;
   static constexpr ValueType ITEM_OPEN = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct SettlInstReqRejCodeEnums final: FieldEnumsBase {
   typedef FieldSettlInstReqRejCode::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const SettlInstReqRejCodeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType UNABLE_TO_PROCESS_REQUEST;
   static constexpr ValueType ITEM_UNABLE_TO_PROCESS_REQUEST = 0;
   static const ItemType UNKNOWN_ACCOUNT;
   static constexpr ValueType ITEM_UNKNOWN_ACCOUNT = 1;
   static const ItemType NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND;
   static constexpr ValueType ITEM_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND = 2;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AllocReportTypeEnums final: FieldEnumsBase {
   typedef FieldAllocReportType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AllocReportTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SELLSIDE_CALCULATED_USING_PRELIMINARY;
   static constexpr ValueType ITEM_SELLSIDE_CALCULATED_USING_PRELIMINARY = 3;
   static const ItemType SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY;
   static constexpr ValueType ITEM_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY = 4;
   static const ItemType WAREHOUSE_RECAP;
   static constexpr ValueType ITEM_WAREHOUSE_RECAP = 5;
   static const ItemType REQUEST_TO_INTERMEDIARY;
   static constexpr ValueType ITEM_REQUEST_TO_INTERMEDIARY = 8;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AllocCancReplaceReasonEnums final: FieldEnumsBase {
   typedef FieldAllocCancReplaceReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AllocCancReplaceReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ORIGINAL_DETAILS_INCOMPLETE_INCORRECT;
   static constexpr ValueType ITEM_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT = 1;
   static const ItemType CHANGE_IN_UNDERLYING_ORDER_DETAILS;
   static constexpr ValueType ITEM_CHANGE_IN_UNDERLYING_ORDER_DETAILS = 2;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AllocAccountTypeEnums final: FieldEnumsBase {
   typedef FieldAllocAccountType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AllocAccountTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS;
   static constexpr ValueType ITEM_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS = 1;
   static const ItemType ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS;
   static constexpr ValueType ITEM_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS = 2;
   static const ItemType HOUSE_TRADER;
   static constexpr ValueType ITEM_HOUSE_TRADER = 3;
   static const ItemType FLOOR_TRADER;
   static constexpr ValueType ITEM_FLOOR_TRADER = 4;
   static const ItemType ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED;
   static constexpr ValueType ITEM_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED = 6;
   static const ItemType ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED;
   static constexpr ValueType ITEM_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED = 7;
   static const ItemType JOINT_BACKOFFICE_ACCOUNT;
   static constexpr ValueType ITEM_JOINT_BACKOFFICE_ACCOUNT = 8;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PartySubIDTypeEnums final: FieldEnumsBase {
   typedef FieldPartySubIDType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PartySubIDTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType FIRM;
   static constexpr ValueType ITEM_FIRM = 1;
   static const ItemType PERSON;
   static constexpr ValueType ITEM_PERSON = 2;
   static const ItemType SYSTEM;
   static constexpr ValueType ITEM_SYSTEM = 3;
   static const ItemType APPLICATION;
   static constexpr ValueType ITEM_APPLICATION = 4;
   static const ItemType FULL_LEGAL_NAME_OF_FIRM;
   static constexpr ValueType ITEM_FULL_LEGAL_NAME_OF_FIRM = 5;
   static const ItemType POSTAL_ADDRESS;
   static constexpr ValueType ITEM_POSTAL_ADDRESS = 6;
   static const ItemType PHONE_NUMBER;
   static constexpr ValueType ITEM_PHONE_NUMBER = 7;
   static const ItemType EMAIL_ADDRESS;
   static constexpr ValueType ITEM_EMAIL_ADDRESS = 8;
   static const ItemType CONTACT_NAME;
   static constexpr ValueType ITEM_CONTACT_NAME = 9;
   static const ItemType SECURITIES_ACCOUNT_NUMBER;
   static constexpr ValueType ITEM_SECURITIES_ACCOUNT_NUMBER = 10;
   static const ItemType REGISTRATION_NUMBER;
   static constexpr ValueType ITEM_REGISTRATION_NUMBER = 11;
   static const ItemType REGISTERED_ADDRESS_12;
   static constexpr ValueType ITEM_REGISTERED_ADDRESS_12 = 12;
   static const ItemType REGULATORY_STATUS;
   static constexpr ValueType ITEM_REGULATORY_STATUS = 13;
   static const ItemType REGISTRATION_NAME;
   static constexpr ValueType ITEM_REGISTRATION_NAME = 14;
   static const ItemType CASH_ACCOUNT_NUMBER;
   static constexpr ValueType ITEM_CASH_ACCOUNT_NUMBER = 15;
   static const ItemType BIC;
   static constexpr ValueType ITEM_BIC = 16;
   static const ItemType CSD_PARTICIPANT_MEMBER_CODE;
   static constexpr ValueType ITEM_CSD_PARTICIPANT_MEMBER_CODE = 17;
   static const ItemType REGISTERED_ADDRESS_18;
   static constexpr ValueType ITEM_REGISTERED_ADDRESS_18 = 18;
   static const ItemType FUND_ACCOUNT_NAME;
   static constexpr ValueType ITEM_FUND_ACCOUNT_NAME = 19;
   static const ItemType TELEX_NUMBER;
   static constexpr ValueType ITEM_TELEX_NUMBER = 20;
   static const ItemType FAX_NUMBER;
   static constexpr ValueType ITEM_FAX_NUMBER = 21;
   static const ItemType SECURITIES_ACCOUNT_NAME;
   static constexpr ValueType ITEM_SECURITIES_ACCOUNT_NAME = 22;
   static const ItemType CASH_ACCOUNT_NAME;
   static constexpr ValueType ITEM_CASH_ACCOUNT_NAME = 23;
   static const ItemType DEPARTMENT;
   static constexpr ValueType ITEM_DEPARTMENT = 24;
   static const ItemType LOCATION;
   static constexpr ValueType ITEM_LOCATION = 25;
   static const ItemType POSITION_ACCOUNT_TYPE;
   static constexpr ValueType ITEM_POSITION_ACCOUNT_TYPE = 26;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AllocIntermedReqTypeEnums final: FieldEnumsBase {
   typedef FieldAllocIntermedReqType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AllocIntermedReqTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PENDING_ACCEPT;
   static constexpr ValueType ITEM_PENDING_ACCEPT = 1;
   static const ItemType PENDING_RELEASE;
   static constexpr ValueType ITEM_PENDING_RELEASE = 2;
   static const ItemType PENDING_REVERSAL;
   static constexpr ValueType ITEM_PENDING_REVERSAL = 3;
   static const ItemType ACCEPT;
   static constexpr ValueType ITEM_ACCEPT = 4;
   static const ItemType BLOCK_LEVEL_REJECT;
   static constexpr ValueType ITEM_BLOCK_LEVEL_REJECT = 5;
   static const ItemType ACCOUNT_LEVEL_REJECT;
   static constexpr ValueType ITEM_ACCOUNT_LEVEL_REJECT = 6;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ApplQueueResolutionEnums final: FieldEnumsBase {
   typedef FieldApplQueueResolution::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ApplQueueResolutionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NO_ACTION_TAKEN;
   static constexpr ValueType ITEM_NO_ACTION_TAKEN = 0;
   static const ItemType QUEUE_FLUSHED;
   static constexpr ValueType ITEM_QUEUE_FLUSHED = 1;
   static const ItemType OVERLAY_LAST;
   static constexpr ValueType ITEM_OVERLAY_LAST = 2;
   static const ItemType END_SESSION;
   static constexpr ValueType ITEM_END_SESSION = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ApplQueueActionEnums final: FieldEnumsBase {
   typedef FieldApplQueueAction::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ApplQueueActionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NO_ACTION_TAKEN;
   static constexpr ValueType ITEM_NO_ACTION_TAKEN = 0;
   static const ItemType QUEUE_FLUSHED;
   static constexpr ValueType ITEM_QUEUE_FLUSHED = 1;
   static const ItemType OVERLAY_LAST;
   static constexpr ValueType ITEM_OVERLAY_LAST = 2;
   static const ItemType END_SESSION;
   static constexpr ValueType ITEM_END_SESSION = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AvgPxIndicatorEnums final: FieldEnumsBase {
   typedef FieldAvgPxIndicator::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AvgPxIndicatorEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NO_AVERAGE_PRICING;
   static constexpr ValueType ITEM_NO_AVERAGE_PRICING = 0;
   static const ItemType TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID;
   static constexpr ValueType ITEM_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID = 1;
   static const ItemType LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID;
   static constexpr ValueType ITEM_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TradeAllocIndicatorEnums final: FieldEnumsBase {
   typedef FieldTradeAllocIndicator::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TradeAllocIndicatorEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ALLOCATION_NOT_REQUIRED;
   static constexpr ValueType ITEM_ALLOCATION_NOT_REQUIRED = 0;
   static const ItemType ALLOCATION_REQUIRED;
   static constexpr ValueType ITEM_ALLOCATION_REQUIRED = 1;
   static const ItemType USE_ALLOCATION_PROVIDED_WITH_THE_TRADE;
   static constexpr ValueType ITEM_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ExpirationCycleEnums final: FieldEnumsBase {
   typedef FieldExpirationCycle::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ExpirationCycleEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType EXPIRE_ON_TRADING_SESSION_CLOSE;
   static constexpr ValueType ITEM_EXPIRE_ON_TRADING_SESSION_CLOSE = 0;
   static const ItemType EXPIRE_ON_TRADING_SESSION_OPEN;
   static constexpr ValueType ITEM_EXPIRE_ON_TRADING_SESSION_OPEN = 1;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TrdTypeEnums final: FieldEnumsBase {
   typedef FieldTrdType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TrdTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType REGULAR_TRADE;
   static constexpr ValueType ITEM_REGULAR_TRADE = 0;
   static const ItemType BLOCK_TRADE;
   static constexpr ValueType ITEM_BLOCK_TRADE = 1;
   static const ItemType EFP;
   static constexpr ValueType ITEM_EFP = 2;
   static const ItemType TRANSFER;
   static constexpr ValueType ITEM_TRANSFER = 3;
   static const ItemType LATE_TRADE;
   static constexpr ValueType ITEM_LATE_TRADE = 4;
   static const ItemType T_TRADE;
   static constexpr ValueType ITEM_T_TRADE = 5;
   static const ItemType WEIGHTED_AVERAGE_PRICE_TRADE;
   static constexpr ValueType ITEM_WEIGHTED_AVERAGE_PRICE_TRADE = 6;
   static const ItemType BUNCHED_TRADE;
   static constexpr ValueType ITEM_BUNCHED_TRADE = 7;
   static const ItemType LATE_BUNCHED_TRADE;
   static constexpr ValueType ITEM_LATE_BUNCHED_TRADE = 8;
   static const ItemType PRIOR_REFERENCE_PRICE_TRADE;
   static constexpr ValueType ITEM_PRIOR_REFERENCE_PRICE_TRADE = 9;
   static const ItemType AFTER_HOURS_TRADE;
   static constexpr ValueType ITEM_AFTER_HOURS_TRADE = 10;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PegMoveTypeEnums final: FieldEnumsBase {
   typedef FieldPegMoveType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PegMoveTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType FLOATING;
   static constexpr ValueType ITEM_FLOATING = 0;
   static const ItemType FIXED;
   static constexpr ValueType ITEM_FIXED = 1;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PegOffsetTypeEnums final: FieldEnumsBase {
   typedef FieldPegOffsetType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PegOffsetTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PRICE;
   static constexpr ValueType ITEM_PRICE = 0;
   static const ItemType BASIS_POINTS;
   static constexpr ValueType ITEM_BASIS_POINTS = 1;
   static const ItemType TICKS;
   static constexpr ValueType ITEM_TICKS = 2;
   static const ItemType PRICE_TIER;
   static constexpr ValueType ITEM_PRICE_TIER = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PegLimitTypeEnums final: FieldEnumsBase {
   typedef FieldPegLimitType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PegLimitTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType OR_BETTER;
   static constexpr ValueType ITEM_OR_BETTER = 0;
   static const ItemType STRICT_LIMIT_IS_A_STRICT_LIMIT;
   static constexpr ValueType ITEM_STRICT_LIMIT_IS_A_STRICT_LIMIT = 1;
   static const ItemType OR_WORSE_FOR_A_BUY_THE_PEG_LIMIT_IS_A_MINIMUM_AND_FOR_A_SELL_THE_PEG_LIMIT_IS_A_MAXIMUM;
   static constexpr ValueType ITEM_OR_WORSE_FOR_A_BUY_THE_PEG_LIMIT_IS_A_MINIMUM_AND_FOR_A_SELL_THE_PEG_LIMIT_IS_A_MAXIMUM = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PegRoundDirectionEnums final: FieldEnumsBase {
   typedef FieldPegRoundDirection::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PegRoundDirectionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK;
   static constexpr ValueType ITEM_MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK = 1;
   static const ItemType MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK;
   static constexpr ValueType ITEM_MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PegScopeEnums final: FieldEnumsBase {
   typedef FieldPegScope::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PegScopeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType LOCAL;
   static constexpr ValueType ITEM_LOCAL = 1;
   static const ItemType NATIONAL;
   static constexpr ValueType ITEM_NATIONAL = 2;
   static const ItemType GLOBAL;
   static constexpr ValueType ITEM_GLOBAL = 3;
   static const ItemType NATIONAL_EXCLUDING_LOCAL;
   static constexpr ValueType ITEM_NATIONAL_EXCLUDING_LOCAL = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DiscretionMoveTypeEnums final: FieldEnumsBase {
   typedef FieldDiscretionMoveType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DiscretionMoveTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType FLOATING;
   static constexpr ValueType ITEM_FLOATING = 0;
   static const ItemType FIXED;
   static constexpr ValueType ITEM_FIXED = 1;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DiscretionOffsetTypeEnums final: FieldEnumsBase {
   typedef FieldDiscretionOffsetType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DiscretionOffsetTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PRICE;
   static constexpr ValueType ITEM_PRICE = 0;
   static const ItemType BASIS_POINTS;
   static constexpr ValueType ITEM_BASIS_POINTS = 1;
   static const ItemType TICKS;
   static constexpr ValueType ITEM_TICKS = 2;
   static const ItemType PRICE_TIER;
   static constexpr ValueType ITEM_PRICE_TIER = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DiscretionLimitTypeEnums final: FieldEnumsBase {
   typedef FieldDiscretionLimitType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DiscretionLimitTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType OR_BETTER;
   static constexpr ValueType ITEM_OR_BETTER = 0;
   static const ItemType STRICT_LIMIT_IS_A_STRICT_LIMIT;
   static constexpr ValueType ITEM_STRICT_LIMIT_IS_A_STRICT_LIMIT = 1;
   static const ItemType OR_WORSE_FOR_A_BUY_THE_DISCRETION_PRICE_IS_A_MINIMUM_AND_FOR_A_SELL_THE_DISCRETION_PRICE_IS_A_MAXIMUM;
   static constexpr ValueType ITEM_OR_WORSE_FOR_A_BUY_THE_DISCRETION_PRICE_IS_A_MINIMUM_AND_FOR_A_SELL_THE_DISCRETION_PRICE_IS_A_MAXIMUM = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DiscretionRoundDirectionEnums final: FieldEnumsBase {
   typedef FieldDiscretionRoundDirection::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DiscretionRoundDirectionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK;
   static constexpr ValueType ITEM_MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK = 1;
   static const ItemType MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK;
   static constexpr ValueType ITEM_MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DiscretionScopeEnums final: FieldEnumsBase {
   typedef FieldDiscretionScope::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DiscretionScopeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType LOCAL;
   static constexpr ValueType ITEM_LOCAL = 1;
   static const ItemType NATIONAL;
   static constexpr ValueType ITEM_NATIONAL = 2;
   static const ItemType GLOBAL;
   static constexpr ValueType ITEM_GLOBAL = 3;
   static const ItemType NATIONAL_EXCLUDING_LOCAL;
   static constexpr ValueType ITEM_NATIONAL_EXCLUDING_LOCAL = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TargetStrategyEnums final: FieldEnumsBase {
   typedef FieldTargetStrategy::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TargetStrategyEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType VWAP;
   static constexpr ValueType ITEM_VWAP = 1;
   static const ItemType PARTICIPATE;
   static constexpr ValueType ITEM_PARTICIPATE = 2;
   static const ItemType MININIZE_MARKET_IMPACT;
   static constexpr ValueType ITEM_MININIZE_MARKET_IMPACT = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct LastLiquidityIndEnums final: FieldEnumsBase {
   typedef FieldLastLiquidityInd::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const LastLiquidityIndEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ADDED_LIQUIDITY;
   static constexpr ValueType ITEM_ADDED_LIQUIDITY = 1;
   static const ItemType REMOVED_LIQUIDITY;
   static constexpr ValueType ITEM_REMOVED_LIQUIDITY = 2;
   static const ItemType LIQUIDITY_ROUTED_OUT;
   static constexpr ValueType ITEM_LIQUIDITY_ROUTED_OUT = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct PublishTrdIndicatorEnums final: FieldEnumsBase {
   typedef FieldPublishTrdIndicator::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const PublishTrdIndicatorEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct ShortSaleReasonEnums final: FieldEnumsBase {
   typedef FieldShortSaleReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const ShortSaleReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType DEALER_SOLD_SHORT;
   static constexpr ValueType ITEM_DEALER_SOLD_SHORT = 0;
   static const ItemType DEALER_SOLD_SHORT_EXEMPT;
   static constexpr ValueType ITEM_DEALER_SOLD_SHORT_EXEMPT = 1;
   static const ItemType SELLING_CUSTOMER_SOLD_SHORT;
   static constexpr ValueType ITEM_SELLING_CUSTOMER_SOLD_SHORT = 2;
   static const ItemType SELLING_CUSTOMER_SOLD_SHORT_EXEMPT;
   static constexpr ValueType ITEM_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT = 3;
   static const ItemType QUALIFED_SERVICE_REPRESENTATIVE;
   static constexpr ValueType ITEM_QUALIFED_SERVICE_REPRESENTATIVE = 4;
   static const ItemType QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT;
   static constexpr ValueType ITEM_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT = 5;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct QtyTypeEnums final: FieldEnumsBase {
   typedef FieldQtyType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const QtyTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType UNITS;
   static constexpr ValueType ITEM_UNITS = 0;
   static const ItemType CONTRACTS;
   static constexpr ValueType ITEM_CONTRACTS = 1;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TradeReportTypeEnums final: FieldEnumsBase {
   typedef FieldTradeReportType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TradeReportTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SUBMIT;
   static constexpr ValueType ITEM_SUBMIT = 0;
   static const ItemType ALLEGED;
   static constexpr ValueType ITEM_ALLEGED = 1;
   static const ItemType ACCEPT;
   static constexpr ValueType ITEM_ACCEPT = 2;
   static const ItemType DECLINE;
   static constexpr ValueType ITEM_DECLINE = 3;
   static const ItemType ADDENDUM;
   static constexpr ValueType ITEM_ADDENDUM = 4;
   static const ItemType NO_WAS;
   static constexpr ValueType ITEM_NO_WAS = 5;
   static const ItemType TRADE_REPORT_CANCEL;
   static constexpr ValueType ITEM_TRADE_REPORT_CANCEL = 6;
   static const ItemType LOCKED_IN_TRADE_BREAK;
   static constexpr ValueType ITEM_LOCKED_IN_TRADE_BREAK = 7;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AllocNoOrdersTypeEnums final: FieldEnumsBase {
   typedef FieldAllocNoOrdersType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AllocNoOrdersTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NOT_SPECIFIED;
   static constexpr ValueType ITEM_NOT_SPECIFIED = 0;
   static const ItemType EXPLICIT_LIST_PROVIDED;
   static constexpr ValueType ITEM_EXPLICIT_LIST_PROVIDED = 1;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct EventTypeEnums final: FieldEnumsBase {
   typedef FieldEventType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const EventTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType PUT;
   static constexpr ValueType ITEM_PUT = 1;
   static const ItemType CALL;
   static constexpr ValueType ITEM_CALL = 2;
   static const ItemType TENDER;
   static constexpr ValueType ITEM_TENDER = 3;
   static const ItemType SINKING_FUND_CALL;
   static constexpr ValueType ITEM_SINKING_FUND_CALL = 4;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct InstrAttribTypeEnums final: FieldEnumsBase {
   typedef FieldInstrAttribType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const InstrAttribTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType FLAT;
   static constexpr ValueType ITEM_FLAT = 1;
   static const ItemType ZERO_COUPON;
   static constexpr ValueType ITEM_ZERO_COUPON = 2;
   static const ItemType INTEREST_BEARING;
   static constexpr ValueType ITEM_INTEREST_BEARING = 3;
   static const ItemType NO_PERIODIC_PAYMENTS;
   static constexpr ValueType ITEM_NO_PERIODIC_PAYMENTS = 4;
   static const ItemType VARIABLE_RATE;
   static constexpr ValueType ITEM_VARIABLE_RATE = 5;
   static const ItemType LESS_FEE_FOR_PUT;
   static constexpr ValueType ITEM_LESS_FEE_FOR_PUT = 6;
   static const ItemType STEPPED_COUPON;
   static constexpr ValueType ITEM_STEPPED_COUPON = 7;
   static const ItemType COUPON_PERIOD;
   static constexpr ValueType ITEM_COUPON_PERIOD = 8;
   static const ItemType WHEN_AND_IF_ISSUED;
   static constexpr ValueType ITEM_WHEN_AND_IF_ISSUED = 9;
   static const ItemType ORIGINAL_ISSUE_DISCOUNT;
   static constexpr ValueType ITEM_ORIGINAL_ISSUE_DISCOUNT = 10;
   static const ItemType CALLABLE_PUTTABLE;
   static constexpr ValueType ITEM_CALLABLE_PUTTABLE = 11;
   static const ItemType ESCROWED_TO_MATURITY;
   static constexpr ValueType ITEM_ESCROWED_TO_MATURITY = 12;
   static const ItemType ESCROWED_TO_REDEMPTION_DATE_CALLABLE_SUPPLY_REDEMPTION_DATE_IN_THE_INSTRATTRIBVALUE;
   static constexpr ValueType ITEM_ESCROWED_TO_REDEMPTION_DATE_CALLABLE_SUPPLY_REDEMPTION_DATE_IN_THE_INSTRATTRIBVALUE = 13;
   static const ItemType PREREFUNDED;
   static constexpr ValueType ITEM_PREREFUNDED = 14;
   static const ItemType IN_DEFAULT;
   static constexpr ValueType ITEM_IN_DEFAULT = 15;
   static const ItemType UNRATED;
   static constexpr ValueType ITEM_UNRATED = 16;
   static const ItemType TAXABLE;
   static constexpr ValueType ITEM_TAXABLE = 17;
   static const ItemType INDEXED;
   static constexpr ValueType ITEM_INDEXED = 18;
   static const ItemType SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX;
   static constexpr ValueType ITEM_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX = 19;
   static const ItemType ORIGINAL_ISSUE_DISCOUNT_PRICE_SUPPLY_PRICE_IN_THE_INSTRATTRIBVALUE;
   static constexpr ValueType ITEM_ORIGINAL_ISSUE_DISCOUNT_PRICE_SUPPLY_PRICE_IN_THE_INSTRATTRIBVALUE = 20;
   static const ItemType CALLABLE_BELOW_MATURITY_VALUE;
   static constexpr ValueType ITEM_CALLABLE_BELOW_MATURITY_VALUE = 21;
   static const ItemType CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED;
   static constexpr ValueType ITEM_CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED = 22;
   static const ItemType TEXT_SUPPLY_THE_TEXT_OF_THE_ATTRIBUTE_OR_DISCLAIMER_IN_THE_INSTRATTRIBVALUE;
   static constexpr ValueType ITEM_TEXT_SUPPLY_THE_TEXT_OF_THE_ATTRIBUTE_OR_DISCLAIMER_IN_THE_INSTRATTRIBVALUE = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CPProgramEnums final: FieldEnumsBase {
   typedef FieldCPProgram::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CPProgramEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType _3;
   static constexpr ValueType ITEM__3 = 1;
   static const ItemType _4;
   static constexpr ValueType ITEM__4 = 2;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct MiscFeeBasisEnums final: FieldEnumsBase {
   typedef FieldMiscFeeBasis::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const MiscFeeBasisEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ABSOLUTE;
   static constexpr ValueType ITEM_ABSOLUTE = 0;
   static const ItemType PER_UNIT;
   static constexpr ValueType ITEM_PER_UNIT = 1;
   static const ItemType PERCENTAGE;
   static constexpr ValueType ITEM_PERCENTAGE = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct LastFragmentEnums final: FieldEnumsBase {
   typedef FieldLastFragment::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const LastFragmentEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType YES;
   static constexpr ValueType ITEM_YES = 'Y';
   static const ItemType NO;
   static constexpr ValueType ITEM_NO = 'N';
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CollAsgnReasonEnums final: FieldEnumsBase {
   typedef FieldCollAsgnReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CollAsgnReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType INITIAL;
   static constexpr ValueType ITEM_INITIAL = 0;
   static const ItemType SCHEDULED;
   static constexpr ValueType ITEM_SCHEDULED = 1;
   static const ItemType TIME_WARNING;
   static constexpr ValueType ITEM_TIME_WARNING = 2;
   static const ItemType MARGIN_DEFICIENCY;
   static constexpr ValueType ITEM_MARGIN_DEFICIENCY = 3;
   static const ItemType MARGIN_EXCESS;
   static constexpr ValueType ITEM_MARGIN_EXCESS = 4;
   static const ItemType FORWARD_COLLATERAL_DEMAND;
   static constexpr ValueType ITEM_FORWARD_COLLATERAL_DEMAND = 5;
   static const ItemType EVENT_OF_DEFAULT;
   static constexpr ValueType ITEM_EVENT_OF_DEFAULT = 6;
   static const ItemType ADVERSE_TAX_EVENT;
   static constexpr ValueType ITEM_ADVERSE_TAX_EVENT = 7;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CollInquiryQualifierEnums final: FieldEnumsBase {
   typedef FieldCollInquiryQualifier::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CollInquiryQualifierEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType TRADEDATE;
   static constexpr ValueType ITEM_TRADEDATE = 0;
   static const ItemType GC_INSTRUMENT;
   static constexpr ValueType ITEM_GC_INSTRUMENT = 1;
   static const ItemType COLLATERALINSTRUMENT;
   static constexpr ValueType ITEM_COLLATERALINSTRUMENT = 2;
   static const ItemType SUBSTITUTION_ELIGIBLE;
   static constexpr ValueType ITEM_SUBSTITUTION_ELIGIBLE = 3;
   static const ItemType NOT_ASSIGNED;
   static constexpr ValueType ITEM_NOT_ASSIGNED = 4;
   static const ItemType PARTIALLY_ASSIGNED;
   static constexpr ValueType ITEM_PARTIALLY_ASSIGNED = 5;
   static const ItemType FULLY_ASSIGNED;
   static constexpr ValueType ITEM_FULLY_ASSIGNED = 6;
   static const ItemType OUTSTANDING_TRADES;
   static constexpr ValueType ITEM_OUTSTANDING_TRADES = 7;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CollAsgnTransTypeEnums final: FieldEnumsBase {
   typedef FieldCollAsgnTransType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CollAsgnTransTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType NEW;
   static constexpr ValueType ITEM_NEW = 0;
   static const ItemType REPLACE;
   static constexpr ValueType ITEM_REPLACE = 1;
   static const ItemType CANCEL;
   static constexpr ValueType ITEM_CANCEL = 2;
   static const ItemType RELEASE;
   static constexpr ValueType ITEM_RELEASE = 3;
   static const ItemType REVERSE;
   static constexpr ValueType ITEM_REVERSE = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CollAsgnRespTypeEnums final: FieldEnumsBase {
   typedef FieldCollAsgnRespType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CollAsgnRespTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType RECEIVED;
   static constexpr ValueType ITEM_RECEIVED = 0;
   static const ItemType ACCEPTED;
   static constexpr ValueType ITEM_ACCEPTED = 1;
   static const ItemType DECLINED;
   static constexpr ValueType ITEM_DECLINED = 2;
   static const ItemType REJECTED;
   static constexpr ValueType ITEM_REJECTED = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CollAsgnRejectReasonEnums final: FieldEnumsBase {
   typedef FieldCollAsgnRejectReason::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CollAsgnRejectReasonEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType UNKNOWN_DEAL;
   static constexpr ValueType ITEM_UNKNOWN_DEAL = 0;
   static const ItemType UNKNOWN_OR_INVALID_INSTRUMENT;
   static constexpr ValueType ITEM_UNKNOWN_OR_INVALID_INSTRUMENT = 1;
   static const ItemType UNAUTHORIZED_TRANSACTION;
   static constexpr ValueType ITEM_UNAUTHORIZED_TRANSACTION = 2;
   static const ItemType INSUFFICIENT_COLLATERAL;
   static constexpr ValueType ITEM_INSUFFICIENT_COLLATERAL = 3;
   static const ItemType INVALID_TYPE_OF_COLLATERAL;
   static constexpr ValueType ITEM_INVALID_TYPE_OF_COLLATERAL = 4;
   static const ItemType EXCESSIVE_SUBSTITUTION;
   static constexpr ValueType ITEM_EXCESSIVE_SUBSTITUTION = 5;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CollStatusEnums final: FieldEnumsBase {
   typedef FieldCollStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CollStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType UNASSIGNED;
   static constexpr ValueType ITEM_UNASSIGNED = 0;
   static const ItemType PARTIALLY_ASSIGNED;
   static constexpr ValueType ITEM_PARTIALLY_ASSIGNED = 1;
   static const ItemType ASSIGNMENT_PROPOSED;
   static constexpr ValueType ITEM_ASSIGNMENT_PROPOSED = 2;
   static const ItemType ASSIGNED;
   static constexpr ValueType ITEM_ASSIGNED = 3;
   static const ItemType CHALLENGED;
   static constexpr ValueType ITEM_CHALLENGED = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct DeliveryTypeEnums final: FieldEnumsBase {
   typedef FieldDeliveryType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const DeliveryTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType VERSUS_PAYMENT_DELIVER;
   static constexpr ValueType ITEM_VERSUS_PAYMENT_DELIVER = 0;
   static const ItemType FREE_DELIVER;
   static constexpr ValueType ITEM_FREE_DELIVER = 1;
   static const ItemType TRI_PARTY;
   static constexpr ValueType ITEM_TRI_PARTY = 2;
   static const ItemType HOLD_IN_CUSTODY;
   static constexpr ValueType ITEM_HOLD_IN_CUSTODY = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct UserRequestTypeEnums final: FieldEnumsBase {
   typedef FieldUserRequestType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const UserRequestTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType LOGONUSER;
   static constexpr ValueType ITEM_LOGONUSER = 1;
   static const ItemType LOGOFFUSER;
   static constexpr ValueType ITEM_LOGOFFUSER = 2;
   static const ItemType CHANGEPASSWORDFORUSER;
   static constexpr ValueType ITEM_CHANGEPASSWORDFORUSER = 3;
   static const ItemType REQUEST_INDIVIDUAL_USER_STATUS;
   static constexpr ValueType ITEM_REQUEST_INDIVIDUAL_USER_STATUS = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct UserStatusEnums final: FieldEnumsBase {
   typedef FieldUserStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const UserStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType LOGGED_IN;
   static constexpr ValueType ITEM_LOGGED_IN = 1;
   static const ItemType NOT_LOGGED_IN;
   static constexpr ValueType ITEM_NOT_LOGGED_IN = 2;
   static const ItemType USER_NOT_RECOGNISED;
   static constexpr ValueType ITEM_USER_NOT_RECOGNISED = 3;
   static const ItemType PASSWORD_INCORRECT;
   static constexpr ValueType ITEM_PASSWORD_INCORRECT = 4;
   static const ItemType PASSWORD_CHANGED;
   static constexpr ValueType ITEM_PASSWORD_CHANGED = 5;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 6;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct StatusValueEnums final: FieldEnumsBase {
   typedef FieldStatusValue::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const StatusValueEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType CONNECTED;
   static constexpr ValueType ITEM_CONNECTED = 1;
   static const ItemType NOT_CONNECTED_DOWN_EXPECTED_UP;
   static constexpr ValueType ITEM_NOT_CONNECTED_DOWN_EXPECTED_UP = 2;
   static const ItemType NOT_CONNECTED_DOWN_EXPECTED_DOWN;
   static constexpr ValueType ITEM_NOT_CONNECTED_DOWN_EXPECTED_DOWN = 3;
   static const ItemType IN_PROCESS;
   static constexpr ValueType ITEM_IN_PROCESS = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct NetworkRequestTypeEnums final: FieldEnumsBase {
   typedef FieldNetworkRequestType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const NetworkRequestTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SNAPSHOT;
   static constexpr ValueType ITEM_SNAPSHOT = 1;
   static const ItemType SUBSCRIBE;
   static constexpr ValueType ITEM_SUBSCRIBE = 2;
   static const ItemType STOP_SUBSCRIBING;
   static constexpr ValueType ITEM_STOP_SUBSCRIBING = 4;
   static const ItemType LEVEL_OF_DETAIL_THEN_NOCOMPIDS_BECOMES_REQUIRED;
   static constexpr ValueType ITEM_LEVEL_OF_DETAIL_THEN_NOCOMPIDS_BECOMES_REQUIRED = 8;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct NetworkStatusResponseTypeEnums final: FieldEnumsBase {
   typedef FieldNetworkStatusResponseType::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const NetworkStatusResponseTypeEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType FULL;
   static constexpr ValueType ITEM_FULL = 1;
   static const ItemType INCREMENTAL_UPDATE;
   static constexpr ValueType ITEM_INCREMENTAL_UPDATE = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct TrdRptStatusEnums final: FieldEnumsBase {
   typedef FieldTrdRptStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const TrdRptStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ACCEPTED;
   static constexpr ValueType ITEM_ACCEPTED = 0;
   static const ItemType REJECTED;
   static constexpr ValueType ITEM_REJECTED = 1;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct AffirmStatusEnums final: FieldEnumsBase {
   typedef FieldAffirmStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const AffirmStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType RECEIVED;
   static constexpr ValueType ITEM_RECEIVED = 1;
   static const ItemType CONFIRM_REJECTED_IE_NOT_AFFIRMED;
   static constexpr ValueType ITEM_CONFIRM_REJECTED_IE_NOT_AFFIRMED = 2;
   static const ItemType AFFIRMED;
   static constexpr ValueType ITEM_AFFIRMED = 3;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CollActionEnums final: FieldEnumsBase {
   typedef FieldCollAction::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CollActionEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType RETAIN;
   static constexpr ValueType ITEM_RETAIN = 0;
   static const ItemType ADD;
   static constexpr ValueType ITEM_ADD = 1;
   static const ItemType REMOVE;
   static constexpr ValueType ITEM_REMOVE = 2;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CollInquiryStatusEnums final: FieldEnumsBase {
   typedef FieldCollInquiryStatus::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CollInquiryStatusEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType ACCEPTED;
   static constexpr ValueType ITEM_ACCEPTED = 0;
   static const ItemType ACCEPTED_WITH_WARNINGS;
   static constexpr ValueType ITEM_ACCEPTED_WITH_WARNINGS = 1;
   static const ItemType COMPLETED;
   static constexpr ValueType ITEM_COMPLETED = 2;
   static const ItemType COMPLETED_WITH_WARNINGS;
   static constexpr ValueType ITEM_COMPLETED_WITH_WARNINGS = 3;
   static const ItemType REJECTED;
   static constexpr ValueType ITEM_REJECTED = 4;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

struct CollInquiryResultEnums final: FieldEnumsBase {
   typedef FieldCollInquiryResult::ValueType ValueType;
   typedef FieldEnum< ValueType > ItemType;
   static const FieldEnumBase * items[];
   static const FieldEnumMap itemByRaw;
   static const CollInquiryResultEnums instance;
   static const FieldEnumBase * findEnum( raw_enum_t raw );
   static const ValueType * findEnumValue( raw_enum_t raw );
   virtual const char * getFieldName() const override;
   virtual const FieldEnumBase * getEnumByRaw( raw_enum_t raw ) const override;
   virtual const FieldEnumMap & getEnumMapByRaw() const override;
   virtual const FieldEnumBase ** getEnums() const override;
   static const ItemType SUCCESSFUL;
   static constexpr ValueType ITEM_SUCCESSFUL = 0;
   static const ItemType INVALID_OR_UNKNOWN_INSTRUMENT;
   static constexpr ValueType ITEM_INVALID_OR_UNKNOWN_INSTRUMENT = 1;
   static const ItemType INVALID_OR_UNKNOWN_COLLATERAL_TYPE;
   static constexpr ValueType ITEM_INVALID_OR_UNKNOWN_COLLATERAL_TYPE = 2;
   static const ItemType INVALID_PARTIES;
   static constexpr ValueType ITEM_INVALID_PARTIES = 3;
   static const ItemType INVALID_TRANSPORT_TYPE_REQUESTED;
   static constexpr ValueType ITEM_INVALID_TRANSPORT_TYPE_REQUESTED = 4;
   static const ItemType INVALID_DESTINATION_REQUESTED;
   static constexpr ValueType ITEM_INVALID_DESTINATION_REQUESTED = 5;
   static const ItemType NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED;
   static constexpr ValueType ITEM_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED = 6;
   static const ItemType NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED;
   static constexpr ValueType ITEM_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED = 7;
   static const ItemType COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED;
   static constexpr ValueType ITEM_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED = 8;
   static const ItemType UNAUTHORIZED_FOR_COLLATERAL_INQUIRY;
   static constexpr ValueType ITEM_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY = 9;
   static const ItemType OTHER;
   static constexpr ValueType ITEM_OTHER = 99;
   static const ItemType BAD_ENUM;
   static constexpr ValueType ITEM_BAD_ENUM = BadEnum<ValueType>::value;
};

// -------------------------------------- convenience field namespace ----------------------------------------
namespace field
{

typedef FieldAccount Account;
typedef FieldAdvId AdvId;
typedef FieldAdvRefID AdvRefID;
typedef FieldAdvSide AdvSide;
typedef FieldAdvTransType AdvTransType;
typedef FieldAvgPx AvgPx;
typedef FieldBeginSeqNo BeginSeqNo;
typedef FieldBeginString BeginString;
typedef FieldBodyLength BodyLength;
typedef FieldCheckSum CheckSum;
typedef FieldClOrdID ClOrdID;
typedef FieldCommission Commission;
typedef FieldCommType CommType;
typedef FieldCumQty CumQty;
typedef FieldCurrency Currency;
typedef FieldEndSeqNo EndSeqNo;
typedef FieldExecID ExecID;
typedef FieldExecInst ExecInst;
typedef FieldExecRefID ExecRefID;
typedef FieldHandlInst HandlInst;
typedef FieldSecurityIDSource SecurityIDSource;
typedef FieldIOIID IOIID;
typedef FieldIOIQltyInd IOIQltyInd;
typedef FieldIOIRefID IOIRefID;
typedef FieldIOIQty IOIQty;
typedef FieldIOITransType IOITransType;
typedef FieldLastCapacity LastCapacity;
typedef FieldLastMkt LastMkt;
typedef FieldLastPx LastPx;
typedef FieldLastQty LastQty;
typedef FieldNoLinesOfText NoLinesOfText;
typedef FieldMsgSeqNum MsgSeqNum;
typedef FieldMsgType MsgType;
typedef FieldNewSeqNo NewSeqNo;
typedef FieldOrderID OrderID;
typedef FieldOrderQty OrderQty;
typedef FieldOrdStatus OrdStatus;
typedef FieldOrdType OrdType;
typedef FieldOrigClOrdID OrigClOrdID;
typedef FieldOrigTime OrigTime;
typedef FieldPossDupFlag PossDupFlag;
typedef FieldPrice Price;
typedef FieldRefSeqNum RefSeqNum;
typedef FieldSecurityID SecurityID;
typedef FieldSenderCompID SenderCompID;
typedef FieldSenderSubID SenderSubID;
typedef FieldSendingTime SendingTime;
typedef FieldQuantity Quantity;
typedef FieldSide Side;
typedef FieldSymbol Symbol;
typedef FieldTargetCompID TargetCompID;
typedef FieldTargetSubID TargetSubID;
typedef FieldText Text;
typedef FieldTimeInForce TimeInForce;
typedef FieldTransactTime TransactTime;
typedef FieldUrgency Urgency;
typedef FieldValidUntilTime ValidUntilTime;
typedef FieldSettlType SettlType;
typedef FieldSettlDate SettlDate;
typedef FieldSymbolSfx SymbolSfx;
typedef FieldListID ListID;
typedef FieldListSeqNo ListSeqNo;
typedef FieldTotNoOrders TotNoOrders;
typedef FieldListExecInst ListExecInst;
typedef FieldAllocID AllocID;
typedef FieldAllocTransType AllocTransType;
typedef FieldRefAllocID RefAllocID;
typedef FieldNoOrders NoOrders;
typedef FieldAvgPxPrecision AvgPxPrecision;
typedef FieldTradeDate TradeDate;
typedef FieldPositionEffect PositionEffect;
typedef FieldNoAllocs NoAllocs;
typedef FieldAllocAccount AllocAccount;
typedef FieldAllocQty AllocQty;
typedef FieldProcessCode ProcessCode;
typedef FieldNoRpts NoRpts;
typedef FieldRptSeq RptSeq;
typedef FieldCxlQty CxlQty;
typedef FieldNoDlvyInst NoDlvyInst;
typedef FieldAllocStatus AllocStatus;
typedef FieldAllocRejCode AllocRejCode;
typedef FieldSignature Signature;
typedef FieldSecureDataLen SecureDataLen;
typedef FieldSecureData SecureData;
typedef FieldSignatureLength SignatureLength;
typedef FieldEmailType EmailType;
typedef FieldRawDataLength RawDataLength;
typedef FieldRawData RawData;
typedef FieldPossResend PossResend;
typedef FieldEncryptMethod EncryptMethod;
typedef FieldStopPx StopPx;
typedef FieldExDestination ExDestination;
typedef FieldCxlRejReason CxlRejReason;
typedef FieldOrdRejReason OrdRejReason;
typedef FieldIOIQualifier IOIQualifier;
typedef FieldIssuer Issuer;
typedef FieldSecurityDesc SecurityDesc;
typedef FieldHeartBtInt HeartBtInt;
typedef FieldMinQty MinQty;
typedef FieldMaxFloor MaxFloor;
typedef FieldTestReqID TestReqID;
typedef FieldReportToExch ReportToExch;
typedef FieldLocateReqd LocateReqd;
typedef FieldOnBehalfOfCompID OnBehalfOfCompID;
typedef FieldOnBehalfOfSubID OnBehalfOfSubID;
typedef FieldQuoteID QuoteID;
typedef FieldNetMoney NetMoney;
typedef FieldSettlCurrAmt SettlCurrAmt;
typedef FieldSettlCurrency SettlCurrency;
typedef FieldForexReq ForexReq;
typedef FieldOrigSendingTime OrigSendingTime;
typedef FieldGapFillFlag GapFillFlag;
typedef FieldNoExecs NoExecs;
typedef FieldExpireTime ExpireTime;
typedef FieldDKReason DKReason;
typedef FieldDeliverToCompID DeliverToCompID;
typedef FieldDeliverToSubID DeliverToSubID;
typedef FieldIOINaturalFlag IOINaturalFlag;
typedef FieldQuoteReqID QuoteReqID;
typedef FieldBidPx BidPx;
typedef FieldOfferPx OfferPx;
typedef FieldBidSize BidSize;
typedef FieldOfferSize OfferSize;
typedef FieldNoMiscFees NoMiscFees;
typedef FieldMiscFeeAmt MiscFeeAmt;
typedef FieldMiscFeeCurr MiscFeeCurr;
typedef FieldMiscFeeType MiscFeeType;
typedef FieldPrevClosePx PrevClosePx;
typedef FieldResetSeqNumFlag ResetSeqNumFlag;
typedef FieldSenderLocationID SenderLocationID;
typedef FieldTargetLocationID TargetLocationID;
typedef FieldOnBehalfOfLocationID OnBehalfOfLocationID;
typedef FieldDeliverToLocationID DeliverToLocationID;
typedef FieldNoRelatedSym NoRelatedSym;
typedef FieldSubject Subject;
typedef FieldHeadline Headline;
typedef FieldURLLink URLLink;
typedef FieldExecType ExecType;
typedef FieldLeavesQty LeavesQty;
typedef FieldCashOrderQty CashOrderQty;
typedef FieldAllocAvgPx AllocAvgPx;
typedef FieldAllocNetMoney AllocNetMoney;
typedef FieldSettlCurrFxRate SettlCurrFxRate;
typedef FieldSettlCurrFxRateCalc SettlCurrFxRateCalc;
typedef FieldNumDaysInterest NumDaysInterest;
typedef FieldAccruedInterestRate AccruedInterestRate;
typedef FieldAccruedInterestAmt AccruedInterestAmt;
typedef FieldSettlInstMode SettlInstMode;
typedef FieldAllocText AllocText;
typedef FieldSettlInstID SettlInstID;
typedef FieldSettlInstTransType SettlInstTransType;
typedef FieldEmailThreadID EmailThreadID;
typedef FieldSettlInstSource SettlInstSource;
typedef FieldSecurityType SecurityType;
typedef FieldEffectiveTime EffectiveTime;
typedef FieldStandInstDbType StandInstDbType;
typedef FieldStandInstDbName StandInstDbName;
typedef FieldStandInstDbID StandInstDbID;
typedef FieldSettlDeliveryType SettlDeliveryType;
typedef FieldBidSpotRate BidSpotRate;
typedef FieldBidForwardPoints BidForwardPoints;
typedef FieldOfferSpotRate OfferSpotRate;
typedef FieldOfferForwardPoints OfferForwardPoints;
typedef FieldOrderQty2 OrderQty2;
typedef FieldSettlDate2 SettlDate2;
typedef FieldLastSpotRate LastSpotRate;
typedef FieldLastForwardPoints LastForwardPoints;
typedef FieldAllocLinkID AllocLinkID;
typedef FieldAllocLinkType AllocLinkType;
typedef FieldSecondaryOrderID SecondaryOrderID;
typedef FieldNoIOIQualifiers NoIOIQualifiers;
typedef FieldMaturityMonthYear MaturityMonthYear;
typedef FieldPutOrCall PutOrCall;
typedef FieldStrikePrice StrikePrice;
typedef FieldCoveredOrUncovered CoveredOrUncovered;
typedef FieldOptAttribute OptAttribute;
typedef FieldSecurityExchange SecurityExchange;
typedef FieldNotifyBrokerOfCredit NotifyBrokerOfCredit;
typedef FieldAllocHandlInst AllocHandlInst;
typedef FieldMaxShow MaxShow;
typedef FieldPegOffsetValue PegOffsetValue;
typedef FieldXmlDataLen XmlDataLen;
typedef FieldXmlData XmlData;
typedef FieldSettlInstRefID SettlInstRefID;
typedef FieldNoRoutingIDs NoRoutingIDs;
typedef FieldRoutingType RoutingType;
typedef FieldRoutingID RoutingID;
typedef FieldSpread Spread;
typedef FieldBenchmarkCurveCurrency BenchmarkCurveCurrency;
typedef FieldBenchmarkCurveName BenchmarkCurveName;
typedef FieldBenchmarkCurvePoint BenchmarkCurvePoint;
typedef FieldCouponRate CouponRate;
typedef FieldCouponPaymentDate CouponPaymentDate;
typedef FieldIssueDate IssueDate;
typedef FieldRepurchaseTerm RepurchaseTerm;
typedef FieldRepurchaseRate RepurchaseRate;
typedef FieldFactor Factor;
typedef FieldTradeOriginationDate TradeOriginationDate;
typedef FieldExDate ExDate;
typedef FieldContractMultiplier ContractMultiplier;
typedef FieldNoStipulations NoStipulations;
typedef FieldStipulationType StipulationType;
typedef FieldStipulationValue StipulationValue;
typedef FieldYieldType YieldType;
typedef FieldYield Yield;
typedef FieldTotalTakedown TotalTakedown;
typedef FieldConcession Concession;
typedef FieldRepoCollateralSecurityType RepoCollateralSecurityType;
typedef FieldRedemptionDate RedemptionDate;
typedef FieldUnderlyingCouponPaymentDate UnderlyingCouponPaymentDate;
typedef FieldUnderlyingIssueDate UnderlyingIssueDate;
typedef FieldUnderlyingRepoCollateralSecurityType UnderlyingRepoCollateralSecurityType;
typedef FieldUnderlyingRepurchaseTerm UnderlyingRepurchaseTerm;
typedef FieldUnderlyingRepurchaseRate UnderlyingRepurchaseRate;
typedef FieldUnderlyingFactor UnderlyingFactor;
typedef FieldUnderlyingRedemptionDate UnderlyingRedemptionDate;
typedef FieldLegCouponPaymentDate LegCouponPaymentDate;
typedef FieldLegIssueDate LegIssueDate;
typedef FieldLegRepoCollateralSecurityType LegRepoCollateralSecurityType;
typedef FieldLegRepurchaseTerm LegRepurchaseTerm;
typedef FieldLegRepurchaseRate LegRepurchaseRate;
typedef FieldLegFactor LegFactor;
typedef FieldLegRedemptionDate LegRedemptionDate;
typedef FieldCreditRating CreditRating;
typedef FieldUnderlyingCreditRating UnderlyingCreditRating;
typedef FieldLegCreditRating LegCreditRating;
typedef FieldTradedFlatSwitch TradedFlatSwitch;
typedef FieldBasisFeatureDate BasisFeatureDate;
typedef FieldBasisFeaturePrice BasisFeaturePrice;
typedef FieldMDReqID MDReqID;
typedef FieldSubscriptionRequestType SubscriptionRequestType;
typedef FieldMarketDepth MarketDepth;
typedef FieldMDUpdateType MDUpdateType;
typedef FieldAggregatedBook AggregatedBook;
typedef FieldNoMDEntryTypes NoMDEntryTypes;
typedef FieldNoMDEntries NoMDEntries;
typedef FieldMDEntryType MDEntryType;
typedef FieldMDEntryPx MDEntryPx;
typedef FieldMDEntrySize MDEntrySize;
typedef FieldMDEntryDate MDEntryDate;
typedef FieldMDEntryTime MDEntryTime;
typedef FieldTickDirection TickDirection;
typedef FieldMDMkt MDMkt;
typedef FieldQuoteCondition QuoteCondition;
typedef FieldTradeCondition TradeCondition;
typedef FieldMDEntryID MDEntryID;
typedef FieldMDUpdateAction MDUpdateAction;
typedef FieldMDEntryRefID MDEntryRefID;
typedef FieldMDReqRejReason MDReqRejReason;
typedef FieldMDEntryOriginator MDEntryOriginator;
typedef FieldLocationID LocationID;
typedef FieldDeskID DeskID;
typedef FieldDeleteReason DeleteReason;
typedef FieldOpenCloseSettlFlag OpenCloseSettlFlag;
typedef FieldSellerDays SellerDays;
typedef FieldMDEntryBuyer MDEntryBuyer;
typedef FieldMDEntrySeller MDEntrySeller;
typedef FieldMDEntryPositionNo MDEntryPositionNo;
typedef FieldFinancialStatus FinancialStatus;
typedef FieldCorporateAction CorporateAction;
typedef FieldDefBidSize DefBidSize;
typedef FieldDefOfferSize DefOfferSize;
typedef FieldNoQuoteEntries NoQuoteEntries;
typedef FieldNoQuoteSets NoQuoteSets;
typedef FieldQuoteStatus QuoteStatus;
typedef FieldQuoteCancelType QuoteCancelType;
typedef FieldQuoteEntryID QuoteEntryID;
typedef FieldQuoteRejectReason QuoteRejectReason;
typedef FieldQuoteResponseLevel QuoteResponseLevel;
typedef FieldQuoteSetID QuoteSetID;
typedef FieldQuoteRequestType QuoteRequestType;
typedef FieldTotNoQuoteEntries TotNoQuoteEntries;
typedef FieldUnderlyingSecurityIDSource UnderlyingSecurityIDSource;
typedef FieldUnderlyingIssuer UnderlyingIssuer;
typedef FieldUnderlyingSecurityDesc UnderlyingSecurityDesc;
typedef FieldUnderlyingSecurityExchange UnderlyingSecurityExchange;
typedef FieldUnderlyingSecurityID UnderlyingSecurityID;
typedef FieldUnderlyingSecurityType UnderlyingSecurityType;
typedef FieldUnderlyingSymbol UnderlyingSymbol;
typedef FieldUnderlyingSymbolSfx UnderlyingSymbolSfx;
typedef FieldUnderlyingMaturityMonthYear UnderlyingMaturityMonthYear;
typedef FieldUnderlyingPutOrCall UnderlyingPutOrCall;
typedef FieldUnderlyingStrikePrice UnderlyingStrikePrice;
typedef FieldUnderlyingOptAttribute UnderlyingOptAttribute;
typedef FieldUnderlyingCurrency UnderlyingCurrency;
typedef FieldSecurityReqID SecurityReqID;
typedef FieldSecurityRequestType SecurityRequestType;
typedef FieldSecurityResponseID SecurityResponseID;
typedef FieldSecurityResponseType SecurityResponseType;
typedef FieldSecurityStatusReqID SecurityStatusReqID;
typedef FieldUnsolicitedIndicator UnsolicitedIndicator;
typedef FieldSecurityTradingStatus SecurityTradingStatus;
typedef FieldHaltReasonChar HaltReasonChar;
typedef FieldInViewOfCommon InViewOfCommon;
typedef FieldDueToRelated DueToRelated;
typedef FieldBuyVolume BuyVolume;
typedef FieldSellVolume SellVolume;
typedef FieldHighPx HighPx;
typedef FieldLowPx LowPx;
typedef FieldAdjustment Adjustment;
typedef FieldTradSesReqID TradSesReqID;
typedef FieldTradingSessionID TradingSessionID;
typedef FieldContraTrader ContraTrader;
typedef FieldTradSesMethod TradSesMethod;
typedef FieldTradSesMode TradSesMode;
typedef FieldTradSesStatus TradSesStatus;
typedef FieldTradSesStartTime TradSesStartTime;
typedef FieldTradSesOpenTime TradSesOpenTime;
typedef FieldTradSesPreCloseTime TradSesPreCloseTime;
typedef FieldTradSesCloseTime TradSesCloseTime;
typedef FieldTradSesEndTime TradSesEndTime;
typedef FieldNumberOfOrders NumberOfOrders;
typedef FieldMessageEncoding MessageEncoding;
typedef FieldEncodedIssuerLen EncodedIssuerLen;
typedef FieldEncodedIssuer EncodedIssuer;
typedef FieldEncodedSecurityDescLen EncodedSecurityDescLen;
typedef FieldEncodedSecurityDesc EncodedSecurityDesc;
typedef FieldEncodedListExecInstLen EncodedListExecInstLen;
typedef FieldEncodedListExecInst EncodedListExecInst;
typedef FieldEncodedTextLen EncodedTextLen;
typedef FieldEncodedText EncodedText;
typedef FieldEncodedSubjectLen EncodedSubjectLen;
typedef FieldEncodedSubject EncodedSubject;
typedef FieldEncodedHeadlineLen EncodedHeadlineLen;
typedef FieldEncodedHeadline EncodedHeadline;
typedef FieldEncodedAllocTextLen EncodedAllocTextLen;
typedef FieldEncodedAllocText EncodedAllocText;
typedef FieldEncodedUnderlyingIssuerLen EncodedUnderlyingIssuerLen;
typedef FieldEncodedUnderlyingIssuer EncodedUnderlyingIssuer;
typedef FieldEncodedUnderlyingSecurityDescLen EncodedUnderlyingSecurityDescLen;
typedef FieldEncodedUnderlyingSecurityDesc EncodedUnderlyingSecurityDesc;
typedef FieldAllocPrice AllocPrice;
typedef FieldQuoteSetValidUntilTime QuoteSetValidUntilTime;
typedef FieldQuoteEntryRejectReason QuoteEntryRejectReason;
typedef FieldLastMsgSeqNumProcessed LastMsgSeqNumProcessed;
typedef FieldRefTagID RefTagID;
typedef FieldRefMsgType RefMsgType;
typedef FieldSessionRejectReason SessionRejectReason;
typedef FieldBidRequestTransType BidRequestTransType;
typedef FieldContraBroker ContraBroker;
typedef FieldComplianceID ComplianceID;
typedef FieldSolicitedFlag SolicitedFlag;
typedef FieldExecRestatementReason ExecRestatementReason;
typedef FieldBusinessRejectRefID BusinessRejectRefID;
typedef FieldBusinessRejectReason BusinessRejectReason;
typedef FieldGrossTradeAmt GrossTradeAmt;
typedef FieldNoContraBrokers NoContraBrokers;
typedef FieldMaxMessageSize MaxMessageSize;
typedef FieldNoMsgTypes NoMsgTypes;
typedef FieldMsgDirection MsgDirection;
typedef FieldNoTradingSessions NoTradingSessions;
typedef FieldTotalVolumeTraded TotalVolumeTraded;
typedef FieldDiscretionInst DiscretionInst;
typedef FieldDiscretionOffsetValue DiscretionOffsetValue;
typedef FieldBidID BidID;
typedef FieldClientBidID ClientBidID;
typedef FieldListName ListName;
typedef FieldTotNoRelatedSym TotNoRelatedSym;
typedef FieldBidType BidType;
typedef FieldNumTickets NumTickets;
typedef FieldSideValue1 SideValue1;
typedef FieldSideValue2 SideValue2;
typedef FieldNoBidDescriptors NoBidDescriptors;
typedef FieldBidDescriptorType BidDescriptorType;
typedef FieldBidDescriptor BidDescriptor;
typedef FieldSideValueInd SideValueInd;
typedef FieldLiquidityPctLow LiquidityPctLow;
typedef FieldLiquidityPctHigh LiquidityPctHigh;
typedef FieldLiquidityValue LiquidityValue;
typedef FieldEFPTrackingError EFPTrackingError;
typedef FieldFairValue FairValue;
typedef FieldOutsideIndexPct OutsideIndexPct;
typedef FieldValueOfFutures ValueOfFutures;
typedef FieldLiquidityIndType LiquidityIndType;
typedef FieldWtAverageLiquidity WtAverageLiquidity;
typedef FieldExchangeForPhysical ExchangeForPhysical;
typedef FieldOutMainCntryUIndex OutMainCntryUIndex;
typedef FieldCrossPercent CrossPercent;
typedef FieldProgRptReqs ProgRptReqs;
typedef FieldProgPeriodInterval ProgPeriodInterval;
typedef FieldIncTaxInd IncTaxInd;
typedef FieldNumBidders NumBidders;
typedef FieldBidTradeType BidTradeType;
typedef FieldBasisPxType BasisPxType;
typedef FieldNoBidComponents NoBidComponents;
typedef FieldCountry Country;
typedef FieldTotNoStrikes TotNoStrikes;
typedef FieldPriceType PriceType;
typedef FieldDayOrderQty DayOrderQty;
typedef FieldDayCumQty DayCumQty;
typedef FieldDayAvgPx DayAvgPx;
typedef FieldGTBookingInst GTBookingInst;
typedef FieldNoStrikes NoStrikes;
typedef FieldListStatusType ListStatusType;
typedef FieldNetGrossInd NetGrossInd;
typedef FieldListOrderStatus ListOrderStatus;
typedef FieldExpireDate ExpireDate;
typedef FieldListExecInstType ListExecInstType;
typedef FieldCxlRejResponseTo CxlRejResponseTo;
typedef FieldUnderlyingCouponRate UnderlyingCouponRate;
typedef FieldUnderlyingContractMultiplier UnderlyingContractMultiplier;
typedef FieldContraTradeQty ContraTradeQty;
typedef FieldContraTradeTime ContraTradeTime;
typedef FieldLiquidityNumSecurities LiquidityNumSecurities;
typedef FieldMultiLegReportingType MultiLegReportingType;
typedef FieldStrikeTime StrikeTime;
typedef FieldListStatusText ListStatusText;
typedef FieldEncodedListStatusTextLen EncodedListStatusTextLen;
typedef FieldEncodedListStatusText EncodedListStatusText;
typedef FieldPartyIDSource PartyIDSource;
typedef FieldPartyID PartyID;
typedef FieldNetChgPrevDay NetChgPrevDay;
typedef FieldPartyRole PartyRole;
typedef FieldNoPartyIDs NoPartyIDs;
typedef FieldNoSecurityAltID NoSecurityAltID;
typedef FieldSecurityAltID SecurityAltID;
typedef FieldSecurityAltIDSource SecurityAltIDSource;
typedef FieldNoUnderlyingSecurityAltID NoUnderlyingSecurityAltID;
typedef FieldUnderlyingSecurityAltID UnderlyingSecurityAltID;
typedef FieldUnderlyingSecurityAltIDSource UnderlyingSecurityAltIDSource;
typedef FieldProduct Product;
typedef FieldCFICode CFICode;
typedef FieldUnderlyingProduct UnderlyingProduct;
typedef FieldUnderlyingCFICode UnderlyingCFICode;
typedef FieldTestMessageIndicator TestMessageIndicator;
typedef FieldBookingRefID BookingRefID;
typedef FieldIndividualAllocID IndividualAllocID;
typedef FieldRoundingDirection RoundingDirection;
typedef FieldRoundingModulus RoundingModulus;
typedef FieldCountryOfIssue CountryOfIssue;
typedef FieldStateOrProvinceOfIssue StateOrProvinceOfIssue;
typedef FieldLocaleOfIssue LocaleOfIssue;
typedef FieldNoRegistDtls NoRegistDtls;
typedef FieldMailingDtls MailingDtls;
typedef FieldInvestorCountryOfResidence InvestorCountryOfResidence;
typedef FieldPaymentRef PaymentRef;
typedef FieldDistribPaymentMethod DistribPaymentMethod;
typedef FieldCashDistribCurr CashDistribCurr;
typedef FieldCommCurrency CommCurrency;
typedef FieldCancellationRights CancellationRights;
typedef FieldMoneyLaunderingStatus MoneyLaunderingStatus;
typedef FieldMailingInst MailingInst;
typedef FieldTransBkdTime TransBkdTime;
typedef FieldExecPriceType ExecPriceType;
typedef FieldExecPriceAdjustment ExecPriceAdjustment;
typedef FieldDateOfBirth DateOfBirth;
typedef FieldTradeReportTransType TradeReportTransType;
typedef FieldCardHolderName CardHolderName;
typedef FieldCardNumber CardNumber;
typedef FieldCardExpDate CardExpDate;
typedef FieldCardIssNum CardIssNum;
typedef FieldPaymentMethod PaymentMethod;
typedef FieldRegistAcctType RegistAcctType;
typedef FieldDesignation Designation;
typedef FieldTaxAdvantageType TaxAdvantageType;
typedef FieldRegistRejReasonText RegistRejReasonText;
typedef FieldFundRenewWaiv FundRenewWaiv;
typedef FieldCashDistribAgentName CashDistribAgentName;
typedef FieldCashDistribAgentCode CashDistribAgentCode;
typedef FieldCashDistribAgentAcctNumber CashDistribAgentAcctNumber;
typedef FieldCashDistribPayRef CashDistribPayRef;
typedef FieldCashDistribAgentAcctName CashDistribAgentAcctName;
typedef FieldCardStartDate CardStartDate;
typedef FieldPaymentDate PaymentDate;
typedef FieldPaymentRemitterID PaymentRemitterID;
typedef FieldRegistStatus RegistStatus;
typedef FieldRegistRejReasonCode RegistRejReasonCode;
typedef FieldRegistRefID RegistRefID;
typedef FieldRegistDtls RegistDtls;
typedef FieldNoDistribInsts NoDistribInsts;
typedef FieldRegistEmail RegistEmail;
typedef FieldDistribPercentage DistribPercentage;
typedef FieldRegistID RegistID;
typedef FieldRegistTransType RegistTransType;
typedef FieldExecValuationPoint ExecValuationPoint;
typedef FieldOrderPercent OrderPercent;
typedef FieldOwnershipType OwnershipType;
typedef FieldNoContAmts NoContAmts;
typedef FieldContAmtType ContAmtType;
typedef FieldContAmtValue ContAmtValue;
typedef FieldContAmtCurr ContAmtCurr;
typedef FieldOwnerType OwnerType;
typedef FieldPartySubID PartySubID;
typedef FieldNestedPartyID NestedPartyID;
typedef FieldNestedPartyIDSource NestedPartyIDSource;
typedef FieldSecondaryClOrdID SecondaryClOrdID;
typedef FieldSecondaryExecID SecondaryExecID;
typedef FieldOrderCapacity OrderCapacity;
typedef FieldOrderRestrictions OrderRestrictions;
typedef FieldMassCancelRequestType MassCancelRequestType;
typedef FieldMassCancelResponse MassCancelResponse;
typedef FieldMassCancelRejectReason MassCancelRejectReason;
typedef FieldTotalAffectedOrders TotalAffectedOrders;
typedef FieldNoAffectedOrders NoAffectedOrders;
typedef FieldAffectedOrderID AffectedOrderID;
typedef FieldAffectedSecondaryOrderID AffectedSecondaryOrderID;
typedef FieldQuoteType QuoteType;
typedef FieldNestedPartyRole NestedPartyRole;
typedef FieldNoNestedPartyIDs NoNestedPartyIDs;
typedef FieldTotalAccruedInterestAmt TotalAccruedInterestAmt;
typedef FieldMaturityDate MaturityDate;
typedef FieldUnderlyingMaturityDate UnderlyingMaturityDate;
typedef FieldInstrRegistry InstrRegistry;
typedef FieldCashMargin CashMargin;
typedef FieldNestedPartySubID NestedPartySubID;
typedef FieldScope Scope;
typedef FieldMDImplicitDelete MDImplicitDelete;
typedef FieldCrossID CrossID;
typedef FieldCrossType CrossType;
typedef FieldCrossPrioritization CrossPrioritization;
typedef FieldOrigCrossID OrigCrossID;
typedef FieldNoSides NoSides;
typedef FieldUsername Username;
typedef FieldPassword Password;
typedef FieldNoLegs NoLegs;
typedef FieldLegCurrency LegCurrency;
typedef FieldTotNoSecurityTypes TotNoSecurityTypes;
typedef FieldNoSecurityTypes NoSecurityTypes;
typedef FieldSecurityListRequestType SecurityListRequestType;
typedef FieldSecurityRequestResult SecurityRequestResult;
typedef FieldRoundLot RoundLot;
typedef FieldMinTradeVol MinTradeVol;
typedef FieldMultiLegRptTypeReq MultiLegRptTypeReq;
typedef FieldLegPositionEffect LegPositionEffect;
typedef FieldLegCoveredOrUncovered LegCoveredOrUncovered;
typedef FieldLegPrice LegPrice;
typedef FieldTradSesStatusRejReason TradSesStatusRejReason;
typedef FieldTradeRequestID TradeRequestID;
typedef FieldTradeRequestType TradeRequestType;
typedef FieldPreviouslyReported PreviouslyReported;
typedef FieldTradeReportID TradeReportID;
typedef FieldTradeReportRefID TradeReportRefID;
typedef FieldMatchStatus MatchStatus;
typedef FieldMatchType MatchType;
typedef FieldOddLot OddLot;
typedef FieldNoClearingInstructions NoClearingInstructions;
typedef FieldClearingInstruction ClearingInstruction;
typedef FieldTradeInputSource TradeInputSource;
typedef FieldTradeInputDevice TradeInputDevice;
typedef FieldNoDates NoDates;
typedef FieldAccountType AccountType;
typedef FieldCustOrderCapacity CustOrderCapacity;
typedef FieldClOrdLinkID ClOrdLinkID;
typedef FieldMassStatusReqID MassStatusReqID;
typedef FieldMassStatusReqType MassStatusReqType;
typedef FieldOrigOrdModTime OrigOrdModTime;
typedef FieldLegSettlType LegSettlType;
typedef FieldLegSettlDate LegSettlDate;
typedef FieldDayBookingInst DayBookingInst;
typedef FieldBookingUnit BookingUnit;
typedef FieldPreallocMethod PreallocMethod;
typedef FieldUnderlyingCountryOfIssue UnderlyingCountryOfIssue;
typedef FieldUnderlyingStateOrProvinceOfIssue UnderlyingStateOrProvinceOfIssue;
typedef FieldUnderlyingLocaleOfIssue UnderlyingLocaleOfIssue;
typedef FieldUnderlyingInstrRegistry UnderlyingInstrRegistry;
typedef FieldLegCountryOfIssue LegCountryOfIssue;
typedef FieldLegStateOrProvinceOfIssue LegStateOrProvinceOfIssue;
typedef FieldLegLocaleOfIssue LegLocaleOfIssue;
typedef FieldLegInstrRegistry LegInstrRegistry;
typedef FieldLegSymbol LegSymbol;
typedef FieldLegSymbolSfx LegSymbolSfx;
typedef FieldLegSecurityID LegSecurityID;
typedef FieldLegSecurityIDSource LegSecurityIDSource;
typedef FieldNoLegSecurityAltID NoLegSecurityAltID;
typedef FieldLegSecurityAltID LegSecurityAltID;
typedef FieldLegSecurityAltIDSource LegSecurityAltIDSource;
typedef FieldLegProduct LegProduct;
typedef FieldLegCFICode LegCFICode;
typedef FieldLegSecurityType LegSecurityType;
typedef FieldLegMaturityMonthYear LegMaturityMonthYear;
typedef FieldLegMaturityDate LegMaturityDate;
typedef FieldLegStrikePrice LegStrikePrice;
typedef FieldLegOptAttribute LegOptAttribute;
typedef FieldLegContractMultiplier LegContractMultiplier;
typedef FieldLegCouponRate LegCouponRate;
typedef FieldLegSecurityExchange LegSecurityExchange;
typedef FieldLegIssuer LegIssuer;
typedef FieldEncodedLegIssuerLen EncodedLegIssuerLen;
typedef FieldEncodedLegIssuer EncodedLegIssuer;
typedef FieldLegSecurityDesc LegSecurityDesc;
typedef FieldEncodedLegSecurityDescLen EncodedLegSecurityDescLen;
typedef FieldEncodedLegSecurityDesc EncodedLegSecurityDesc;
typedef FieldLegRatioQty LegRatioQty;
typedef FieldLegSide LegSide;
typedef FieldTradingSessionSubID TradingSessionSubID;
typedef FieldAllocType AllocType;
typedef FieldNoHops NoHops;
typedef FieldHopCompID HopCompID;
typedef FieldHopSendingTime HopSendingTime;
typedef FieldHopRefID HopRefID;
typedef FieldMidPx MidPx;
typedef FieldBidYield BidYield;
typedef FieldMidYield MidYield;
typedef FieldOfferYield OfferYield;
typedef FieldClearingFeeIndicator ClearingFeeIndicator;
typedef FieldWorkingIndicator WorkingIndicator;
typedef FieldLegLastPx LegLastPx;
typedef FieldPriorityIndicator PriorityIndicator;
typedef FieldPriceImprovement PriceImprovement;
typedef FieldPrice2 Price2;
typedef FieldLastForwardPoints2 LastForwardPoints2;
typedef FieldBidForwardPoints2 BidForwardPoints2;
typedef FieldOfferForwardPoints2 OfferForwardPoints2;
typedef FieldRFQReqID RFQReqID;
typedef FieldMktBidPx MktBidPx;
typedef FieldMktOfferPx MktOfferPx;
typedef FieldMinBidSize MinBidSize;
typedef FieldMinOfferSize MinOfferSize;
typedef FieldQuoteStatusReqID QuoteStatusReqID;
typedef FieldLegalConfirm LegalConfirm;
typedef FieldUnderlyingLastPx UnderlyingLastPx;
typedef FieldUnderlyingLastQty UnderlyingLastQty;
typedef FieldLegRefID LegRefID;
typedef FieldContraLegRefID ContraLegRefID;
typedef FieldSettlCurrBidFxRate SettlCurrBidFxRate;
typedef FieldSettlCurrOfferFxRate SettlCurrOfferFxRate;
typedef FieldQuoteRequestRejectReason QuoteRequestRejectReason;
typedef FieldSideComplianceID SideComplianceID;
typedef FieldAcctIDSource AcctIDSource;
typedef FieldAllocAcctIDSource AllocAcctIDSource;
typedef FieldBenchmarkPrice BenchmarkPrice;
typedef FieldBenchmarkPriceType BenchmarkPriceType;
typedef FieldConfirmID ConfirmID;
typedef FieldConfirmStatus ConfirmStatus;
typedef FieldConfirmTransType ConfirmTransType;
typedef FieldContractSettlMonth ContractSettlMonth;
typedef FieldDeliveryForm DeliveryForm;
typedef FieldLastParPx LastParPx;
typedef FieldNoLegAllocs NoLegAllocs;
typedef FieldLegAllocAccount LegAllocAccount;
typedef FieldLegIndividualAllocID LegIndividualAllocID;
typedef FieldLegAllocQty LegAllocQty;
typedef FieldLegAllocAcctIDSource LegAllocAcctIDSource;
typedef FieldLegSettlCurrency LegSettlCurrency;
typedef FieldLegBenchmarkCurveCurrency LegBenchmarkCurveCurrency;
typedef FieldLegBenchmarkCurveName LegBenchmarkCurveName;
typedef FieldLegBenchmarkCurvePoint LegBenchmarkCurvePoint;
typedef FieldLegBenchmarkPrice LegBenchmarkPrice;
typedef FieldLegBenchmarkPriceType LegBenchmarkPriceType;
typedef FieldLegBidPx LegBidPx;
typedef FieldLegIOIQty LegIOIQty;
typedef FieldNoLegStipulations NoLegStipulations;
typedef FieldLegOfferPx LegOfferPx;
typedef FieldLegPriceType LegPriceType;
typedef FieldLegQty LegQty;
typedef FieldLegStipulationType LegStipulationType;
typedef FieldLegStipulationValue LegStipulationValue;
typedef FieldLegSwapType LegSwapType;
typedef FieldPool Pool;
typedef FieldQuotePriceType QuotePriceType;
typedef FieldQuoteRespID QuoteRespID;
typedef FieldQuoteRespType QuoteRespType;
typedef FieldQuoteQualifier QuoteQualifier;
typedef FieldYieldRedemptionDate YieldRedemptionDate;
typedef FieldYieldRedemptionPrice YieldRedemptionPrice;
typedef FieldYieldRedemptionPriceType YieldRedemptionPriceType;
typedef FieldBenchmarkSecurityID BenchmarkSecurityID;
typedef FieldReversalIndicator ReversalIndicator;
typedef FieldYieldCalcDate YieldCalcDate;
typedef FieldNoPositions NoPositions;
typedef FieldPosType PosType;
typedef FieldLongQty LongQty;
typedef FieldShortQty ShortQty;
typedef FieldPosQtyStatus PosQtyStatus;
typedef FieldPosAmtType PosAmtType;
typedef FieldPosAmt PosAmt;
typedef FieldPosTransType PosTransType;
typedef FieldPosReqID PosReqID;
typedef FieldNoUnderlyings NoUnderlyings;
typedef FieldPosMaintAction PosMaintAction;
typedef FieldOrigPosReqRefID OrigPosReqRefID;
typedef FieldPosMaintRptRefID PosMaintRptRefID;
typedef FieldClearingBusinessDate ClearingBusinessDate;
typedef FieldSettlSessID SettlSessID;
typedef FieldSettlSessSubID SettlSessSubID;
typedef FieldAdjustmentType AdjustmentType;
typedef FieldContraryInstructionIndicator ContraryInstructionIndicator;
typedef FieldPriorSpreadIndicator PriorSpreadIndicator;
typedef FieldPosMaintRptID PosMaintRptID;
typedef FieldPosMaintStatus PosMaintStatus;
typedef FieldPosMaintResult PosMaintResult;
typedef FieldPosReqType PosReqType;
typedef FieldResponseTransportType ResponseTransportType;
typedef FieldResponseDestination ResponseDestination;
typedef FieldTotalNumPosReports TotalNumPosReports;
typedef FieldPosReqResult PosReqResult;
typedef FieldPosReqStatus PosReqStatus;
typedef FieldSettlPrice SettlPrice;
typedef FieldSettlPriceType SettlPriceType;
typedef FieldUnderlyingSettlPrice UnderlyingSettlPrice;
typedef FieldUnderlyingSettlPriceType UnderlyingSettlPriceType;
typedef FieldPriorSettlPrice PriorSettlPrice;
typedef FieldNoQuoteQualifiers NoQuoteQualifiers;
typedef FieldAllocSettlCurrency AllocSettlCurrency;
typedef FieldAllocSettlCurrAmt AllocSettlCurrAmt;
typedef FieldInterestAtMaturity InterestAtMaturity;
typedef FieldLegDatedDate LegDatedDate;
typedef FieldLegPool LegPool;
typedef FieldAllocInterestAtMaturity AllocInterestAtMaturity;
typedef FieldAllocAccruedInterestAmt AllocAccruedInterestAmt;
typedef FieldDeliveryDate DeliveryDate;
typedef FieldAssignmentMethod AssignmentMethod;
typedef FieldAssignmentUnit AssignmentUnit;
typedef FieldOpenInterest OpenInterest;
typedef FieldExerciseMethod ExerciseMethod;
typedef FieldTotNumTradeReports TotNumTradeReports;
typedef FieldTradeRequestResult TradeRequestResult;
typedef FieldTradeRequestStatus TradeRequestStatus;
typedef FieldTradeReportRejectReason TradeReportRejectReason;
typedef FieldSideMultiLegReportingType SideMultiLegReportingType;
typedef FieldNoPosAmt NoPosAmt;
typedef FieldAutoAcceptIndicator AutoAcceptIndicator;
typedef FieldAllocReportID AllocReportID;
typedef FieldNoNested2PartyIDs NoNested2PartyIDs;
typedef FieldNested2PartyID Nested2PartyID;
typedef FieldNested2PartyIDSource Nested2PartyIDSource;
typedef FieldNested2PartyRole Nested2PartyRole;
typedef FieldNested2PartySubID Nested2PartySubID;
typedef FieldBenchmarkSecurityIDSource BenchmarkSecurityIDSource;
typedef FieldSecuritySubType SecuritySubType;
typedef FieldUnderlyingSecuritySubType UnderlyingSecuritySubType;
typedef FieldLegSecuritySubType LegSecuritySubType;
typedef FieldAllowableOneSidednessPct AllowableOneSidednessPct;
typedef FieldAllowableOneSidednessValue AllowableOneSidednessValue;
typedef FieldAllowableOneSidednessCurr AllowableOneSidednessCurr;
typedef FieldNoTrdRegTimestamps NoTrdRegTimestamps;
typedef FieldTrdRegTimestamp TrdRegTimestamp;
typedef FieldTrdRegTimestampType TrdRegTimestampType;
typedef FieldTrdRegTimestampOrigin TrdRegTimestampOrigin;
typedef FieldConfirmRefID ConfirmRefID;
typedef FieldConfirmType ConfirmType;
typedef FieldConfirmRejReason ConfirmRejReason;
typedef FieldBookingType BookingType;
typedef FieldIndividualAllocRejCode IndividualAllocRejCode;
typedef FieldSettlInstMsgID SettlInstMsgID;
typedef FieldNoSettlInst NoSettlInst;
typedef FieldLastUpdateTime LastUpdateTime;
typedef FieldAllocSettlInstType AllocSettlInstType;
typedef FieldNoSettlPartyIDs NoSettlPartyIDs;
typedef FieldSettlPartyID SettlPartyID;
typedef FieldSettlPartyIDSource SettlPartyIDSource;
typedef FieldSettlPartyRole SettlPartyRole;
typedef FieldSettlPartySubID SettlPartySubID;
typedef FieldSettlPartySubIDType SettlPartySubIDType;
typedef FieldDlvyInstType DlvyInstType;
typedef FieldTerminationType TerminationType;
typedef FieldNextExpectedMsgSeqNum NextExpectedMsgSeqNum;
typedef FieldOrdStatusReqID OrdStatusReqID;
typedef FieldSettlInstReqID SettlInstReqID;
typedef FieldSettlInstReqRejCode SettlInstReqRejCode;
typedef FieldSecondaryAllocID SecondaryAllocID;
typedef FieldAllocReportType AllocReportType;
typedef FieldAllocReportRefID AllocReportRefID;
typedef FieldAllocCancReplaceReason AllocCancReplaceReason;
typedef FieldCopyMsgIndicator CopyMsgIndicator;
typedef FieldAllocAccountType AllocAccountType;
typedef FieldOrderAvgPx OrderAvgPx;
typedef FieldOrderBookingQty OrderBookingQty;
typedef FieldNoSettlPartySubIDs NoSettlPartySubIDs;
typedef FieldNoPartySubIDs NoPartySubIDs;
typedef FieldPartySubIDType PartySubIDType;
typedef FieldNoNestedPartySubIDs NoNestedPartySubIDs;
typedef FieldNestedPartySubIDType NestedPartySubIDType;
typedef FieldNoNested2PartySubIDs NoNested2PartySubIDs;
typedef FieldNested2PartySubIDType Nested2PartySubIDType;
typedef FieldAllocIntermedReqType AllocIntermedReqType;
typedef FieldUnderlyingPx UnderlyingPx;
typedef FieldPriceDelta PriceDelta;
typedef FieldApplQueueMax ApplQueueMax;
typedef FieldApplQueueDepth ApplQueueDepth;
typedef FieldApplQueueResolution ApplQueueResolution;
typedef FieldApplQueueAction ApplQueueAction;
typedef FieldNoAltMDSource NoAltMDSource;
typedef FieldAltMDSourceID AltMDSourceID;
typedef FieldSecondaryTradeReportID SecondaryTradeReportID;
typedef FieldAvgPxIndicator AvgPxIndicator;
typedef FieldTradeLinkID TradeLinkID;
typedef FieldOrderInputDevice OrderInputDevice;
typedef FieldUnderlyingTradingSessionID UnderlyingTradingSessionID;
typedef FieldUnderlyingTradingSessionSubID UnderlyingTradingSessionSubID;
typedef FieldTradeLegRefID TradeLegRefID;
typedef FieldExchangeRule ExchangeRule;
typedef FieldTradeAllocIndicator TradeAllocIndicator;
typedef FieldExpirationCycle ExpirationCycle;
typedef FieldTrdType TrdType;
typedef FieldTrdSubType TrdSubType;
typedef FieldTransferReason TransferReason;
typedef FieldTotNumAssignmentReports TotNumAssignmentReports;
typedef FieldAsgnRptID AsgnRptID;
typedef FieldThresholdAmount ThresholdAmount;
typedef FieldPegMoveType PegMoveType;
typedef FieldPegOffsetType PegOffsetType;
typedef FieldPegLimitType PegLimitType;
typedef FieldPegRoundDirection PegRoundDirection;
typedef FieldPeggedPrice PeggedPrice;
typedef FieldPegScope PegScope;
typedef FieldDiscretionMoveType DiscretionMoveType;
typedef FieldDiscretionOffsetType DiscretionOffsetType;
typedef FieldDiscretionLimitType DiscretionLimitType;
typedef FieldDiscretionRoundDirection DiscretionRoundDirection;
typedef FieldDiscretionPrice DiscretionPrice;
typedef FieldDiscretionScope DiscretionScope;
typedef FieldTargetStrategy TargetStrategy;
typedef FieldTargetStrategyParameters TargetStrategyParameters;
typedef FieldParticipationRate ParticipationRate;
typedef FieldTargetStrategyPerformance TargetStrategyPerformance;
typedef FieldLastLiquidityInd LastLiquidityInd;
typedef FieldPublishTrdIndicator PublishTrdIndicator;
typedef FieldShortSaleReason ShortSaleReason;
typedef FieldQtyType QtyType;
typedef FieldSecondaryTrdType SecondaryTrdType;
typedef FieldTradeReportType TradeReportType;
typedef FieldAllocNoOrdersType AllocNoOrdersType;
typedef FieldSharedCommission SharedCommission;
typedef FieldConfirmReqID ConfirmReqID;
typedef FieldAvgParPx AvgParPx;
typedef FieldReportedPx ReportedPx;
typedef FieldNoCapacities NoCapacities;
typedef FieldOrderCapacityQty OrderCapacityQty;
typedef FieldNoEvents NoEvents;
typedef FieldEventType EventType;
typedef FieldEventDate EventDate;
typedef FieldEventPx EventPx;
typedef FieldEventText EventText;
typedef FieldPctAtRisk PctAtRisk;
typedef FieldNoInstrAttrib NoInstrAttrib;
typedef FieldInstrAttribType InstrAttribType;
typedef FieldInstrAttribValue InstrAttribValue;
typedef FieldDatedDate DatedDate;
typedef FieldInterestAccrualDate InterestAccrualDate;
typedef FieldCPProgram CPProgram;
typedef FieldCPRegType CPRegType;
typedef FieldUnderlyingCPProgram UnderlyingCPProgram;
typedef FieldUnderlyingCPRegType UnderlyingCPRegType;
typedef FieldUnderlyingQty UnderlyingQty;
typedef FieldTrdMatchID TrdMatchID;
typedef FieldSecondaryTradeReportRefID SecondaryTradeReportRefID;
typedef FieldUnderlyingDirtyPrice UnderlyingDirtyPrice;
typedef FieldUnderlyingEndPrice UnderlyingEndPrice;
typedef FieldUnderlyingStartValue UnderlyingStartValue;
typedef FieldUnderlyingCurrentValue UnderlyingCurrentValue;
typedef FieldUnderlyingEndValue UnderlyingEndValue;
typedef FieldNoUnderlyingStips NoUnderlyingStips;
typedef FieldUnderlyingStipType UnderlyingStipType;
typedef FieldUnderlyingStipValue UnderlyingStipValue;
typedef FieldMaturityNetMoney MaturityNetMoney;
typedef FieldMiscFeeBasis MiscFeeBasis;
typedef FieldTotNoAllocs TotNoAllocs;
typedef FieldLastFragment LastFragment;
typedef FieldCollReqID CollReqID;
typedef FieldCollAsgnReason CollAsgnReason;
typedef FieldCollInquiryQualifier CollInquiryQualifier;
typedef FieldNoTrades NoTrades;
typedef FieldMarginRatio MarginRatio;
typedef FieldMarginExcess MarginExcess;
typedef FieldTotalNetValue TotalNetValue;
typedef FieldCashOutstanding CashOutstanding;
typedef FieldCollAsgnID CollAsgnID;
typedef FieldCollAsgnTransType CollAsgnTransType;
typedef FieldCollRespID CollRespID;
typedef FieldCollAsgnRespType CollAsgnRespType;
typedef FieldCollAsgnRejectReason CollAsgnRejectReason;
typedef FieldCollAsgnRefID CollAsgnRefID;
typedef FieldCollRptID CollRptID;
typedef FieldCollInquiryID CollInquiryID;
typedef FieldCollStatus CollStatus;
typedef FieldTotNumReports TotNumReports;
typedef FieldLastRptRequested LastRptRequested;
typedef FieldAgreementDesc AgreementDesc;
typedef FieldAgreementID AgreementID;
typedef FieldAgreementDate AgreementDate;
typedef FieldStartDate StartDate;
typedef FieldEndDate EndDate;
typedef FieldAgreementCurrency AgreementCurrency;
typedef FieldDeliveryType DeliveryType;
typedef FieldEndAccruedInterestAmt EndAccruedInterestAmt;
typedef FieldStartCash StartCash;
typedef FieldEndCash EndCash;
typedef FieldUserRequestID UserRequestID;
typedef FieldUserRequestType UserRequestType;
typedef FieldNewPassword NewPassword;
typedef FieldUserStatus UserStatus;
typedef FieldUserStatusText UserStatusText;
typedef FieldStatusValue StatusValue;
typedef FieldStatusText StatusText;
typedef FieldRefCompID RefCompID;
typedef FieldRefSubID RefSubID;
typedef FieldNetworkResponseID NetworkResponseID;
typedef FieldNetworkRequestID NetworkRequestID;
typedef FieldLastNetworkResponseID LastNetworkResponseID;
typedef FieldNetworkRequestType NetworkRequestType;
typedef FieldNoCompIDs NoCompIDs;
typedef FieldNetworkStatusResponseType NetworkStatusResponseType;
typedef FieldNoCollInquiryQualifier NoCollInquiryQualifier;
typedef FieldTrdRptStatus TrdRptStatus;
typedef FieldAffirmStatus AffirmStatus;
typedef FieldUnderlyingStrikeCurrency UnderlyingStrikeCurrency;
typedef FieldLegStrikeCurrency LegStrikeCurrency;
typedef FieldTimeBracket TimeBracket;
typedef FieldCollAction CollAction;
typedef FieldCollInquiryStatus CollInquiryStatus;
typedef FieldCollInquiryResult CollInquiryResult;
typedef FieldStrikeCurrency StrikeCurrency;
typedef FieldNoNested3PartyIDs NoNested3PartyIDs;
typedef FieldNested3PartyID Nested3PartyID;
typedef FieldNested3PartyIDSource Nested3PartyIDSource;
typedef FieldNested3PartyRole Nested3PartyRole;
typedef FieldNoNested3PartySubIDs NoNested3PartySubIDs;
typedef FieldNested3PartySubID Nested3PartySubID;
typedef FieldNested3PartySubIDType Nested3PartySubIDType;
typedef FieldLegContractSettlMonth LegContractSettlMonth;
typedef FieldLegInterestAccrualDate LegInterestAccrualDate;

}

constexpr raw_enum_t MsgTypeRaw__ = (raw_enum_t)0; // Header
constexpr raw_enum_t MsgTypeRaw_HEARTBEAT = (raw_enum_t)'0';
constexpr raw_enum_t MsgTypeRaw_TEST_REQUEST = (raw_enum_t)'1';
constexpr raw_enum_t MsgTypeRaw_RESEND_REQUEST = (raw_enum_t)'2';
constexpr raw_enum_t MsgTypeRaw_REJECT = (raw_enum_t)'3';
constexpr raw_enum_t MsgTypeRaw_SEQUENCE_RESET = (raw_enum_t)'4';
constexpr raw_enum_t MsgTypeRaw_LOGOUT = (raw_enum_t)'5';
constexpr raw_enum_t MsgTypeRaw_INDICATION_OF_INTEREST = (raw_enum_t)'6';
constexpr raw_enum_t MsgTypeRaw_ADVERTISEMENT = (raw_enum_t)'7';
constexpr raw_enum_t MsgTypeRaw_EXECUTION_REPORT = (raw_enum_t)'8';
constexpr raw_enum_t MsgTypeRaw_ORDER_CANCEL_REJECT = (raw_enum_t)'9';
constexpr raw_enum_t MsgTypeRaw_LOGON = (raw_enum_t)'A';
constexpr raw_enum_t MsgTypeRaw_NEWS = (raw_enum_t)'B';
constexpr raw_enum_t MsgTypeRaw_EMAIL = (raw_enum_t)'C';
constexpr raw_enum_t MsgTypeRaw_ORDER_SINGLE = (raw_enum_t)'D';
constexpr raw_enum_t MsgTypeRaw_ORDER_LIST = (raw_enum_t)'E';
constexpr raw_enum_t MsgTypeRaw_ORDER_CANCEL_REQUEST = (raw_enum_t)'F';
constexpr raw_enum_t MsgTypeRaw_ORDER_CANCEL_REPLACE_REQUEST = (raw_enum_t)'G';
constexpr raw_enum_t MsgTypeRaw_ORDER_STATUS_REQUEST = (raw_enum_t)'H';
constexpr raw_enum_t MsgTypeRaw_ALLOCATION_INSTRUCTION = (raw_enum_t)'J';
constexpr raw_enum_t MsgTypeRaw_LIST_CANCEL_REQUEST = (raw_enum_t)'K';
constexpr raw_enum_t MsgTypeRaw_LIST_EXECUTE = (raw_enum_t)'L';
constexpr raw_enum_t MsgTypeRaw_LIST_STATUS_REQUEST = (raw_enum_t)'M';
constexpr raw_enum_t MsgTypeRaw_LIST_STATUS = (raw_enum_t)'N';
constexpr raw_enum_t MsgTypeRaw_ALLOCATION_INSTRUCTION_ACK = (raw_enum_t)'P';
constexpr raw_enum_t MsgTypeRaw_DONT_KNOW_TRADE = (raw_enum_t)'Q';
constexpr raw_enum_t MsgTypeRaw_QUOTE_REQUEST = (raw_enum_t)'R';
constexpr raw_enum_t MsgTypeRaw_QUOTE = (raw_enum_t)'S';
constexpr raw_enum_t MsgTypeRaw_SETTLEMENT_INSTRUCTIONS = (raw_enum_t)'T';
constexpr raw_enum_t MsgTypeRaw_MARKET_DATA_REQUEST = (raw_enum_t)'V';
constexpr raw_enum_t MsgTypeRaw_MARKET_DATA_SNAPSHOT_FULL_REFRESH = (raw_enum_t)'W';
constexpr raw_enum_t MsgTypeRaw_MARKET_DATA_INCREMENTAL_REFRESH = (raw_enum_t)'X';
constexpr raw_enum_t MsgTypeRaw_MARKET_DATA_REQUEST_REJECT = (raw_enum_t)'Y';
constexpr raw_enum_t MsgTypeRaw_QUOTE_CANCEL = (raw_enum_t)'Z';
constexpr raw_enum_t MsgTypeRaw_QUOTE_STATUS_REQUEST = (raw_enum_t)'a';
constexpr raw_enum_t MsgTypeRaw_MASS_QUOTE_ACKNOWLEDGEMENT = (raw_enum_t)'b';
constexpr raw_enum_t MsgTypeRaw_SECURITY_DEFINITION_REQUEST = (raw_enum_t)'c';
constexpr raw_enum_t MsgTypeRaw_SECURITY_DEFINITION = (raw_enum_t)'d';
constexpr raw_enum_t MsgTypeRaw_SECURITY_STATUS_REQUEST = (raw_enum_t)'e';
constexpr raw_enum_t MsgTypeRaw_SECURITY_STATUS = (raw_enum_t)'f';
constexpr raw_enum_t MsgTypeRaw_TRADING_SESSION_STATUS_REQUEST = (raw_enum_t)'g';
constexpr raw_enum_t MsgTypeRaw_TRADING_SESSION_STATUS = (raw_enum_t)'h';
constexpr raw_enum_t MsgTypeRaw_MASS_QUOTE = (raw_enum_t)'i';
constexpr raw_enum_t MsgTypeRaw_BUSINESS_MESSAGE_REJECT = (raw_enum_t)'j';
constexpr raw_enum_t MsgTypeRaw_BID_REQUEST = (raw_enum_t)'k';
constexpr raw_enum_t MsgTypeRaw_BID_RESPONSE = (raw_enum_t)'l';
constexpr raw_enum_t MsgTypeRaw_LIST_STRIKE_PRICE = (raw_enum_t)'m';
constexpr raw_enum_t MsgTypeRaw_XML_MESSAGE = (raw_enum_t)'n';
constexpr raw_enum_t MsgTypeRaw_REGISTRATION_INSTRUCTIONS = (raw_enum_t)'o';
constexpr raw_enum_t MsgTypeRaw_REGISTRATION_INSTRUCTIONS_RESPONSE = (raw_enum_t)'p';
constexpr raw_enum_t MsgTypeRaw_ORDER_MASS_CANCEL_REQUEST = (raw_enum_t)'q';
constexpr raw_enum_t MsgTypeRaw_ORDER_MASS_CANCEL_REPORT = (raw_enum_t)'r';
constexpr raw_enum_t MsgTypeRaw_NEW_ORDER_s = (raw_enum_t)'s';
constexpr raw_enum_t MsgTypeRaw_CROSS_ORDER_CANCEL_REPLACE_REQUEST = (raw_enum_t)'t';
constexpr raw_enum_t MsgTypeRaw_CROSS_ORDER_CANCEL_REQUEST = (raw_enum_t)'u';
constexpr raw_enum_t MsgTypeRaw_SECURITY_TYPE_REQUEST = (raw_enum_t)'v';
constexpr raw_enum_t MsgTypeRaw_SECURITY_TYPES = (raw_enum_t)'w';
constexpr raw_enum_t MsgTypeRaw_SECURITY_LIST_REQUEST = (raw_enum_t)'x';
constexpr raw_enum_t MsgTypeRaw_SECURITY_LIST = (raw_enum_t)'y';
constexpr raw_enum_t MsgTypeRaw_DERIVATIVE_SECURITY_LIST_REQUEST = (raw_enum_t)'z';
constexpr raw_enum_t MsgTypeRaw_DERIVATIVE_SECURITY_LIST = (raw_enum_t)'A' + (((raw_enum_t)'A')<<8);
constexpr raw_enum_t MsgTypeRaw_NEW_ORDER_AB = (raw_enum_t)'A' + (((raw_enum_t)'B')<<8);
constexpr raw_enum_t MsgTypeRaw_MULTILEG_ORDER_CANCEL_REPLACE = (raw_enum_t)'A' + (((raw_enum_t)'C')<<8);
constexpr raw_enum_t MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST = (raw_enum_t)'A' + (((raw_enum_t)'D')<<8);
constexpr raw_enum_t MsgTypeRaw_TRADE_CAPTURE_REPORT = (raw_enum_t)'A' + (((raw_enum_t)'E')<<8);
constexpr raw_enum_t MsgTypeRaw_ORDER_MASS_STATUS_REQUEST = (raw_enum_t)'A' + (((raw_enum_t)'F')<<8);
constexpr raw_enum_t MsgTypeRaw_QUOTE_REQUEST_REJECT = (raw_enum_t)'A' + (((raw_enum_t)'G')<<8);
constexpr raw_enum_t MsgTypeRaw_RFQ_REQUEST = (raw_enum_t)'A' + (((raw_enum_t)'H')<<8);
constexpr raw_enum_t MsgTypeRaw_QUOTE_STATUS_REPORT = (raw_enum_t)'A' + (((raw_enum_t)'I')<<8);
constexpr raw_enum_t MsgTypeRaw_QUOTE_RESPONSE = (raw_enum_t)'A' + (((raw_enum_t)'J')<<8);
constexpr raw_enum_t MsgTypeRaw_CONFIRMATION = (raw_enum_t)'A' + (((raw_enum_t)'K')<<8);
constexpr raw_enum_t MsgTypeRaw_POSITION_MAINTENANCE_REQUEST = (raw_enum_t)'A' + (((raw_enum_t)'L')<<8);
constexpr raw_enum_t MsgTypeRaw_POSITION_MAINTENANCE_REPORT = (raw_enum_t)'A' + (((raw_enum_t)'M')<<8);
constexpr raw_enum_t MsgTypeRaw_REQUEST_FOR_POSITIONS = (raw_enum_t)'A' + (((raw_enum_t)'N')<<8);
constexpr raw_enum_t MsgTypeRaw_REQUEST_FOR_POSITIONS_ACK = (raw_enum_t)'A' + (((raw_enum_t)'O')<<8);
constexpr raw_enum_t MsgTypeRaw_POSITION_REPORT = (raw_enum_t)'A' + (((raw_enum_t)'P')<<8);
constexpr raw_enum_t MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST_ACK = (raw_enum_t)'A' + (((raw_enum_t)'Q')<<8);
constexpr raw_enum_t MsgTypeRaw_TRADE_CAPTURE_REPORT_ACK = (raw_enum_t)'A' + (((raw_enum_t)'R')<<8);
constexpr raw_enum_t MsgTypeRaw_ALLOCATION_REPORT = (raw_enum_t)'A' + (((raw_enum_t)'S')<<8);
constexpr raw_enum_t MsgTypeRaw_ALLOCATION_REPORT_ACK = (raw_enum_t)'A' + (((raw_enum_t)'T')<<8);
constexpr raw_enum_t MsgTypeRaw_CONFIRMATION_ACK = (raw_enum_t)'A' + (((raw_enum_t)'U')<<8);
constexpr raw_enum_t MsgTypeRaw_SETTLEMENT_INSTRUCTION_REQUEST = (raw_enum_t)'A' + (((raw_enum_t)'V')<<8);
constexpr raw_enum_t MsgTypeRaw_ASSIGNMENT_REPORT = (raw_enum_t)'A' + (((raw_enum_t)'W')<<8);
constexpr raw_enum_t MsgTypeRaw_COLLATERAL_REQUEST = (raw_enum_t)'A' + (((raw_enum_t)'X')<<8);
constexpr raw_enum_t MsgTypeRaw_COLLATERAL_ASSIGNMENT = (raw_enum_t)'A' + (((raw_enum_t)'Y')<<8);
constexpr raw_enum_t MsgTypeRaw_COLLATERAL_RESPONSE = (raw_enum_t)'A' + (((raw_enum_t)'Z')<<8);
constexpr raw_enum_t MsgTypeRaw_COLLATERAL_REPORT = (raw_enum_t)'B' + (((raw_enum_t)'A')<<8);
constexpr raw_enum_t MsgTypeRaw_COLLATERAL_INQUIRY = (raw_enum_t)'B' + (((raw_enum_t)'B')<<8);
constexpr raw_enum_t MsgTypeRaw_NETWORK_BC = (raw_enum_t)'B' + (((raw_enum_t)'C')<<8);
constexpr raw_enum_t MsgTypeRaw_NETWORK_BD = (raw_enum_t)'B' + (((raw_enum_t)'D')<<8);
constexpr raw_enum_t MsgTypeRaw_USER_REQUEST = (raw_enum_t)'B' + (((raw_enum_t)'E')<<8);
constexpr raw_enum_t MsgTypeRaw_USER_RESPONSE = (raw_enum_t)'B' + (((raw_enum_t)'F')<<8);
constexpr raw_enum_t MsgTypeRaw_COLLATERAL_INQUIRY_ACK = (raw_enum_t)'B' + (((raw_enum_t)'G')<<8);
constexpr raw_enum_t MsgTypeRaw_CONFIRMATION_REQUEST = (raw_enum_t)'B' + (((raw_enum_t)'H')<<8);
// end of Fields.hxx

void checkEnums();

}  // namespace fix44


// Uncomment this to debug parser
// #define FIXPP_DEBUG_PARSER

#ifdef FIXPP_DEBUG_PARSER
#define FIXPP_PRINT_FIELD(NAME) std::cout << Field##NAME::tagName() << "(" << Field##NAME::tagKey() << ") = " << sohstr( fix+pos ) << std::endl;
#define FIXPP_PRINT_UNKNOWN_FIELD std::cout << "- unknown " << tag << " in " << getMessageName() << ":" << pos << " " << sohstr( fix+prev ) << std::endl;
#else
#define FIXPP_PRINT_FIELD(NAME)
#define FIXPP_PRINT_UNKNOWN_FIELD
#endif


#endif // fix44_FIELDS_H
