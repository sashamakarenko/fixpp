// Generated by https://github.com/sashamakarenko/fixpp
// Copyright (c) 2021 sashamakarenko
// https://github.com/sashamakarenko/fixpp/blob/main/LICENSE

#include <order/Messages.h>

namespace order
{

// start of MessageScanners.cxx

// Generated

// -------------------------------------- scan ----------------------------------------

offset_t MessageHeader::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginString::RAW_TAG :
     FIXPP_PRINT_FIELD(BeginString) 
     fieldBeginString.offset = pos;
     break;

   case FieldBodyLength::RAW_TAG :
     FIXPP_PRINT_FIELD(BodyLength) 
     fieldBodyLength.offset = pos;
     break;

   case FieldMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(MsgType) 
     fieldMsgType.offset = pos;
     break;

   case FieldSenderCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderCompID) 
     fieldSenderCompID.offset = pos;
     break;

   case FieldTargetCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetCompID) 
     fieldTargetCompID.offset = pos;
     break;

   case FieldMsgSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(MsgSeqNum) 
     fieldMsgSeqNum.offset = pos;
     break;

   case FieldSendingTime::RAW_TAG :
     FIXPP_PRINT_FIELD(SendingTime) 
     fieldSendingTime.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderSingle::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageExecutionReport::scan( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldOrdRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdRejReason) 
     fieldOrdRejReason.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldLeavesQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LeavesQty) 
     fieldLeavesQty.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldCumQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CumQty) 
     fieldCumQty.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

// -------------------------------------- scanSafely ----------------------------------------

offset_t MessageHeader::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldBeginString::RAW_TAG :
     FIXPP_PRINT_FIELD(BeginString) 
     if( fieldBeginString.offset < 0 ) fieldBeginString.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldBodyLength::RAW_TAG :
     FIXPP_PRINT_FIELD(BodyLength) 
     if( fieldBodyLength.offset < 0 ) fieldBodyLength.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(MsgType) 
     if( fieldMsgType.offset < 0 ) {
       fieldMsgType.offset = pos;
       if( MsgTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSenderCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderCompID) 
     if( fieldSenderCompID.offset < 0 ) fieldSenderCompID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTargetCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetCompID) 
     if( fieldTargetCompID.offset < 0 ) fieldTargetCompID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldMsgSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(MsgSeqNum) 
     if( fieldMsgSeqNum.offset < 0 ) fieldMsgSeqNum.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSendingTime::RAW_TAG :
     FIXPP_PRINT_FIELD(SendingTime) 
     if( fieldSendingTime.offset < 0 ) fieldSendingTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderSingle::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     if( fieldOrdType.offset < 0 ) {
       fieldOrdType.offset = pos;
       if( OrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     if( fieldStopPx.offset < 0 ) fieldStopPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     if( fieldTransactTime.offset < 0 ) fieldTransactTime.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageExecutionReport::scanSafely( const char * fix, unsigned len ){
_fixPtr = fix;
offset_t prev = 0, pos = 0;
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   if( not isGoodTag( fix+pos ) ) break;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   if( fix[pos] == 1 ) { _fixLength = prev; return pos; }
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     if( fieldOrderID.offset < 0 ) fieldOrderID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     if( fieldClOrdID.offset < 0 ) fieldClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     if( fieldOrigClOrdID.offset < 0 ) fieldOrigClOrdID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     if( fieldExecID.offset < 0 ) fieldExecID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     if( fieldExecType.offset < 0 ) fieldExecType.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     if( fieldOrdStatus.offset < 0 ) {
       fieldOrdStatus.offset = pos;
       if( OrdStatusEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdRejReason) 
     if( fieldOrdRejReason.offset < 0 ) fieldOrdRejReason.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     if( fieldAccount.offset < 0 ) fieldAccount.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     if( fieldSymbol.offset < 0 ) fieldSymbol.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     if( fieldSecurityID.offset < 0 ) fieldSecurityID.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     if( fieldSecurityType.offset < 0 ) {
       fieldSecurityType.offset = pos;
       if( SecurityTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     if( fieldText.offset < 0 ) fieldText.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     if( fieldProduct.offset < 0 ) {
       fieldProduct.offset = pos;
       if( ProductEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     if( fieldSide.offset < 0 ) {
       fieldSide.offset = pos;
       if( SideEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     if( fieldQtyType.offset < 0 ) {
       fieldQtyType.offset = pos;
       if( QtyTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     if( fieldOrderQty.offset < 0 ) fieldOrderQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     if( fieldOrdType.offset < 0 ) {
       fieldOrdType.offset = pos;
       if( OrdTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     if( fieldPriceType.offset < 0 ) {
       fieldPriceType.offset = pos;
       if( PriceTypeEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     if( fieldPrice.offset < 0 ) fieldPrice.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     if( fieldStopPx.offset < 0 ) fieldStopPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     if( fieldCurrency.offset < 0 ) fieldCurrency.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     if( fieldTimeInForce.offset < 0 ) {
       fieldTimeInForce.offset = pos;
       if( TimeInForceEnums::findEnum( toRawEnum( _fixPtr + pos ) ) == nullptr )
       { _fixLength = prev; return pos; }
     }
     else { _fixLength = prev; return pos; }
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     if( fieldExecInst.offset < 0 ) fieldExecInst.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     if( fieldLastQty.offset < 0 ) fieldLastQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     if( fieldLastPx.offset < 0 ) fieldLastPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldLeavesQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LeavesQty) 
     if( fieldLeavesQty.offset < 0 ) fieldLeavesQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     if( fieldAvgPx.offset < 0 ) fieldAvgPx.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldCumQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CumQty) 
     if( fieldCumQty.offset < 0 ) fieldCumQty.offset = pos;
     else { _fixLength = prev; return pos; }
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     if( fieldNoLegs.offset < 0 ){
       fieldNoLegs.offset = pos;
       isGroupStart = true;
       {
       int groupExpected = parseGroupNoValue( fix + pos );
       unsigned groupFound = 0;
       gotoNextField( fix, pos );
       const char * badFieldPtr = nullptr;
       pos += GroupLegs::scanSafely( groupsLegs, fix+pos, len - pos, groupFound, badFieldPtr );
       if( badFieldPtr != nullptr ) { _fixLength = badFieldPtr - fix; return pos; }
       if( (int)groupFound != groupExpected ) { _fixLength = prev; badFieldPtr = fix + prev; return pos; }
       }
     } else { _fixLength = prev; return pos; }
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

// -------------------------------------- skip ----------------------------------------

offset_t MessageHeader::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginString::RAW_TAG :
     break;

   case FieldBodyLength::RAW_TAG :
     break;

   case FieldMsgType::RAW_TAG :
     break;

   case FieldSenderCompID::RAW_TAG :
     break;

   case FieldTargetCompID::RAW_TAG :
     break;

   case FieldMsgSeqNum::RAW_TAG :
     break;

   case FieldSendingTime::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderSingle::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageExecutionReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0;
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldOrdStatus::RAW_TAG :
     break;

   case FieldOrdRejReason::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldLastQty::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldLeavesQty::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldCumQty::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

// -------------------------------------- reset ----------------------------------------

void MessageHeader::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBeginString.offset = -1;
     fieldBodyLength.offset = -1;
     fieldMsgType.offset = -1;
     fieldSenderCompID.offset = -1;
     fieldTargetCompID.offset = -1;
     fieldMsgSeqNum.offset = -1;
     fieldSendingTime.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderSingle::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldAccount.offset = -1;
     fieldSymbol.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSide.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldOrdType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldTransactTime.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageExecutionReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldExecID.offset = -1;
     fieldExecType.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldOrdRejReason.offset = -1;
     fieldAccount.offset = -1;
     fieldSymbol.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityType.offset = -1;
     fieldText.offset = -1;
     fieldProduct.offset = -1;
     fieldSide.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldCurrency.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldExecInst.offset = -1;
     fieldLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldLeavesQty.offset = -1;
     fieldAvgPx.offset = -1;
     fieldCumQty.offset = -1;
     fieldNoLegs.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}
// end of MessageScanners.cxx


} // namespace order
